
/* Do not modify this file it was automatically generated by the
 * TokenList2DsnLexer CMake script.
 *
 * Include this file in your lexer class to provide the keywords for
 * your DSN lexer.
 */

#include </opt/kicad/program/master/Tears_Master/build/pcbnew/specctra_import_export/specctra_lexer.h>

using namespace DSN;

#define TOKDEF(x)    { #x, T_##x }

const KEYWORD SPECCTRA_LEXER::keywords[] = {
    TOKDEF( absolute ),
    TOKDEF( add_group ),
    TOKDEF( add_pins ),
    TOKDEF( added ),
    TOKDEF( allow_antenna ),
    TOKDEF( allow_redundant_wiring ),
    TOKDEF( amp ),
    TOKDEF( ancestor ),
    TOKDEF( antipad ),
    TOKDEF( aperture_type ),
    TOKDEF( array ),
    TOKDEF( attach ),
    TOKDEF( attr ),
    TOKDEF( average_pair_length ),
    TOKDEF( back ),
    TOKDEF( base_design ),
    TOKDEF( bbv_ctr2ctr ),
    TOKDEF( bend_keepout ),
    TOKDEF( bond ),
    TOKDEF( both ),
    TOKDEF( bottom ),
    TOKDEF( bottom_layer_sel ),
    TOKDEF( boundary ),
    TOKDEF( brickpat ),
    TOKDEF( bundle ),
    TOKDEF( bus ),
    TOKDEF( bypass ),
    TOKDEF( capacitance_resolution ),
    TOKDEF( capacitor ),
    TOKDEF( case_sensitive ),
    TOKDEF( cct1 ),
    TOKDEF( cct1a ),
    TOKDEF( center_center ),
    TOKDEF( checking_trim_by_pin ),
    TOKDEF( circ ),
    TOKDEF( circle ),
    TOKDEF( circuit ),
    TOKDEF( class ),
    TOKDEF( class_class ),
    TOKDEF( classes ),
    TOKDEF( clear ),
    TOKDEF( clearance ),
    TOKDEF( cluster ),
    TOKDEF( cm ),
    TOKDEF( color ),
    TOKDEF( colors ),
    TOKDEF( comment ),
    TOKDEF( comp ),
    TOKDEF( comp_edge_center ),
    TOKDEF( comp_order ),
    TOKDEF( component ),
    TOKDEF( composite ),
    TOKDEF( conductance_resolution ),
    TOKDEF( conductor ),
    TOKDEF( conflict ),
    TOKDEF( connect ),
    TOKDEF( constant ),
    TOKDEF( contact ),
    TOKDEF( control ),
    TOKDEF( corner ),
    TOKDEF( corners ),
    TOKDEF( cost ),
    TOKDEF( created_time ),
    TOKDEF( cross ),
    TOKDEF( crosstalk_model ),
    TOKDEF( current_resolution ),
    TOKDEF( deleted ),
    TOKDEF( deleted_keepout ),
    TOKDEF( delta ),
    TOKDEF( diagonal ),
    TOKDEF( direction ),
    TOKDEF( directory ),
    TOKDEF( discrete ),
    TOKDEF( effective_via_length ),
    TOKDEF( elongate_keepout ),
    TOKDEF( exclude ),
    TOKDEF( expose ),
    TOKDEF( extra_image_directory ),
    TOKDEF( family ),
    TOKDEF( family_family ),
    TOKDEF( family_family_spacing ),
    TOKDEF( fanout ),
    TOKDEF( farad ),
    TOKDEF( file ),
    TOKDEF( fit ),
    TOKDEF( fix ),
    TOKDEF( flip_style ),
    TOKDEF( floor_plan ),
    TOKDEF( footprint ),
    TOKDEF( forbidden ),
    TOKDEF( force_to_terminal_point ),
    TOKDEF( forgotten ),
    TOKDEF( free ),
    TOKDEF( fromto ),
    TOKDEF( front ),
    TOKDEF( front_only ),
    TOKDEF( gap ),
    TOKDEF( gate ),
    TOKDEF( gates ),
    TOKDEF( generated_by_freeroute ),
    TOKDEF( global ),
    TOKDEF( grid ),
    TOKDEF( group ),
    TOKDEF( group_set ),
    TOKDEF( guide ),
    TOKDEF( hard ),
    TOKDEF( height ),
    TOKDEF( high ),
    TOKDEF( history ),
    TOKDEF( horizontal ),
    TOKDEF( host_cad ),
    TOKDEF( host_version ),
    TOKDEF( image ),
    TOKDEF( image_conductor ),
    TOKDEF( image_image ),
    TOKDEF( image_image_spacing ),
    TOKDEF( image_outline_clearance ),
    TOKDEF( image_set ),
    TOKDEF( image_type ),
    TOKDEF( inch ),
    TOKDEF( include ),
    TOKDEF( include_pins_in_crosstalk ),
    TOKDEF( inductance_resolution ),
    TOKDEF( insert ),
    TOKDEF( instcnfg ),
    TOKDEF( inter_layer_clearance ),
    TOKDEF( jumper ),
    TOKDEF( junction_type ),
    TOKDEF( keepout ),
    TOKDEF( kg ),
    TOKDEF( kohm ),
    TOKDEF( large ),
    TOKDEF( large_large ),
    TOKDEF( layer ),
    TOKDEF( layer_depth ),
    TOKDEF( layer_noise_weight ),
    TOKDEF( layer_pair ),
    TOKDEF( layer_rule ),
    TOKDEF( length ),
    TOKDEF( length_amplitude ),
    TOKDEF( length_factor ),
    TOKDEF( length_gap ),
    TOKDEF( library ),
    TOKDEF( library_out ),
    TOKDEF( limit ),
    TOKDEF( limit_bends ),
    TOKDEF( limit_crossing ),
    TOKDEF( limit_vias ),
    TOKDEF( limit_way ),
    TOKDEF( linear ),
    TOKDEF( linear_interpolation ),
    TOKDEF( load ),
    TOKDEF( lock_type ),
    TOKDEF( logical_part ),
    TOKDEF( logical_part_mapping ),
    TOKDEF( low ),
    TOKDEF( match_fromto_delay ),
    TOKDEF( match_fromto_length ),
    TOKDEF( match_group_delay ),
    TOKDEF( match_group_length ),
    TOKDEF( match_net_delay ),
    TOKDEF( match_net_length ),
    TOKDEF( max_delay ),
    TOKDEF( max_len ),
    TOKDEF( max_length ),
    TOKDEF( max_noise ),
    TOKDEF( max_restricted_layer_length ),
    TOKDEF( max_stagger ),
    TOKDEF( max_stub ),
    TOKDEF( max_total_delay ),
    TOKDEF( max_total_length ),
    TOKDEF( max_total_vias ),
    TOKDEF( medium ),
    TOKDEF( mhenry ),
    TOKDEF( mho ),
    TOKDEF( microvia ),
    TOKDEF( mid_driven ),
    TOKDEF( mil ),
    TOKDEF( min_gap ),
    TOKDEF( mirror ),
    TOKDEF( mirror_first ),
    TOKDEF( mixed ),
    TOKDEF( mm ),
    TOKDEF( negative_diagonal ),
    TOKDEF( net ),
    TOKDEF( net_number ),
    TOKDEF( net_out ),
    TOKDEF( net_pin_changes ),
    TOKDEF( nets ),
    TOKDEF( network ),
    TOKDEF( network_out ),
    TOKDEF( no ),
    TOKDEF( noexpose ),
    TOKDEF( noise_accumulation ),
    TOKDEF( noise_calculation ),
    TOKDEF( normal ),
    TOKDEF( object_type ),
    TOKDEF( off ),
    TOKDEF( off_grid ),
    TOKDEF( offset ),
    TOKDEF( on ),
    TOKDEF( open ),
    TOKDEF( opposite_side ),
    TOKDEF( order ),
    TOKDEF( orthogonal ),
    TOKDEF( outline ),
    TOKDEF( overlap ),
    TOKDEF( pad ),
    TOKDEF( pad_pad ),
    TOKDEF( padstack ),
    TOKDEF( pair ),
    TOKDEF( parallel ),
    TOKDEF( parallel_noise ),
    TOKDEF( parallel_segment ),
    TOKDEF( parser ),
    TOKDEF( part_library ),
    TOKDEF( path ),
    TOKDEF( pcb ),
    TOKDEF( permit_orient ),
    TOKDEF( permit_side ),
    TOKDEF( physical ),
    TOKDEF( physical_part_mapping ),
    TOKDEF( piggyback ),
    TOKDEF( pin ),
    TOKDEF( pin_allow ),
    TOKDEF( pin_cap_via ),
    TOKDEF( pin_via_cap ),
    TOKDEF( pin_width_taper ),
    TOKDEF( pins ),
    TOKDEF( pintype ),
    TOKDEF( place ),
    TOKDEF( place_boundary ),
    TOKDEF( place_control ),
    TOKDEF( place_keepout ),
    TOKDEF( place_rule ),
    TOKDEF( placement ),
    TOKDEF( plan ),
    TOKDEF( plane ),
    TOKDEF( pn ),
    TOKDEF( point ),
    TOKDEF( polygon ),
    TOKDEF( polyline_path ),
    TOKDEF( position ),
    TOKDEF( positive_diagonal ),
    TOKDEF( power ),
    TOKDEF( power_dissipation ),
    TOKDEF( power_fanout ),
    TOKDEF( prefix ),
    TOKDEF( primary ),
    TOKDEF( priority ),
    TOKDEF( property ),
    TOKDEF( protect ),
    TOKDEF( qarc ),
    TOKDEF( quarter ),
    TOKDEF( radius ),
    TOKDEF( ratio ),
    TOKDEF( ratio_tolerance ),
    TOKDEF( rect ),
    TOKDEF( reduced ),
    TOKDEF( region ),
    TOKDEF( region_class ),
    TOKDEF( region_class_class ),
    TOKDEF( region_net ),
    TOKDEF( relative_delay ),
    TOKDEF( relative_group_delay ),
    TOKDEF( relative_group_length ),
    TOKDEF( relative_length ),
    TOKDEF( reorder ),
    TOKDEF( reroute_order_viols ),
    TOKDEF( resistance_resolution ),
    TOKDEF( resistor ),
    TOKDEF( resolution ),
    TOKDEF( restricted_layer_length_factor ),
    TOKDEF( room ),
    TOKDEF( rotate ),
    TOKDEF( rotate_first ),
    TOKDEF( round ),
    TOKDEF( roundoff_rotation ),
    TOKDEF( route ),
    TOKDEF( route_to_fanout_only ),
    TOKDEF( routes ),
    TOKDEF( routes_include ),
    TOKDEF( rule ),
    TOKDEF( same_net_checking ),
    TOKDEF( sample_window ),
    TOKDEF( saturation_length ),
    TOKDEF( sec ),
    TOKDEF( secondary ),
    TOKDEF( self ),
    TOKDEF( sequence_number ),
    TOKDEF( session ),
    TOKDEF( set_color ),
    TOKDEF( set_pattern ),
    TOKDEF( shape ),
    TOKDEF( shield ),
    TOKDEF( shield_gap ),
    TOKDEF( shield_loop ),
    TOKDEF( shield_tie_down_interval ),
    TOKDEF( shield_width ),
    TOKDEF( side ),
    TOKDEF( signal ),
    TOKDEF( site ),
    TOKDEF( small ),
    TOKDEF( smd ),
    TOKDEF( snap ),
    TOKDEF( snap_angle ),
    TOKDEF( soft ),
    TOKDEF( source ),
    TOKDEF( space_in_quoted_tokens ),
    TOKDEF( spacing ),
    TOKDEF( spare ),
    TOKDEF( spiral_via ),
    TOKDEF( square ),
    TOKDEF( stack_via ),
    TOKDEF( stack_via_depth ),
    TOKDEF( standard ),
    TOKDEF( starburst ),
    TOKDEF( status ),
    TOKDEF( structure ),
    TOKDEF( structure_out ),
    TOKDEF( subgate ),
    TOKDEF( subgates ),
    TOKDEF( substituted ),
    TOKDEF( such ),
    TOKDEF( suffix ),
    TOKDEF( super_placement ),
    TOKDEF( supply ),
    TOKDEF( supply_pin ),
    TOKDEF( swapping ),
    TOKDEF( switch_window ),
    TOKDEF( system ),
    TOKDEF( tandem_noise ),
    TOKDEF( tandem_segment ),
    TOKDEF( tandem_shield_overhang ),
    TOKDEF( term_only ),
    TOKDEF( terminal ),
    TOKDEF( terminator ),
    TOKDEF( test ),
    TOKDEF( test_points ),
    TOKDEF( testpoint ),
    TOKDEF( threshold ),
    TOKDEF( time_length_factor ),
    TOKDEF( time_resolution ),
    TOKDEF( tjunction ),
    TOKDEF( tolerance ),
    TOKDEF( top ),
    TOKDEF( topology ),
    TOKDEF( total ),
    TOKDEF( track_id ),
    TOKDEF( turret ),
    TOKDEF( type ),
    TOKDEF( um ),
    TOKDEF( unassigned ),
    TOKDEF( unconnects ),
    TOKDEF( unit ),
    TOKDEF( up ),
    TOKDEF( use_array ),
    TOKDEF( use_layer ),
    TOKDEF( use_net ),
    TOKDEF( use_via ),
    TOKDEF( value ),
    TOKDEF( vertical ),
    TOKDEF( via ),
    TOKDEF( via_array_template ),
    TOKDEF( via_at_smd ),
    TOKDEF( via_keepout ),
    TOKDEF( via_number ),
    TOKDEF( via_rotate_first ),
    TOKDEF( via_site ),
    TOKDEF( via_size ),
    TOKDEF( virtual_pin ),
    TOKDEF( volt ),
    TOKDEF( voltage_resolution ),
    TOKDEF( was_is ),
    TOKDEF( way ),
    TOKDEF( weight ),
    TOKDEF( width ),
    TOKDEF( window ),
    TOKDEF( wire ),
    TOKDEF( wire_keepout ),
    TOKDEF( wires ),
    TOKDEF( wires_include ),
    TOKDEF( wiring ),
    TOKDEF( write_resolution ),
    TOKDEF( x ),
    TOKDEF( xy ),
    TOKDEF( y )
};

const unsigned SPECCTRA_LEXER::keyword_count = unsigned( sizeof( SPECCTRA_LEXER::keywords )/sizeof( SPECCTRA_LEXER::keywords[0] ) );


const char* SPECCTRA_LEXER::TokenName( T aTok )
{
    const char* ret;

    if( aTok < 0 )
        ret = DSNLEXER::Syntax( aTok );
    else if( (unsigned) aTok < keyword_count )
        ret = keywords[aTok].name;
    else
        ret = "token too big";

    return ret;
}


const KEYWORD_MAP SPECCTRA_LEXER::keywords_hash({
    { "absolute", 0 },
    { "add_group", 1 },
    { "add_pins", 2 },
    { "added", 3 },
    { "allow_antenna", 4 },
    { "allow_redundant_wiring", 5 },
    { "amp", 6 },
    { "ancestor", 7 },
    { "antipad", 8 },
    { "aperture_type", 9 },
    { "array", 10 },
    { "attach", 11 },
    { "attr", 12 },
    { "average_pair_length", 13 },
    { "back", 14 },
    { "base_design", 15 },
    { "bbv_ctr2ctr", 16 },
    { "bend_keepout", 17 },
    { "bond", 18 },
    { "both", 19 },
    { "bottom", 20 },
    { "bottom_layer_sel", 21 },
    { "boundary", 22 },
    { "brickpat", 23 },
    { "bundle", 24 },
    { "bus", 25 },
    { "bypass", 26 },
    { "capacitance_resolution", 27 },
    { "capacitor", 28 },
    { "case_sensitive", 29 },
    { "cct1", 30 },
    { "cct1a", 31 },
    { "center_center", 32 },
    { "checking_trim_by_pin", 33 },
    { "circ", 34 },
    { "circle", 35 },
    { "circuit", 36 },
    { "class", 37 },
    { "class_class", 38 },
    { "classes", 39 },
    { "clear", 40 },
    { "clearance", 41 },
    { "cluster", 42 },
    { "cm", 43 },
    { "color", 44 },
    { "colors", 45 },
    { "comment", 46 },
    { "comp", 47 },
    { "comp_edge_center", 48 },
    { "comp_order", 49 },
    { "component", 50 },
    { "composite", 51 },
    { "conductance_resolution", 52 },
    { "conductor", 53 },
    { "conflict", 54 },
    { "connect", 55 },
    { "constant", 56 },
    { "contact", 57 },
    { "control", 58 },
    { "corner", 59 },
    { "corners", 60 },
    { "cost", 61 },
    { "created_time", 62 },
    { "cross", 63 },
    { "crosstalk_model", 64 },
    { "current_resolution", 65 },
    { "deleted", 66 },
    { "deleted_keepout", 67 },
    { "delta", 68 },
    { "diagonal", 69 },
    { "direction", 70 },
    { "directory", 71 },
    { "discrete", 72 },
    { "effective_via_length", 73 },
    { "elongate_keepout", 74 },
    { "exclude", 75 },
    { "expose", 76 },
    { "extra_image_directory", 77 },
    { "family", 78 },
    { "family_family", 79 },
    { "family_family_spacing", 80 },
    { "fanout", 81 },
    { "farad", 82 },
    { "file", 83 },
    { "fit", 84 },
    { "fix", 85 },
    { "flip_style", 86 },
    { "floor_plan", 87 },
    { "footprint", 88 },
    { "forbidden", 89 },
    { "force_to_terminal_point", 90 },
    { "forgotten", 91 },
    { "free", 92 },
    { "fromto", 93 },
    { "front", 94 },
    { "front_only", 95 },
    { "gap", 96 },
    { "gate", 97 },
    { "gates", 98 },
    { "generated_by_freeroute", 99 },
    { "global", 100 },
    { "grid", 101 },
    { "group", 102 },
    { "group_set", 103 },
    { "guide", 104 },
    { "hard", 105 },
    { "height", 106 },
    { "high", 107 },
    { "history", 108 },
    { "horizontal", 109 },
    { "host_cad", 110 },
    { "host_version", 111 },
    { "image", 112 },
    { "image_conductor", 113 },
    { "image_image", 114 },
    { "image_image_spacing", 115 },
    { "image_outline_clearance", 116 },
    { "image_set", 117 },
    { "image_type", 118 },
    { "inch", 119 },
    { "include", 120 },
    { "include_pins_in_crosstalk", 121 },
    { "inductance_resolution", 122 },
    { "insert", 123 },
    { "instcnfg", 124 },
    { "inter_layer_clearance", 125 },
    { "jumper", 126 },
    { "junction_type", 127 },
    { "keepout", 128 },
    { "kg", 129 },
    { "kohm", 130 },
    { "large", 131 },
    { "large_large", 132 },
    { "layer", 133 },
    { "layer_depth", 134 },
    { "layer_noise_weight", 135 },
    { "layer_pair", 136 },
    { "layer_rule", 137 },
    { "length", 138 },
    { "length_amplitude", 139 },
    { "length_factor", 140 },
    { "length_gap", 141 },
    { "library", 142 },
    { "library_out", 143 },
    { "limit", 144 },
    { "limit_bends", 145 },
    { "limit_crossing", 146 },
    { "limit_vias", 147 },
    { "limit_way", 148 },
    { "linear", 149 },
    { "linear_interpolation", 150 },
    { "load", 151 },
    { "lock_type", 152 },
    { "logical_part", 153 },
    { "logical_part_mapping", 154 },
    { "low", 155 },
    { "match_fromto_delay", 156 },
    { "match_fromto_length", 157 },
    { "match_group_delay", 158 },
    { "match_group_length", 159 },
    { "match_net_delay", 160 },
    { "match_net_length", 161 },
    { "max_delay", 162 },
    { "max_len", 163 },
    { "max_length", 164 },
    { "max_noise", 165 },
    { "max_restricted_layer_length", 166 },
    { "max_stagger", 167 },
    { "max_stub", 168 },
    { "max_total_delay", 169 },
    { "max_total_length", 170 },
    { "max_total_vias", 171 },
    { "medium", 172 },
    { "mhenry", 173 },
    { "mho", 174 },
    { "microvia", 175 },
    { "mid_driven", 176 },
    { "mil", 177 },
    { "min_gap", 178 },
    { "mirror", 179 },
    { "mirror_first", 180 },
    { "mixed", 181 },
    { "mm", 182 },
    { "negative_diagonal", 183 },
    { "net", 184 },
    { "net_number", 185 },
    { "net_out", 186 },
    { "net_pin_changes", 187 },
    { "nets", 188 },
    { "network", 189 },
    { "network_out", 190 },
    { "no", 191 },
    { "noexpose", 192 },
    { "noise_accumulation", 193 },
    { "noise_calculation", 194 },
    { "normal", 195 },
    { "object_type", 196 },
    { "off", 197 },
    { "off_grid", 198 },
    { "offset", 199 },
    { "on", 200 },
    { "open", 201 },
    { "opposite_side", 202 },
    { "order", 203 },
    { "orthogonal", 204 },
    { "outline", 205 },
    { "overlap", 206 },
    { "pad", 207 },
    { "pad_pad", 208 },
    { "padstack", 209 },
    { "pair", 210 },
    { "parallel", 211 },
    { "parallel_noise", 212 },
    { "parallel_segment", 213 },
    { "parser", 214 },
    { "part_library", 215 },
    { "path", 216 },
    { "pcb", 217 },
    { "permit_orient", 218 },
    { "permit_side", 219 },
    { "physical", 220 },
    { "physical_part_mapping", 221 },
    { "piggyback", 222 },
    { "pin", 223 },
    { "pin_allow", 224 },
    { "pin_cap_via", 225 },
    { "pin_via_cap", 226 },
    { "pin_width_taper", 227 },
    { "pins", 228 },
    { "pintype", 229 },
    { "place", 230 },
    { "place_boundary", 231 },
    { "place_control", 232 },
    { "place_keepout", 233 },
    { "place_rule", 234 },
    { "placement", 235 },
    { "plan", 236 },
    { "plane", 237 },
    { "pn", 238 },
    { "point", 239 },
    { "polygon", 240 },
    { "polyline_path", 241 },
    { "position", 242 },
    { "positive_diagonal", 243 },
    { "power", 244 },
    { "power_dissipation", 245 },
    { "power_fanout", 246 },
    { "prefix", 247 },
    { "primary", 248 },
    { "priority", 249 },
    { "property", 250 },
    { "protect", 251 },
    { "qarc", 252 },
    { "quarter", 253 },
    { "radius", 254 },
    { "ratio", 255 },
    { "ratio_tolerance", 256 },
    { "rect", 257 },
    { "reduced", 258 },
    { "region", 259 },
    { "region_class", 260 },
    { "region_class_class", 261 },
    { "region_net", 262 },
    { "relative_delay", 263 },
    { "relative_group_delay", 264 },
    { "relative_group_length", 265 },
    { "relative_length", 266 },
    { "reorder", 267 },
    { "reroute_order_viols", 268 },
    { "resistance_resolution", 269 },
    { "resistor", 270 },
    { "resolution", 271 },
    { "restricted_layer_length_factor", 272 },
    { "room", 273 },
    { "rotate", 274 },
    { "rotate_first", 275 },
    { "round", 276 },
    { "roundoff_rotation", 277 },
    { "route", 278 },
    { "route_to_fanout_only", 279 },
    { "routes", 280 },
    { "routes_include", 281 },
    { "rule", 282 },
    { "same_net_checking", 283 },
    { "sample_window", 284 },
    { "saturation_length", 285 },
    { "sec", 286 },
    { "secondary", 287 },
    { "self", 288 },
    { "sequence_number", 289 },
    { "session", 290 },
    { "set_color", 291 },
    { "set_pattern", 292 },
    { "shape", 293 },
    { "shield", 294 },
    { "shield_gap", 295 },
    { "shield_loop", 296 },
    { "shield_tie_down_interval", 297 },
    { "shield_width", 298 },
    { "side", 299 },
    { "signal", 300 },
    { "site", 301 },
    { "small", 302 },
    { "smd", 303 },
    { "snap", 304 },
    { "snap_angle", 305 },
    { "soft", 306 },
    { "source", 307 },
    { "space_in_quoted_tokens", 308 },
    { "spacing", 309 },
    { "spare", 310 },
    { "spiral_via", 311 },
    { "square", 312 },
    { "stack_via", 313 },
    { "stack_via_depth", 314 },
    { "standard", 315 },
    { "starburst", 316 },
    { "status", 317 },
    { "structure", 318 },
    { "structure_out", 319 },
    { "subgate", 320 },
    { "subgates", 321 },
    { "substituted", 322 },
    { "such", 323 },
    { "suffix", 324 },
    { "super_placement", 325 },
    { "supply", 326 },
    { "supply_pin", 327 },
    { "swapping", 328 },
    { "switch_window", 329 },
    { "system", 330 },
    { "tandem_noise", 331 },
    { "tandem_segment", 332 },
    { "tandem_shield_overhang", 333 },
    { "term_only", 334 },
    { "terminal", 335 },
    { "terminator", 336 },
    { "test", 337 },
    { "test_points", 338 },
    { "testpoint", 339 },
    { "threshold", 340 },
    { "time_length_factor", 341 },
    { "time_resolution", 342 },
    { "tjunction", 343 },
    { "tolerance", 344 },
    { "top", 345 },
    { "topology", 346 },
    { "total", 347 },
    { "track_id", 348 },
    { "turret", 349 },
    { "type", 350 },
    { "um", 351 },
    { "unassigned", 352 },
    { "unconnects", 353 },
    { "unit", 354 },
    { "up", 355 },
    { "use_array", 356 },
    { "use_layer", 357 },
    { "use_net", 358 },
    { "use_via", 359 },
    { "value", 360 },
    { "vertical", 361 },
    { "via", 362 },
    { "via_array_template", 363 },
    { "via_at_smd", 364 },
    { "via_keepout", 365 },
    { "via_number", 366 },
    { "via_rotate_first", 367 },
    { "via_site", 368 },
    { "via_size", 369 },
    { "virtual_pin", 370 },
    { "volt", 371 },
    { "voltage_resolution", 372 },
    { "was_is", 373 },
    { "way", 374 },
    { "weight", 375 },
    { "width", 376 },
    { "window", 377 },
    { "wire", 378 },
    { "wire_keepout", 379 },
    { "wires", 380 },
    { "wires_include", 381 },
    { "wiring", 382 },
    { "write_resolution", 383 },
    { "x", 384 },
    { "xy", 385 },
    { "y", 386 }
});