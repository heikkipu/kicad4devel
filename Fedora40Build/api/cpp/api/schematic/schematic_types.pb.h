// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schematic/schematic_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schematic_2fschematic_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schematic_2fschematic_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/types/base_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schematic_2fschematic_5ftypes_2eproto KIAPI_IMPORTEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct KIAPI_IMPORTEXPORT TableStruct_schematic_2fschematic_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
KIAPI_IMPORTEXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schematic_2fschematic_5ftypes_2eproto;
namespace kiapi {
namespace schematic {
namespace types {
class DirectiveLabel;
struct DirectiveLabelDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern DirectiveLabelDefaultTypeInternal _DirectiveLabel_default_instance_;
class GlobalLabel;
struct GlobalLabelDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GlobalLabelDefaultTypeInternal _GlobalLabel_default_instance_;
class HierarchicalLabel;
struct HierarchicalLabelDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern HierarchicalLabelDefaultTypeInternal _HierarchicalLabel_default_instance_;
class Line;
struct LineDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern LineDefaultTypeInternal _Line_default_instance_;
class LocalLabel;
struct LocalLabelDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern LocalLabelDefaultTypeInternal _LocalLabel_default_instance_;
class Text;
struct TextDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern TextDefaultTypeInternal _Text_default_instance_;
}  // namespace types
}  // namespace schematic
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> KIAPI_IMPORTEXPORT ::kiapi::schematic::types::DirectiveLabel* Arena::CreateMaybeMessage<::kiapi::schematic::types::DirectiveLabel>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::schematic::types::GlobalLabel* Arena::CreateMaybeMessage<::kiapi::schematic::types::GlobalLabel>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::schematic::types::HierarchicalLabel* Arena::CreateMaybeMessage<::kiapi::schematic::types::HierarchicalLabel>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::schematic::types::Line* Arena::CreateMaybeMessage<::kiapi::schematic::types::Line>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::schematic::types::LocalLabel* Arena::CreateMaybeMessage<::kiapi::schematic::types::LocalLabel>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::schematic::types::Text* Arena::CreateMaybeMessage<::kiapi::schematic::types::Text>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kiapi {
namespace schematic {
namespace types {

enum SchematicLayer : int {
  SL_UNKNOWN = 0,
  SchematicLayer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SchematicLayer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool SchematicLayer_IsValid(int value);
constexpr SchematicLayer SchematicLayer_MIN = SL_UNKNOWN;
constexpr SchematicLayer SchematicLayer_MAX = SL_UNKNOWN;
constexpr int SchematicLayer_ARRAYSIZE = SchematicLayer_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchematicLayer_descriptor();
template<typename T>
inline const std::string& SchematicLayer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SchematicLayer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SchematicLayer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SchematicLayer_descriptor(), enum_t_value);
}
inline bool SchematicLayer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchematicLayer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SchematicLayer>(
    SchematicLayer_descriptor(), name, value);
}
// ===================================================================

class KIAPI_IMPORTEXPORT Line final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.schematic.types.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  explicit constexpr Line(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Line& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.schematic.types.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kLayerFieldNumber = 4,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::kiapi::common::types::Vector2& start() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_start();
  ::kiapi::common::types::Vector2* mutable_start();
  void set_allocated_start(::kiapi::common::types::Vector2* start);
  private:
  const ::kiapi::common::types::Vector2& _internal_start() const;
  ::kiapi::common::types::Vector2* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::kiapi::common::types::Vector2* start);
  ::kiapi::common::types::Vector2* unsafe_arena_release_start();

  // .kiapi.common.types.Vector2 end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::kiapi::common::types::Vector2& end() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_end();
  ::kiapi::common::types::Vector2* mutable_end();
  void set_allocated_end(::kiapi::common::types::Vector2* end);
  private:
  const ::kiapi::common::types::Vector2& _internal_end() const;
  ::kiapi::common::types::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::kiapi::common::types::Vector2* end);
  ::kiapi::common::types::Vector2* unsafe_arena_release_end();

  // .kiapi.schematic.types.SchematicLayer layer = 4;
  void clear_layer();
  ::kiapi::schematic::types::SchematicLayer layer() const;
  void set_layer(::kiapi::schematic::types::SchematicLayer value);
  private:
  ::kiapi::schematic::types::SchematicLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::schematic::types::SchematicLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.schematic.types.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* start_;
  ::kiapi::common::types::Vector2* end_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schematic_2fschematic_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Text final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.schematic.types.Text) */ {
 public:
  inline Text() : Text(nullptr) {}
  ~Text() override;
  explicit constexpr Text(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Text(const Text& from);
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Text& operator=(Text&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Text& default_instance() {
    return *internal_default_instance();
  }
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Text* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Text& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Text& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.schematic.types.Text";
  }
  protected:
  explicit Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // .kiapi.common.types.Text text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::common::types::Text& text() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Text* release_text();
  ::kiapi::common::types::Text* mutable_text();
  void set_allocated_text(::kiapi::common::types::Text* text);
  private:
  const ::kiapi::common::types::Text& _internal_text() const;
  ::kiapi::common::types::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::common::types::Text* text);
  ::kiapi::common::types::Text* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:kiapi.schematic.types.Text)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Text* text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schematic_2fschematic_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT LocalLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.schematic.types.LocalLabel) */ {
 public:
  inline LocalLabel() : LocalLabel(nullptr) {}
  ~LocalLabel() override;
  explicit constexpr LocalLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalLabel(const LocalLabel& from);
  LocalLabel(LocalLabel&& from) noexcept
    : LocalLabel() {
    *this = ::std::move(from);
  }

  inline LocalLabel& operator=(const LocalLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalLabel& operator=(LocalLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalLabel* internal_default_instance() {
    return reinterpret_cast<const LocalLabel*>(
               &_LocalLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalLabel& a, LocalLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocalLabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.schematic.types.LocalLabel";
  }
  protected:
  explicit LocalLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::kiapi::common::types::Vector2& position() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_position();
  ::kiapi::common::types::Vector2* mutable_position();
  void set_allocated_position(::kiapi::common::types::Vector2* position);
  private:
  const ::kiapi::common::types::Vector2& _internal_position() const;
  ::kiapi::common::types::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::kiapi::common::types::Vector2* position);
  ::kiapi::common::types::Vector2* unsafe_arena_release_position();

  // .kiapi.schematic.types.Text text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::schematic::types::Text& text() const;
  PROTOBUF_NODISCARD ::kiapi::schematic::types::Text* release_text();
  ::kiapi::schematic::types::Text* mutable_text();
  void set_allocated_text(::kiapi::schematic::types::Text* text);
  private:
  const ::kiapi::schematic::types::Text& _internal_text() const;
  ::kiapi::schematic::types::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::schematic::types::Text* text);
  ::kiapi::schematic::types::Text* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:kiapi.schematic.types.LocalLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* position_;
  ::kiapi::schematic::types::Text* text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schematic_2fschematic_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GlobalLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.schematic.types.GlobalLabel) */ {
 public:
  inline GlobalLabel() : GlobalLabel(nullptr) {}
  ~GlobalLabel() override;
  explicit constexpr GlobalLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalLabel(const GlobalLabel& from);
  GlobalLabel(GlobalLabel&& from) noexcept
    : GlobalLabel() {
    *this = ::std::move(from);
  }

  inline GlobalLabel& operator=(const GlobalLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalLabel& operator=(GlobalLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalLabel* internal_default_instance() {
    return reinterpret_cast<const GlobalLabel*>(
               &_GlobalLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GlobalLabel& a, GlobalLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GlobalLabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.schematic.types.GlobalLabel";
  }
  protected:
  explicit GlobalLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::kiapi::common::types::Vector2& position() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_position();
  ::kiapi::common::types::Vector2* mutable_position();
  void set_allocated_position(::kiapi::common::types::Vector2* position);
  private:
  const ::kiapi::common::types::Vector2& _internal_position() const;
  ::kiapi::common::types::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::kiapi::common::types::Vector2* position);
  ::kiapi::common::types::Vector2* unsafe_arena_release_position();

  // .kiapi.schematic.types.Text text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::schematic::types::Text& text() const;
  PROTOBUF_NODISCARD ::kiapi::schematic::types::Text* release_text();
  ::kiapi::schematic::types::Text* mutable_text();
  void set_allocated_text(::kiapi::schematic::types::Text* text);
  private:
  const ::kiapi::schematic::types::Text& _internal_text() const;
  ::kiapi::schematic::types::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::schematic::types::Text* text);
  ::kiapi::schematic::types::Text* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:kiapi.schematic.types.GlobalLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* position_;
  ::kiapi::schematic::types::Text* text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schematic_2fschematic_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT HierarchicalLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.schematic.types.HierarchicalLabel) */ {
 public:
  inline HierarchicalLabel() : HierarchicalLabel(nullptr) {}
  ~HierarchicalLabel() override;
  explicit constexpr HierarchicalLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalLabel(const HierarchicalLabel& from);
  HierarchicalLabel(HierarchicalLabel&& from) noexcept
    : HierarchicalLabel() {
    *this = ::std::move(from);
  }

  inline HierarchicalLabel& operator=(const HierarchicalLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalLabel& operator=(HierarchicalLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalLabel* internal_default_instance() {
    return reinterpret_cast<const HierarchicalLabel*>(
               &_HierarchicalLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HierarchicalLabel& a, HierarchicalLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HierarchicalLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HierarchicalLabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HierarchicalLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.schematic.types.HierarchicalLabel";
  }
  protected:
  explicit HierarchicalLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::kiapi::common::types::Vector2& position() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_position();
  ::kiapi::common::types::Vector2* mutable_position();
  void set_allocated_position(::kiapi::common::types::Vector2* position);
  private:
  const ::kiapi::common::types::Vector2& _internal_position() const;
  ::kiapi::common::types::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::kiapi::common::types::Vector2* position);
  ::kiapi::common::types::Vector2* unsafe_arena_release_position();

  // .kiapi.schematic.types.Text text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::schematic::types::Text& text() const;
  PROTOBUF_NODISCARD ::kiapi::schematic::types::Text* release_text();
  ::kiapi::schematic::types::Text* mutable_text();
  void set_allocated_text(::kiapi::schematic::types::Text* text);
  private:
  const ::kiapi::schematic::types::Text& _internal_text() const;
  ::kiapi::schematic::types::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::schematic::types::Text* text);
  ::kiapi::schematic::types::Text* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:kiapi.schematic.types.HierarchicalLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* position_;
  ::kiapi::schematic::types::Text* text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schematic_2fschematic_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT DirectiveLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.schematic.types.DirectiveLabel) */ {
 public:
  inline DirectiveLabel() : DirectiveLabel(nullptr) {}
  ~DirectiveLabel() override;
  explicit constexpr DirectiveLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectiveLabel(const DirectiveLabel& from);
  DirectiveLabel(DirectiveLabel&& from) noexcept
    : DirectiveLabel() {
    *this = ::std::move(from);
  }

  inline DirectiveLabel& operator=(const DirectiveLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectiveLabel& operator=(DirectiveLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectiveLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectiveLabel* internal_default_instance() {
    return reinterpret_cast<const DirectiveLabel*>(
               &_DirectiveLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DirectiveLabel& a, DirectiveLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectiveLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectiveLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectiveLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectiveLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectiveLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectiveLabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectiveLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.schematic.types.DirectiveLabel";
  }
  protected:
  explicit DirectiveLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::kiapi::common::types::Vector2& position() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_position();
  ::kiapi::common::types::Vector2* mutable_position();
  void set_allocated_position(::kiapi::common::types::Vector2* position);
  private:
  const ::kiapi::common::types::Vector2& _internal_position() const;
  ::kiapi::common::types::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::kiapi::common::types::Vector2* position);
  ::kiapi::common::types::Vector2* unsafe_arena_release_position();

  // .kiapi.schematic.types.Text text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::schematic::types::Text& text() const;
  PROTOBUF_NODISCARD ::kiapi::schematic::types::Text* release_text();
  ::kiapi::schematic::types::Text* mutable_text();
  void set_allocated_text(::kiapi::schematic::types::Text* text);
  private:
  const ::kiapi::schematic::types::Text& _internal_text() const;
  ::kiapi::schematic::types::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::schematic::types::Text* text);
  ::kiapi::schematic::types::Text* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:kiapi.schematic.types.DirectiveLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* position_;
  ::kiapi::schematic::types::Text* text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schematic_2fschematic_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Line

// .kiapi.common.types.KIID id = 1;
inline bool Line::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Line::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& Line::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& Line::id() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.Line.id)
  return _internal_id();
}
inline void Line::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.Line.id)
}
inline ::kiapi::common::types::KIID* Line::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* Line::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.Line.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* Line::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* Line::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.Line.id)
  return _msg;
}
inline void Line::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.Line.id)
}

// .kiapi.common.types.Vector2 start = 2;
inline bool Line::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool Line::has_start() const {
  return _internal_has_start();
}
inline const ::kiapi::common::types::Vector2& Line::_internal_start() const {
  const ::kiapi::common::types::Vector2* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Line::start() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.Line.start)
  return _internal_start();
}
inline void Line::unsafe_arena_set_allocated_start(
    ::kiapi::common::types::Vector2* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.Line.start)
}
inline ::kiapi::common::types::Vector2* Line::release_start() {
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Line::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.Line.start)
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Line::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::kiapi::common::types::Vector2* Line::mutable_start() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.Line.start)
  return _msg;
}
inline void Line::set_allocated_start(::kiapi::common::types::Vector2* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.Line.start)
}

// .kiapi.common.types.Vector2 end = 3;
inline bool Line::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool Line::has_end() const {
  return _internal_has_end();
}
inline const ::kiapi::common::types::Vector2& Line::_internal_end() const {
  const ::kiapi::common::types::Vector2* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Line::end() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.Line.end)
  return _internal_end();
}
inline void Line::unsafe_arena_set_allocated_end(
    ::kiapi::common::types::Vector2* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.Line.end)
}
inline ::kiapi::common::types::Vector2* Line::release_end() {
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Line::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.Line.end)
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Line::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::kiapi::common::types::Vector2* Line::mutable_end() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.Line.end)
  return _msg;
}
inline void Line::set_allocated_end(::kiapi::common::types::Vector2* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.Line.end)
}

// .kiapi.schematic.types.SchematicLayer layer = 4;
inline void Line::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::schematic::types::SchematicLayer Line::_internal_layer() const {
  return static_cast< ::kiapi::schematic::types::SchematicLayer >(layer_);
}
inline ::kiapi::schematic::types::SchematicLayer Line::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.Line.layer)
  return _internal_layer();
}
inline void Line::_internal_set_layer(::kiapi::schematic::types::SchematicLayer value) {
  
  layer_ = value;
}
inline void Line::set_layer(::kiapi::schematic::types::SchematicLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.schematic.types.Line.layer)
}

// -------------------------------------------------------------------

// Text

// .kiapi.common.types.Text text = 1;
inline bool Text::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool Text::has_text() const {
  return _internal_has_text();
}
inline const ::kiapi::common::types::Text& Text::_internal_text() const {
  const ::kiapi::common::types::Text* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Text&>(
      ::kiapi::common::types::_Text_default_instance_);
}
inline const ::kiapi::common::types::Text& Text::text() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.Text.text)
  return _internal_text();
}
inline void Text::unsafe_arena_set_allocated_text(
    ::kiapi::common::types::Text* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.Text.text)
}
inline ::kiapi::common::types::Text* Text::release_text() {
  
  ::kiapi::common::types::Text* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Text* Text::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.Text.text)
  
  ::kiapi::common::types::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Text* Text::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Text>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::common::types::Text* Text::mutable_text() {
  ::kiapi::common::types::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.Text.text)
  return _msg;
}
inline void Text::set_allocated_text(::kiapi::common::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text));
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.Text.text)
}

// -------------------------------------------------------------------

// LocalLabel

// .kiapi.common.types.KIID id = 1;
inline bool LocalLabel::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool LocalLabel::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& LocalLabel::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& LocalLabel::id() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.LocalLabel.id)
  return _internal_id();
}
inline void LocalLabel::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.LocalLabel.id)
}
inline ::kiapi::common::types::KIID* LocalLabel::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* LocalLabel::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.LocalLabel.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* LocalLabel::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* LocalLabel::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.LocalLabel.id)
  return _msg;
}
inline void LocalLabel::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.LocalLabel.id)
}

// .kiapi.common.types.Vector2 position = 2;
inline bool LocalLabel::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool LocalLabel::has_position() const {
  return _internal_has_position();
}
inline const ::kiapi::common::types::Vector2& LocalLabel::_internal_position() const {
  const ::kiapi::common::types::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& LocalLabel::position() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.LocalLabel.position)
  return _internal_position();
}
inline void LocalLabel::unsafe_arena_set_allocated_position(
    ::kiapi::common::types::Vector2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.LocalLabel.position)
}
inline ::kiapi::common::types::Vector2* LocalLabel::release_position() {
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* LocalLabel::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.LocalLabel.position)
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* LocalLabel::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::kiapi::common::types::Vector2* LocalLabel::mutable_position() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.LocalLabel.position)
  return _msg;
}
inline void LocalLabel::set_allocated_position(::kiapi::common::types::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.LocalLabel.position)
}

// .kiapi.schematic.types.Text text = 3;
inline bool LocalLabel::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool LocalLabel::has_text() const {
  return _internal_has_text();
}
inline void LocalLabel::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::kiapi::schematic::types::Text& LocalLabel::_internal_text() const {
  const ::kiapi::schematic::types::Text* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::schematic::types::Text&>(
      ::kiapi::schematic::types::_Text_default_instance_);
}
inline const ::kiapi::schematic::types::Text& LocalLabel::text() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.LocalLabel.text)
  return _internal_text();
}
inline void LocalLabel::unsafe_arena_set_allocated_text(
    ::kiapi::schematic::types::Text* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.LocalLabel.text)
}
inline ::kiapi::schematic::types::Text* LocalLabel::release_text() {
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::schematic::types::Text* LocalLabel::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.LocalLabel.text)
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::schematic::types::Text* LocalLabel::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::schematic::types::Text>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::schematic::types::Text* LocalLabel::mutable_text() {
  ::kiapi::schematic::types::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.LocalLabel.text)
  return _msg;
}
inline void LocalLabel::set_allocated_text(::kiapi::schematic::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::schematic::types::Text>::GetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.LocalLabel.text)
}

// -------------------------------------------------------------------

// GlobalLabel

// .kiapi.common.types.KIID id = 1;
inline bool GlobalLabel::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool GlobalLabel::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& GlobalLabel::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& GlobalLabel::id() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.GlobalLabel.id)
  return _internal_id();
}
inline void GlobalLabel::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.GlobalLabel.id)
}
inline ::kiapi::common::types::KIID* GlobalLabel::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* GlobalLabel::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.GlobalLabel.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* GlobalLabel::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* GlobalLabel::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.GlobalLabel.id)
  return _msg;
}
inline void GlobalLabel::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.GlobalLabel.id)
}

// .kiapi.common.types.Vector2 position = 2;
inline bool GlobalLabel::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GlobalLabel::has_position() const {
  return _internal_has_position();
}
inline const ::kiapi::common::types::Vector2& GlobalLabel::_internal_position() const {
  const ::kiapi::common::types::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& GlobalLabel::position() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.GlobalLabel.position)
  return _internal_position();
}
inline void GlobalLabel::unsafe_arena_set_allocated_position(
    ::kiapi::common::types::Vector2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.GlobalLabel.position)
}
inline ::kiapi::common::types::Vector2* GlobalLabel::release_position() {
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* GlobalLabel::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.GlobalLabel.position)
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* GlobalLabel::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::kiapi::common::types::Vector2* GlobalLabel::mutable_position() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.GlobalLabel.position)
  return _msg;
}
inline void GlobalLabel::set_allocated_position(::kiapi::common::types::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.GlobalLabel.position)
}

// .kiapi.schematic.types.Text text = 3;
inline bool GlobalLabel::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool GlobalLabel::has_text() const {
  return _internal_has_text();
}
inline void GlobalLabel::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::kiapi::schematic::types::Text& GlobalLabel::_internal_text() const {
  const ::kiapi::schematic::types::Text* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::schematic::types::Text&>(
      ::kiapi::schematic::types::_Text_default_instance_);
}
inline const ::kiapi::schematic::types::Text& GlobalLabel::text() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.GlobalLabel.text)
  return _internal_text();
}
inline void GlobalLabel::unsafe_arena_set_allocated_text(
    ::kiapi::schematic::types::Text* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.GlobalLabel.text)
}
inline ::kiapi::schematic::types::Text* GlobalLabel::release_text() {
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::schematic::types::Text* GlobalLabel::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.GlobalLabel.text)
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::schematic::types::Text* GlobalLabel::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::schematic::types::Text>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::schematic::types::Text* GlobalLabel::mutable_text() {
  ::kiapi::schematic::types::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.GlobalLabel.text)
  return _msg;
}
inline void GlobalLabel::set_allocated_text(::kiapi::schematic::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::schematic::types::Text>::GetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.GlobalLabel.text)
}

// -------------------------------------------------------------------

// HierarchicalLabel

// .kiapi.common.types.KIID id = 1;
inline bool HierarchicalLabel::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool HierarchicalLabel::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& HierarchicalLabel::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& HierarchicalLabel::id() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.HierarchicalLabel.id)
  return _internal_id();
}
inline void HierarchicalLabel::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.HierarchicalLabel.id)
}
inline ::kiapi::common::types::KIID* HierarchicalLabel::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* HierarchicalLabel::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.HierarchicalLabel.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* HierarchicalLabel::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* HierarchicalLabel::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.HierarchicalLabel.id)
  return _msg;
}
inline void HierarchicalLabel::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.HierarchicalLabel.id)
}

// .kiapi.common.types.Vector2 position = 2;
inline bool HierarchicalLabel::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool HierarchicalLabel::has_position() const {
  return _internal_has_position();
}
inline const ::kiapi::common::types::Vector2& HierarchicalLabel::_internal_position() const {
  const ::kiapi::common::types::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& HierarchicalLabel::position() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.HierarchicalLabel.position)
  return _internal_position();
}
inline void HierarchicalLabel::unsafe_arena_set_allocated_position(
    ::kiapi::common::types::Vector2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.HierarchicalLabel.position)
}
inline ::kiapi::common::types::Vector2* HierarchicalLabel::release_position() {
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* HierarchicalLabel::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.HierarchicalLabel.position)
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* HierarchicalLabel::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::kiapi::common::types::Vector2* HierarchicalLabel::mutable_position() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.HierarchicalLabel.position)
  return _msg;
}
inline void HierarchicalLabel::set_allocated_position(::kiapi::common::types::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.HierarchicalLabel.position)
}

// .kiapi.schematic.types.Text text = 3;
inline bool HierarchicalLabel::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool HierarchicalLabel::has_text() const {
  return _internal_has_text();
}
inline void HierarchicalLabel::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::kiapi::schematic::types::Text& HierarchicalLabel::_internal_text() const {
  const ::kiapi::schematic::types::Text* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::schematic::types::Text&>(
      ::kiapi::schematic::types::_Text_default_instance_);
}
inline const ::kiapi::schematic::types::Text& HierarchicalLabel::text() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.HierarchicalLabel.text)
  return _internal_text();
}
inline void HierarchicalLabel::unsafe_arena_set_allocated_text(
    ::kiapi::schematic::types::Text* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.HierarchicalLabel.text)
}
inline ::kiapi::schematic::types::Text* HierarchicalLabel::release_text() {
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::schematic::types::Text* HierarchicalLabel::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.HierarchicalLabel.text)
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::schematic::types::Text* HierarchicalLabel::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::schematic::types::Text>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::schematic::types::Text* HierarchicalLabel::mutable_text() {
  ::kiapi::schematic::types::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.HierarchicalLabel.text)
  return _msg;
}
inline void HierarchicalLabel::set_allocated_text(::kiapi::schematic::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::schematic::types::Text>::GetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.HierarchicalLabel.text)
}

// -------------------------------------------------------------------

// DirectiveLabel

// .kiapi.common.types.KIID id = 1;
inline bool DirectiveLabel::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DirectiveLabel::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& DirectiveLabel::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& DirectiveLabel::id() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.DirectiveLabel.id)
  return _internal_id();
}
inline void DirectiveLabel::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.DirectiveLabel.id)
}
inline ::kiapi::common::types::KIID* DirectiveLabel::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* DirectiveLabel::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.DirectiveLabel.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* DirectiveLabel::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* DirectiveLabel::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.DirectiveLabel.id)
  return _msg;
}
inline void DirectiveLabel::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.DirectiveLabel.id)
}

// .kiapi.common.types.Vector2 position = 2;
inline bool DirectiveLabel::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool DirectiveLabel::has_position() const {
  return _internal_has_position();
}
inline const ::kiapi::common::types::Vector2& DirectiveLabel::_internal_position() const {
  const ::kiapi::common::types::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& DirectiveLabel::position() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.DirectiveLabel.position)
  return _internal_position();
}
inline void DirectiveLabel::unsafe_arena_set_allocated_position(
    ::kiapi::common::types::Vector2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.DirectiveLabel.position)
}
inline ::kiapi::common::types::Vector2* DirectiveLabel::release_position() {
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* DirectiveLabel::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.DirectiveLabel.position)
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* DirectiveLabel::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::kiapi::common::types::Vector2* DirectiveLabel::mutable_position() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.DirectiveLabel.position)
  return _msg;
}
inline void DirectiveLabel::set_allocated_position(::kiapi::common::types::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.DirectiveLabel.position)
}

// .kiapi.schematic.types.Text text = 3;
inline bool DirectiveLabel::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool DirectiveLabel::has_text() const {
  return _internal_has_text();
}
inline void DirectiveLabel::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::kiapi::schematic::types::Text& DirectiveLabel::_internal_text() const {
  const ::kiapi::schematic::types::Text* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::schematic::types::Text&>(
      ::kiapi::schematic::types::_Text_default_instance_);
}
inline const ::kiapi::schematic::types::Text& DirectiveLabel::text() const {
  // @@protoc_insertion_point(field_get:kiapi.schematic.types.DirectiveLabel.text)
  return _internal_text();
}
inline void DirectiveLabel::unsafe_arena_set_allocated_text(
    ::kiapi::schematic::types::Text* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.schematic.types.DirectiveLabel.text)
}
inline ::kiapi::schematic::types::Text* DirectiveLabel::release_text() {
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::schematic::types::Text* DirectiveLabel::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.schematic.types.DirectiveLabel.text)
  
  ::kiapi::schematic::types::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::schematic::types::Text* DirectiveLabel::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::schematic::types::Text>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::schematic::types::Text* DirectiveLabel::mutable_text() {
  ::kiapi::schematic::types::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.schematic.types.DirectiveLabel.text)
  return _msg;
}
inline void DirectiveLabel::set_allocated_text(::kiapi::schematic::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::schematic::types::Text>::GetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.schematic.types.DirectiveLabel.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace schematic
}  // namespace kiapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kiapi::schematic::types::SchematicLayer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::schematic::types::SchematicLayer>() {
  return ::kiapi::schematic::types::SchematicLayer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schematic_2fschematic_5ftypes_2eproto
