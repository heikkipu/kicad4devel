// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schematic/schematic_types.proto

#include "schematic/schematic_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace schematic {
namespace types {
constexpr Line::Line(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , start_(nullptr)
  , end_(nullptr)
  , layer_(0)
{}
struct LineDefaultTypeInternal {
  constexpr LineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineDefaultTypeInternal _Line_default_instance_;
constexpr Text::Text(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(nullptr){}
struct TextDefaultTypeInternal {
  constexpr TextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextDefaultTypeInternal() {}
  union {
    Text _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextDefaultTypeInternal _Text_default_instance_;
constexpr LocalLabel::LocalLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , position_(nullptr)
  , text_(nullptr){}
struct LocalLabelDefaultTypeInternal {
  constexpr LocalLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalLabelDefaultTypeInternal() {}
  union {
    LocalLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalLabelDefaultTypeInternal _LocalLabel_default_instance_;
constexpr GlobalLabel::GlobalLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , position_(nullptr)
  , text_(nullptr){}
struct GlobalLabelDefaultTypeInternal {
  constexpr GlobalLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalLabelDefaultTypeInternal() {}
  union {
    GlobalLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalLabelDefaultTypeInternal _GlobalLabel_default_instance_;
constexpr HierarchicalLabel::HierarchicalLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , position_(nullptr)
  , text_(nullptr){}
struct HierarchicalLabelDefaultTypeInternal {
  constexpr HierarchicalLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HierarchicalLabelDefaultTypeInternal() {}
  union {
    HierarchicalLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HierarchicalLabelDefaultTypeInternal _HierarchicalLabel_default_instance_;
constexpr DirectiveLabel::DirectiveLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , position_(nullptr)
  , text_(nullptr){}
struct DirectiveLabelDefaultTypeInternal {
  constexpr DirectiveLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectiveLabelDefaultTypeInternal() {}
  union {
    DirectiveLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectiveLabelDefaultTypeInternal _DirectiveLabel_default_instance_;
}  // namespace types
}  // namespace schematic
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_schematic_2fschematic_5ftypes_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_schematic_2fschematic_5ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_schematic_2fschematic_5ftypes_2eproto = nullptr;

const uint32_t TableStruct_schematic_2fschematic_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::Line, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::Line, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::Line, end_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::Line, layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::Text, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::LocalLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::LocalLabel, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::LocalLabel, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::LocalLabel, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::GlobalLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::GlobalLabel, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::GlobalLabel, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::GlobalLabel, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::HierarchicalLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::HierarchicalLabel, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::HierarchicalLabel, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::HierarchicalLabel, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::DirectiveLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::DirectiveLabel, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::DirectiveLabel, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::schematic::types::DirectiveLabel, text_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::schematic::types::Line)},
  { 10, -1, -1, sizeof(::kiapi::schematic::types::Text)},
  { 17, -1, -1, sizeof(::kiapi::schematic::types::LocalLabel)},
  { 26, -1, -1, sizeof(::kiapi::schematic::types::GlobalLabel)},
  { 35, -1, -1, sizeof(::kiapi::schematic::types::HierarchicalLabel)},
  { 44, -1, -1, sizeof(::kiapi::schematic::types::DirectiveLabel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::schematic::types::_Line_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::schematic::types::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::schematic::types::_LocalLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::schematic::types::_GlobalLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::schematic::types::_HierarchicalLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::schematic::types::_DirectiveLabel_default_instance_),
};

const char descriptor_table_protodef_schematic_2fschematic_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037schematic/schematic_types.proto\022\025kiapi"
  ".schematic.types\032\035common/types/base_type"
  "s.proto\"\270\001\n\004Line\022$\n\002id\030\001 \001(\0132\030.kiapi.com"
  "mon.types.KIID\022*\n\005start\030\002 \001(\0132\033.kiapi.co"
  "mmon.types.Vector2\022(\n\003end\030\003 \001(\0132\033.kiapi."
  "common.types.Vector2\0224\n\005layer\030\004 \001(\0162%.ki"
  "api.schematic.types.SchematicLayer\".\n\004Te"
  "xt\022&\n\004text\030\001 \001(\0132\030.kiapi.common.types.Te"
  "xt\"\214\001\n\nLocalLabel\022$\n\002id\030\001 \001(\0132\030.kiapi.co"
  "mmon.types.KIID\022-\n\010position\030\002 \001(\0132\033.kiap"
  "i.common.types.Vector2\022)\n\004text\030\003 \001(\0132\033.k"
  "iapi.schematic.types.Text\"\215\001\n\013GlobalLabe"
  "l\022$\n\002id\030\001 \001(\0132\030.kiapi.common.types.KIID\022"
  "-\n\010position\030\002 \001(\0132\033.kiapi.common.types.V"
  "ector2\022)\n\004text\030\003 \001(\0132\033.kiapi.schematic.t"
  "ypes.Text\"\223\001\n\021HierarchicalLabel\022$\n\002id\030\001 "
  "\001(\0132\030.kiapi.common.types.KIID\022-\n\010positio"
  "n\030\002 \001(\0132\033.kiapi.common.types.Vector2\022)\n\004"
  "text\030\003 \001(\0132\033.kiapi.schematic.types.Text\""
  "\220\001\n\016DirectiveLabel\022$\n\002id\030\001 \001(\0132\030.kiapi.c"
  "ommon.types.KIID\022-\n\010position\030\002 \001(\0132\033.kia"
  "pi.common.types.Vector2\022)\n\004text\030\003 \001(\0132\033."
  "kiapi.schematic.types.Text* \n\016SchematicL"
  "ayer\022\016\n\nSL_UNKNOWN\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_schematic_2fschematic_5ftypes_2eproto_deps[1] = {
  &::descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_schematic_2fschematic_5ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schematic_2fschematic_5ftypes_2eproto = {
  false, false, 948, descriptor_table_protodef_schematic_2fschematic_5ftypes_2eproto, "schematic/schematic_types.proto", 
  &descriptor_table_schematic_2fschematic_5ftypes_2eproto_once, descriptor_table_schematic_2fschematic_5ftypes_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_schematic_2fschematic_5ftypes_2eproto::offsets,
  file_level_metadata_schematic_2fschematic_5ftypes_2eproto, file_level_enum_descriptors_schematic_2fschematic_5ftypes_2eproto, file_level_service_descriptors_schematic_2fschematic_5ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_schematic_2fschematic_5ftypes_2eproto_getter() {
  return &descriptor_table_schematic_2fschematic_5ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_schematic_2fschematic_5ftypes_2eproto(&descriptor_table_schematic_2fschematic_5ftypes_2eproto);
namespace kiapi {
namespace schematic {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchematicLayer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schematic_2fschematic_5ftypes_2eproto);
  return file_level_enum_descriptors_schematic_2fschematic_5ftypes_2eproto[0];
}
bool SchematicLayer_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Line::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const Line* msg);
  static const ::kiapi::common::types::Vector2& start(const Line* msg);
  static const ::kiapi::common::types::Vector2& end(const Line* msg);
};

const ::kiapi::common::types::KIID&
Line::_Internal::id(const Line* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
Line::_Internal::start(const Line* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
Line::_Internal::end(const Line* msg) {
  return *msg->end_;
}
void Line::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Line::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void Line::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.schematic.types.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:kiapi.schematic.types.Line)
}

inline void Line::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&id_)) + sizeof(layer_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:kiapi.schematic.types.Line)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void Line::ArenaDtor(void* object) {
  Line* _this = reinterpret_cast< Line* >(object);
  (void)_this;
}
void Line::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.schematic.types.Line)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.schematic.types.SchematicLayer layer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::schematic::types::SchematicLayer>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.schematic.types.Line)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 start = 2;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // .kiapi.schematic.types.SchematicLayer layer = 4;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.schematic.types.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.schematic.types.Line)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 start = 2;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .kiapi.schematic.types.SchematicLayer layer = 4;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Line::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line::GetClassData() const { return &_class_data_; }

void Line::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Line *>(to)->MergeFrom(
      static_cast<const Line &>(from));
}


void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.schematic.types.Line)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.schematic.types.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, layer_)
      + sizeof(Line::layer_)
      - PROTOBUF_FIELD_OFFSET(Line, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_schematic_2fschematic_5ftypes_2eproto_getter, &descriptor_table_schematic_2fschematic_5ftypes_2eproto_once,
      file_level_metadata_schematic_2fschematic_5ftypes_2eproto[0]);
}

// ===================================================================

class Text::_Internal {
 public:
  static const ::kiapi::common::types::Text& text(const Text* msg);
};

const ::kiapi::common::types::Text&
Text::_Internal::text(const Text* msg) {
  return *msg->text_;
}
void Text::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.schematic.types.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text()) {
    text_ = new ::kiapi::common::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.schematic.types.Text)
}

inline void Text::SharedCtor() {
text_ = nullptr;
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:kiapi.schematic.types.Text)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete text_;
}

void Text::ArenaDtor(void* object) {
  Text* _this = reinterpret_cast< Text* >(object);
  (void)_this;
}
void Text::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.schematic.types.Text)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Text text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Text::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.schematic.types.Text)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Text text = 1;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.schematic.types.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.schematic.types.Text)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Text text = 1;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Text::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Text::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Text::GetClassData() const { return &_class_data_; }

void Text::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Text *>(to)->MergeFrom(
      static_cast<const Text &>(from));
}


void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.schematic.types.Text)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::common::types::Text::MergeFrom(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.schematic.types.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(text_, other->text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_schematic_2fschematic_5ftypes_2eproto_getter, &descriptor_table_schematic_2fschematic_5ftypes_2eproto_once,
      file_level_metadata_schematic_2fschematic_5ftypes_2eproto[1]);
}

// ===================================================================

class LocalLabel::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const LocalLabel* msg);
  static const ::kiapi::common::types::Vector2& position(const LocalLabel* msg);
  static const ::kiapi::schematic::types::Text& text(const LocalLabel* msg);
};

const ::kiapi::common::types::KIID&
LocalLabel::_Internal::id(const LocalLabel* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
LocalLabel::_Internal::position(const LocalLabel* msg) {
  return *msg->position_;
}
const ::kiapi::schematic::types::Text&
LocalLabel::_Internal::text(const LocalLabel* msg) {
  return *msg->text_;
}
void LocalLabel::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void LocalLabel::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
LocalLabel::LocalLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.schematic.types.LocalLabel)
}
LocalLabel::LocalLabel(const LocalLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::kiapi::schematic::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.schematic.types.LocalLabel)
}

inline void LocalLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_) -
    reinterpret_cast<char*>(&id_)) + sizeof(text_));
}

LocalLabel::~LocalLabel() {
  // @@protoc_insertion_point(destructor:kiapi.schematic.types.LocalLabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete text_;
}

void LocalLabel::ArenaDtor(void* object) {
  LocalLabel* _this = reinterpret_cast< LocalLabel* >(object);
  (void)_this;
}
void LocalLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.schematic.types.LocalLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.schematic.types.Text text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.schematic.types.LocalLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.schematic.types.LocalLabel)
  return target;
}

size_t LocalLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.schematic.types.LocalLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalLabel::GetClassData() const { return &_class_data_; }

void LocalLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalLabel *>(to)->MergeFrom(
      static_cast<const LocalLabel &>(from));
}


void LocalLabel::MergeFrom(const LocalLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.schematic.types.LocalLabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::schematic::types::Text::MergeFrom(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalLabel::CopyFrom(const LocalLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.schematic.types.LocalLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalLabel::IsInitialized() const {
  return true;
}

void LocalLabel::InternalSwap(LocalLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalLabel, text_)
      + sizeof(LocalLabel::text_)
      - PROTOBUF_FIELD_OFFSET(LocalLabel, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalLabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_schematic_2fschematic_5ftypes_2eproto_getter, &descriptor_table_schematic_2fschematic_5ftypes_2eproto_once,
      file_level_metadata_schematic_2fschematic_5ftypes_2eproto[2]);
}

// ===================================================================

class GlobalLabel::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const GlobalLabel* msg);
  static const ::kiapi::common::types::Vector2& position(const GlobalLabel* msg);
  static const ::kiapi::schematic::types::Text& text(const GlobalLabel* msg);
};

const ::kiapi::common::types::KIID&
GlobalLabel::_Internal::id(const GlobalLabel* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
GlobalLabel::_Internal::position(const GlobalLabel* msg) {
  return *msg->position_;
}
const ::kiapi::schematic::types::Text&
GlobalLabel::_Internal::text(const GlobalLabel* msg) {
  return *msg->text_;
}
void GlobalLabel::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void GlobalLabel::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GlobalLabel::GlobalLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.schematic.types.GlobalLabel)
}
GlobalLabel::GlobalLabel(const GlobalLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::kiapi::schematic::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.schematic.types.GlobalLabel)
}

inline void GlobalLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_) -
    reinterpret_cast<char*>(&id_)) + sizeof(text_));
}

GlobalLabel::~GlobalLabel() {
  // @@protoc_insertion_point(destructor:kiapi.schematic.types.GlobalLabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete text_;
}

void GlobalLabel::ArenaDtor(void* object) {
  GlobalLabel* _this = reinterpret_cast< GlobalLabel* >(object);
  (void)_this;
}
void GlobalLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.schematic.types.GlobalLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.schematic.types.Text text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.schematic.types.GlobalLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.schematic.types.GlobalLabel)
  return target;
}

size_t GlobalLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.schematic.types.GlobalLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalLabel::GetClassData() const { return &_class_data_; }

void GlobalLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GlobalLabel *>(to)->MergeFrom(
      static_cast<const GlobalLabel &>(from));
}


void GlobalLabel::MergeFrom(const GlobalLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.schematic.types.GlobalLabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::schematic::types::Text::MergeFrom(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalLabel::CopyFrom(const GlobalLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.schematic.types.GlobalLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalLabel::IsInitialized() const {
  return true;
}

void GlobalLabel::InternalSwap(GlobalLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalLabel, text_)
      + sizeof(GlobalLabel::text_)
      - PROTOBUF_FIELD_OFFSET(GlobalLabel, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalLabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_schematic_2fschematic_5ftypes_2eproto_getter, &descriptor_table_schematic_2fschematic_5ftypes_2eproto_once,
      file_level_metadata_schematic_2fschematic_5ftypes_2eproto[3]);
}

// ===================================================================

class HierarchicalLabel::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const HierarchicalLabel* msg);
  static const ::kiapi::common::types::Vector2& position(const HierarchicalLabel* msg);
  static const ::kiapi::schematic::types::Text& text(const HierarchicalLabel* msg);
};

const ::kiapi::common::types::KIID&
HierarchicalLabel::_Internal::id(const HierarchicalLabel* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
HierarchicalLabel::_Internal::position(const HierarchicalLabel* msg) {
  return *msg->position_;
}
const ::kiapi::schematic::types::Text&
HierarchicalLabel::_Internal::text(const HierarchicalLabel* msg) {
  return *msg->text_;
}
void HierarchicalLabel::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void HierarchicalLabel::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
HierarchicalLabel::HierarchicalLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.schematic.types.HierarchicalLabel)
}
HierarchicalLabel::HierarchicalLabel(const HierarchicalLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::kiapi::schematic::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.schematic.types.HierarchicalLabel)
}

inline void HierarchicalLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_) -
    reinterpret_cast<char*>(&id_)) + sizeof(text_));
}

HierarchicalLabel::~HierarchicalLabel() {
  // @@protoc_insertion_point(destructor:kiapi.schematic.types.HierarchicalLabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HierarchicalLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete text_;
}

void HierarchicalLabel::ArenaDtor(void* object) {
  HierarchicalLabel* _this = reinterpret_cast< HierarchicalLabel* >(object);
  (void)_this;
}
void HierarchicalLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HierarchicalLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HierarchicalLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.schematic.types.HierarchicalLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.schematic.types.Text text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.schematic.types.HierarchicalLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.schematic.types.HierarchicalLabel)
  return target;
}

size_t HierarchicalLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.schematic.types.HierarchicalLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HierarchicalLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalLabel::GetClassData() const { return &_class_data_; }

void HierarchicalLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HierarchicalLabel *>(to)->MergeFrom(
      static_cast<const HierarchicalLabel &>(from));
}


void HierarchicalLabel::MergeFrom(const HierarchicalLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.schematic.types.HierarchicalLabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::schematic::types::Text::MergeFrom(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalLabel::CopyFrom(const HierarchicalLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.schematic.types.HierarchicalLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalLabel::IsInitialized() const {
  return true;
}

void HierarchicalLabel::InternalSwap(HierarchicalLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalLabel, text_)
      + sizeof(HierarchicalLabel::text_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalLabel, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalLabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_schematic_2fschematic_5ftypes_2eproto_getter, &descriptor_table_schematic_2fschematic_5ftypes_2eproto_once,
      file_level_metadata_schematic_2fschematic_5ftypes_2eproto[4]);
}

// ===================================================================

class DirectiveLabel::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const DirectiveLabel* msg);
  static const ::kiapi::common::types::Vector2& position(const DirectiveLabel* msg);
  static const ::kiapi::schematic::types::Text& text(const DirectiveLabel* msg);
};

const ::kiapi::common::types::KIID&
DirectiveLabel::_Internal::id(const DirectiveLabel* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
DirectiveLabel::_Internal::position(const DirectiveLabel* msg) {
  return *msg->position_;
}
const ::kiapi::schematic::types::Text&
DirectiveLabel::_Internal::text(const DirectiveLabel* msg) {
  return *msg->text_;
}
void DirectiveLabel::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void DirectiveLabel::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
DirectiveLabel::DirectiveLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.schematic.types.DirectiveLabel)
}
DirectiveLabel::DirectiveLabel(const DirectiveLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::kiapi::schematic::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.schematic.types.DirectiveLabel)
}

inline void DirectiveLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_) -
    reinterpret_cast<char*>(&id_)) + sizeof(text_));
}

DirectiveLabel::~DirectiveLabel() {
  // @@protoc_insertion_point(destructor:kiapi.schematic.types.DirectiveLabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DirectiveLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete text_;
}

void DirectiveLabel::ArenaDtor(void* object) {
  DirectiveLabel* _this = reinterpret_cast< DirectiveLabel* >(object);
  (void)_this;
}
void DirectiveLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectiveLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectiveLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.schematic.types.DirectiveLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectiveLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.schematic.types.Text text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectiveLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.schematic.types.DirectiveLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.schematic.types.DirectiveLabel)
  return target;
}

size_t DirectiveLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.schematic.types.DirectiveLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.schematic.types.Text text = 3;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectiveLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DirectiveLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectiveLabel::GetClassData() const { return &_class_data_; }

void DirectiveLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DirectiveLabel *>(to)->MergeFrom(
      static_cast<const DirectiveLabel &>(from));
}


void DirectiveLabel::MergeFrom(const DirectiveLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.schematic.types.DirectiveLabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::schematic::types::Text::MergeFrom(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectiveLabel::CopyFrom(const DirectiveLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.schematic.types.DirectiveLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectiveLabel::IsInitialized() const {
  return true;
}

void DirectiveLabel::InternalSwap(DirectiveLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectiveLabel, text_)
      + sizeof(DirectiveLabel::text_)
      - PROTOBUF_FIELD_OFFSET(DirectiveLabel, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectiveLabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_schematic_2fschematic_5ftypes_2eproto_getter, &descriptor_table_schematic_2fschematic_5ftypes_2eproto_once,
      file_level_metadata_schematic_2fschematic_5ftypes_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace schematic
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::schematic::types::Line* Arena::CreateMaybeMessage< ::kiapi::schematic::types::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::schematic::types::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::schematic::types::Text* Arena::CreateMaybeMessage< ::kiapi::schematic::types::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::schematic::types::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::schematic::types::LocalLabel* Arena::CreateMaybeMessage< ::kiapi::schematic::types::LocalLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::schematic::types::LocalLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::schematic::types::GlobalLabel* Arena::CreateMaybeMessage< ::kiapi::schematic::types::GlobalLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::schematic::types::GlobalLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::schematic::types::HierarchicalLabel* Arena::CreateMaybeMessage< ::kiapi::schematic::types::HierarchicalLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::schematic::types::HierarchicalLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::schematic::types::DirectiveLabel* Arena::CreateMaybeMessage< ::kiapi::schematic::types::DirectiveLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::schematic::types::DirectiveLabel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
