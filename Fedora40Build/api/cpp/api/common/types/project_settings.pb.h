// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/types/project_settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2ftypes_2fproject_5fsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2ftypes_2fproject_5fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/types/base_types.pb.h"
#include "common/types/enums.pb.h"
#include "board/board_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2ftypes_2fproject_5fsettings_2eproto KIAPI_IMPORTEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct KIAPI_IMPORTEXPORT TableStruct_common_2ftypes_2fproject_5fsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
KIAPI_IMPORTEXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto;
namespace kiapi {
namespace common {
namespace project {
class NetClass;
struct NetClassDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetClassDefaultTypeInternal _NetClass_default_instance_;
class NetClassBoardSettings;
struct NetClassBoardSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetClassBoardSettingsDefaultTypeInternal _NetClassBoardSettings_default_instance_;
class NetClassSchematicSettings;
struct NetClassSchematicSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetClassSchematicSettingsDefaultTypeInternal _NetClassSchematicSettings_default_instance_;
class TextVariables;
struct TextVariablesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern TextVariablesDefaultTypeInternal _TextVariables_default_instance_;
class TextVariables_VariablesEntry_DoNotUse;
struct TextVariables_VariablesEntry_DoNotUseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern TextVariables_VariablesEntry_DoNotUseDefaultTypeInternal _TextVariables_VariablesEntry_DoNotUse_default_instance_;
}  // namespace project
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> KIAPI_IMPORTEXPORT ::kiapi::common::project::NetClass* Arena::CreateMaybeMessage<::kiapi::common::project::NetClass>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::project::NetClassBoardSettings* Arena::CreateMaybeMessage<::kiapi::common::project::NetClassBoardSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::project::NetClassSchematicSettings* Arena::CreateMaybeMessage<::kiapi::common::project::NetClassSchematicSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::project::TextVariables* Arena::CreateMaybeMessage<::kiapi::common::project::TextVariables>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kiapi {
namespace common {
namespace project {

enum NetClassType : int {
  NCT_UNKNOWN = 0,
  NCT_EXPLICIT = 1,
  NCT_IMPLICIT = 2,
  NetClassType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetClassType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool NetClassType_IsValid(int value);
constexpr NetClassType NetClassType_MIN = NCT_UNKNOWN;
constexpr NetClassType NetClassType_MAX = NCT_IMPLICIT;
constexpr int NetClassType_ARRAYSIZE = NetClassType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetClassType_descriptor();
template<typename T>
inline const std::string& NetClassType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetClassType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetClassType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetClassType_descriptor(), enum_t_value);
}
inline bool NetClassType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetClassType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetClassType>(
    NetClassType_descriptor(), name, value);
}
// ===================================================================

class KIAPI_IMPORTEXPORT NetClassBoardSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.project.NetClassBoardSettings) */ {
 public:
  inline NetClassBoardSettings() : NetClassBoardSettings(nullptr) {}
  ~NetClassBoardSettings() override;
  explicit constexpr NetClassBoardSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetClassBoardSettings(const NetClassBoardSettings& from);
  NetClassBoardSettings(NetClassBoardSettings&& from) noexcept
    : NetClassBoardSettings() {
    *this = ::std::move(from);
  }

  inline NetClassBoardSettings& operator=(const NetClassBoardSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetClassBoardSettings& operator=(NetClassBoardSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetClassBoardSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetClassBoardSettings* internal_default_instance() {
    return reinterpret_cast<const NetClassBoardSettings*>(
               &_NetClassBoardSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetClassBoardSettings& a, NetClassBoardSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(NetClassBoardSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetClassBoardSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetClassBoardSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetClassBoardSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetClassBoardSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetClassBoardSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetClassBoardSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.project.NetClassBoardSettings";
  }
  protected:
  explicit NetClassBoardSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearanceFieldNumber = 1,
    kTrackWidthFieldNumber = 2,
    kDiffPairTrackWidthFieldNumber = 3,
    kDiffPairGapFieldNumber = 4,
    kDiffPairViaGapFieldNumber = 5,
    kViaStackFieldNumber = 6,
    kMicroviaStackFieldNumber = 7,
    kColorFieldNumber = 8,
  };
  // optional .kiapi.common.types.Distance clearance = 1;
  bool has_clearance() const;
  private:
  bool _internal_has_clearance() const;
  public:
  void clear_clearance();
  const ::kiapi::common::types::Distance& clearance() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_clearance();
  ::kiapi::common::types::Distance* mutable_clearance();
  void set_allocated_clearance(::kiapi::common::types::Distance* clearance);
  private:
  const ::kiapi::common::types::Distance& _internal_clearance() const;
  ::kiapi::common::types::Distance* _internal_mutable_clearance();
  public:
  void unsafe_arena_set_allocated_clearance(
      ::kiapi::common::types::Distance* clearance);
  ::kiapi::common::types::Distance* unsafe_arena_release_clearance();

  // optional .kiapi.common.types.Distance track_width = 2;
  bool has_track_width() const;
  private:
  bool _internal_has_track_width() const;
  public:
  void clear_track_width();
  const ::kiapi::common::types::Distance& track_width() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_track_width();
  ::kiapi::common::types::Distance* mutable_track_width();
  void set_allocated_track_width(::kiapi::common::types::Distance* track_width);
  private:
  const ::kiapi::common::types::Distance& _internal_track_width() const;
  ::kiapi::common::types::Distance* _internal_mutable_track_width();
  public:
  void unsafe_arena_set_allocated_track_width(
      ::kiapi::common::types::Distance* track_width);
  ::kiapi::common::types::Distance* unsafe_arena_release_track_width();

  // optional .kiapi.common.types.Distance diff_pair_track_width = 3;
  bool has_diff_pair_track_width() const;
  private:
  bool _internal_has_diff_pair_track_width() const;
  public:
  void clear_diff_pair_track_width();
  const ::kiapi::common::types::Distance& diff_pair_track_width() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_diff_pair_track_width();
  ::kiapi::common::types::Distance* mutable_diff_pair_track_width();
  void set_allocated_diff_pair_track_width(::kiapi::common::types::Distance* diff_pair_track_width);
  private:
  const ::kiapi::common::types::Distance& _internal_diff_pair_track_width() const;
  ::kiapi::common::types::Distance* _internal_mutable_diff_pair_track_width();
  public:
  void unsafe_arena_set_allocated_diff_pair_track_width(
      ::kiapi::common::types::Distance* diff_pair_track_width);
  ::kiapi::common::types::Distance* unsafe_arena_release_diff_pair_track_width();

  // optional .kiapi.common.types.Distance diff_pair_gap = 4;
  bool has_diff_pair_gap() const;
  private:
  bool _internal_has_diff_pair_gap() const;
  public:
  void clear_diff_pair_gap();
  const ::kiapi::common::types::Distance& diff_pair_gap() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_diff_pair_gap();
  ::kiapi::common::types::Distance* mutable_diff_pair_gap();
  void set_allocated_diff_pair_gap(::kiapi::common::types::Distance* diff_pair_gap);
  private:
  const ::kiapi::common::types::Distance& _internal_diff_pair_gap() const;
  ::kiapi::common::types::Distance* _internal_mutable_diff_pair_gap();
  public:
  void unsafe_arena_set_allocated_diff_pair_gap(
      ::kiapi::common::types::Distance* diff_pair_gap);
  ::kiapi::common::types::Distance* unsafe_arena_release_diff_pair_gap();

  // optional .kiapi.common.types.Distance diff_pair_via_gap = 5;
  bool has_diff_pair_via_gap() const;
  private:
  bool _internal_has_diff_pair_via_gap() const;
  public:
  void clear_diff_pair_via_gap();
  const ::kiapi::common::types::Distance& diff_pair_via_gap() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_diff_pair_via_gap();
  ::kiapi::common::types::Distance* mutable_diff_pair_via_gap();
  void set_allocated_diff_pair_via_gap(::kiapi::common::types::Distance* diff_pair_via_gap);
  private:
  const ::kiapi::common::types::Distance& _internal_diff_pair_via_gap() const;
  ::kiapi::common::types::Distance* _internal_mutable_diff_pair_via_gap();
  public:
  void unsafe_arena_set_allocated_diff_pair_via_gap(
      ::kiapi::common::types::Distance* diff_pair_via_gap);
  ::kiapi::common::types::Distance* unsafe_arena_release_diff_pair_via_gap();

  // optional .kiapi.board.types.PadStack via_stack = 6;
  bool has_via_stack() const;
  private:
  bool _internal_has_via_stack() const;
  public:
  void clear_via_stack();
  const ::kiapi::board::types::PadStack& via_stack() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::PadStack* release_via_stack();
  ::kiapi::board::types::PadStack* mutable_via_stack();
  void set_allocated_via_stack(::kiapi::board::types::PadStack* via_stack);
  private:
  const ::kiapi::board::types::PadStack& _internal_via_stack() const;
  ::kiapi::board::types::PadStack* _internal_mutable_via_stack();
  public:
  void unsafe_arena_set_allocated_via_stack(
      ::kiapi::board::types::PadStack* via_stack);
  ::kiapi::board::types::PadStack* unsafe_arena_release_via_stack();

  // optional .kiapi.board.types.PadStack microvia_stack = 7;
  bool has_microvia_stack() const;
  private:
  bool _internal_has_microvia_stack() const;
  public:
  void clear_microvia_stack();
  const ::kiapi::board::types::PadStack& microvia_stack() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::PadStack* release_microvia_stack();
  ::kiapi::board::types::PadStack* mutable_microvia_stack();
  void set_allocated_microvia_stack(::kiapi::board::types::PadStack* microvia_stack);
  private:
  const ::kiapi::board::types::PadStack& _internal_microvia_stack() const;
  ::kiapi::board::types::PadStack* _internal_mutable_microvia_stack();
  public:
  void unsafe_arena_set_allocated_microvia_stack(
      ::kiapi::board::types::PadStack* microvia_stack);
  ::kiapi::board::types::PadStack* unsafe_arena_release_microvia_stack();

  // optional .kiapi.common.types.Color color = 8;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::kiapi::common::types::Color& color() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Color* release_color();
  ::kiapi::common::types::Color* mutable_color();
  void set_allocated_color(::kiapi::common::types::Color* color);
  private:
  const ::kiapi::common::types::Color& _internal_color() const;
  ::kiapi::common::types::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::kiapi::common::types::Color* color);
  ::kiapi::common::types::Color* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:kiapi.common.project.NetClassBoardSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::kiapi::common::types::Distance* clearance_;
  ::kiapi::common::types::Distance* track_width_;
  ::kiapi::common::types::Distance* diff_pair_track_width_;
  ::kiapi::common::types::Distance* diff_pair_gap_;
  ::kiapi::common::types::Distance* diff_pair_via_gap_;
  ::kiapi::board::types::PadStack* via_stack_;
  ::kiapi::board::types::PadStack* microvia_stack_;
  ::kiapi::common::types::Color* color_;
  friend struct ::TableStruct_common_2ftypes_2fproject_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT NetClassSchematicSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.project.NetClassSchematicSettings) */ {
 public:
  inline NetClassSchematicSettings() : NetClassSchematicSettings(nullptr) {}
  ~NetClassSchematicSettings() override;
  explicit constexpr NetClassSchematicSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetClassSchematicSettings(const NetClassSchematicSettings& from);
  NetClassSchematicSettings(NetClassSchematicSettings&& from) noexcept
    : NetClassSchematicSettings() {
    *this = ::std::move(from);
  }

  inline NetClassSchematicSettings& operator=(const NetClassSchematicSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetClassSchematicSettings& operator=(NetClassSchematicSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetClassSchematicSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetClassSchematicSettings* internal_default_instance() {
    return reinterpret_cast<const NetClassSchematicSettings*>(
               &_NetClassSchematicSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetClassSchematicSettings& a, NetClassSchematicSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(NetClassSchematicSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetClassSchematicSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetClassSchematicSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetClassSchematicSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetClassSchematicSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetClassSchematicSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetClassSchematicSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.project.NetClassSchematicSettings";
  }
  protected:
  explicit NetClassSchematicSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWireWidthFieldNumber = 1,
    kBusWidthFieldNumber = 2,
    kColorFieldNumber = 3,
    kLineStyleFieldNumber = 4,
  };
  // optional .kiapi.common.types.Distance wire_width = 1;
  bool has_wire_width() const;
  private:
  bool _internal_has_wire_width() const;
  public:
  void clear_wire_width();
  const ::kiapi::common::types::Distance& wire_width() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_wire_width();
  ::kiapi::common::types::Distance* mutable_wire_width();
  void set_allocated_wire_width(::kiapi::common::types::Distance* wire_width);
  private:
  const ::kiapi::common::types::Distance& _internal_wire_width() const;
  ::kiapi::common::types::Distance* _internal_mutable_wire_width();
  public:
  void unsafe_arena_set_allocated_wire_width(
      ::kiapi::common::types::Distance* wire_width);
  ::kiapi::common::types::Distance* unsafe_arena_release_wire_width();

  // optional .kiapi.common.types.Distance bus_width = 2;
  bool has_bus_width() const;
  private:
  bool _internal_has_bus_width() const;
  public:
  void clear_bus_width();
  const ::kiapi::common::types::Distance& bus_width() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_bus_width();
  ::kiapi::common::types::Distance* mutable_bus_width();
  void set_allocated_bus_width(::kiapi::common::types::Distance* bus_width);
  private:
  const ::kiapi::common::types::Distance& _internal_bus_width() const;
  ::kiapi::common::types::Distance* _internal_mutable_bus_width();
  public:
  void unsafe_arena_set_allocated_bus_width(
      ::kiapi::common::types::Distance* bus_width);
  ::kiapi::common::types::Distance* unsafe_arena_release_bus_width();

  // optional .kiapi.common.types.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::kiapi::common::types::Color& color() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Color* release_color();
  ::kiapi::common::types::Color* mutable_color();
  void set_allocated_color(::kiapi::common::types::Color* color);
  private:
  const ::kiapi::common::types::Color& _internal_color() const;
  ::kiapi::common::types::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::kiapi::common::types::Color* color);
  ::kiapi::common::types::Color* unsafe_arena_release_color();

  // optional .kiapi.common.types.StrokeLineStyle line_style = 4;
  bool has_line_style() const;
  private:
  bool _internal_has_line_style() const;
  public:
  void clear_line_style();
  ::kiapi::common::types::StrokeLineStyle line_style() const;
  void set_line_style(::kiapi::common::types::StrokeLineStyle value);
  private:
  ::kiapi::common::types::StrokeLineStyle _internal_line_style() const;
  void _internal_set_line_style(::kiapi::common::types::StrokeLineStyle value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.project.NetClassSchematicSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::kiapi::common::types::Distance* wire_width_;
  ::kiapi::common::types::Distance* bus_width_;
  ::kiapi::common::types::Color* color_;
  int line_style_;
  friend struct ::TableStruct_common_2ftypes_2fproject_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT NetClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.project.NetClass) */ {
 public:
  inline NetClass() : NetClass(nullptr) {}
  ~NetClass() override;
  explicit constexpr NetClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetClass(const NetClass& from);
  NetClass(NetClass&& from) noexcept
    : NetClass() {
    *this = ::std::move(from);
  }

  inline NetClass& operator=(const NetClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetClass& operator=(NetClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetClass* internal_default_instance() {
    return reinterpret_cast<const NetClass*>(
               &_NetClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetClass& a, NetClass& b) {
    a.Swap(&b);
  }
  inline void Swap(NetClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetClass& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.project.NetClass";
  }
  protected:
  explicit NetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstituentsFieldNumber = 6,
    kNameFieldNumber = 1,
    kBoardFieldNumber = 3,
    kSchematicFieldNumber = 4,
    kPriorityFieldNumber = 2,
    kTypeFieldNumber = 5,
  };
  // repeated string constituents = 6;
  int constituents_size() const;
  private:
  int _internal_constituents_size() const;
  public:
  void clear_constituents();
  const std::string& constituents(int index) const;
  std::string* mutable_constituents(int index);
  void set_constituents(int index, const std::string& value);
  void set_constituents(int index, std::string&& value);
  void set_constituents(int index, const char* value);
  void set_constituents(int index, const char* value, size_t size);
  std::string* add_constituents();
  void add_constituents(const std::string& value);
  void add_constituents(std::string&& value);
  void add_constituents(const char* value);
  void add_constituents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& constituents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_constituents();
  private:
  const std::string& _internal_constituents(int index) const;
  std::string* _internal_add_constituents();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .kiapi.common.project.NetClassBoardSettings board = 3;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::project::NetClassBoardSettings& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::project::NetClassBoardSettings* release_board();
  ::kiapi::common::project::NetClassBoardSettings* mutable_board();
  void set_allocated_board(::kiapi::common::project::NetClassBoardSettings* board);
  private:
  const ::kiapi::common::project::NetClassBoardSettings& _internal_board() const;
  ::kiapi::common::project::NetClassBoardSettings* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::project::NetClassBoardSettings* board);
  ::kiapi::common::project::NetClassBoardSettings* unsafe_arena_release_board();

  // optional .kiapi.common.project.NetClassSchematicSettings schematic = 4;
  bool has_schematic() const;
  private:
  bool _internal_has_schematic() const;
  public:
  void clear_schematic();
  const ::kiapi::common::project::NetClassSchematicSettings& schematic() const;
  PROTOBUF_NODISCARD ::kiapi::common::project::NetClassSchematicSettings* release_schematic();
  ::kiapi::common::project::NetClassSchematicSettings* mutable_schematic();
  void set_allocated_schematic(::kiapi::common::project::NetClassSchematicSettings* schematic);
  private:
  const ::kiapi::common::project::NetClassSchematicSettings& _internal_schematic() const;
  ::kiapi::common::project::NetClassSchematicSettings* _internal_mutable_schematic();
  public:
  void unsafe_arena_set_allocated_schematic(
      ::kiapi::common::project::NetClassSchematicSettings* schematic);
  ::kiapi::common::project::NetClassSchematicSettings* unsafe_arena_release_schematic();

  // optional int32 priority = 2;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // .kiapi.common.project.NetClassType type = 5;
  void clear_type();
  ::kiapi::common::project::NetClassType type() const;
  void set_type(::kiapi::common::project::NetClassType value);
  private:
  ::kiapi::common::project::NetClassType _internal_type() const;
  void _internal_set_type(::kiapi::common::project::NetClassType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.project.NetClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> constituents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::kiapi::common::project::NetClassBoardSettings* board_;
  ::kiapi::common::project::NetClassSchematicSettings* schematic_;
  int32_t priority_;
  int type_;
  friend struct ::TableStruct_common_2ftypes_2fproject_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class TextVariables_VariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextVariables_VariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextVariables_VariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TextVariables_VariablesEntry_DoNotUse();
  explicit constexpr TextVariables_VariablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TextVariables_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TextVariables_VariablesEntry_DoNotUse& other);
  static const TextVariables_VariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TextVariables_VariablesEntry_DoNotUse*>(&_TextVariables_VariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kiapi.common.project.TextVariables.VariablesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kiapi.common.project.TextVariables.VariablesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT TextVariables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.project.TextVariables) */ {
 public:
  inline TextVariables() : TextVariables(nullptr) {}
  ~TextVariables() override;
  explicit constexpr TextVariables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextVariables(const TextVariables& from);
  TextVariables(TextVariables&& from) noexcept
    : TextVariables() {
    *this = ::std::move(from);
  }

  inline TextVariables& operator=(const TextVariables& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextVariables& operator=(TextVariables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextVariables& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextVariables* internal_default_instance() {
    return reinterpret_cast<const TextVariables*>(
               &_TextVariables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TextVariables& a, TextVariables& b) {
    a.Swap(&b);
  }
  inline void Swap(TextVariables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextVariables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextVariables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextVariables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextVariables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextVariables& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextVariables* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.project.TextVariables";
  }
  protected:
  explicit TextVariables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // map<string, string> variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_variables();

  // @@protoc_insertion_point(class_scope:kiapi.common.project.TextVariables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TextVariables_VariablesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2ftypes_2fproject_5fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetClassBoardSettings

// optional .kiapi.common.types.Distance clearance = 1;
inline bool NetClassBoardSettings::_internal_has_clearance() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || clearance_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_clearance() const {
  return _internal_has_clearance();
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::_internal_clearance() const {
  const ::kiapi::common::types::Distance* p = clearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::clearance() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.clearance)
  return _internal_clearance();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_clearance(
    ::kiapi::common::types::Distance* clearance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance_);
  }
  clearance_ = clearance;
  if (clearance) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.clearance)
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::release_clearance() {
  _has_bits_[0] &= ~0x00000001u;
  ::kiapi::common::types::Distance* temp = clearance_;
  clearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::unsafe_arena_release_clearance() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.clearance)
  _has_bits_[0] &= ~0x00000001u;
  ::kiapi::common::types::Distance* temp = clearance_;
  clearance_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::_internal_mutable_clearance() {
  _has_bits_[0] |= 0x00000001u;
  if (clearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    clearance_ = p;
  }
  return clearance_;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::mutable_clearance() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_clearance();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.clearance)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_clearance(::kiapi::common::types::Distance* clearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance_);
  }
  if (clearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance));
    if (message_arena != submessage_arena) {
      clearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearance, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clearance_ = clearance;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.clearance)
}

// optional .kiapi.common.types.Distance track_width = 2;
inline bool NetClassBoardSettings::_internal_has_track_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || track_width_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_track_width() const {
  return _internal_has_track_width();
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::_internal_track_width() const {
  const ::kiapi::common::types::Distance* p = track_width_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::track_width() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.track_width)
  return _internal_track_width();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_track_width(
    ::kiapi::common::types::Distance* track_width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_width_);
  }
  track_width_ = track_width;
  if (track_width) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.track_width)
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::release_track_width() {
  _has_bits_[0] &= ~0x00000002u;
  ::kiapi::common::types::Distance* temp = track_width_;
  track_width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::unsafe_arena_release_track_width() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.track_width)
  _has_bits_[0] &= ~0x00000002u;
  ::kiapi::common::types::Distance* temp = track_width_;
  track_width_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::_internal_mutable_track_width() {
  _has_bits_[0] |= 0x00000002u;
  if (track_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    track_width_ = p;
  }
  return track_width_;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::mutable_track_width() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_track_width();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.track_width)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_track_width(::kiapi::common::types::Distance* track_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_width_);
  }
  if (track_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_width));
    if (message_arena != submessage_arena) {
      track_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_width, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  track_width_ = track_width;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.track_width)
}

// optional .kiapi.common.types.Distance diff_pair_track_width = 3;
inline bool NetClassBoardSettings::_internal_has_diff_pair_track_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || diff_pair_track_width_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_diff_pair_track_width() const {
  return _internal_has_diff_pair_track_width();
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::_internal_diff_pair_track_width() const {
  const ::kiapi::common::types::Distance* p = diff_pair_track_width_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::diff_pair_track_width() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.diff_pair_track_width)
  return _internal_diff_pair_track_width();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_diff_pair_track_width(
    ::kiapi::common::types::Distance* diff_pair_track_width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_track_width_);
  }
  diff_pair_track_width_ = diff_pair_track_width;
  if (diff_pair_track_width) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.diff_pair_track_width)
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::release_diff_pair_track_width() {
  _has_bits_[0] &= ~0x00000004u;
  ::kiapi::common::types::Distance* temp = diff_pair_track_width_;
  diff_pair_track_width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::unsafe_arena_release_diff_pair_track_width() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.diff_pair_track_width)
  _has_bits_[0] &= ~0x00000004u;
  ::kiapi::common::types::Distance* temp = diff_pair_track_width_;
  diff_pair_track_width_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::_internal_mutable_diff_pair_track_width() {
  _has_bits_[0] |= 0x00000004u;
  if (diff_pair_track_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    diff_pair_track_width_ = p;
  }
  return diff_pair_track_width_;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::mutable_diff_pair_track_width() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_diff_pair_track_width();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.diff_pair_track_width)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_diff_pair_track_width(::kiapi::common::types::Distance* diff_pair_track_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_track_width_);
  }
  if (diff_pair_track_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_track_width));
    if (message_arena != submessage_arena) {
      diff_pair_track_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diff_pair_track_width, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  diff_pair_track_width_ = diff_pair_track_width;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.diff_pair_track_width)
}

// optional .kiapi.common.types.Distance diff_pair_gap = 4;
inline bool NetClassBoardSettings::_internal_has_diff_pair_gap() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || diff_pair_gap_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_diff_pair_gap() const {
  return _internal_has_diff_pair_gap();
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::_internal_diff_pair_gap() const {
  const ::kiapi::common::types::Distance* p = diff_pair_gap_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::diff_pair_gap() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.diff_pair_gap)
  return _internal_diff_pair_gap();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_diff_pair_gap(
    ::kiapi::common::types::Distance* diff_pair_gap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_gap_);
  }
  diff_pair_gap_ = diff_pair_gap;
  if (diff_pair_gap) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.diff_pair_gap)
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::release_diff_pair_gap() {
  _has_bits_[0] &= ~0x00000008u;
  ::kiapi::common::types::Distance* temp = diff_pair_gap_;
  diff_pair_gap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::unsafe_arena_release_diff_pair_gap() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.diff_pair_gap)
  _has_bits_[0] &= ~0x00000008u;
  ::kiapi::common::types::Distance* temp = diff_pair_gap_;
  diff_pair_gap_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::_internal_mutable_diff_pair_gap() {
  _has_bits_[0] |= 0x00000008u;
  if (diff_pair_gap_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    diff_pair_gap_ = p;
  }
  return diff_pair_gap_;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::mutable_diff_pair_gap() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_diff_pair_gap();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.diff_pair_gap)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_diff_pair_gap(::kiapi::common::types::Distance* diff_pair_gap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_gap_);
  }
  if (diff_pair_gap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_gap));
    if (message_arena != submessage_arena) {
      diff_pair_gap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diff_pair_gap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  diff_pair_gap_ = diff_pair_gap;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.diff_pair_gap)
}

// optional .kiapi.common.types.Distance diff_pair_via_gap = 5;
inline bool NetClassBoardSettings::_internal_has_diff_pair_via_gap() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || diff_pair_via_gap_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_diff_pair_via_gap() const {
  return _internal_has_diff_pair_via_gap();
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::_internal_diff_pair_via_gap() const {
  const ::kiapi::common::types::Distance* p = diff_pair_via_gap_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& NetClassBoardSettings::diff_pair_via_gap() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.diff_pair_via_gap)
  return _internal_diff_pair_via_gap();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_diff_pair_via_gap(
    ::kiapi::common::types::Distance* diff_pair_via_gap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_via_gap_);
  }
  diff_pair_via_gap_ = diff_pair_via_gap;
  if (diff_pair_via_gap) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.diff_pair_via_gap)
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::release_diff_pair_via_gap() {
  _has_bits_[0] &= ~0x00000010u;
  ::kiapi::common::types::Distance* temp = diff_pair_via_gap_;
  diff_pair_via_gap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::unsafe_arena_release_diff_pair_via_gap() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.diff_pair_via_gap)
  _has_bits_[0] &= ~0x00000010u;
  ::kiapi::common::types::Distance* temp = diff_pair_via_gap_;
  diff_pair_via_gap_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::_internal_mutable_diff_pair_via_gap() {
  _has_bits_[0] |= 0x00000010u;
  if (diff_pair_via_gap_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    diff_pair_via_gap_ = p;
  }
  return diff_pair_via_gap_;
}
inline ::kiapi::common::types::Distance* NetClassBoardSettings::mutable_diff_pair_via_gap() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_diff_pair_via_gap();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.diff_pair_via_gap)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_diff_pair_via_gap(::kiapi::common::types::Distance* diff_pair_via_gap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_via_gap_);
  }
  if (diff_pair_via_gap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_pair_via_gap));
    if (message_arena != submessage_arena) {
      diff_pair_via_gap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diff_pair_via_gap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  diff_pair_via_gap_ = diff_pair_via_gap;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.diff_pair_via_gap)
}

// optional .kiapi.board.types.PadStack via_stack = 6;
inline bool NetClassBoardSettings::_internal_has_via_stack() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || via_stack_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_via_stack() const {
  return _internal_has_via_stack();
}
inline const ::kiapi::board::types::PadStack& NetClassBoardSettings::_internal_via_stack() const {
  const ::kiapi::board::types::PadStack* p = via_stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::PadStack&>(
      ::kiapi::board::types::_PadStack_default_instance_);
}
inline const ::kiapi::board::types::PadStack& NetClassBoardSettings::via_stack() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.via_stack)
  return _internal_via_stack();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_via_stack(
    ::kiapi::board::types::PadStack* via_stack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(via_stack_);
  }
  via_stack_ = via_stack;
  if (via_stack) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.via_stack)
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::release_via_stack() {
  _has_bits_[0] &= ~0x00000020u;
  ::kiapi::board::types::PadStack* temp = via_stack_;
  via_stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::unsafe_arena_release_via_stack() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.via_stack)
  _has_bits_[0] &= ~0x00000020u;
  ::kiapi::board::types::PadStack* temp = via_stack_;
  via_stack_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::_internal_mutable_via_stack() {
  _has_bits_[0] |= 0x00000020u;
  if (via_stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::PadStack>(GetArenaForAllocation());
    via_stack_ = p;
  }
  return via_stack_;
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::mutable_via_stack() {
  ::kiapi::board::types::PadStack* _msg = _internal_mutable_via_stack();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.via_stack)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_via_stack(::kiapi::board::types::PadStack* via_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(via_stack_);
  }
  if (via_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(via_stack));
    if (message_arena != submessage_arena) {
      via_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, via_stack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  via_stack_ = via_stack;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.via_stack)
}

// optional .kiapi.board.types.PadStack microvia_stack = 7;
inline bool NetClassBoardSettings::_internal_has_microvia_stack() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || microvia_stack_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_microvia_stack() const {
  return _internal_has_microvia_stack();
}
inline const ::kiapi::board::types::PadStack& NetClassBoardSettings::_internal_microvia_stack() const {
  const ::kiapi::board::types::PadStack* p = microvia_stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::PadStack&>(
      ::kiapi::board::types::_PadStack_default_instance_);
}
inline const ::kiapi::board::types::PadStack& NetClassBoardSettings::microvia_stack() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.microvia_stack)
  return _internal_microvia_stack();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_microvia_stack(
    ::kiapi::board::types::PadStack* microvia_stack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(microvia_stack_);
  }
  microvia_stack_ = microvia_stack;
  if (microvia_stack) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.microvia_stack)
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::release_microvia_stack() {
  _has_bits_[0] &= ~0x00000040u;
  ::kiapi::board::types::PadStack* temp = microvia_stack_;
  microvia_stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::unsafe_arena_release_microvia_stack() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.microvia_stack)
  _has_bits_[0] &= ~0x00000040u;
  ::kiapi::board::types::PadStack* temp = microvia_stack_;
  microvia_stack_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::_internal_mutable_microvia_stack() {
  _has_bits_[0] |= 0x00000040u;
  if (microvia_stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::PadStack>(GetArenaForAllocation());
    microvia_stack_ = p;
  }
  return microvia_stack_;
}
inline ::kiapi::board::types::PadStack* NetClassBoardSettings::mutable_microvia_stack() {
  ::kiapi::board::types::PadStack* _msg = _internal_mutable_microvia_stack();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.microvia_stack)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_microvia_stack(::kiapi::board::types::PadStack* microvia_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(microvia_stack_);
  }
  if (microvia_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(microvia_stack));
    if (message_arena != submessage_arena) {
      microvia_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, microvia_stack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  microvia_stack_ = microvia_stack;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.microvia_stack)
}

// optional .kiapi.common.types.Color color = 8;
inline bool NetClassBoardSettings::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool NetClassBoardSettings::has_color() const {
  return _internal_has_color();
}
inline const ::kiapi::common::types::Color& NetClassBoardSettings::_internal_color() const {
  const ::kiapi::common::types::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Color&>(
      ::kiapi::common::types::_Color_default_instance_);
}
inline const ::kiapi::common::types::Color& NetClassBoardSettings::color() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassBoardSettings.color)
  return _internal_color();
}
inline void NetClassBoardSettings::unsafe_arena_set_allocated_color(
    ::kiapi::common::types::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassBoardSettings.color)
}
inline ::kiapi::common::types::Color* NetClassBoardSettings::release_color() {
  _has_bits_[0] &= ~0x00000080u;
  ::kiapi::common::types::Color* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Color* NetClassBoardSettings::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassBoardSettings.color)
  _has_bits_[0] &= ~0x00000080u;
  ::kiapi::common::types::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Color* NetClassBoardSettings::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000080u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Color>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::kiapi::common::types::Color* NetClassBoardSettings::mutable_color() {
  ::kiapi::common::types::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassBoardSettings.color)
  return _msg;
}
inline void NetClassBoardSettings::set_allocated_color(::kiapi::common::types::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassBoardSettings.color)
}

// -------------------------------------------------------------------

// NetClassSchematicSettings

// optional .kiapi.common.types.Distance wire_width = 1;
inline bool NetClassSchematicSettings::_internal_has_wire_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || wire_width_ != nullptr);
  return value;
}
inline bool NetClassSchematicSettings::has_wire_width() const {
  return _internal_has_wire_width();
}
inline const ::kiapi::common::types::Distance& NetClassSchematicSettings::_internal_wire_width() const {
  const ::kiapi::common::types::Distance* p = wire_width_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& NetClassSchematicSettings::wire_width() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassSchematicSettings.wire_width)
  return _internal_wire_width();
}
inline void NetClassSchematicSettings::unsafe_arena_set_allocated_wire_width(
    ::kiapi::common::types::Distance* wire_width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wire_width_);
  }
  wire_width_ = wire_width;
  if (wire_width) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassSchematicSettings.wire_width)
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::release_wire_width() {
  _has_bits_[0] &= ~0x00000001u;
  ::kiapi::common::types::Distance* temp = wire_width_;
  wire_width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::unsafe_arena_release_wire_width() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassSchematicSettings.wire_width)
  _has_bits_[0] &= ~0x00000001u;
  ::kiapi::common::types::Distance* temp = wire_width_;
  wire_width_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::_internal_mutable_wire_width() {
  _has_bits_[0] |= 0x00000001u;
  if (wire_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    wire_width_ = p;
  }
  return wire_width_;
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::mutable_wire_width() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_wire_width();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassSchematicSettings.wire_width)
  return _msg;
}
inline void NetClassSchematicSettings::set_allocated_wire_width(::kiapi::common::types::Distance* wire_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wire_width_);
  }
  if (wire_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wire_width));
    if (message_arena != submessage_arena) {
      wire_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wire_width, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  wire_width_ = wire_width;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassSchematicSettings.wire_width)
}

// optional .kiapi.common.types.Distance bus_width = 2;
inline bool NetClassSchematicSettings::_internal_has_bus_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bus_width_ != nullptr);
  return value;
}
inline bool NetClassSchematicSettings::has_bus_width() const {
  return _internal_has_bus_width();
}
inline const ::kiapi::common::types::Distance& NetClassSchematicSettings::_internal_bus_width() const {
  const ::kiapi::common::types::Distance* p = bus_width_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& NetClassSchematicSettings::bus_width() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassSchematicSettings.bus_width)
  return _internal_bus_width();
}
inline void NetClassSchematicSettings::unsafe_arena_set_allocated_bus_width(
    ::kiapi::common::types::Distance* bus_width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_width_);
  }
  bus_width_ = bus_width;
  if (bus_width) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassSchematicSettings.bus_width)
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::release_bus_width() {
  _has_bits_[0] &= ~0x00000002u;
  ::kiapi::common::types::Distance* temp = bus_width_;
  bus_width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::unsafe_arena_release_bus_width() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassSchematicSettings.bus_width)
  _has_bits_[0] &= ~0x00000002u;
  ::kiapi::common::types::Distance* temp = bus_width_;
  bus_width_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::_internal_mutable_bus_width() {
  _has_bits_[0] |= 0x00000002u;
  if (bus_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    bus_width_ = p;
  }
  return bus_width_;
}
inline ::kiapi::common::types::Distance* NetClassSchematicSettings::mutable_bus_width() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_bus_width();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassSchematicSettings.bus_width)
  return _msg;
}
inline void NetClassSchematicSettings::set_allocated_bus_width(::kiapi::common::types::Distance* bus_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_width_);
  }
  if (bus_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_width));
    if (message_arena != submessage_arena) {
      bus_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_width, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bus_width_ = bus_width;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassSchematicSettings.bus_width)
}

// optional .kiapi.common.types.Color color = 3;
inline bool NetClassSchematicSettings::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool NetClassSchematicSettings::has_color() const {
  return _internal_has_color();
}
inline const ::kiapi::common::types::Color& NetClassSchematicSettings::_internal_color() const {
  const ::kiapi::common::types::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Color&>(
      ::kiapi::common::types::_Color_default_instance_);
}
inline const ::kiapi::common::types::Color& NetClassSchematicSettings::color() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassSchematicSettings.color)
  return _internal_color();
}
inline void NetClassSchematicSettings::unsafe_arena_set_allocated_color(
    ::kiapi::common::types::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClassSchematicSettings.color)
}
inline ::kiapi::common::types::Color* NetClassSchematicSettings::release_color() {
  _has_bits_[0] &= ~0x00000004u;
  ::kiapi::common::types::Color* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Color* NetClassSchematicSettings::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClassSchematicSettings.color)
  _has_bits_[0] &= ~0x00000004u;
  ::kiapi::common::types::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Color* NetClassSchematicSettings::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000004u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Color>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::kiapi::common::types::Color* NetClassSchematicSettings::mutable_color() {
  ::kiapi::common::types::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClassSchematicSettings.color)
  return _msg;
}
inline void NetClassSchematicSettings::set_allocated_color(::kiapi::common::types::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClassSchematicSettings.color)
}

// optional .kiapi.common.types.StrokeLineStyle line_style = 4;
inline bool NetClassSchematicSettings::_internal_has_line_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetClassSchematicSettings::has_line_style() const {
  return _internal_has_line_style();
}
inline void NetClassSchematicSettings::clear_line_style() {
  line_style_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::kiapi::common::types::StrokeLineStyle NetClassSchematicSettings::_internal_line_style() const {
  return static_cast< ::kiapi::common::types::StrokeLineStyle >(line_style_);
}
inline ::kiapi::common::types::StrokeLineStyle NetClassSchematicSettings::line_style() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClassSchematicSettings.line_style)
  return _internal_line_style();
}
inline void NetClassSchematicSettings::_internal_set_line_style(::kiapi::common::types::StrokeLineStyle value) {
  _has_bits_[0] |= 0x00000008u;
  line_style_ = value;
}
inline void NetClassSchematicSettings::set_line_style(::kiapi::common::types::StrokeLineStyle value) {
  _internal_set_line_style(value);
  // @@protoc_insertion_point(field_set:kiapi.common.project.NetClassSchematicSettings.line_style)
}

// -------------------------------------------------------------------

// NetClass

// string name = 1;
inline void NetClass::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetClass::name() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClass.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetClass::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.common.project.NetClass.name)
}
inline std::string* NetClass::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClass.name)
  return _s;
}
inline const std::string& NetClass::_internal_name() const {
  return name_.Get();
}
inline void NetClass::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetClass::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetClass::release_name() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClass.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetClass::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClass.name)
}

// optional int32 priority = 2;
inline bool NetClass::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetClass::has_priority() const {
  return _internal_has_priority();
}
inline void NetClass::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t NetClass::_internal_priority() const {
  return priority_;
}
inline int32_t NetClass::priority() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClass.priority)
  return _internal_priority();
}
inline void NetClass::_internal_set_priority(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  priority_ = value;
}
inline void NetClass::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:kiapi.common.project.NetClass.priority)
}

// optional .kiapi.common.project.NetClassBoardSettings board = 3;
inline bool NetClass::_internal_has_board() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || board_ != nullptr);
  return value;
}
inline bool NetClass::has_board() const {
  return _internal_has_board();
}
inline void NetClass::clear_board() {
  if (board_ != nullptr) board_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kiapi::common::project::NetClassBoardSettings& NetClass::_internal_board() const {
  const ::kiapi::common::project::NetClassBoardSettings* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::project::NetClassBoardSettings&>(
      ::kiapi::common::project::_NetClassBoardSettings_default_instance_);
}
inline const ::kiapi::common::project::NetClassBoardSettings& NetClass::board() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClass.board)
  return _internal_board();
}
inline void NetClass::unsafe_arena_set_allocated_board(
    ::kiapi::common::project::NetClassBoardSettings* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClass.board)
}
inline ::kiapi::common::project::NetClassBoardSettings* NetClass::release_board() {
  _has_bits_[0] &= ~0x00000001u;
  ::kiapi::common::project::NetClassBoardSettings* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::project::NetClassBoardSettings* NetClass::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClass.board)
  _has_bits_[0] &= ~0x00000001u;
  ::kiapi::common::project::NetClassBoardSettings* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::project::NetClassBoardSettings* NetClass::_internal_mutable_board() {
  _has_bits_[0] |= 0x00000001u;
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::project::NetClassBoardSettings>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::project::NetClassBoardSettings* NetClass::mutable_board() {
  ::kiapi::common::project::NetClassBoardSettings* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClass.board)
  return _msg;
}
inline void NetClass::set_allocated_board(::kiapi::common::project::NetClassBoardSettings* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete board_;
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::project::NetClassBoardSettings>::GetOwningArena(board);
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClass.board)
}

// optional .kiapi.common.project.NetClassSchematicSettings schematic = 4;
inline bool NetClass::_internal_has_schematic() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || schematic_ != nullptr);
  return value;
}
inline bool NetClass::has_schematic() const {
  return _internal_has_schematic();
}
inline void NetClass::clear_schematic() {
  if (schematic_ != nullptr) schematic_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::kiapi::common::project::NetClassSchematicSettings& NetClass::_internal_schematic() const {
  const ::kiapi::common::project::NetClassSchematicSettings* p = schematic_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::project::NetClassSchematicSettings&>(
      ::kiapi::common::project::_NetClassSchematicSettings_default_instance_);
}
inline const ::kiapi::common::project::NetClassSchematicSettings& NetClass::schematic() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClass.schematic)
  return _internal_schematic();
}
inline void NetClass::unsafe_arena_set_allocated_schematic(
    ::kiapi::common::project::NetClassSchematicSettings* schematic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schematic_);
  }
  schematic_ = schematic;
  if (schematic) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.project.NetClass.schematic)
}
inline ::kiapi::common::project::NetClassSchematicSettings* NetClass::release_schematic() {
  _has_bits_[0] &= ~0x00000002u;
  ::kiapi::common::project::NetClassSchematicSettings* temp = schematic_;
  schematic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::project::NetClassSchematicSettings* NetClass::unsafe_arena_release_schematic() {
  // @@protoc_insertion_point(field_release:kiapi.common.project.NetClass.schematic)
  _has_bits_[0] &= ~0x00000002u;
  ::kiapi::common::project::NetClassSchematicSettings* temp = schematic_;
  schematic_ = nullptr;
  return temp;
}
inline ::kiapi::common::project::NetClassSchematicSettings* NetClass::_internal_mutable_schematic() {
  _has_bits_[0] |= 0x00000002u;
  if (schematic_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::project::NetClassSchematicSettings>(GetArenaForAllocation());
    schematic_ = p;
  }
  return schematic_;
}
inline ::kiapi::common::project::NetClassSchematicSettings* NetClass::mutable_schematic() {
  ::kiapi::common::project::NetClassSchematicSettings* _msg = _internal_mutable_schematic();
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClass.schematic)
  return _msg;
}
inline void NetClass::set_allocated_schematic(::kiapi::common::project::NetClassSchematicSettings* schematic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete schematic_;
  }
  if (schematic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::project::NetClassSchematicSettings>::GetOwningArena(schematic);
    if (message_arena != submessage_arena) {
      schematic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schematic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  schematic_ = schematic;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.project.NetClass.schematic)
}

// .kiapi.common.project.NetClassType type = 5;
inline void NetClass::clear_type() {
  type_ = 0;
}
inline ::kiapi::common::project::NetClassType NetClass::_internal_type() const {
  return static_cast< ::kiapi::common::project::NetClassType >(type_);
}
inline ::kiapi::common::project::NetClassType NetClass::type() const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClass.type)
  return _internal_type();
}
inline void NetClass::_internal_set_type(::kiapi::common::project::NetClassType value) {
  
  type_ = value;
}
inline void NetClass::set_type(::kiapi::common::project::NetClassType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.common.project.NetClass.type)
}

// repeated string constituents = 6;
inline int NetClass::_internal_constituents_size() const {
  return constituents_.size();
}
inline int NetClass::constituents_size() const {
  return _internal_constituents_size();
}
inline void NetClass::clear_constituents() {
  constituents_.Clear();
}
inline std::string* NetClass::add_constituents() {
  std::string* _s = _internal_add_constituents();
  // @@protoc_insertion_point(field_add_mutable:kiapi.common.project.NetClass.constituents)
  return _s;
}
inline const std::string& NetClass::_internal_constituents(int index) const {
  return constituents_.Get(index);
}
inline const std::string& NetClass::constituents(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.common.project.NetClass.constituents)
  return _internal_constituents(index);
}
inline std::string* NetClass::mutable_constituents(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.common.project.NetClass.constituents)
  return constituents_.Mutable(index);
}
inline void NetClass::set_constituents(int index, const std::string& value) {
  constituents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kiapi.common.project.NetClass.constituents)
}
inline void NetClass::set_constituents(int index, std::string&& value) {
  constituents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kiapi.common.project.NetClass.constituents)
}
inline void NetClass::set_constituents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  constituents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kiapi.common.project.NetClass.constituents)
}
inline void NetClass::set_constituents(int index, const char* value, size_t size) {
  constituents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kiapi.common.project.NetClass.constituents)
}
inline std::string* NetClass::_internal_add_constituents() {
  return constituents_.Add();
}
inline void NetClass::add_constituents(const std::string& value) {
  constituents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kiapi.common.project.NetClass.constituents)
}
inline void NetClass::add_constituents(std::string&& value) {
  constituents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kiapi.common.project.NetClass.constituents)
}
inline void NetClass::add_constituents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  constituents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kiapi.common.project.NetClass.constituents)
}
inline void NetClass::add_constituents(const char* value, size_t size) {
  constituents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kiapi.common.project.NetClass.constituents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetClass::constituents() const {
  // @@protoc_insertion_point(field_list:kiapi.common.project.NetClass.constituents)
  return constituents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetClass::mutable_constituents() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.common.project.NetClass.constituents)
  return &constituents_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TextVariables

// map<string, string> variables = 1;
inline int TextVariables::_internal_variables_size() const {
  return variables_.size();
}
inline int TextVariables::variables_size() const {
  return _internal_variables_size();
}
inline void TextVariables::clear_variables() {
  variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TextVariables::_internal_variables() const {
  return variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TextVariables::variables() const {
  // @@protoc_insertion_point(field_map:kiapi.common.project.TextVariables.variables)
  return _internal_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TextVariables::_internal_mutable_variables() {
  return variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TextVariables::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:kiapi.common.project.TextVariables.variables)
  return _internal_mutable_variables();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace project
}  // namespace common
}  // namespace kiapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kiapi::common::project::NetClassType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::common::project::NetClassType>() {
  return ::kiapi::common::project::NetClassType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2ftypes_2fproject_5fsettings_2eproto
