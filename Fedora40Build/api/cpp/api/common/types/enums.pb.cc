// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/types/enums.proto

#include "common/types/enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace common {
namespace types {
}  // namespace types
}  // namespace common
}  // namespace kiapi
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2ftypes_2fenums_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2ftypes_2fenums_2eproto = nullptr;
const uint32_t TableStruct_common_2ftypes_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_common_2ftypes_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030common/types/enums.proto\022\022kiapi.common"
  ".types*\303\007\n\017KiCadObjectType\022\017\n\013KOT_UNKNOW"
  "N\020\000\022\025\n\021KOT_PCB_FOOTPRINT\020\001\022\017\n\013KOT_PCB_PA"
  "D\020\002\022\021\n\rKOT_PCB_SHAPE\020\003\022\033\n\027KOT_PCB_REFERE"
  "NCE_IMAGE\020\004\022\021\n\rKOT_PCB_FIELD\020\005\022\025\n\021KOT_PC"
  "B_GENERATOR\020\006\022\020\n\014KOT_PCB_TEXT\020\007\022\023\n\017KOT_P"
  "CB_TEXTBOX\020\010\022\021\n\rKOT_PCB_TABLE\020\t\022\025\n\021KOT_P"
  "CB_TABLECELL\020\n\022\021\n\rKOT_PCB_TRACE\020\013\022\017\n\013KOT"
  "_PCB_VIA\020\014\022\017\n\013KOT_PCB_ARC\020\r\022\022\n\016KOT_PCB_M"
  "ARKER\020\016\022\025\n\021KOT_PCB_DIMENSION\020\017\022\020\n\014KOT_PC"
  "B_ZONE\020\020\022\021\n\rKOT_PCB_GROUP\020\021\022\022\n\016KOT_SCH_M"
  "ARKER\020\022\022\024\n\020KOT_SCH_JUNCTION\020\023\022\026\n\022KOT_SCH"
  "_NO_CONNECT\020\024\022\032\n\026KOT_SCH_BUS_WIRE_ENTRY\020"
  "\025\022\031\n\025KOT_SCH_BUS_BUS_ENTRY\020\026\022\020\n\014KOT_SCH_"
  "LINE\020\027\022\021\n\rKOT_SCH_SHAPE\020\030\022\022\n\016KOT_SCH_BIT"
  "MAP\020\031\022\023\n\017KOT_SCH_TEXTBOX\020\032\022\020\n\014KOT_SCH_TE"
  "XT\020\033\022\021\n\rKOT_SCH_TABLE\020\034\022\025\n\021KOT_SCH_TABLE"
  "CELL\020\035\022\021\n\rKOT_SCH_LABEL\020\036\022\030\n\024KOT_SCH_GLO"
  "BAL_LABEL\020\037\022\026\n\022KOT_SCH_HIER_LABEL\020 \022\033\n\027K"
  "OT_SCH_DIRECTIVE_LABEL\020!\022\021\n\rKOT_SCH_FIEL"
  "D\020\"\022\022\n\016KOT_SCH_SYMBOL\020#\022\025\n\021KOT_SCH_SHEET"
  "_PIN\020$\022\021\n\rKOT_SCH_SHEET\020%\022\017\n\013KOT_SCH_PIN"
  "\020&\022\022\n\016KOT_LIB_SYMBOL\020\'\022\020\n\014KOT_WSG_LINE\020-"
  "\022\020\n\014KOT_WSG_RECT\020.\022\020\n\014KOT_WSG_POLY\020/\022\020\n\014"
  "KOT_WSG_TEXT\0200\022\022\n\016KOT_WSG_BITMAP\0201\022\020\n\014KO"
  "T_WSG_PAGE\0202*e\n\023HorizontalAlignment\022\016\n\nH"
  "A_UNKNOWN\020\000\022\013\n\007HA_LEFT\020\001\022\r\n\tHA_CENTER\020\002\022"
  "\014\n\010HA_RIGHT\020\003\022\024\n\020HA_INDETERMINATE\020\004*c\n\021V"
  "erticalAlignment\022\016\n\nVA_UNKNOWN\020\000\022\n\n\006VA_T"
  "OP\020\001\022\r\n\tVA_CENTER\020\002\022\r\n\tVA_BOTTOM\020\003\022\024\n\020VA"
  "_INDETERMINATE\020\004*\202\001\n\017StrokeLineStyle\022\017\n\013"
  "SLS_UNKNOWN\020\000\022\017\n\013SLS_DEFAULT\020\001\022\r\n\tSLS_SO"
  "LID\020\002\022\014\n\010SLS_DASH\020\003\022\013\n\007SLS_DOT\020\004\022\017\n\013SLS_"
  "DASHDOT\020\005\022\022\n\016SLS_DASHDOTDOT\020\006b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2ftypes_2fenums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ftypes_2fenums_2eproto = {
  false, false, 1357, descriptor_table_protodef_common_2ftypes_2fenums_2eproto, "common/types/enums.proto", 
  &descriptor_table_common_2ftypes_2fenums_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_common_2ftypes_2fenums_2eproto::offsets,
  nullptr, file_level_enum_descriptors_common_2ftypes_2fenums_2eproto, file_level_service_descriptors_common_2ftypes_2fenums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2ftypes_2fenums_2eproto_getter() {
  return &descriptor_table_common_2ftypes_2fenums_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2ftypes_2fenums_2eproto(&descriptor_table_common_2ftypes_2fenums_2eproto);
namespace kiapi {
namespace common {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KiCadObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fenums_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fenums_2eproto[0];
}
bool KiCadObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HorizontalAlignment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fenums_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fenums_2eproto[1];
}
bool HorizontalAlignment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VerticalAlignment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fenums_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fenums_2eproto[2];
}
bool VerticalAlignment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StrokeLineStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fenums_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fenums_2eproto[3];
}
bool StrokeLineStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
