// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/types/project_settings.proto

#include "common/types/project_settings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace common {
namespace project {
constexpr NetClassBoardSettings::NetClassBoardSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clearance_(nullptr)
  , track_width_(nullptr)
  , diff_pair_track_width_(nullptr)
  , diff_pair_gap_(nullptr)
  , diff_pair_via_gap_(nullptr)
  , via_stack_(nullptr)
  , microvia_stack_(nullptr)
  , color_(nullptr){}
struct NetClassBoardSettingsDefaultTypeInternal {
  constexpr NetClassBoardSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetClassBoardSettingsDefaultTypeInternal() {}
  union {
    NetClassBoardSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetClassBoardSettingsDefaultTypeInternal _NetClassBoardSettings_default_instance_;
constexpr NetClassSchematicSettings::NetClassSchematicSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wire_width_(nullptr)
  , bus_width_(nullptr)
  , color_(nullptr)
  , line_style_(0)
{}
struct NetClassSchematicSettingsDefaultTypeInternal {
  constexpr NetClassSchematicSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetClassSchematicSettingsDefaultTypeInternal() {}
  union {
    NetClassSchematicSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetClassSchematicSettingsDefaultTypeInternal _NetClassSchematicSettings_default_instance_;
constexpr NetClass::NetClass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constituents_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , board_(nullptr)
  , schematic_(nullptr)
  , priority_(0)
  , type_(0)
{}
struct NetClassDefaultTypeInternal {
  constexpr NetClassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetClassDefaultTypeInternal() {}
  union {
    NetClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetClassDefaultTypeInternal _NetClass_default_instance_;
constexpr TextVariables_VariablesEntry_DoNotUse::TextVariables_VariablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TextVariables_VariablesEntry_DoNotUseDefaultTypeInternal {
  constexpr TextVariables_VariablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextVariables_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TextVariables_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextVariables_VariablesEntry_DoNotUseDefaultTypeInternal _TextVariables_VariablesEntry_DoNotUse_default_instance_;
constexpr TextVariables::TextVariables(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TextVariablesDefaultTypeInternal {
  constexpr TextVariablesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextVariablesDefaultTypeInternal() {}
  union {
    TextVariables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextVariablesDefaultTypeInternal _TextVariables_default_instance_;
}  // namespace project
}  // namespace common
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2ftypes_2fproject_5fsettings_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2ftypes_2fproject_5fsettings_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2ftypes_2fproject_5fsettings_2eproto = nullptr;

const uint32_t TableStruct_common_2ftypes_2fproject_5fsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, clearance_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, track_width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, diff_pair_track_width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, diff_pair_gap_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, diff_pair_via_gap_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, via_stack_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, microvia_stack_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassBoardSettings, color_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassSchematicSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassSchematicSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassSchematicSettings, wire_width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassSchematicSettings, bus_width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassSchematicSettings, color_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClassSchematicSettings, line_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, name_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, priority_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, schematic_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::NetClass, constituents_),
  ~0u,
  2,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::TextVariables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::project::TextVariables, variables_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::kiapi::common::project::NetClassBoardSettings)},
  { 22, 32, -1, sizeof(::kiapi::common::project::NetClassSchematicSettings)},
  { 36, 48, -1, sizeof(::kiapi::common::project::NetClass)},
  { 54, 62, -1, sizeof(::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse)},
  { 64, -1, -1, sizeof(::kiapi::common::project::TextVariables)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::project::_NetClassBoardSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::project::_NetClassSchematicSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::project::_NetClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::project::_TextVariables_VariablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::project::_TextVariables_default_instance_),
};

const char descriptor_table_protodef_common_2ftypes_2fproject_5fsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#common/types/project_settings.proto\022\024k"
  "iapi.common.project\032\035common/types/base_t"
  "ypes.proto\032\030common/types/enums.proto\032\027bo"
  "ard/board_types.proto\"\350\004\n\025NetClassBoardS"
  "ettings\0224\n\tclearance\030\001 \001(\0132\034.kiapi.commo"
  "n.types.DistanceH\000\210\001\001\0226\n\013track_width\030\002 \001"
  "(\0132\034.kiapi.common.types.DistanceH\001\210\001\001\022@\n"
  "\025diff_pair_track_width\030\003 \001(\0132\034.kiapi.com"
  "mon.types.DistanceH\002\210\001\001\0228\n\rdiff_pair_gap"
  "\030\004 \001(\0132\034.kiapi.common.types.DistanceH\003\210\001"
  "\001\022<\n\021diff_pair_via_gap\030\005 \001(\0132\034.kiapi.com"
  "mon.types.DistanceH\004\210\001\001\0223\n\tvia_stack\030\006 \001"
  "(\0132\033.kiapi.board.types.PadStackH\005\210\001\001\0228\n\016"
  "microvia_stack\030\007 \001(\0132\033.kiapi.board.types"
  ".PadStackH\006\210\001\001\022-\n\005color\030\010 \001(\0132\031.kiapi.co"
  "mmon.types.ColorH\007\210\001\001B\014\n\n_clearanceB\016\n\014_"
  "track_widthB\030\n\026_diff_pair_track_widthB\020\n"
  "\016_diff_pair_gapB\024\n\022_diff_pair_via_gapB\014\n"
  "\n_via_stackB\021\n\017_microvia_stackB\010\n\006_color"
  "\"\253\002\n\031NetClassSchematicSettings\0225\n\nwire_w"
  "idth\030\001 \001(\0132\034.kiapi.common.types.Distance"
  "H\000\210\001\001\0224\n\tbus_width\030\002 \001(\0132\034.kiapi.common."
  "types.DistanceH\001\210\001\001\022-\n\005color\030\003 \001(\0132\031.kia"
  "pi.common.types.ColorH\002\210\001\001\022<\n\nline_style"
  "\030\004 \001(\0162#.kiapi.common.types.StrokeLineSt"
  "yleH\003\210\001\001B\r\n\013_wire_widthB\014\n\n_bus_widthB\010\n"
  "\006_colorB\r\n\013_line_style\"\246\002\n\010NetClass\022\014\n\004n"
  "ame\030\001 \001(\t\022\025\n\010priority\030\002 \001(\005H\000\210\001\001\022\?\n\005boar"
  "d\030\003 \001(\0132+.kiapi.common.project.NetClassB"
  "oardSettingsH\001\210\001\001\022G\n\tschematic\030\004 \001(\0132/.k"
  "iapi.common.project.NetClassSchematicSet"
  "tingsH\002\210\001\001\0220\n\004type\030\005 \001(\0162\".kiapi.common."
  "project.NetClassType\022\024\n\014constituents\030\006 \003"
  "(\tB\013\n\t_priorityB\010\n\006_boardB\014\n\n_schematic\""
  "\210\001\n\rTextVariables\022E\n\tvariables\030\001 \003(\01322.k"
  "iapi.common.project.TextVariables.Variab"
  "lesEntry\0320\n\016VariablesEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001*C\n\014NetClassType\022\017\n\013NC"
  "T_UNKNOWN\020\000\022\020\n\014NCT_EXPLICIT\020\001\022\020\n\014NCT_IMP"
  "LICIT\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_deps[3] = {
  &::descriptor_table_board_2fboard_5ftypes_2eproto,
  &::descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto,
  &::descriptor_table_common_2ftypes_2fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto = {
  false, false, 1575, descriptor_table_protodef_common_2ftypes_2fproject_5fsettings_2eproto, "common/types/project_settings.proto", 
  &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_once, descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_common_2ftypes_2fproject_5fsettings_2eproto::offsets,
  file_level_metadata_common_2ftypes_2fproject_5fsettings_2eproto, file_level_enum_descriptors_common_2ftypes_2fproject_5fsettings_2eproto, file_level_service_descriptors_common_2ftypes_2fproject_5fsettings_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_getter() {
  return &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2ftypes_2fproject_5fsettings_2eproto(&descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto);
namespace kiapi {
namespace common {
namespace project {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetClassType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fproject_5fsettings_2eproto[0];
}
bool NetClassType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NetClassBoardSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<NetClassBoardSettings>()._has_bits_);
  static const ::kiapi::common::types::Distance& clearance(const NetClassBoardSettings* msg);
  static void set_has_clearance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::kiapi::common::types::Distance& track_width(const NetClassBoardSettings* msg);
  static void set_has_track_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::kiapi::common::types::Distance& diff_pair_track_width(const NetClassBoardSettings* msg);
  static void set_has_diff_pair_track_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::kiapi::common::types::Distance& diff_pair_gap(const NetClassBoardSettings* msg);
  static void set_has_diff_pair_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::kiapi::common::types::Distance& diff_pair_via_gap(const NetClassBoardSettings* msg);
  static void set_has_diff_pair_via_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::kiapi::board::types::PadStack& via_stack(const NetClassBoardSettings* msg);
  static void set_has_via_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::kiapi::board::types::PadStack& microvia_stack(const NetClassBoardSettings* msg);
  static void set_has_microvia_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::kiapi::common::types::Color& color(const NetClassBoardSettings* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::kiapi::common::types::Distance&
NetClassBoardSettings::_Internal::clearance(const NetClassBoardSettings* msg) {
  return *msg->clearance_;
}
const ::kiapi::common::types::Distance&
NetClassBoardSettings::_Internal::track_width(const NetClassBoardSettings* msg) {
  return *msg->track_width_;
}
const ::kiapi::common::types::Distance&
NetClassBoardSettings::_Internal::diff_pair_track_width(const NetClassBoardSettings* msg) {
  return *msg->diff_pair_track_width_;
}
const ::kiapi::common::types::Distance&
NetClassBoardSettings::_Internal::diff_pair_gap(const NetClassBoardSettings* msg) {
  return *msg->diff_pair_gap_;
}
const ::kiapi::common::types::Distance&
NetClassBoardSettings::_Internal::diff_pair_via_gap(const NetClassBoardSettings* msg) {
  return *msg->diff_pair_via_gap_;
}
const ::kiapi::board::types::PadStack&
NetClassBoardSettings::_Internal::via_stack(const NetClassBoardSettings* msg) {
  return *msg->via_stack_;
}
const ::kiapi::board::types::PadStack&
NetClassBoardSettings::_Internal::microvia_stack(const NetClassBoardSettings* msg) {
  return *msg->microvia_stack_;
}
const ::kiapi::common::types::Color&
NetClassBoardSettings::_Internal::color(const NetClassBoardSettings* msg) {
  return *msg->color_;
}
void NetClassBoardSettings::clear_clearance() {
  if (clearance_ != nullptr) clearance_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void NetClassBoardSettings::clear_track_width() {
  if (track_width_ != nullptr) track_width_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void NetClassBoardSettings::clear_diff_pair_track_width() {
  if (diff_pair_track_width_ != nullptr) diff_pair_track_width_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void NetClassBoardSettings::clear_diff_pair_gap() {
  if (diff_pair_gap_ != nullptr) diff_pair_gap_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void NetClassBoardSettings::clear_diff_pair_via_gap() {
  if (diff_pair_via_gap_ != nullptr) diff_pair_via_gap_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void NetClassBoardSettings::clear_via_stack() {
  if (via_stack_ != nullptr) via_stack_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void NetClassBoardSettings::clear_microvia_stack() {
  if (microvia_stack_ != nullptr) microvia_stack_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void NetClassBoardSettings::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
NetClassBoardSettings::NetClassBoardSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.project.NetClassBoardSettings)
}
NetClassBoardSettings::NetClassBoardSettings(const NetClassBoardSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clearance()) {
    clearance_ = new ::kiapi::common::types::Distance(*from.clearance_);
  } else {
    clearance_ = nullptr;
  }
  if (from._internal_has_track_width()) {
    track_width_ = new ::kiapi::common::types::Distance(*from.track_width_);
  } else {
    track_width_ = nullptr;
  }
  if (from._internal_has_diff_pair_track_width()) {
    diff_pair_track_width_ = new ::kiapi::common::types::Distance(*from.diff_pair_track_width_);
  } else {
    diff_pair_track_width_ = nullptr;
  }
  if (from._internal_has_diff_pair_gap()) {
    diff_pair_gap_ = new ::kiapi::common::types::Distance(*from.diff_pair_gap_);
  } else {
    diff_pair_gap_ = nullptr;
  }
  if (from._internal_has_diff_pair_via_gap()) {
    diff_pair_via_gap_ = new ::kiapi::common::types::Distance(*from.diff_pair_via_gap_);
  } else {
    diff_pair_via_gap_ = nullptr;
  }
  if (from._internal_has_via_stack()) {
    via_stack_ = new ::kiapi::board::types::PadStack(*from.via_stack_);
  } else {
    via_stack_ = nullptr;
  }
  if (from._internal_has_microvia_stack()) {
    microvia_stack_ = new ::kiapi::board::types::PadStack(*from.microvia_stack_);
  } else {
    microvia_stack_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::kiapi::common::types::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.project.NetClassBoardSettings)
}

inline void NetClassBoardSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clearance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&clearance_)) + sizeof(color_));
}

NetClassBoardSettings::~NetClassBoardSettings() {
  // @@protoc_insertion_point(destructor:kiapi.common.project.NetClassBoardSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetClassBoardSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete clearance_;
  if (this != internal_default_instance()) delete track_width_;
  if (this != internal_default_instance()) delete diff_pair_track_width_;
  if (this != internal_default_instance()) delete diff_pair_gap_;
  if (this != internal_default_instance()) delete diff_pair_via_gap_;
  if (this != internal_default_instance()) delete via_stack_;
  if (this != internal_default_instance()) delete microvia_stack_;
  if (this != internal_default_instance()) delete color_;
}

void NetClassBoardSettings::ArenaDtor(void* object) {
  NetClassBoardSettings* _this = reinterpret_cast< NetClassBoardSettings* >(object);
  (void)_this;
}
void NetClassBoardSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetClassBoardSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetClassBoardSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.project.NetClassBoardSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(clearance_ != nullptr);
      clearance_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(track_width_ != nullptr);
      track_width_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(diff_pair_track_width_ != nullptr);
      diff_pair_track_width_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(diff_pair_gap_ != nullptr);
      diff_pair_gap_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(diff_pair_via_gap_ != nullptr);
      diff_pair_via_gap_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(via_stack_ != nullptr);
      via_stack_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(microvia_stack_ != nullptr);
      microvia_stack_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetClassBoardSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .kiapi.common.types.Distance clearance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.Distance track_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.Distance diff_pair_track_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff_pair_track_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.Distance diff_pair_gap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff_pair_gap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.Distance diff_pair_via_gap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff_pair_via_gap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.board.types.PadStack via_stack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_via_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.board.types.PadStack microvia_stack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_microvia_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.Color color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetClassBoardSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.project.NetClassBoardSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .kiapi.common.types.Distance clearance = 1;
  if (_internal_has_clearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clearance(this), target, stream);
  }

  // optional .kiapi.common.types.Distance track_width = 2;
  if (_internal_has_track_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::track_width(this), target, stream);
  }

  // optional .kiapi.common.types.Distance diff_pair_track_width = 3;
  if (_internal_has_diff_pair_track_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::diff_pair_track_width(this), target, stream);
  }

  // optional .kiapi.common.types.Distance diff_pair_gap = 4;
  if (_internal_has_diff_pair_gap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::diff_pair_gap(this), target, stream);
  }

  // optional .kiapi.common.types.Distance diff_pair_via_gap = 5;
  if (_internal_has_diff_pair_via_gap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::diff_pair_via_gap(this), target, stream);
  }

  // optional .kiapi.board.types.PadStack via_stack = 6;
  if (_internal_has_via_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::via_stack(this), target, stream);
  }

  // optional .kiapi.board.types.PadStack microvia_stack = 7;
  if (_internal_has_microvia_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::microvia_stack(this), target, stream);
  }

  // optional .kiapi.common.types.Color color = 8;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.project.NetClassBoardSettings)
  return target;
}

size_t NetClassBoardSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.project.NetClassBoardSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .kiapi.common.types.Distance clearance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clearance_);
    }

    // optional .kiapi.common.types.Distance track_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *track_width_);
    }

    // optional .kiapi.common.types.Distance diff_pair_track_width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diff_pair_track_width_);
    }

    // optional .kiapi.common.types.Distance diff_pair_gap = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diff_pair_gap_);
    }

    // optional .kiapi.common.types.Distance diff_pair_via_gap = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diff_pair_via_gap_);
    }

    // optional .kiapi.board.types.PadStack via_stack = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *via_stack_);
    }

    // optional .kiapi.board.types.PadStack microvia_stack = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *microvia_stack_);
    }

    // optional .kiapi.common.types.Color color = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetClassBoardSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetClassBoardSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetClassBoardSettings::GetClassData() const { return &_class_data_; }

void NetClassBoardSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetClassBoardSettings *>(to)->MergeFrom(
      static_cast<const NetClassBoardSettings &>(from));
}


void NetClassBoardSettings::MergeFrom(const NetClassBoardSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.project.NetClassBoardSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_clearance()->::kiapi::common::types::Distance::MergeFrom(from._internal_clearance());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_track_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_track_width());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_diff_pair_track_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_diff_pair_track_width());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_diff_pair_gap()->::kiapi::common::types::Distance::MergeFrom(from._internal_diff_pair_gap());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_diff_pair_via_gap()->::kiapi::common::types::Distance::MergeFrom(from._internal_diff_pair_via_gap());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_via_stack()->::kiapi::board::types::PadStack::MergeFrom(from._internal_via_stack());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_microvia_stack()->::kiapi::board::types::PadStack::MergeFrom(from._internal_microvia_stack());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_color()->::kiapi::common::types::Color::MergeFrom(from._internal_color());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetClassBoardSettings::CopyFrom(const NetClassBoardSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.project.NetClassBoardSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetClassBoardSettings::IsInitialized() const {
  return true;
}

void NetClassBoardSettings::InternalSwap(NetClassBoardSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetClassBoardSettings, color_)
      + sizeof(NetClassBoardSettings::color_)
      - PROTOBUF_FIELD_OFFSET(NetClassBoardSettings, clearance_)>(
          reinterpret_cast<char*>(&clearance_),
          reinterpret_cast<char*>(&other->clearance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetClassBoardSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_getter, &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_once,
      file_level_metadata_common_2ftypes_2fproject_5fsettings_2eproto[0]);
}

// ===================================================================

class NetClassSchematicSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<NetClassSchematicSettings>()._has_bits_);
  static const ::kiapi::common::types::Distance& wire_width(const NetClassSchematicSettings* msg);
  static void set_has_wire_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::kiapi::common::types::Distance& bus_width(const NetClassSchematicSettings* msg);
  static void set_has_bus_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::kiapi::common::types::Color& color(const NetClassSchematicSettings* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_line_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::kiapi::common::types::Distance&
NetClassSchematicSettings::_Internal::wire_width(const NetClassSchematicSettings* msg) {
  return *msg->wire_width_;
}
const ::kiapi::common::types::Distance&
NetClassSchematicSettings::_Internal::bus_width(const NetClassSchematicSettings* msg) {
  return *msg->bus_width_;
}
const ::kiapi::common::types::Color&
NetClassSchematicSettings::_Internal::color(const NetClassSchematicSettings* msg) {
  return *msg->color_;
}
void NetClassSchematicSettings::clear_wire_width() {
  if (wire_width_ != nullptr) wire_width_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void NetClassSchematicSettings::clear_bus_width() {
  if (bus_width_ != nullptr) bus_width_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void NetClassSchematicSettings::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
NetClassSchematicSettings::NetClassSchematicSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.project.NetClassSchematicSettings)
}
NetClassSchematicSettings::NetClassSchematicSettings(const NetClassSchematicSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wire_width()) {
    wire_width_ = new ::kiapi::common::types::Distance(*from.wire_width_);
  } else {
    wire_width_ = nullptr;
  }
  if (from._internal_has_bus_width()) {
    bus_width_ = new ::kiapi::common::types::Distance(*from.bus_width_);
  } else {
    bus_width_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::kiapi::common::types::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  line_style_ = from.line_style_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.project.NetClassSchematicSettings)
}

inline void NetClassSchematicSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wire_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&line_style_) -
    reinterpret_cast<char*>(&wire_width_)) + sizeof(line_style_));
}

NetClassSchematicSettings::~NetClassSchematicSettings() {
  // @@protoc_insertion_point(destructor:kiapi.common.project.NetClassSchematicSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetClassSchematicSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete wire_width_;
  if (this != internal_default_instance()) delete bus_width_;
  if (this != internal_default_instance()) delete color_;
}

void NetClassSchematicSettings::ArenaDtor(void* object) {
  NetClassSchematicSettings* _this = reinterpret_cast< NetClassSchematicSettings* >(object);
  (void)_this;
}
void NetClassSchematicSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetClassSchematicSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetClassSchematicSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.project.NetClassSchematicSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(wire_width_ != nullptr);
      wire_width_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bus_width_ != nullptr);
      bus_width_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
  }
  line_style_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetClassSchematicSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .kiapi.common.types.Distance wire_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wire_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.Distance bus_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.types.StrokeLineStyle line_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_line_style(static_cast<::kiapi::common::types::StrokeLineStyle>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetClassSchematicSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.project.NetClassSchematicSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .kiapi.common.types.Distance wire_width = 1;
  if (_internal_has_wire_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::wire_width(this), target, stream);
  }

  // optional .kiapi.common.types.Distance bus_width = 2;
  if (_internal_has_bus_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bus_width(this), target, stream);
  }

  // optional .kiapi.common.types.Color color = 3;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  // optional .kiapi.common.types.StrokeLineStyle line_style = 4;
  if (_internal_has_line_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_line_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.project.NetClassSchematicSettings)
  return target;
}

size_t NetClassSchematicSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.project.NetClassSchematicSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .kiapi.common.types.Distance wire_width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wire_width_);
    }

    // optional .kiapi.common.types.Distance bus_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bus_width_);
    }

    // optional .kiapi.common.types.Color color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .kiapi.common.types.StrokeLineStyle line_style = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_line_style());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetClassSchematicSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetClassSchematicSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetClassSchematicSettings::GetClassData() const { return &_class_data_; }

void NetClassSchematicSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetClassSchematicSettings *>(to)->MergeFrom(
      static_cast<const NetClassSchematicSettings &>(from));
}


void NetClassSchematicSettings::MergeFrom(const NetClassSchematicSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.project.NetClassSchematicSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_wire_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_wire_width());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bus_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_bus_width());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_color()->::kiapi::common::types::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      line_style_ = from.line_style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetClassSchematicSettings::CopyFrom(const NetClassSchematicSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.project.NetClassSchematicSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetClassSchematicSettings::IsInitialized() const {
  return true;
}

void NetClassSchematicSettings::InternalSwap(NetClassSchematicSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetClassSchematicSettings, line_style_)
      + sizeof(NetClassSchematicSettings::line_style_)
      - PROTOBUF_FIELD_OFFSET(NetClassSchematicSettings, wire_width_)>(
          reinterpret_cast<char*>(&wire_width_),
          reinterpret_cast<char*>(&other->wire_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetClassSchematicSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_getter, &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_once,
      file_level_metadata_common_2ftypes_2fproject_5fsettings_2eproto[1]);
}

// ===================================================================

class NetClass::_Internal {
 public:
  using HasBits = decltype(std::declval<NetClass>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::kiapi::common::project::NetClassBoardSettings& board(const NetClass* msg);
  static void set_has_board(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::kiapi::common::project::NetClassSchematicSettings& schematic(const NetClass* msg);
  static void set_has_schematic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::kiapi::common::project::NetClassBoardSettings&
NetClass::_Internal::board(const NetClass* msg) {
  return *msg->board_;
}
const ::kiapi::common::project::NetClassSchematicSettings&
NetClass::_Internal::schematic(const NetClass* msg) {
  return *msg->schematic_;
}
NetClass::NetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  constituents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.project.NetClass)
}
NetClass::NetClass(const NetClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      constituents_(from.constituents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::project::NetClassBoardSettings(*from.board_);
  } else {
    board_ = nullptr;
  }
  if (from._internal_has_schematic()) {
    schematic_ = new ::kiapi::common::project::NetClassSchematicSettings(*from.schematic_);
  } else {
    schematic_ = nullptr;
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.project.NetClass)
}

inline void NetClass::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&board_)) + sizeof(type_));
}

NetClass::~NetClass() {
  // @@protoc_insertion_point(destructor:kiapi.common.project.NetClass)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete board_;
  if (this != internal_default_instance()) delete schematic_;
}

void NetClass::ArenaDtor(void* object) {
  NetClass* _this = reinterpret_cast< NetClass* >(object);
  (void)_this;
}
void NetClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetClass::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.project.NetClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constituents_.Clear();
  name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(board_ != nullptr);
      board_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schematic_ != nullptr);
      schematic_->Clear();
    }
  }
  priority_ = 0;
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.project.NetClass.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.project.NetClassBoardSettings board = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .kiapi.common.project.NetClassSchematicSettings schematic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_schematic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.project.NetClassType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::common::project::NetClassType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string constituents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_constituents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.project.NetClass.constituents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.project.NetClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.project.NetClass.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 priority = 2;
  if (_internal_has_priority()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_priority(), target);
  }

  // optional .kiapi.common.project.NetClassBoardSettings board = 3;
  if (_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::board(this), target, stream);
  }

  // optional .kiapi.common.project.NetClassSchematicSettings schematic = 4;
  if (_internal_has_schematic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::schematic(this), target, stream);
  }

  // .kiapi.common.project.NetClassType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // repeated string constituents = 6;
  for (int i = 0, n = this->_internal_constituents_size(); i < n; i++) {
    const auto& s = this->_internal_constituents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.project.NetClass.constituents");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.project.NetClass)
  return target;
}

size_t NetClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.project.NetClass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string constituents = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(constituents_.size());
  for (int i = 0, n = constituents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      constituents_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .kiapi.common.project.NetClassBoardSettings board = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *board_);
    }

    // optional .kiapi.common.project.NetClassSchematicSettings schematic = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schematic_);
    }

    // optional int32 priority = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
    }

  }
  // .kiapi.common.project.NetClassType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetClass::GetClassData() const { return &_class_data_; }

void NetClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetClass *>(to)->MergeFrom(
      static_cast<const NetClass &>(from));
}


void NetClass::MergeFrom(const NetClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.project.NetClass)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  constituents_.MergeFrom(from.constituents_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_board()->::kiapi::common::project::NetClassBoardSettings::MergeFrom(from._internal_board());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_schematic()->::kiapi::common::project::NetClassSchematicSettings::MergeFrom(from._internal_schematic());
    }
    if (cached_has_bits & 0x00000004u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetClass::CopyFrom(const NetClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.project.NetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetClass::IsInitialized() const {
  return true;
}

void NetClass::InternalSwap(NetClass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  constituents_.InternalSwap(&other->constituents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetClass, type_)
      + sizeof(NetClass::type_)
      - PROTOBUF_FIELD_OFFSET(NetClass, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetClass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_getter, &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_once,
      file_level_metadata_common_2ftypes_2fproject_5fsettings_2eproto[2]);
}

// ===================================================================

TextVariables_VariablesEntry_DoNotUse::TextVariables_VariablesEntry_DoNotUse() {}
TextVariables_VariablesEntry_DoNotUse::TextVariables_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TextVariables_VariablesEntry_DoNotUse::MergeFrom(const TextVariables_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TextVariables_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_getter, &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_once,
      file_level_metadata_common_2ftypes_2fproject_5fsettings_2eproto[3]);
}

// ===================================================================

class TextVariables::_Internal {
 public:
};

TextVariables::TextVariables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  variables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.project.TextVariables)
}
TextVariables::TextVariables(const TextVariables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  variables_.MergeFrom(from.variables_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.project.TextVariables)
}

inline void TextVariables::SharedCtor() {
}

TextVariables::~TextVariables() {
  // @@protoc_insertion_point(destructor:kiapi.common.project.TextVariables)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextVariables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TextVariables::ArenaDtor(void* object) {
  TextVariables* _this = reinterpret_cast< TextVariables* >(object);
  (void)_this;
  _this->variables_. ~MapField();
}
inline void TextVariables::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TextVariables::ArenaDtor);
  }
}
void TextVariables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextVariables::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.project.TextVariables)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextVariables::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextVariables::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.project.TextVariables)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> variables = 1;
  if (!this->_internal_variables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kiapi.common.project.TextVariables.VariablesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kiapi.common.project.TextVariables.VariablesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_variables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TextVariables_VariablesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it) {
        target = TextVariables_VariablesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.project.TextVariables)
  return target;
}

size_t TextVariables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.project.TextVariables)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += TextVariables_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextVariables::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextVariables::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextVariables::GetClassData() const { return &_class_data_; }

void TextVariables::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextVariables *>(to)->MergeFrom(
      static_cast<const TextVariables &>(from));
}


void TextVariables::MergeFrom(const TextVariables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.project.TextVariables)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextVariables::CopyFrom(const TextVariables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.project.TextVariables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextVariables::IsInitialized() const {
  return true;
}

void TextVariables::InternalSwap(TextVariables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextVariables::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_getter, &descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto_once,
      file_level_metadata_common_2ftypes_2fproject_5fsettings_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace project
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::common::project::NetClassBoardSettings* Arena::CreateMaybeMessage< ::kiapi::common::project::NetClassBoardSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::project::NetClassBoardSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::project::NetClassSchematicSettings* Arena::CreateMaybeMessage< ::kiapi::common::project::NetClassSchematicSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::project::NetClassSchematicSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::project::NetClass* Arena::CreateMaybeMessage< ::kiapi::common::project::NetClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::project::NetClass >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::project::TextVariables_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::project::TextVariables* Arena::CreateMaybeMessage< ::kiapi::common::project::TextVariables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::project::TextVariables >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
