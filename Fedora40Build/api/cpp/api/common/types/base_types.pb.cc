// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/types/base_types.proto

#include "common/types/base_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace common {
namespace types {
constexpr CommandStatusResponse::CommandStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct CommandStatusResponseDefaultTypeInternal {
  constexpr CommandStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandStatusResponseDefaultTypeInternal() {}
  union {
    CommandStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandStatusResponseDefaultTypeInternal _CommandStatusResponse_default_instance_;
constexpr KiCadVersion::KiCadVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : full_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , major_(0u)
  , minor_(0u)
  , patch_(0u){}
struct KiCadVersionDefaultTypeInternal {
  constexpr KiCadVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KiCadVersionDefaultTypeInternal() {}
  union {
    KiCadVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KiCadVersionDefaultTypeInternal _KiCadVersion_default_instance_;
constexpr KIID::KIID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KIIDDefaultTypeInternal {
  constexpr KIIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KIIDDefaultTypeInternal() {}
  union {
    KIID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KIIDDefaultTypeInternal _KIID_default_instance_;
constexpr LibraryIdentifier::LibraryIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : library_nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LibraryIdentifierDefaultTypeInternal {
  constexpr LibraryIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LibraryIdentifierDefaultTypeInternal() {}
  union {
    LibraryIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LibraryIdentifierDefaultTypeInternal _LibraryIdentifier_default_instance_;
constexpr SheetPath::SheetPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_()
  , path_human_readable_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SheetPathDefaultTypeInternal {
  constexpr SheetPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetPathDefaultTypeInternal() {}
  union {
    SheetPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetPathDefaultTypeInternal _SheetPath_default_instance_;
constexpr ProjectSpecifier::ProjectSpecifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProjectSpecifierDefaultTypeInternal {
  constexpr ProjectSpecifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectSpecifierDefaultTypeInternal() {}
  union {
    ProjectSpecifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectSpecifierDefaultTypeInternal _ProjectSpecifier_default_instance_;
constexpr DocumentSpecifier::DocumentSpecifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(nullptr)
  , type_(0)

  , _oneof_case_{}{}
struct DocumentSpecifierDefaultTypeInternal {
  constexpr DocumentSpecifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentSpecifierDefaultTypeInternal() {}
  union {
    DocumentSpecifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentSpecifierDefaultTypeInternal _DocumentSpecifier_default_instance_;
constexpr ItemHeader::ItemHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_(nullptr)
  , container_(nullptr)
  , field_mask_(nullptr){}
struct ItemHeaderDefaultTypeInternal {
  constexpr ItemHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemHeaderDefaultTypeInternal() {}
  union {
    ItemHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemHeaderDefaultTypeInternal _ItemHeader_default_instance_;
constexpr Vector2::Vector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_nm_(int64_t{0})
  , y_nm_(int64_t{0}){}
struct Vector2DefaultTypeInternal {
  constexpr Vector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector2DefaultTypeInternal() {}
  union {
    Vector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector2DefaultTypeInternal _Vector2_default_instance_;
constexpr Vector3::Vector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_nm_(int64_t{0})
  , y_nm_(int64_t{0})
  , z_nm_(int64_t{0}){}
struct Vector3DefaultTypeInternal {
  constexpr Vector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3DefaultTypeInternal _Vector3_default_instance_;
constexpr Vector3D::Vector3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_nm_(0)
  , y_nm_(0)
  , z_nm_(0){}
struct Vector3DDefaultTypeInternal {
  constexpr Vector3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3DDefaultTypeInternal() {}
  union {
    Vector3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3DDefaultTypeInternal _Vector3D_default_instance_;
constexpr Box2::Box2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , size_(nullptr){}
struct Box2DefaultTypeInternal {
  constexpr Box2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Box2DefaultTypeInternal() {}
  union {
    Box2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Box2DefaultTypeInternal _Box2_default_instance_;
constexpr Distance::Distance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_nm_(int64_t{0}){}
struct DistanceDefaultTypeInternal {
  constexpr DistanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceDefaultTypeInternal() {}
  union {
    Distance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceDefaultTypeInternal _Distance_default_instance_;
constexpr Angle::Angle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_degrees_(0){}
struct AngleDefaultTypeInternal {
  constexpr AngleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AngleDefaultTypeInternal() {}
  union {
    Angle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AngleDefaultTypeInternal _Angle_default_instance_;
constexpr Ratio::Ratio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct RatioDefaultTypeInternal {
  constexpr RatioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RatioDefaultTypeInternal() {}
  union {
    Ratio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RatioDefaultTypeInternal _Ratio_default_instance_;
constexpr Color::Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0)
  , a_(0){}
struct ColorDefaultTypeInternal {
  constexpr ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDefaultTypeInternal _Color_default_instance_;
constexpr ArcStartMidEnd::ArcStartMidEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , mid_(nullptr)
  , end_(nullptr){}
struct ArcStartMidEndDefaultTypeInternal {
  constexpr ArcStartMidEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArcStartMidEndDefaultTypeInternal() {}
  union {
    ArcStartMidEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArcStartMidEndDefaultTypeInternal _ArcStartMidEnd_default_instance_;
constexpr PolyLineNode::PolyLineNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PolyLineNodeDefaultTypeInternal {
  constexpr PolyLineNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolyLineNodeDefaultTypeInternal() {}
  union {
    PolyLineNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolyLineNodeDefaultTypeInternal _PolyLineNode_default_instance_;
constexpr PolyLine::PolyLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , closed_(false){}
struct PolyLineDefaultTypeInternal {
  constexpr PolyLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolyLineDefaultTypeInternal() {}
  union {
    PolyLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolyLineDefaultTypeInternal _PolyLine_default_instance_;
constexpr PolygonWithHoles::PolygonWithHoles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : holes_()
  , outline_(nullptr){}
struct PolygonWithHolesDefaultTypeInternal {
  constexpr PolygonWithHolesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonWithHolesDefaultTypeInternal() {}
  union {
    PolygonWithHoles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonWithHolesDefaultTypeInternal _PolygonWithHoles_default_instance_;
constexpr PolySet::PolySet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygons_(){}
struct PolySetDefaultTypeInternal {
  constexpr PolySetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolySetDefaultTypeInternal() {}
  union {
    PolySet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolySetDefaultTypeInternal _PolySet_default_instance_;
constexpr TextAttributes::TextAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : font_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , angle_(nullptr)
  , stroke_width_(nullptr)
  , size_(nullptr)
  , horizontal_alignment_(0)

  , vertical_alignment_(0)

  , line_spacing_(0)
  , italic_(false)
  , bold_(false)
  , underlined_(false)
  , visible_(false)
  , mirrored_(false)
  , multiline_(false)
  , keep_upright_(false){}
struct TextAttributesDefaultTypeInternal {
  constexpr TextAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextAttributesDefaultTypeInternal() {}
  union {
    TextAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextAttributesDefaultTypeInternal _TextAttributes_default_instance_;
constexpr Text::Text(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hyperlink_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr)
  , attributes_(nullptr){}
struct TextDefaultTypeInternal {
  constexpr TextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextDefaultTypeInternal() {}
  union {
    Text _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextDefaultTypeInternal _Text_default_instance_;
constexpr TextBox::TextBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , top_left_(nullptr)
  , bottom_right_(nullptr)
  , attributes_(nullptr){}
struct TextBoxDefaultTypeInternal {
  constexpr TextBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextBoxDefaultTypeInternal() {}
  union {
    TextBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextBoxDefaultTypeInternal _TextBox_default_instance_;
constexpr StrokeAttributes::StrokeAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(nullptr)
  , color_(nullptr)
  , style_(0)
{}
struct StrokeAttributesDefaultTypeInternal {
  constexpr StrokeAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokeAttributesDefaultTypeInternal() {}
  union {
    StrokeAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokeAttributesDefaultTypeInternal _StrokeAttributes_default_instance_;
constexpr GraphicFillAttributes::GraphicFillAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , fill_type_(0)
{}
struct GraphicFillAttributesDefaultTypeInternal {
  constexpr GraphicFillAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicFillAttributesDefaultTypeInternal() {}
  union {
    GraphicFillAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicFillAttributesDefaultTypeInternal _GraphicFillAttributes_default_instance_;
constexpr GraphicAttributes::GraphicAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stroke_(nullptr)
  , fill_(nullptr){}
struct GraphicAttributesDefaultTypeInternal {
  constexpr GraphicAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicAttributesDefaultTypeInternal() {}
  union {
    GraphicAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicAttributesDefaultTypeInternal _GraphicAttributes_default_instance_;
constexpr GraphicSegmentAttributes::GraphicSegmentAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct GraphicSegmentAttributesDefaultTypeInternal {
  constexpr GraphicSegmentAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicSegmentAttributesDefaultTypeInternal() {}
  union {
    GraphicSegmentAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicSegmentAttributesDefaultTypeInternal _GraphicSegmentAttributes_default_instance_;
constexpr GraphicRectangleAttributes::GraphicRectangleAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_left_(nullptr)
  , bottom_right_(nullptr){}
struct GraphicRectangleAttributesDefaultTypeInternal {
  constexpr GraphicRectangleAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicRectangleAttributesDefaultTypeInternal() {}
  union {
    GraphicRectangleAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicRectangleAttributesDefaultTypeInternal _GraphicRectangleAttributes_default_instance_;
constexpr GraphicArcAttributes::GraphicArcAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , mid_(nullptr)
  , end_(nullptr){}
struct GraphicArcAttributesDefaultTypeInternal {
  constexpr GraphicArcAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicArcAttributesDefaultTypeInternal() {}
  union {
    GraphicArcAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicArcAttributesDefaultTypeInternal _GraphicArcAttributes_default_instance_;
constexpr GraphicCircleAttributes::GraphicCircleAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr)
  , radius_point_(nullptr){}
struct GraphicCircleAttributesDefaultTypeInternal {
  constexpr GraphicCircleAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicCircleAttributesDefaultTypeInternal() {}
  union {
    GraphicCircleAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicCircleAttributesDefaultTypeInternal _GraphicCircleAttributes_default_instance_;
constexpr GraphicBezierAttributes::GraphicBezierAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , control1_(nullptr)
  , control2_(nullptr)
  , end_(nullptr){}
struct GraphicBezierAttributesDefaultTypeInternal {
  constexpr GraphicBezierAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicBezierAttributesDefaultTypeInternal() {}
  union {
    GraphicBezierAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicBezierAttributesDefaultTypeInternal _GraphicBezierAttributes_default_instance_;
constexpr GraphicShape::GraphicShape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_(nullptr)
  , _oneof_case_{}{}
struct GraphicShapeDefaultTypeInternal {
  constexpr GraphicShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicShapeDefaultTypeInternal() {}
  union {
    GraphicShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicShapeDefaultTypeInternal _GraphicShape_default_instance_;
constexpr CompoundShape::CompoundShape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shapes_(){}
struct CompoundShapeDefaultTypeInternal {
  constexpr CompoundShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompoundShapeDefaultTypeInternal() {}
  union {
    CompoundShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompoundShapeDefaultTypeInternal _CompoundShape_default_instance_;
constexpr TitleBlockInfo::TitleBlockInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , revision_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , company_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment7_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment8_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment9_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TitleBlockInfoDefaultTypeInternal {
  constexpr TitleBlockInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TitleBlockInfoDefaultTypeInternal() {}
  union {
    TitleBlockInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TitleBlockInfoDefaultTypeInternal _TitleBlockInfo_default_instance_;
}  // namespace types
}  // namespace common
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2ftypes_2fbase_5ftypes_2eproto = nullptr;

const uint32_t TableStruct_common_2ftypes_2fbase_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::CommandStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::CommandStatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::KiCadVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::KiCadVersion, major_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::KiCadVersion, minor_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::KiCadVersion, patch_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::KiCadVersion, full_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::KIID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::KIID, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::LibraryIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::LibraryIdentifier, library_nickname_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::LibraryIdentifier, entry_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::SheetPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::SheetPath, path_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::SheetPath, path_human_readable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ProjectSpecifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ProjectSpecifier, name_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ProjectSpecifier, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::DocumentSpecifier, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::DocumentSpecifier, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::DocumentSpecifier, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::DocumentSpecifier, project_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::DocumentSpecifier, identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ItemHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ItemHeader, document_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ItemHeader, container_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ItemHeader, field_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector2, x_nm_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector2, y_nm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3, x_nm_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3, y_nm_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3, z_nm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3D, x_nm_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3D, y_nm_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Vector3D, z_nm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Box2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Box2, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Box2, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Distance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Distance, value_nm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Angle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Angle, value_degrees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Ratio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Ratio, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Color, r_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Color, g_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Color, b_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Color, a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ArcStartMidEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ArcStartMidEnd, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ArcStartMidEnd, mid_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::ArcStartMidEnd, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolyLineNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolyLineNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolyLineNode, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolyLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolyLine, nodes_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolyLine, closed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolygonWithHoles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolygonWithHoles, outline_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolygonWithHoles, holes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolySet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::PolySet, polygons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, font_name_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, horizontal_alignment_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, angle_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, line_spacing_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, stroke_width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, italic_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, bold_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, underlined_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, visible_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, mirrored_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, multiline_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, keep_upright_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextAttributes, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Text, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Text, attributes_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Text, text_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::Text, hyperlink_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextBox, top_left_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextBox, bottom_right_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextBox, attributes_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TextBox, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::StrokeAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::StrokeAttributes, width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::StrokeAttributes, style_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::StrokeAttributes, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicFillAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicFillAttributes, fill_type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicFillAttributes, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicAttributes, stroke_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicAttributes, fill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicSegmentAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicSegmentAttributes, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicSegmentAttributes, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicRectangleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicRectangleAttributes, top_left_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicRectangleAttributes, bottom_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicArcAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicArcAttributes, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicArcAttributes, mid_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicArcAttributes, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicCircleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicCircleAttributes, center_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicCircleAttributes, radius_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicBezierAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicBezierAttributes, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicBezierAttributes, control1_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicBezierAttributes, control2_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicBezierAttributes, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicShape, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicShape, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicShape, attributes_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::GraphicShape, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::CompoundShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::CompoundShape, shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, title_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, date_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, revision_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, company_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment1_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment2_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment3_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment4_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment5_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment6_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment7_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment8_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::types::TitleBlockInfo, comment9_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::common::types::CommandStatusResponse)},
  { 7, -1, -1, sizeof(::kiapi::common::types::KiCadVersion)},
  { 17, -1, -1, sizeof(::kiapi::common::types::KIID)},
  { 24, -1, -1, sizeof(::kiapi::common::types::LibraryIdentifier)},
  { 32, -1, -1, sizeof(::kiapi::common::types::SheetPath)},
  { 40, -1, -1, sizeof(::kiapi::common::types::ProjectSpecifier)},
  { 48, -1, -1, sizeof(::kiapi::common::types::DocumentSpecifier)},
  { 60, -1, -1, sizeof(::kiapi::common::types::ItemHeader)},
  { 69, -1, -1, sizeof(::kiapi::common::types::Vector2)},
  { 77, -1, -1, sizeof(::kiapi::common::types::Vector3)},
  { 86, -1, -1, sizeof(::kiapi::common::types::Vector3D)},
  { 95, -1, -1, sizeof(::kiapi::common::types::Box2)},
  { 103, -1, -1, sizeof(::kiapi::common::types::Distance)},
  { 110, -1, -1, sizeof(::kiapi::common::types::Angle)},
  { 117, -1, -1, sizeof(::kiapi::common::types::Ratio)},
  { 124, -1, -1, sizeof(::kiapi::common::types::Color)},
  { 134, -1, -1, sizeof(::kiapi::common::types::ArcStartMidEnd)},
  { 143, -1, -1, sizeof(::kiapi::common::types::PolyLineNode)},
  { 152, -1, -1, sizeof(::kiapi::common::types::PolyLine)},
  { 160, -1, -1, sizeof(::kiapi::common::types::PolygonWithHoles)},
  { 168, -1, -1, sizeof(::kiapi::common::types::PolySet)},
  { 175, -1, -1, sizeof(::kiapi::common::types::TextAttributes)},
  { 195, -1, -1, sizeof(::kiapi::common::types::Text)},
  { 205, -1, -1, sizeof(::kiapi::common::types::TextBox)},
  { 215, -1, -1, sizeof(::kiapi::common::types::StrokeAttributes)},
  { 224, -1, -1, sizeof(::kiapi::common::types::GraphicFillAttributes)},
  { 232, -1, -1, sizeof(::kiapi::common::types::GraphicAttributes)},
  { 240, -1, -1, sizeof(::kiapi::common::types::GraphicSegmentAttributes)},
  { 248, -1, -1, sizeof(::kiapi::common::types::GraphicRectangleAttributes)},
  { 256, -1, -1, sizeof(::kiapi::common::types::GraphicArcAttributes)},
  { 265, -1, -1, sizeof(::kiapi::common::types::GraphicCircleAttributes)},
  { 273, -1, -1, sizeof(::kiapi::common::types::GraphicBezierAttributes)},
  { 283, -1, -1, sizeof(::kiapi::common::types::GraphicShape)},
  { 297, -1, -1, sizeof(::kiapi::common::types::CompoundShape)},
  { 304, -1, -1, sizeof(::kiapi::common::types::TitleBlockInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_CommandStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_KiCadVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_KIID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_LibraryIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_SheetPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_ProjectSpecifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_DocumentSpecifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_ItemHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Vector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Vector3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Box2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Distance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Angle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Ratio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_ArcStartMidEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_PolyLineNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_PolyLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_PolygonWithHoles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_PolySet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_TextAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_TextBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_StrokeAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicFillAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicSegmentAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicRectangleAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicArcAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicCircleAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicBezierAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_GraphicShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_CompoundShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::types::_TitleBlockInfo_default_instance_),
};

const char descriptor_table_protodef_common_2ftypes_2fbase_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035common/types/base_types.proto\022\022kiapi.c"
  "ommon.types\032 google/protobuf/field_mask."
  "proto\032\030common/types/enums.proto\"J\n\025Comma"
  "ndStatusResponse\0221\n\006status\030\001 \001(\0162!.kiapi"
  ".common.types.CommandStatus\"Q\n\014KiCadVers"
  "ion\022\r\n\005major\030\001 \001(\r\022\r\n\005minor\030\002 \001(\r\022\r\n\005pat"
  "ch\030\003 \001(\r\022\024\n\014full_version\030\004 \001(\t\"\025\n\004KIID\022\r"
  "\n\005value\030\001 \001(\t\"A\n\021LibraryIdentifier\022\030\n\020li"
  "brary_nickname\030\001 \001(\t\022\022\n\nentry_name\030\002 \001(\t"
  "\"P\n\tSheetPath\022&\n\004path\030\001 \003(\0132\030.kiapi.comm"
  "on.types.KIID\022\033\n\023path_human_readable\030\002 \001"
  "(\t\".\n\020ProjectSpecifier\022\014\n\004name\030\001 \001(\t\022\014\n\004"
  "path\030\002 \001(\t\"\220\002\n\021DocumentSpecifier\022.\n\004type"
  "\030\001 \001(\0162 .kiapi.common.types.DocumentType"
  "\0227\n\006lib_id\030\002 \001(\0132%.kiapi.common.types.Li"
  "braryIdentifierH\000\0223\n\nsheet_path\030\003 \001(\0132\035."
  "kiapi.common.types.SheetPathH\000\022\030\n\016board_"
  "filename\030\004 \001(\tH\000\0225\n\007project\030\005 \001(\0132$.kiap"
  "i.common.types.ProjectSpecifierB\014\n\nident"
  "ifier\"\242\001\n\nItemHeader\0227\n\010document\030\001 \001(\0132%"
  ".kiapi.common.types.DocumentSpecifier\022+\n"
  "\tcontainer\030\002 \001(\0132\030.kiapi.common.types.KI"
  "ID\022.\n\nfield_mask\030\003 \001(\0132\032.google.protobuf"
  ".FieldMask\"%\n\007Vector2\022\014\n\004x_nm\030\001 \001(\003\022\014\n\004y"
  "_nm\030\002 \001(\003\"3\n\007Vector3\022\014\n\004x_nm\030\001 \001(\003\022\014\n\004y_"
  "nm\030\002 \001(\003\022\014\n\004z_nm\030\003 \001(\003\"4\n\010Vector3D\022\014\n\004x_"
  "nm\030\001 \001(\001\022\014\n\004y_nm\030\002 \001(\001\022\014\n\004z_nm\030\003 \001(\001\"`\n\004"
  "Box2\022-\n\010position\030\001 \001(\0132\033.kiapi.common.ty"
  "pes.Vector2\022)\n\004size\030\002 \001(\0132\033.kiapi.common"
  ".types.Vector2\"\034\n\010Distance\022\020\n\010value_nm\030\001"
  " \001(\003\"\036\n\005Angle\022\025\n\rvalue_degrees\030\001 \001(\001\"\026\n\005"
  "Ratio\022\r\n\005value\030\001 \001(\001\"3\n\005Color\022\t\n\001r\030\001 \001(\001"
  "\022\t\n\001g\030\002 \001(\001\022\t\n\001b\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\"\220\001\n\016Ar"
  "cStartMidEnd\022*\n\005start\030\001 \001(\0132\033.kiapi.comm"
  "on.types.Vector2\022(\n\003mid\030\002 \001(\0132\033.kiapi.co"
  "mmon.types.Vector2\022(\n\003end\030\003 \001(\0132\033.kiapi."
  "common.types.Vector2\"{\n\014PolyLineNode\022,\n\005"
  "point\030\001 \001(\0132\033.kiapi.common.types.Vector2"
  "H\000\0221\n\003arc\030\002 \001(\0132\".kiapi.common.types.Arc"
  "StartMidEndH\000B\n\n\010geometry\"K\n\010PolyLine\022/\n"
  "\005nodes\030\001 \003(\0132 .kiapi.common.types.PolyLi"
  "neNode\022\016\n\006closed\030\002 \001(\010\"n\n\020PolygonWithHol"
  "es\022-\n\007outline\030\001 \001(\0132\034.kiapi.common.types"
  ".PolyLine\022+\n\005holes\030\002 \003(\0132\034.kiapi.common."
  "types.PolyLine\"A\n\007PolySet\0226\n\010polygons\030\001 "
  "\003(\0132$.kiapi.common.types.PolygonWithHole"
  "s\"\312\003\n\016TextAttributes\022\021\n\tfont_name\030\001 \001(\t\022"
  "E\n\024horizontal_alignment\030\002 \001(\0162\'.kiapi.co"
  "mmon.types.HorizontalAlignment\022A\n\022vertic"
  "al_alignment\030\003 \001(\0162%.kiapi.common.types."
  "VerticalAlignment\022(\n\005angle\030\004 \001(\0132\031.kiapi"
  ".common.types.Angle\022\024\n\014line_spacing\030\005 \001("
  "\001\0222\n\014stroke_width\030\006 \001(\0132\034.kiapi.common.t"
  "ypes.Distance\022\016\n\006italic\030\007 \001(\010\022\014\n\004bold\030\010 "
  "\001(\010\022\022\n\nunderlined\030\t \001(\010\022\017\n\007visible\030\n \001(\010"
  "\022\020\n\010mirrored\030\013 \001(\010\022\021\n\tmultiline\030\014 \001(\010\022\024\n"
  "\014keep_upright\030\r \001(\010\022)\n\004size\030\016 \001(\0132\033.kiap"
  "i.common.types.Vector2\"\216\001\n\004Text\022-\n\010posit"
  "ion\030\002 \001(\0132\033.kiapi.common.types.Vector2\0226"
  "\n\nattributes\030\003 \001(\0132\".kiapi.common.types."
  "TextAttributes\022\014\n\004text\030\005 \001(\t\022\021\n\thyperlin"
  "k\030\006 \001(\t\"\261\001\n\007TextBox\022-\n\010top_left\030\002 \001(\0132\033."
  "kiapi.common.types.Vector2\0221\n\014bottom_rig"
  "ht\030\003 \001(\0132\033.kiapi.common.types.Vector2\0226\n"
  "\nattributes\030\004 \001(\0132\".kiapi.common.types.T"
  "extAttributes\022\014\n\004text\030\006 \001(\t\"\235\001\n\020StrokeAt"
  "tributes\022+\n\005width\030\001 \001(\0132\034.kiapi.common.t"
  "ypes.Distance\0222\n\005style\030\002 \001(\0162#.kiapi.com"
  "mon.types.StrokeLineStyle\022(\n\005color\030\003 \001(\013"
  "2\031.kiapi.common.types.Color\"y\n\025GraphicFi"
  "llAttributes\0226\n\tfill_type\030\001 \001(\0162#.kiapi."
  "common.types.GraphicFillType\022(\n\005color\030\002 "
  "\001(\0132\031.kiapi.common.types.Color\"\202\001\n\021Graph"
  "icAttributes\0224\n\006stroke\030\001 \001(\0132$.kiapi.com"
  "mon.types.StrokeAttributes\0227\n\004fill\030\002 \001(\013"
  "2).kiapi.common.types.GraphicFillAttribu"
  "tes\"p\n\030GraphicSegmentAttributes\022*\n\005start"
  "\030\001 \001(\0132\033.kiapi.common.types.Vector2\022(\n\003e"
  "nd\030\002 \001(\0132\033.kiapi.common.types.Vector2\"~\n"
  "\032GraphicRectangleAttributes\022-\n\010top_left\030"
  "\001 \001(\0132\033.kiapi.common.types.Vector2\0221\n\014bo"
  "ttom_right\030\002 \001(\0132\033.kiapi.common.types.Ve"
  "ctor2\"\226\001\n\024GraphicArcAttributes\022*\n\005start\030"
  "\001 \001(\0132\033.kiapi.common.types.Vector2\022(\n\003mi"
  "d\030\002 \001(\0132\033.kiapi.common.types.Vector2\022(\n\003"
  "end\030\003 \001(\0132\033.kiapi.common.types.Vector2\"y"
  "\n\027GraphicCircleAttributes\022+\n\006center\030\001 \001("
  "\0132\033.kiapi.common.types.Vector2\0221\n\014radius"
  "_point\030\002 \001(\0132\033.kiapi.common.types.Vector"
  "2\"\315\001\n\027GraphicBezierAttributes\022*\n\005start\030\001"
  " \001(\0132\033.kiapi.common.types.Vector2\022-\n\010con"
  "trol1\030\002 \001(\0132\033.kiapi.common.types.Vector2"
  "\022-\n\010control2\030\003 \001(\0132\033.kiapi.common.types."
  "Vector2\022(\n\003end\030\004 \001(\0132\033.kiapi.common.type"
  "s.Vector2\"\302\003\n\014GraphicShape\0229\n\nattributes"
  "\030\003 \001(\0132%.kiapi.common.types.GraphicAttri"
  "butes\022\?\n\007segment\030\004 \001(\0132,.kiapi.common.ty"
  "pes.GraphicSegmentAttributesH\000\022C\n\trectan"
  "gle\030\005 \001(\0132..kiapi.common.types.GraphicRe"
  "ctangleAttributesH\000\0227\n\003arc\030\006 \001(\0132(.kiapi"
  ".common.types.GraphicArcAttributesH\000\022=\n\006"
  "circle\030\007 \001(\0132+.kiapi.common.types.Graphi"
  "cCircleAttributesH\000\022.\n\007polygon\030\010 \001(\0132\033.k"
  "iapi.common.types.PolySetH\000\022=\n\006bezier\030\t "
  "\001(\0132+.kiapi.common.types.GraphicBezierAt"
  "tributesH\000B\n\n\010geometry\"A\n\rCompoundShape\022"
  "0\n\006shapes\030\001 \003(\0132 .kiapi.common.types.Gra"
  "phicShape\"\362\001\n\016TitleBlockInfo\022\r\n\005title\030\001 "
  "\001(\t\022\014\n\004date\030\002 \001(\t\022\020\n\010revision\030\003 \001(\t\022\017\n\007c"
  "ompany\030\004 \001(\t\022\020\n\010comment1\030\005 \001(\t\022\020\n\010commen"
  "t2\030\006 \001(\t\022\020\n\010comment3\030\007 \001(\t\022\020\n\010comment4\030\010"
  " \001(\t\022\020\n\010comment5\030\t \001(\t\022\020\n\010comment6\030\n \001(\t"
  "\022\020\n\010comment7\030\013 \001(\t\022\020\n\010comment8\030\014 \001(\t\022\020\n\010"
  "comment9\030\r \001(\t*9\n\rCommandStatus\022\016\n\nCS_UN"
  "KNOWN\020\000\022\t\n\005CS_OK\020\001\022\r\n\tCS_FAILED\020\002*\303\001\n\tFr"
  "ameType\022\016\n\nFT_UNKNOWN\020\000\022\026\n\022FT_PROJECT_MA"
  "NAGER\020\001\022\027\n\023FT_SCHEMATIC_EDITOR\020\002\022\021\n\rFT_P"
  "CB_EDITOR\020\003\022\026\n\022FT_SPICE_SIMULATOR\020\004\022\024\n\020F"
  "T_SYMBOL_EDITOR\020\005\022\027\n\023FT_FOOTPRINT_EDITOR"
  "\020\006\022\033\n\027FT_DRAWING_SHEET_EDITOR\020\007*\246\001\n\014Docu"
  "mentType\022\023\n\017DOCTYPE_UNKNOWN\020\000\022\025\n\021DOCTYPE"
  "_SCHEMATIC\020\001\022\022\n\016DOCTYPE_SYMBOL\020\002\022\017\n\013DOCT"
  "YPE_PCB\020\003\022\025\n\021DOCTYPE_FOOTPRINT\020\004\022\031\n\025DOCT"
  "YPE_DRAWING_SHEET\020\005\022\023\n\017DOCTYPE_PROJECT\020\006"
  "*h\n\021ItemRequestStatus\022\017\n\013IRS_UNKNOWN\020\000\022\n"
  "\n\006IRS_OK\020\001\022\032\n\026IRS_DOCUMENT_NOT_FOUND\020\002\022\032"
  "\n\026IRS_FIELD_MASK_INVALID\020\003*=\n\013LockedStat"
  "e\022\016\n\nLS_UNKNOWN\020\000\022\017\n\013LS_UNLOCKED\020\001\022\r\n\tLS"
  "_LOCKED\020\002*D\n\017GraphicFillType\022\017\n\013GFT_UNKN"
  "OWN\020\000\022\020\n\014GFT_UNFILLED\020\001\022\016\n\nGFT_FILLED\020\002*"
  "=\n\rAxisAlignment\022\016\n\nAA_UNKNOWN\020\000\022\r\n\tAA_X"
  "_AXIS\020\001\022\r\n\tAA_Y_AXIS\020\002*\?\n\014MapMergeMode\022\017"
  "\n\013MMM_UNKNOWN\020\000\022\r\n\tMMM_MERGE\020\001\022\017\n\013MMM_RE"
  "PLACE\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_deps[2] = {
  &::descriptor_table_common_2ftypes_2fenums_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto = {
  false, false, 5335, descriptor_table_protodef_common_2ftypes_2fbase_5ftypes_2eproto, "common/types/base_types.proto", 
  &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once, descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_deps, 2, 35,
  schemas, file_default_instances, TableStruct_common_2ftypes_2fbase_5ftypes_2eproto::offsets,
  file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto, file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto, file_level_service_descriptors_common_2ftypes_2fbase_5ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter() {
  return &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2ftypes_2fbase_5ftypes_2eproto(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
namespace kiapi {
namespace common {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[0];
}
bool CommandStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[1];
}
bool FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DocumentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[2];
}
bool DocumentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemRequestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[3];
}
bool ItemRequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockedState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[4];
}
bool LockedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphicFillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[5];
}
bool GraphicFillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AxisAlignment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[6];
}
bool AxisAlignment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapMergeMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto);
  return file_level_enum_descriptors_common_2ftypes_2fbase_5ftypes_2eproto[7];
}
bool MapMergeMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CommandStatusResponse::_Internal {
 public:
};

CommandStatusResponse::CommandStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.CommandStatusResponse)
}
CommandStatusResponse::CommandStatusResponse(const CommandStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.CommandStatusResponse)
}

inline void CommandStatusResponse::SharedCtor() {
status_ = 0;
}

CommandStatusResponse::~CommandStatusResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.CommandStatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommandStatusResponse::ArenaDtor(void* object) {
  CommandStatusResponse* _this = reinterpret_cast< CommandStatusResponse* >(object);
  (void)_this;
}
void CommandStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.CommandStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.CommandStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::types::CommandStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.CommandStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.CommandStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.CommandStatusResponse)
  return target;
}

size_t CommandStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.CommandStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.CommandStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandStatusResponse::GetClassData() const { return &_class_data_; }

void CommandStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommandStatusResponse *>(to)->MergeFrom(
      static_cast<const CommandStatusResponse &>(from));
}


void CommandStatusResponse::MergeFrom(const CommandStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.CommandStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandStatusResponse::CopyFrom(const CommandStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.CommandStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStatusResponse::IsInitialized() const {
  return true;
}

void CommandStatusResponse::InternalSwap(CommandStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[0]);
}

// ===================================================================

class KiCadVersion::_Internal {
 public:
};

KiCadVersion::KiCadVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.KiCadVersion)
}
KiCadVersion::KiCadVersion(const KiCadVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_full_version().empty()) {
    full_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.KiCadVersion)
}

inline void KiCadVersion::SharedCtor() {
full_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

KiCadVersion::~KiCadVersion() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.KiCadVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KiCadVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  full_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KiCadVersion::ArenaDtor(void* object) {
  KiCadVersion* _this = reinterpret_cast< KiCadVersion* >(object);
  (void)_this;
}
void KiCadVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KiCadVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KiCadVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.KiCadVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_version_.ClearToEmpty();
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KiCadVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string full_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_full_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.KiCadVersion.full_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KiCadVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.KiCadVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  // string full_version = 4;
  if (!this->_internal_full_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_version().data(), static_cast<int>(this->_internal_full_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.KiCadVersion.full_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_full_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.KiCadVersion)
  return target;
}

size_t KiCadVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.KiCadVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string full_version = 4;
  if (!this->_internal_full_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_version());
  }

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KiCadVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KiCadVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KiCadVersion::GetClassData() const { return &_class_data_; }

void KiCadVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KiCadVersion *>(to)->MergeFrom(
      static_cast<const KiCadVersion &>(from));
}


void KiCadVersion::MergeFrom(const KiCadVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.KiCadVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_full_version().empty()) {
    _internal_set_full_version(from._internal_full_version());
  }
  if (from._internal_major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KiCadVersion::CopyFrom(const KiCadVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.KiCadVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KiCadVersion::IsInitialized() const {
  return true;
}

void KiCadVersion::InternalSwap(KiCadVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_version_, lhs_arena,
      &other->full_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KiCadVersion, patch_)
      + sizeof(KiCadVersion::patch_)
      - PROTOBUF_FIELD_OFFSET(KiCadVersion, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KiCadVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[1]);
}

// ===================================================================

class KIID::_Internal {
 public:
};

KIID::KIID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.KIID)
}
KIID::KIID(const KIID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.KIID)
}

inline void KIID::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KIID::~KIID() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.KIID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KIID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KIID::ArenaDtor(void* object) {
  KIID* _this = reinterpret_cast< KIID* >(object);
  (void)_this;
}
void KIID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KIID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KIID::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.KIID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KIID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.KIID.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KIID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.KIID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.KIID.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.KIID)
  return target;
}

size_t KIID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.KIID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KIID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KIID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KIID::GetClassData() const { return &_class_data_; }

void KIID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KIID *>(to)->MergeFrom(
      static_cast<const KIID &>(from));
}


void KIID::MergeFrom(const KIID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.KIID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KIID::CopyFrom(const KIID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.KIID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KIID::IsInitialized() const {
  return true;
}

void KIID::InternalSwap(KIID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KIID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[2]);
}

// ===================================================================

class LibraryIdentifier::_Internal {
 public:
};

LibraryIdentifier::LibraryIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.LibraryIdentifier)
}
LibraryIdentifier::LibraryIdentifier(const LibraryIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  library_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    library_nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_library_nickname().empty()) {
    library_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_library_nickname(), 
      GetArenaForAllocation());
  }
  entry_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entry_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entry_name().empty()) {
    entry_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entry_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.LibraryIdentifier)
}

inline void LibraryIdentifier::SharedCtor() {
library_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  library_nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
entry_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entry_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LibraryIdentifier::~LibraryIdentifier() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.LibraryIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LibraryIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  library_nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LibraryIdentifier::ArenaDtor(void* object) {
  LibraryIdentifier* _this = reinterpret_cast< LibraryIdentifier* >(object);
  (void)_this;
}
void LibraryIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LibraryIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LibraryIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.LibraryIdentifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  library_nickname_.ClearToEmpty();
  entry_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibraryIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string library_nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_library_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.LibraryIdentifier.library_nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string entry_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_entry_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.LibraryIdentifier.entry_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibraryIdentifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.LibraryIdentifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string library_nickname = 1;
  if (!this->_internal_library_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_library_nickname().data(), static_cast<int>(this->_internal_library_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.LibraryIdentifier.library_nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_library_nickname(), target);
  }

  // string entry_name = 2;
  if (!this->_internal_entry_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entry_name().data(), static_cast<int>(this->_internal_entry_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.LibraryIdentifier.entry_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entry_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.LibraryIdentifier)
  return target;
}

size_t LibraryIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.LibraryIdentifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string library_nickname = 1;
  if (!this->_internal_library_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_library_nickname());
  }

  // string entry_name = 2;
  if (!this->_internal_entry_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibraryIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LibraryIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibraryIdentifier::GetClassData() const { return &_class_data_; }

void LibraryIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LibraryIdentifier *>(to)->MergeFrom(
      static_cast<const LibraryIdentifier &>(from));
}


void LibraryIdentifier::MergeFrom(const LibraryIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.LibraryIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_library_nickname().empty()) {
    _internal_set_library_nickname(from._internal_library_nickname());
  }
  if (!from._internal_entry_name().empty()) {
    _internal_set_entry_name(from._internal_entry_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibraryIdentifier::CopyFrom(const LibraryIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.LibraryIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryIdentifier::IsInitialized() const {
  return true;
}

void LibraryIdentifier::InternalSwap(LibraryIdentifier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &library_nickname_, lhs_arena,
      &other->library_nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entry_name_, lhs_arena,
      &other->entry_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LibraryIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[3]);
}

// ===================================================================

class SheetPath::_Internal {
 public:
};

SheetPath::SheetPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.SheetPath)
}
SheetPath::SheetPath(const SheetPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_human_readable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_human_readable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path_human_readable().empty()) {
    path_human_readable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_human_readable(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.SheetPath)
}

inline void SheetPath::SharedCtor() {
path_human_readable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_human_readable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SheetPath::~SheetPath() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.SheetPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SheetPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_human_readable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SheetPath::ArenaDtor(void* object) {
  SheetPath* _this = reinterpret_cast< SheetPath* >(object);
  (void)_this;
}
void SheetPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetPath::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.SheetPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  path_human_readable_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.KIID path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string path_human_readable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path_human_readable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.SheetPath.path_human_readable"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SheetPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.SheetPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_path(i), target, stream);
  }

  // string path_human_readable = 2;
  if (!this->_internal_path_human_readable().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_human_readable().data(), static_cast<int>(this->_internal_path_human_readable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.SheetPath.path_human_readable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_human_readable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.SheetPath)
  return target;
}

size_t SheetPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.SheetPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID path = 1;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string path_human_readable = 2;
  if (!this->_internal_path_human_readable().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_human_readable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SheetPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SheetPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SheetPath::GetClassData() const { return &_class_data_; }

void SheetPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SheetPath *>(to)->MergeFrom(
      static_cast<const SheetPath &>(from));
}


void SheetPath::MergeFrom(const SheetPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.SheetPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (!from._internal_path_human_readable().empty()) {
    _internal_set_path_human_readable(from._internal_path_human_readable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SheetPath::CopyFrom(const SheetPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.SheetPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetPath::IsInitialized() const {
  return true;
}

void SheetPath::InternalSwap(SheetPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_human_readable_, lhs_arena,
      &other->path_human_readable_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[4]);
}

// ===================================================================

class ProjectSpecifier::_Internal {
 public:
};

ProjectSpecifier::ProjectSpecifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.ProjectSpecifier)
}
ProjectSpecifier::ProjectSpecifier(const ProjectSpecifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.ProjectSpecifier)
}

inline void ProjectSpecifier::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProjectSpecifier::~ProjectSpecifier() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.ProjectSpecifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectSpecifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectSpecifier::ArenaDtor(void* object) {
  ProjectSpecifier* _this = reinterpret_cast< ProjectSpecifier* >(object);
  (void)_this;
}
void ProjectSpecifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectSpecifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectSpecifier::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.ProjectSpecifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectSpecifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.ProjectSpecifier.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.ProjectSpecifier.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectSpecifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.ProjectSpecifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.ProjectSpecifier.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.ProjectSpecifier.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.ProjectSpecifier)
  return target;
}

size_t ProjectSpecifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.ProjectSpecifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectSpecifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProjectSpecifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectSpecifier::GetClassData() const { return &_class_data_; }

void ProjectSpecifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProjectSpecifier *>(to)->MergeFrom(
      static_cast<const ProjectSpecifier &>(from));
}


void ProjectSpecifier::MergeFrom(const ProjectSpecifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.ProjectSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectSpecifier::CopyFrom(const ProjectSpecifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.ProjectSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectSpecifier::IsInitialized() const {
  return true;
}

void ProjectSpecifier::InternalSwap(ProjectSpecifier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectSpecifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[5]);
}

// ===================================================================

class DocumentSpecifier::_Internal {
 public:
  static const ::kiapi::common::types::LibraryIdentifier& lib_id(const DocumentSpecifier* msg);
  static const ::kiapi::common::types::SheetPath& sheet_path(const DocumentSpecifier* msg);
  static const ::kiapi::common::types::ProjectSpecifier& project(const DocumentSpecifier* msg);
};

const ::kiapi::common::types::LibraryIdentifier&
DocumentSpecifier::_Internal::lib_id(const DocumentSpecifier* msg) {
  return *msg->identifier_.lib_id_;
}
const ::kiapi::common::types::SheetPath&
DocumentSpecifier::_Internal::sheet_path(const DocumentSpecifier* msg) {
  return *msg->identifier_.sheet_path_;
}
const ::kiapi::common::types::ProjectSpecifier&
DocumentSpecifier::_Internal::project(const DocumentSpecifier* msg) {
  return *msg->project_;
}
void DocumentSpecifier::set_allocated_lib_id(::kiapi::common::types::LibraryIdentifier* lib_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_identifier();
  if (lib_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::LibraryIdentifier>::GetOwningArena(lib_id);
    if (message_arena != submessage_arena) {
      lib_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lib_id, submessage_arena);
    }
    set_has_lib_id();
    identifier_.lib_id_ = lib_id;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.DocumentSpecifier.lib_id)
}
void DocumentSpecifier::set_allocated_sheet_path(::kiapi::common::types::SheetPath* sheet_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_identifier();
  if (sheet_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::SheetPath>::GetOwningArena(sheet_path);
    if (message_arena != submessage_arena) {
      sheet_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_path, submessage_arena);
    }
    set_has_sheet_path();
    identifier_.sheet_path_ = sheet_path;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.DocumentSpecifier.sheet_path)
}
DocumentSpecifier::DocumentSpecifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.DocumentSpecifier)
}
DocumentSpecifier::DocumentSpecifier(const DocumentSpecifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_project()) {
    project_ = new ::kiapi::common::types::ProjectSpecifier(*from.project_);
  } else {
    project_ = nullptr;
  }
  type_ = from.type_;
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kLibId: {
      _internal_mutable_lib_id()->::kiapi::common::types::LibraryIdentifier::MergeFrom(from._internal_lib_id());
      break;
    }
    case kSheetPath: {
      _internal_mutable_sheet_path()->::kiapi::common::types::SheetPath::MergeFrom(from._internal_sheet_path());
      break;
    }
    case kBoardFilename: {
      _internal_set_board_filename(from._internal_board_filename());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.DocumentSpecifier)
}

inline void DocumentSpecifier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&project_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&project_)) + sizeof(type_));
clear_has_identifier();
}

DocumentSpecifier::~DocumentSpecifier() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.DocumentSpecifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentSpecifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete project_;
  if (has_identifier()) {
    clear_identifier();
  }
}

void DocumentSpecifier::ArenaDtor(void* object) {
  DocumentSpecifier* _this = reinterpret_cast< DocumentSpecifier* >(object);
  (void)_this;
}
void DocumentSpecifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentSpecifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentSpecifier::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:kiapi.common.types.DocumentSpecifier)
  switch (identifier_case()) {
    case kLibId: {
      if (GetArenaForAllocation() == nullptr) {
        delete identifier_.lib_id_;
      }
      break;
    }
    case kSheetPath: {
      if (GetArenaForAllocation() == nullptr) {
        delete identifier_.sheet_path_;
      }
      break;
    }
    case kBoardFilename: {
      identifier_.board_filename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void DocumentSpecifier::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.DocumentSpecifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && project_ != nullptr) {
    delete project_;
  }
  project_ = nullptr;
  type_ = 0;
  clear_identifier();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSpecifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::common::types::DocumentType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LibraryIdentifier lib_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lib_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.SheetPath sheet_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string board_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_board_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.DocumentSpecifier.board_filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.ProjectSpecifier project = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_project(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentSpecifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.DocumentSpecifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .kiapi.common.types.LibraryIdentifier lib_id = 2;
  if (_internal_has_lib_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lib_id(this), target, stream);
  }

  // .kiapi.common.types.SheetPath sheet_path = 3;
  if (_internal_has_sheet_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_path(this), target, stream);
  }

  // string board_filename = 4;
  if (_internal_has_board_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_board_filename().data(), static_cast<int>(this->_internal_board_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.DocumentSpecifier.board_filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_board_filename(), target);
  }

  // .kiapi.common.types.ProjectSpecifier project = 5;
  if (this->_internal_has_project()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::project(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.DocumentSpecifier)
  return target;
}

size_t DocumentSpecifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.DocumentSpecifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.ProjectSpecifier project = 5;
  if (this->_internal_has_project()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *project_);
  }

  // .kiapi.common.types.DocumentType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (identifier_case()) {
    // .kiapi.common.types.LibraryIdentifier lib_id = 2;
    case kLibId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_.lib_id_);
      break;
    }
    // .kiapi.common.types.SheetPath sheet_path = 3;
    case kSheetPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_.sheet_path_);
      break;
    }
    // string board_filename = 4;
    case kBoardFilename: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_board_filename());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSpecifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentSpecifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSpecifier::GetClassData() const { return &_class_data_; }

void DocumentSpecifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DocumentSpecifier *>(to)->MergeFrom(
      static_cast<const DocumentSpecifier &>(from));
}


void DocumentSpecifier::MergeFrom(const DocumentSpecifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.DocumentSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_project()) {
    _internal_mutable_project()->::kiapi::common::types::ProjectSpecifier::MergeFrom(from._internal_project());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.identifier_case()) {
    case kLibId: {
      _internal_mutable_lib_id()->::kiapi::common::types::LibraryIdentifier::MergeFrom(from._internal_lib_id());
      break;
    }
    case kSheetPath: {
      _internal_mutable_sheet_path()->::kiapi::common::types::SheetPath::MergeFrom(from._internal_sheet_path());
      break;
    }
    case kBoardFilename: {
      _internal_set_board_filename(from._internal_board_filename());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSpecifier::CopyFrom(const DocumentSpecifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.DocumentSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSpecifier::IsInitialized() const {
  return true;
}

void DocumentSpecifier::InternalSwap(DocumentSpecifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentSpecifier, type_)
      + sizeof(DocumentSpecifier::type_)
      - PROTOBUF_FIELD_OFFSET(DocumentSpecifier, project_)>(
          reinterpret_cast<char*>(&project_),
          reinterpret_cast<char*>(&other->project_));
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSpecifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[6]);
}

// ===================================================================

class ItemHeader::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const ItemHeader* msg);
  static const ::kiapi::common::types::KIID& container(const ItemHeader* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& field_mask(const ItemHeader* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
ItemHeader::_Internal::document(const ItemHeader* msg) {
  return *msg->document_;
}
const ::kiapi::common::types::KIID&
ItemHeader::_Internal::container(const ItemHeader* msg) {
  return *msg->container_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
ItemHeader::_Internal::field_mask(const ItemHeader* msg) {
  return *msg->field_mask_;
}
void ItemHeader::clear_field_mask() {
  if (GetArenaForAllocation() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
}
ItemHeader::ItemHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.ItemHeader)
}
ItemHeader::ItemHeader(const ItemHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from._internal_has_container()) {
    container_ = new ::kiapi::common::types::KIID(*from.container_);
  } else {
    container_ = nullptr;
  }
  if (from._internal_has_field_mask()) {
    field_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.field_mask_);
  } else {
    field_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.ItemHeader)
}

inline void ItemHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&document_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_mask_) -
    reinterpret_cast<char*>(&document_)) + sizeof(field_mask_));
}

ItemHeader::~ItemHeader() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.ItemHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete container_;
  if (this != internal_default_instance()) delete field_mask_;
}

void ItemHeader::ArenaDtor(void* object) {
  ItemHeader* _this = reinterpret_cast< ItemHeader* >(object);
  (void)_this;
}
void ItemHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.ItemHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  if (GetArenaForAllocation() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.KIID container = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask field_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.ItemHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  // .kiapi.common.types.KIID container = 2;
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::container(this), target, stream);
  }

  // .google.protobuf.FieldMask field_mask = 3;
  if (this->_internal_has_field_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::field_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.ItemHeader)
  return target;
}

size_t ItemHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.ItemHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .kiapi.common.types.KIID container = 2;
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  // .google.protobuf.FieldMask field_mask = 3;
  if (this->_internal_has_field_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemHeader::GetClassData() const { return &_class_data_; }

void ItemHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemHeader *>(to)->MergeFrom(
      static_cast<const ItemHeader &>(from));
}


void ItemHeader::MergeFrom(const ItemHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.ItemHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  if (from._internal_has_container()) {
    _internal_mutable_container()->::kiapi::common::types::KIID::MergeFrom(from._internal_container());
  }
  if (from._internal_has_field_mask()) {
    _internal_mutable_field_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_field_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemHeader::CopyFrom(const ItemHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.ItemHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemHeader::IsInitialized() const {
  return true;
}

void ItemHeader::InternalSwap(ItemHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemHeader, field_mask_)
      + sizeof(ItemHeader::field_mask_)
      - PROTOBUF_FIELD_OFFSET(ItemHeader, document_)>(
          reinterpret_cast<char*>(&document_),
          reinterpret_cast<char*>(&other->document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[7]);
}

// ===================================================================

class Vector2::_Internal {
 public:
};

Vector2::Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_nm_, &from.x_nm_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_nm_) -
    reinterpret_cast<char*>(&x_nm_)) + sizeof(y_nm_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Vector2)
}

inline void Vector2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_nm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_nm_) -
    reinterpret_cast<char*>(&x_nm_)) + sizeof(y_nm_));
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Vector2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2::ArenaDtor(void* object) {
  Vector2* _this = reinterpret_cast< Vector2* >(object);
  (void)_this;
}
void Vector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Vector2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_nm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_nm_) -
      reinterpret_cast<char*>(&x_nm_)) + sizeof(y_nm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 x_nm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 y_nm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Vector2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x_nm = 1;
  if (this->_internal_x_nm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_x_nm(), target);
  }

  // int64 y_nm = 2;
  if (this->_internal_y_nm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_y_nm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Vector2)
  return target;
}

size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Vector2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 x_nm = 1;
  if (this->_internal_x_nm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_x_nm());
  }

  // int64 y_nm = 2;
  if (this->_internal_y_nm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_y_nm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2::GetClassData() const { return &_class_data_; }

void Vector2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector2 *>(to)->MergeFrom(
      static_cast<const Vector2 &>(from));
}


void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x_nm() != 0) {
    _internal_set_x_nm(from._internal_x_nm());
  }
  if (from._internal_y_nm() != 0) {
    _internal_set_y_nm(from._internal_y_nm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  return true;
}

void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2, y_nm_)
      + sizeof(Vector2::y_nm_)
      - PROTOBUF_FIELD_OFFSET(Vector2, x_nm_)>(
          reinterpret_cast<char*>(&x_nm_),
          reinterpret_cast<char*>(&other->x_nm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[8]);
}

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_nm_, &from.x_nm_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_nm_) -
    reinterpret_cast<char*>(&x_nm_)) + sizeof(z_nm_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Vector3)
}

inline void Vector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_nm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_nm_) -
    reinterpret_cast<char*>(&x_nm_)) + sizeof(z_nm_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Vector3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_nm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_nm_) -
      reinterpret_cast<char*>(&x_nm_)) + sizeof(z_nm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 x_nm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 y_nm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 z_nm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          z_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x_nm = 1;
  if (this->_internal_x_nm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_x_nm(), target);
  }

  // int64 y_nm = 2;
  if (this->_internal_y_nm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_y_nm(), target);
  }

  // int64 z_nm = 3;
  if (this->_internal_z_nm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_z_nm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 x_nm = 1;
  if (this->_internal_x_nm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_x_nm());
  }

  // int64 y_nm = 2;
  if (this->_internal_y_nm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_y_nm());
  }

  // int64 z_nm = 3;
  if (this->_internal_z_nm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_z_nm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }

void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector3 *>(to)->MergeFrom(
      static_cast<const Vector3 &>(from));
}


void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x_nm() != 0) {
    _internal_set_x_nm(from._internal_x_nm());
  }
  if (from._internal_y_nm() != 0) {
    _internal_set_y_nm(from._internal_y_nm());
  }
  if (from._internal_z_nm() != 0) {
    _internal_set_z_nm(from._internal_z_nm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_nm_)
      + sizeof(Vector3::z_nm_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_nm_)>(
          reinterpret_cast<char*>(&x_nm_),
          reinterpret_cast<char*>(&other->x_nm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[9]);
}

// ===================================================================

class Vector3D::_Internal {
 public:
};

Vector3D::Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_nm_, &from.x_nm_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_nm_) -
    reinterpret_cast<char*>(&x_nm_)) + sizeof(z_nm_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Vector3D)
}

inline void Vector3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_nm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_nm_) -
    reinterpret_cast<char*>(&x_nm_)) + sizeof(z_nm_));
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Vector3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3D::ArenaDtor(void* object) {
  Vector3D* _this = reinterpret_cast< Vector3D* >(object);
  (void)_this;
}
void Vector3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Vector3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_nm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_nm_) -
      reinterpret_cast<char*>(&x_nm_)) + sizeof(z_nm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x_nm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y_nm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z_nm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Vector3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_nm = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_nm = this->_internal_x_nm();
  uint64_t raw_x_nm;
  memcpy(&raw_x_nm, &tmp_x_nm, sizeof(tmp_x_nm));
  if (raw_x_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x_nm(), target);
  }

  // double y_nm = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_nm = this->_internal_y_nm();
  uint64_t raw_y_nm;
  memcpy(&raw_y_nm, &tmp_y_nm, sizeof(tmp_y_nm));
  if (raw_y_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y_nm(), target);
  }

  // double z_nm = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_nm = this->_internal_z_nm();
  uint64_t raw_z_nm;
  memcpy(&raw_z_nm, &tmp_z_nm, sizeof(tmp_z_nm));
  if (raw_z_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z_nm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Vector3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x_nm = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_nm = this->_internal_x_nm();
  uint64_t raw_x_nm;
  memcpy(&raw_x_nm, &tmp_x_nm, sizeof(tmp_x_nm));
  if (raw_x_nm != 0) {
    total_size += 1 + 8;
  }

  // double y_nm = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_nm = this->_internal_y_nm();
  uint64_t raw_y_nm;
  memcpy(&raw_y_nm, &tmp_y_nm, sizeof(tmp_y_nm));
  if (raw_y_nm != 0) {
    total_size += 1 + 8;
  }

  // double z_nm = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_nm = this->_internal_z_nm();
  uint64_t raw_z_nm;
  memcpy(&raw_z_nm, &tmp_z_nm, sizeof(tmp_z_nm));
  if (raw_z_nm != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3D::GetClassData() const { return &_class_data_; }

void Vector3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector3D *>(to)->MergeFrom(
      static_cast<const Vector3D &>(from));
}


void Vector3D::MergeFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_nm = from._internal_x_nm();
  uint64_t raw_x_nm;
  memcpy(&raw_x_nm, &tmp_x_nm, sizeof(tmp_x_nm));
  if (raw_x_nm != 0) {
    _internal_set_x_nm(from._internal_x_nm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_nm = from._internal_y_nm();
  uint64_t raw_y_nm;
  memcpy(&raw_y_nm, &tmp_y_nm, sizeof(tmp_y_nm));
  if (raw_y_nm != 0) {
    _internal_set_y_nm(from._internal_y_nm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_nm = from._internal_z_nm();
  uint64_t raw_z_nm;
  memcpy(&raw_z_nm, &tmp_z_nm, sizeof(tmp_z_nm));
  if (raw_z_nm != 0) {
    _internal_set_z_nm(from._internal_z_nm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::InternalSwap(Vector3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3D, z_nm_)
      + sizeof(Vector3D::z_nm_)
      - PROTOBUF_FIELD_OFFSET(Vector3D, x_nm_)>(
          reinterpret_cast<char*>(&x_nm_),
          reinterpret_cast<char*>(&other->x_nm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[10]);
}

// ===================================================================

class Box2::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& position(const Box2* msg);
  static const ::kiapi::common::types::Vector2& size(const Box2* msg);
};

const ::kiapi::common::types::Vector2&
Box2::_Internal::position(const Box2* msg) {
  return *msg->position_;
}
const ::kiapi::common::types::Vector2&
Box2::_Internal::size(const Box2* msg) {
  return *msg->size_;
}
Box2::Box2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Box2)
}
Box2::Box2(const Box2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::kiapi::common::types::Vector2(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Box2)
}

inline void Box2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&position_)) + sizeof(size_));
}

Box2::~Box2() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Box2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Box2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete size_;
}

void Box2::ArenaDtor(void* object) {
  Box2* _this = reinterpret_cast< Box2* >(object);
  (void)_this;
}
void Box2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Box2::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Box2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Box2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Box2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .kiapi.common.types.Vector2 size = 2;
  if (this->_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Box2)
  return target;
}

size_t Box2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Box2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.common.types.Vector2 size = 2;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Box2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Box2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Box2::GetClassData() const { return &_class_data_; }

void Box2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Box2 *>(to)->MergeFrom(
      static_cast<const Box2 &>(from));
}


void Box2::MergeFrom(const Box2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Box2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_size()) {
    _internal_mutable_size()->::kiapi::common::types::Vector2::MergeFrom(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Box2::CopyFrom(const Box2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Box2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box2::IsInitialized() const {
  return true;
}

void Box2::InternalSwap(Box2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box2, size_)
      + sizeof(Box2::size_)
      - PROTOBUF_FIELD_OFFSET(Box2, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[11]);
}

// ===================================================================

class Distance::_Internal {
 public:
};

Distance::Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Distance)
}
Distance::Distance(const Distance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_nm_ = from.value_nm_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Distance)
}

inline void Distance::SharedCtor() {
value_nm_ = int64_t{0};
}

Distance::~Distance() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Distance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Distance::ArenaDtor(void* object) {
  Distance* _this = reinterpret_cast< Distance* >(object);
  (void)_this;
}
void Distance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distance::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Distance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_nm_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value_nm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Distance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value_nm = 1;
  if (this->_internal_value_nm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value_nm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Distance)
  return target;
}

size_t Distance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Distance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value_nm = 1;
  if (this->_internal_value_nm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value_nm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distance::GetClassData() const { return &_class_data_; }

void Distance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distance *>(to)->MergeFrom(
      static_cast<const Distance &>(from));
}


void Distance::MergeFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Distance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value_nm() != 0) {
    _internal_set_value_nm(from._internal_value_nm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distance::CopyFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distance::IsInitialized() const {
  return true;
}

void Distance::InternalSwap(Distance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_nm_, other->value_nm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[12]);
}

// ===================================================================

class Angle::_Internal {
 public:
};

Angle::Angle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Angle)
}
Angle::Angle(const Angle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_degrees_ = from.value_degrees_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Angle)
}

inline void Angle::SharedCtor() {
value_degrees_ = 0;
}

Angle::~Angle() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Angle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Angle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Angle::ArenaDtor(void* object) {
  Angle* _this = reinterpret_cast< Angle* >(object);
  (void)_this;
}
void Angle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Angle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Angle::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Angle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_degrees_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Angle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value_degrees = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          value_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Angle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Angle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value_degrees = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value_degrees = this->_internal_value_degrees();
  uint64_t raw_value_degrees;
  memcpy(&raw_value_degrees, &tmp_value_degrees, sizeof(tmp_value_degrees));
  if (raw_value_degrees != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Angle)
  return target;
}

size_t Angle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Angle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value_degrees = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value_degrees = this->_internal_value_degrees();
  uint64_t raw_value_degrees;
  memcpy(&raw_value_degrees, &tmp_value_degrees, sizeof(tmp_value_degrees));
  if (raw_value_degrees != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Angle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Angle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Angle::GetClassData() const { return &_class_data_; }

void Angle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Angle *>(to)->MergeFrom(
      static_cast<const Angle &>(from));
}


void Angle::MergeFrom(const Angle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Angle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value_degrees = from._internal_value_degrees();
  uint64_t raw_value_degrees;
  memcpy(&raw_value_degrees, &tmp_value_degrees, sizeof(tmp_value_degrees));
  if (raw_value_degrees != 0) {
    _internal_set_value_degrees(from._internal_value_degrees());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Angle::CopyFrom(const Angle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Angle::IsInitialized() const {
  return true;
}

void Angle::InternalSwap(Angle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_degrees_, other->value_degrees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Angle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[13]);
}

// ===================================================================

class Ratio::_Internal {
 public:
};

Ratio::Ratio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Ratio)
}
Ratio::Ratio(const Ratio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Ratio)
}

inline void Ratio::SharedCtor() {
value_ = 0;
}

Ratio::~Ratio() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Ratio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ratio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ratio::ArenaDtor(void* object) {
  Ratio* _this = reinterpret_cast< Ratio* >(object);
  (void)_this;
}
void Ratio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ratio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ratio::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Ratio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ratio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ratio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Ratio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Ratio)
  return target;
}

size_t Ratio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Ratio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ratio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ratio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ratio::GetClassData() const { return &_class_data_; }

void Ratio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ratio *>(to)->MergeFrom(
      static_cast<const Ratio &>(from));
}


void Ratio::MergeFrom(const Ratio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Ratio)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ratio::CopyFrom(const Ratio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Ratio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ratio::IsInitialized() const {
  return true;
}

void Ratio::InternalSwap(Ratio* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ratio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[14]);
}

// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Color)
}

inline void Color::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Color)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double r = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = this->_internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_r(), target);
  }

  // double g = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_g = this->_internal_g();
  uint64_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_g(), target);
  }

  // double b = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_b = this->_internal_b();
  uint64_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_b(), target);
  }

  // double a = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = this->_internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double r = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = this->_internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 8;
  }

  // double g = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_g = this->_internal_g();
  uint64_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 8;
  }

  // double b = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_b = this->_internal_b();
  uint64_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 8;
  }

  // double a = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = this->_internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }

void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Color *>(to)->MergeFrom(
      static_cast<const Color &>(from));
}


void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Color)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = from._internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_g = from._internal_g();
  uint64_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_b = from._internal_b();
  uint64_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _internal_set_b(from._internal_b());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = from._internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, a_)
      + sizeof(Color::a_)
      - PROTOBUF_FIELD_OFFSET(Color, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[15]);
}

// ===================================================================

class ArcStartMidEnd::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& start(const ArcStartMidEnd* msg);
  static const ::kiapi::common::types::Vector2& mid(const ArcStartMidEnd* msg);
  static const ::kiapi::common::types::Vector2& end(const ArcStartMidEnd* msg);
};

const ::kiapi::common::types::Vector2&
ArcStartMidEnd::_Internal::start(const ArcStartMidEnd* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
ArcStartMidEnd::_Internal::mid(const ArcStartMidEnd* msg) {
  return *msg->mid_;
}
const ::kiapi::common::types::Vector2&
ArcStartMidEnd::_Internal::end(const ArcStartMidEnd* msg) {
  return *msg->end_;
}
ArcStartMidEnd::ArcStartMidEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.ArcStartMidEnd)
}
ArcStartMidEnd::ArcStartMidEnd(const ArcStartMidEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_mid()) {
    mid_ = new ::kiapi::common::types::Vector2(*from.mid_);
  } else {
    mid_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.ArcStartMidEnd)
}

inline void ArcStartMidEnd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

ArcStartMidEnd::~ArcStartMidEnd() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.ArcStartMidEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArcStartMidEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete mid_;
  if (this != internal_default_instance()) delete end_;
}

void ArcStartMidEnd::ArenaDtor(void* object) {
  ArcStartMidEnd* _this = reinterpret_cast< ArcStartMidEnd* >(object);
  (void)_this;
}
void ArcStartMidEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArcStartMidEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArcStartMidEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.ArcStartMidEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mid_ != nullptr) {
    delete mid_;
  }
  mid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArcStartMidEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArcStartMidEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.ArcStartMidEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 mid = 2;
  if (this->_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mid(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.ArcStartMidEnd)
  return target;
}

size_t ArcStartMidEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.ArcStartMidEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 mid = 2;
  if (this->_internal_has_mid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mid_);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArcStartMidEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArcStartMidEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArcStartMidEnd::GetClassData() const { return &_class_data_; }

void ArcStartMidEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ArcStartMidEnd *>(to)->MergeFrom(
      static_cast<const ArcStartMidEnd &>(from));
}


void ArcStartMidEnd::MergeFrom(const ArcStartMidEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.ArcStartMidEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_mid()) {
    _internal_mutable_mid()->::kiapi::common::types::Vector2::MergeFrom(from._internal_mid());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArcStartMidEnd::CopyFrom(const ArcStartMidEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.ArcStartMidEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArcStartMidEnd::IsInitialized() const {
  return true;
}

void ArcStartMidEnd::InternalSwap(ArcStartMidEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArcStartMidEnd, end_)
      + sizeof(ArcStartMidEnd::end_)
      - PROTOBUF_FIELD_OFFSET(ArcStartMidEnd, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArcStartMidEnd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[16]);
}

// ===================================================================

class PolyLineNode::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& point(const PolyLineNode* msg);
  static const ::kiapi::common::types::ArcStartMidEnd& arc(const PolyLineNode* msg);
};

const ::kiapi::common::types::Vector2&
PolyLineNode::_Internal::point(const PolyLineNode* msg) {
  return *msg->geometry_.point_;
}
const ::kiapi::common::types::ArcStartMidEnd&
PolyLineNode::_Internal::arc(const PolyLineNode* msg) {
  return *msg->geometry_.arc_;
}
void PolyLineNode::set_allocated_point(::kiapi::common::types::Vector2* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::Vector2>::GetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
    geometry_.point_ = point;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.PolyLineNode.point)
}
void PolyLineNode::set_allocated_arc(::kiapi::common::types::ArcStartMidEnd* arc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (arc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::ArcStartMidEnd>::GetOwningArena(arc);
    if (message_arena != submessage_arena) {
      arc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc, submessage_arena);
    }
    set_has_arc();
    geometry_.arc_ = arc;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.PolyLineNode.arc)
}
PolyLineNode::PolyLineNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.PolyLineNode)
}
PolyLineNode::PolyLineNode(const PolyLineNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kPoint: {
      _internal_mutable_point()->::kiapi::common::types::Vector2::MergeFrom(from._internal_point());
      break;
    }
    case kArc: {
      _internal_mutable_arc()->::kiapi::common::types::ArcStartMidEnd::MergeFrom(from._internal_arc());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.PolyLineNode)
}

inline void PolyLineNode::SharedCtor() {
clear_has_geometry();
}

PolyLineNode::~PolyLineNode() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.PolyLineNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolyLineNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_geometry()) {
    clear_geometry();
  }
}

void PolyLineNode::ArenaDtor(void* object) {
  PolyLineNode* _this = reinterpret_cast< PolyLineNode* >(object);
  (void)_this;
}
void PolyLineNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolyLineNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolyLineNode::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:kiapi.common.types.PolyLineNode)
  switch (geometry_case()) {
    case kPoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.point_;
      }
      break;
    }
    case kArc: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.arc_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void PolyLineNode::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.PolyLineNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_geometry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyLineNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.ArcStartMidEnd arc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolyLineNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.PolyLineNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 point = 1;
  if (_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  // .kiapi.common.types.ArcStartMidEnd arc = 2;
  if (_internal_has_arc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::arc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.PolyLineNode)
  return target;
}

size_t PolyLineNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.PolyLineNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (geometry_case()) {
    // .kiapi.common.types.Vector2 point = 1;
    case kPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.point_);
      break;
    }
    // .kiapi.common.types.ArcStartMidEnd arc = 2;
    case kArc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.arc_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolyLineNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolyLineNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolyLineNode::GetClassData() const { return &_class_data_; }

void PolyLineNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolyLineNode *>(to)->MergeFrom(
      static_cast<const PolyLineNode &>(from));
}


void PolyLineNode::MergeFrom(const PolyLineNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.PolyLineNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.geometry_case()) {
    case kPoint: {
      _internal_mutable_point()->::kiapi::common::types::Vector2::MergeFrom(from._internal_point());
      break;
    }
    case kArc: {
      _internal_mutable_arc()->::kiapi::common::types::ArcStartMidEnd::MergeFrom(from._internal_arc());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolyLineNode::CopyFrom(const PolyLineNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.PolyLineNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyLineNode::IsInitialized() const {
  return true;
}

void PolyLineNode::InternalSwap(PolyLineNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyLineNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[17]);
}

// ===================================================================

class PolyLine::_Internal {
 public:
};

PolyLine::PolyLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.PolyLine)
}
PolyLine::PolyLine(const PolyLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  closed_ = from.closed_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.PolyLine)
}

inline void PolyLine::SharedCtor() {
closed_ = false;
}

PolyLine::~PolyLine() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.PolyLine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolyLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PolyLine::ArenaDtor(void* object) {
  PolyLine* _this = reinterpret_cast< PolyLine* >(object);
  (void)_this;
}
void PolyLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolyLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolyLine::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.PolyLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  closed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.PolyLineNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool closed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolyLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.PolyLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.PolyLineNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  // bool closed = 2;
  if (this->_internal_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_closed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.PolyLine)
  return target;
}

size_t PolyLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.PolyLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.PolyLineNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool closed = 2;
  if (this->_internal_closed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolyLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolyLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolyLine::GetClassData() const { return &_class_data_; }

void PolyLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolyLine *>(to)->MergeFrom(
      static_cast<const PolyLine &>(from));
}


void PolyLine::MergeFrom(const PolyLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.PolyLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from._internal_closed() != 0) {
    _internal_set_closed(from._internal_closed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolyLine::CopyFrom(const PolyLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.PolyLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyLine::IsInitialized() const {
  return true;
}

void PolyLine::InternalSwap(PolyLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  swap(closed_, other->closed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[18]);
}

// ===================================================================

class PolygonWithHoles::_Internal {
 public:
  static const ::kiapi::common::types::PolyLine& outline(const PolygonWithHoles* msg);
};

const ::kiapi::common::types::PolyLine&
PolygonWithHoles::_Internal::outline(const PolygonWithHoles* msg) {
  return *msg->outline_;
}
PolygonWithHoles::PolygonWithHoles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  holes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.PolygonWithHoles)
}
PolygonWithHoles::PolygonWithHoles(const PolygonWithHoles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      holes_(from.holes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outline()) {
    outline_ = new ::kiapi::common::types::PolyLine(*from.outline_);
  } else {
    outline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.PolygonWithHoles)
}

inline void PolygonWithHoles::SharedCtor() {
outline_ = nullptr;
}

PolygonWithHoles::~PolygonWithHoles() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.PolygonWithHoles)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolygonWithHoles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete outline_;
}

void PolygonWithHoles::ArenaDtor(void* object) {
  PolygonWithHoles* _this = reinterpret_cast< PolygonWithHoles* >(object);
  (void)_this;
}
void PolygonWithHoles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolygonWithHoles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolygonWithHoles::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.PolygonWithHoles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  holes_.Clear();
  if (GetArenaForAllocation() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonWithHoles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.PolyLine outline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.PolyLine holes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_holes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolygonWithHoles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.PolygonWithHoles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.PolyLine outline = 1;
  if (this->_internal_has_outline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::outline(this), target, stream);
  }

  // repeated .kiapi.common.types.PolyLine holes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_holes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_holes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.PolygonWithHoles)
  return target;
}

size_t PolygonWithHoles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.PolygonWithHoles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.PolyLine holes = 2;
  total_size += 1UL * this->_internal_holes_size();
  for (const auto& msg : this->holes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.PolyLine outline = 1;
  if (this->_internal_has_outline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolygonWithHoles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolygonWithHoles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolygonWithHoles::GetClassData() const { return &_class_data_; }

void PolygonWithHoles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolygonWithHoles *>(to)->MergeFrom(
      static_cast<const PolygonWithHoles &>(from));
}


void PolygonWithHoles::MergeFrom(const PolygonWithHoles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.PolygonWithHoles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  holes_.MergeFrom(from.holes_);
  if (from._internal_has_outline()) {
    _internal_mutable_outline()->::kiapi::common::types::PolyLine::MergeFrom(from._internal_outline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolygonWithHoles::CopyFrom(const PolygonWithHoles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.PolygonWithHoles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonWithHoles::IsInitialized() const {
  return true;
}

void PolygonWithHoles::InternalSwap(PolygonWithHoles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  holes_.InternalSwap(&other->holes_);
  swap(outline_, other->outline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonWithHoles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[19]);
}

// ===================================================================

class PolySet::_Internal {
 public:
};

PolySet::PolySet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  polygons_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.PolySet)
}
PolySet::PolySet(const PolySet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.PolySet)
}

inline void PolySet::SharedCtor() {
}

PolySet::~PolySet() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.PolySet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolySet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PolySet::ArenaDtor(void* object) {
  PolySet* _this = reinterpret_cast< PolySet* >(object);
  (void)_this;
}
void PolySet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolySet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolySet::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.PolySet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolySet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.PolygonWithHoles polygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolySet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.PolySet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.PolygonWithHoles polygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.PolySet)
  return target;
}

size_t PolySet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.PolySet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.PolygonWithHoles polygons = 1;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolySet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolySet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolySet::GetClassData() const { return &_class_data_; }

void PolySet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolySet *>(to)->MergeFrom(
      static_cast<const PolySet &>(from));
}


void PolySet::MergeFrom(const PolySet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.PolySet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolySet::CopyFrom(const PolySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.PolySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolySet::IsInitialized() const {
  return true;
}

void PolySet::InternalSwap(PolySet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolySet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[20]);
}

// ===================================================================

class TextAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Angle& angle(const TextAttributes* msg);
  static const ::kiapi::common::types::Distance& stroke_width(const TextAttributes* msg);
  static const ::kiapi::common::types::Vector2& size(const TextAttributes* msg);
};

const ::kiapi::common::types::Angle&
TextAttributes::_Internal::angle(const TextAttributes* msg) {
  return *msg->angle_;
}
const ::kiapi::common::types::Distance&
TextAttributes::_Internal::stroke_width(const TextAttributes* msg) {
  return *msg->stroke_width_;
}
const ::kiapi::common::types::Vector2&
TextAttributes::_Internal::size(const TextAttributes* msg) {
  return *msg->size_;
}
TextAttributes::TextAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.TextAttributes)
}
TextAttributes::TextAttributes(const TextAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    font_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_font_name().empty()) {
    font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_angle()) {
    angle_ = new ::kiapi::common::types::Angle(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  if (from._internal_has_stroke_width()) {
    stroke_width_ = new ::kiapi::common::types::Distance(*from.stroke_width_);
  } else {
    stroke_width_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::kiapi::common::types::Vector2(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&horizontal_alignment_, &from.horizontal_alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_upright_) -
    reinterpret_cast<char*>(&horizontal_alignment_)) + sizeof(keep_upright_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.TextAttributes)
}

inline void TextAttributes::SharedCtor() {
font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  font_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keep_upright_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(keep_upright_));
}

TextAttributes::~TextAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.TextAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete stroke_width_;
  if (this != internal_default_instance()) delete size_;
}

void TextAttributes::ArenaDtor(void* object) {
  TextAttributes* _this = reinterpret_cast< TextAttributes* >(object);
  (void)_this;
}
void TextAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.TextAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  font_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stroke_width_ != nullptr) {
    delete stroke_width_;
  }
  stroke_width_ = nullptr;
  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  ::memset(&horizontal_alignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_upright_) -
      reinterpret_cast<char*>(&horizontal_alignment_)) + sizeof(keep_upright_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string font_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TextAttributes.font_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.HorizontalAlignment horizontal_alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_horizontal_alignment(static_cast<::kiapi::common::types::HorizontalAlignment>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.VerticalAlignment vertical_alignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertical_alignment(static_cast<::kiapi::common::types::VerticalAlignment>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Angle angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double line_spacing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          line_spacing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance stroke_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool italic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          italic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool underlined = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          underlined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool visible = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mirrored = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          mirrored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool multiline = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          multiline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keep_upright = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          keep_upright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.TextAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string font_name = 1;
  if (!this->_internal_font_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TextAttributes.font_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_font_name(), target);
  }

  // .kiapi.common.types.HorizontalAlignment horizontal_alignment = 2;
  if (this->_internal_horizontal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_horizontal_alignment(), target);
  }

  // .kiapi.common.types.VerticalAlignment vertical_alignment = 3;
  if (this->_internal_vertical_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vertical_alignment(), target);
  }

  // .kiapi.common.types.Angle angle = 4;
  if (this->_internal_has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::angle(this), target, stream);
  }

  // double line_spacing = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_spacing = this->_internal_line_spacing();
  uint64_t raw_line_spacing;
  memcpy(&raw_line_spacing, &tmp_line_spacing, sizeof(tmp_line_spacing));
  if (raw_line_spacing != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_line_spacing(), target);
  }

  // .kiapi.common.types.Distance stroke_width = 6;
  if (this->_internal_has_stroke_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stroke_width(this), target, stream);
  }

  // bool italic = 7;
  if (this->_internal_italic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_italic(), target);
  }

  // bool bold = 8;
  if (this->_internal_bold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_bold(), target);
  }

  // bool underlined = 9;
  if (this->_internal_underlined() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_underlined(), target);
  }

  // bool visible = 10;
  if (this->_internal_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_visible(), target);
  }

  // bool mirrored = 11;
  if (this->_internal_mirrored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_mirrored(), target);
  }

  // bool multiline = 12;
  if (this->_internal_multiline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_multiline(), target);
  }

  // bool keep_upright = 13;
  if (this->_internal_keep_upright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_keep_upright(), target);
  }

  // .kiapi.common.types.Vector2 size = 14;
  if (this->_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.TextAttributes)
  return target;
}

size_t TextAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.TextAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string font_name = 1;
  if (!this->_internal_font_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());
  }

  // .kiapi.common.types.Angle angle = 4;
  if (this->_internal_has_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angle_);
  }

  // .kiapi.common.types.Distance stroke_width = 6;
  if (this->_internal_has_stroke_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stroke_width_);
  }

  // .kiapi.common.types.Vector2 size = 14;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .kiapi.common.types.HorizontalAlignment horizontal_alignment = 2;
  if (this->_internal_horizontal_alignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horizontal_alignment());
  }

  // .kiapi.common.types.VerticalAlignment vertical_alignment = 3;
  if (this->_internal_vertical_alignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
  }

  // double line_spacing = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_spacing = this->_internal_line_spacing();
  uint64_t raw_line_spacing;
  memcpy(&raw_line_spacing, &tmp_line_spacing, sizeof(tmp_line_spacing));
  if (raw_line_spacing != 0) {
    total_size += 1 + 8;
  }

  // bool italic = 7;
  if (this->_internal_italic() != 0) {
    total_size += 1 + 1;
  }

  // bool bold = 8;
  if (this->_internal_bold() != 0) {
    total_size += 1 + 1;
  }

  // bool underlined = 9;
  if (this->_internal_underlined() != 0) {
    total_size += 1 + 1;
  }

  // bool visible = 10;
  if (this->_internal_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool mirrored = 11;
  if (this->_internal_mirrored() != 0) {
    total_size += 1 + 1;
  }

  // bool multiline = 12;
  if (this->_internal_multiline() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_upright = 13;
  if (this->_internal_keep_upright() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextAttributes::GetClassData() const { return &_class_data_; }

void TextAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextAttributes *>(to)->MergeFrom(
      static_cast<const TextAttributes &>(from));
}


void TextAttributes::MergeFrom(const TextAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.TextAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_font_name().empty()) {
    _internal_set_font_name(from._internal_font_name());
  }
  if (from._internal_has_angle()) {
    _internal_mutable_angle()->::kiapi::common::types::Angle::MergeFrom(from._internal_angle());
  }
  if (from._internal_has_stroke_width()) {
    _internal_mutable_stroke_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_stroke_width());
  }
  if (from._internal_has_size()) {
    _internal_mutable_size()->::kiapi::common::types::Vector2::MergeFrom(from._internal_size());
  }
  if (from._internal_horizontal_alignment() != 0) {
    _internal_set_horizontal_alignment(from._internal_horizontal_alignment());
  }
  if (from._internal_vertical_alignment() != 0) {
    _internal_set_vertical_alignment(from._internal_vertical_alignment());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_spacing = from._internal_line_spacing();
  uint64_t raw_line_spacing;
  memcpy(&raw_line_spacing, &tmp_line_spacing, sizeof(tmp_line_spacing));
  if (raw_line_spacing != 0) {
    _internal_set_line_spacing(from._internal_line_spacing());
  }
  if (from._internal_italic() != 0) {
    _internal_set_italic(from._internal_italic());
  }
  if (from._internal_bold() != 0) {
    _internal_set_bold(from._internal_bold());
  }
  if (from._internal_underlined() != 0) {
    _internal_set_underlined(from._internal_underlined());
  }
  if (from._internal_visible() != 0) {
    _internal_set_visible(from._internal_visible());
  }
  if (from._internal_mirrored() != 0) {
    _internal_set_mirrored(from._internal_mirrored());
  }
  if (from._internal_multiline() != 0) {
    _internal_set_multiline(from._internal_multiline());
  }
  if (from._internal_keep_upright() != 0) {
    _internal_set_keep_upright(from._internal_keep_upright());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextAttributes::CopyFrom(const TextAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.TextAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextAttributes::IsInitialized() const {
  return true;
}

void TextAttributes::InternalSwap(TextAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &font_name_, lhs_arena,
      &other->font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextAttributes, keep_upright_)
      + sizeof(TextAttributes::keep_upright_)
      - PROTOBUF_FIELD_OFFSET(TextAttributes, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[21]);
}

// ===================================================================

class Text::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& position(const Text* msg);
  static const ::kiapi::common::types::TextAttributes& attributes(const Text* msg);
};

const ::kiapi::common::types::Vector2&
Text::_Internal::position(const Text* msg) {
  return *msg->position_;
}
const ::kiapi::common::types::TextAttributes&
Text::_Internal::attributes(const Text* msg) {
  return *msg->attributes_;
}
Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  hyperlink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hyperlink_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hyperlink().empty()) {
    hyperlink_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hyperlink(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::kiapi::common::types::TextAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.Text)
}

inline void Text::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hyperlink_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hyperlink_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&position_)) + sizeof(attributes_));
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.Text)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyperlink_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete attributes_;
}

void Text::ArenaDtor(void* object) {
  Text* _this = reinterpret_cast< Text* >(object);
  (void)_this;
}
void Text::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.Text)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  hyperlink_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.TextAttributes attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.Text.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hyperlink = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hyperlink();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.Text.hyperlink"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Text::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.Text)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .kiapi.common.types.TextAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attributes(this), target, stream);
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.Text.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  // string hyperlink = 6;
  if (!this->_internal_hyperlink().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hyperlink().data(), static_cast<int>(this->_internal_hyperlink().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.Text.hyperlink");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hyperlink(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.Text)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 5;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string hyperlink = 6;
  if (!this->_internal_hyperlink().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hyperlink());
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.common.types.TextAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Text::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Text::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Text::GetClassData() const { return &_class_data_; }

void Text::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Text *>(to)->MergeFrom(
      static_cast<const Text &>(from));
}


void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.Text)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_hyperlink().empty()) {
    _internal_set_hyperlink(from._internal_hyperlink());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::kiapi::common::types::TextAttributes::MergeFrom(from._internal_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hyperlink_, lhs_arena,
      &other->hyperlink_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Text, attributes_)
      + sizeof(Text::attributes_)
      - PROTOBUF_FIELD_OFFSET(Text, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[22]);
}

// ===================================================================

class TextBox::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& top_left(const TextBox* msg);
  static const ::kiapi::common::types::Vector2& bottom_right(const TextBox* msg);
  static const ::kiapi::common::types::TextAttributes& attributes(const TextBox* msg);
};

const ::kiapi::common::types::Vector2&
TextBox::_Internal::top_left(const TextBox* msg) {
  return *msg->top_left_;
}
const ::kiapi::common::types::Vector2&
TextBox::_Internal::bottom_right(const TextBox* msg) {
  return *msg->bottom_right_;
}
const ::kiapi::common::types::TextAttributes&
TextBox::_Internal::attributes(const TextBox* msg) {
  return *msg->attributes_;
}
TextBox::TextBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.TextBox)
}
TextBox::TextBox(const TextBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_top_left()) {
    top_left_ = new ::kiapi::common::types::Vector2(*from.top_left_);
  } else {
    top_left_ = nullptr;
  }
  if (from._internal_has_bottom_right()) {
    bottom_right_ = new ::kiapi::common::types::Vector2(*from.bottom_right_);
  } else {
    bottom_right_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::kiapi::common::types::TextAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.TextBox)
}

inline void TextBox::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&top_left_)) + sizeof(attributes_));
}

TextBox::~TextBox() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.TextBox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete top_left_;
  if (this != internal_default_instance()) delete bottom_right_;
  if (this != internal_default_instance()) delete attributes_;
}

void TextBox::ArenaDtor(void* object) {
  TextBox* _this = reinterpret_cast< TextBox* >(object);
  (void)_this;
}
void TextBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextBox::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.TextBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && top_left_ != nullptr) {
    delete top_left_;
  }
  top_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bottom_right_ != nullptr) {
    delete bottom_right_;
  }
  bottom_right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 top_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 bottom_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.TextAttributes attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TextBox.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.TextBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 top_left = 2;
  if (this->_internal_has_top_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::top_left(this), target, stream);
  }

  // .kiapi.common.types.Vector2 bottom_right = 3;
  if (this->_internal_has_bottom_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bottom_right(this), target, stream);
  }

  // .kiapi.common.types.TextAttributes attributes = 4;
  if (this->_internal_has_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::attributes(this), target, stream);
  }

  // string text = 6;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TextBox.text");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.TextBox)
  return target;
}

size_t TextBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.TextBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 6;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .kiapi.common.types.Vector2 top_left = 2;
  if (this->_internal_has_top_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_left_);
  }

  // .kiapi.common.types.Vector2 bottom_right = 3;
  if (this->_internal_has_bottom_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottom_right_);
  }

  // .kiapi.common.types.TextAttributes attributes = 4;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextBox::GetClassData() const { return &_class_data_; }

void TextBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextBox *>(to)->MergeFrom(
      static_cast<const TextBox &>(from));
}


void TextBox::MergeFrom(const TextBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.TextBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_has_top_left()) {
    _internal_mutable_top_left()->::kiapi::common::types::Vector2::MergeFrom(from._internal_top_left());
  }
  if (from._internal_has_bottom_right()) {
    _internal_mutable_bottom_right()->::kiapi::common::types::Vector2::MergeFrom(from._internal_bottom_right());
  }
  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::kiapi::common::types::TextAttributes::MergeFrom(from._internal_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextBox::CopyFrom(const TextBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.TextBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextBox::IsInitialized() const {
  return true;
}

void TextBox::InternalSwap(TextBox* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextBox, attributes_)
      + sizeof(TextBox::attributes_)
      - PROTOBUF_FIELD_OFFSET(TextBox, top_left_)>(
          reinterpret_cast<char*>(&top_left_),
          reinterpret_cast<char*>(&other->top_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[23]);
}

// ===================================================================

class StrokeAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Distance& width(const StrokeAttributes* msg);
  static const ::kiapi::common::types::Color& color(const StrokeAttributes* msg);
};

const ::kiapi::common::types::Distance&
StrokeAttributes::_Internal::width(const StrokeAttributes* msg) {
  return *msg->width_;
}
const ::kiapi::common::types::Color&
StrokeAttributes::_Internal::color(const StrokeAttributes* msg) {
  return *msg->color_;
}
StrokeAttributes::StrokeAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.StrokeAttributes)
}
StrokeAttributes::StrokeAttributes(const StrokeAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_width()) {
    width_ = new ::kiapi::common::types::Distance(*from.width_);
  } else {
    width_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::kiapi::common::types::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  style_ = from.style_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.StrokeAttributes)
}

inline void StrokeAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&width_)) + sizeof(style_));
}

StrokeAttributes::~StrokeAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.StrokeAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StrokeAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete width_;
  if (this != internal_default_instance()) delete color_;
}

void StrokeAttributes::ArenaDtor(void* object) {
  StrokeAttributes* _this = reinterpret_cast< StrokeAttributes* >(object);
  (void)_this;
}
void StrokeAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokeAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokeAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.StrokeAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  style_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Distance width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.StrokeLineStyle style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_style(static_cast<::kiapi::common::types::StrokeLineStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokeAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.StrokeAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Distance width = 1;
  if (this->_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::width(this), target, stream);
  }

  // .kiapi.common.types.StrokeLineStyle style = 2;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_style(), target);
  }

  // .kiapi.common.types.Color color = 3;
  if (this->_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.StrokeAttributes)
  return target;
}

size_t StrokeAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.StrokeAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Distance width = 1;
  if (this->_internal_has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  // .kiapi.common.types.Color color = 3;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .kiapi.common.types.StrokeLineStyle style = 2;
  if (this->_internal_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StrokeAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeAttributes::GetClassData() const { return &_class_data_; }

void StrokeAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StrokeAttributes *>(to)->MergeFrom(
      static_cast<const StrokeAttributes &>(from));
}


void StrokeAttributes::MergeFrom(const StrokeAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.StrokeAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_width()) {
    _internal_mutable_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_width());
  }
  if (from._internal_has_color()) {
    _internal_mutable_color()->::kiapi::common::types::Color::MergeFrom(from._internal_color());
  }
  if (from._internal_style() != 0) {
    _internal_set_style(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeAttributes::CopyFrom(const StrokeAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.StrokeAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeAttributes::IsInitialized() const {
  return true;
}

void StrokeAttributes::InternalSwap(StrokeAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeAttributes, style_)
      + sizeof(StrokeAttributes::style_)
      - PROTOBUF_FIELD_OFFSET(StrokeAttributes, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[24]);
}

// ===================================================================

class GraphicFillAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Color& color(const GraphicFillAttributes* msg);
};

const ::kiapi::common::types::Color&
GraphicFillAttributes::_Internal::color(const GraphicFillAttributes* msg) {
  return *msg->color_;
}
GraphicFillAttributes::GraphicFillAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicFillAttributes)
}
GraphicFillAttributes::GraphicFillAttributes(const GraphicFillAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::kiapi::common::types::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  fill_type_ = from.fill_type_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicFillAttributes)
}

inline void GraphicFillAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fill_type_) -
    reinterpret_cast<char*>(&color_)) + sizeof(fill_type_));
}

GraphicFillAttributes::~GraphicFillAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicFillAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicFillAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void GraphicFillAttributes::ArenaDtor(void* object) {
  GraphicFillAttributes* _this = reinterpret_cast< GraphicFillAttributes* >(object);
  (void)_this;
}
void GraphicFillAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicFillAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicFillAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicFillAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  fill_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicFillAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.GraphicFillType fill_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fill_type(static_cast<::kiapi::common::types::GraphicFillType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicFillAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicFillAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.GraphicFillType fill_type = 1;
  if (this->_internal_fill_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_fill_type(), target);
  }

  // .kiapi.common.types.Color color = 2;
  if (this->_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicFillAttributes)
  return target;
}

size_t GraphicFillAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicFillAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Color color = 2;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .kiapi.common.types.GraphicFillType fill_type = 1;
  if (this->_internal_fill_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fill_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicFillAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicFillAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicFillAttributes::GetClassData() const { return &_class_data_; }

void GraphicFillAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicFillAttributes *>(to)->MergeFrom(
      static_cast<const GraphicFillAttributes &>(from));
}


void GraphicFillAttributes::MergeFrom(const GraphicFillAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicFillAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_mutable_color()->::kiapi::common::types::Color::MergeFrom(from._internal_color());
  }
  if (from._internal_fill_type() != 0) {
    _internal_set_fill_type(from._internal_fill_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicFillAttributes::CopyFrom(const GraphicFillAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicFillAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicFillAttributes::IsInitialized() const {
  return true;
}

void GraphicFillAttributes::InternalSwap(GraphicFillAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicFillAttributes, fill_type_)
      + sizeof(GraphicFillAttributes::fill_type_)
      - PROTOBUF_FIELD_OFFSET(GraphicFillAttributes, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicFillAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[25]);
}

// ===================================================================

class GraphicAttributes::_Internal {
 public:
  static const ::kiapi::common::types::StrokeAttributes& stroke(const GraphicAttributes* msg);
  static const ::kiapi::common::types::GraphicFillAttributes& fill(const GraphicAttributes* msg);
};

const ::kiapi::common::types::StrokeAttributes&
GraphicAttributes::_Internal::stroke(const GraphicAttributes* msg) {
  return *msg->stroke_;
}
const ::kiapi::common::types::GraphicFillAttributes&
GraphicAttributes::_Internal::fill(const GraphicAttributes* msg) {
  return *msg->fill_;
}
GraphicAttributes::GraphicAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicAttributes)
}
GraphicAttributes::GraphicAttributes(const GraphicAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    stroke_ = new ::kiapi::common::types::StrokeAttributes(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  if (from._internal_has_fill()) {
    fill_ = new ::kiapi::common::types::GraphicFillAttributes(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicAttributes)
}

inline void GraphicAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fill_) -
    reinterpret_cast<char*>(&stroke_)) + sizeof(fill_));
}

GraphicAttributes::~GraphicAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stroke_;
  if (this != internal_default_instance()) delete fill_;
}

void GraphicAttributes::ArenaDtor(void* object) {
  GraphicAttributes* _this = reinterpret_cast< GraphicAttributes* >(object);
  (void)_this;
}
void GraphicAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && stroke_ != nullptr) {
    delete stroke_;
  }
  stroke_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fill_ != nullptr) {
    delete fill_;
  }
  fill_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.StrokeAttributes stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.GraphicFillAttributes fill = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.StrokeAttributes stroke = 1;
  if (this->_internal_has_stroke()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stroke(this), target, stream);
  }

  // .kiapi.common.types.GraphicFillAttributes fill = 2;
  if (this->_internal_has_fill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicAttributes)
  return target;
}

size_t GraphicAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.StrokeAttributes stroke = 1;
  if (this->_internal_has_stroke()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stroke_);
  }

  // .kiapi.common.types.GraphicFillAttributes fill = 2;
  if (this->_internal_has_fill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicAttributes::GetClassData() const { return &_class_data_; }

void GraphicAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicAttributes *>(to)->MergeFrom(
      static_cast<const GraphicAttributes &>(from));
}


void GraphicAttributes::MergeFrom(const GraphicAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stroke()) {
    _internal_mutable_stroke()->::kiapi::common::types::StrokeAttributes::MergeFrom(from._internal_stroke());
  }
  if (from._internal_has_fill()) {
    _internal_mutable_fill()->::kiapi::common::types::GraphicFillAttributes::MergeFrom(from._internal_fill());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicAttributes::CopyFrom(const GraphicAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicAttributes::IsInitialized() const {
  return true;
}

void GraphicAttributes::InternalSwap(GraphicAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicAttributes, fill_)
      + sizeof(GraphicAttributes::fill_)
      - PROTOBUF_FIELD_OFFSET(GraphicAttributes, stroke_)>(
          reinterpret_cast<char*>(&stroke_),
          reinterpret_cast<char*>(&other->stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[26]);
}

// ===================================================================

class GraphicSegmentAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& start(const GraphicSegmentAttributes* msg);
  static const ::kiapi::common::types::Vector2& end(const GraphicSegmentAttributes* msg);
};

const ::kiapi::common::types::Vector2&
GraphicSegmentAttributes::_Internal::start(const GraphicSegmentAttributes* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
GraphicSegmentAttributes::_Internal::end(const GraphicSegmentAttributes* msg) {
  return *msg->end_;
}
GraphicSegmentAttributes::GraphicSegmentAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicSegmentAttributes)
}
GraphicSegmentAttributes::GraphicSegmentAttributes(const GraphicSegmentAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicSegmentAttributes)
}

inline void GraphicSegmentAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

GraphicSegmentAttributes::~GraphicSegmentAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicSegmentAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicSegmentAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void GraphicSegmentAttributes::ArenaDtor(void* object) {
  GraphicSegmentAttributes* _this = reinterpret_cast< GraphicSegmentAttributes* >(object);
  (void)_this;
}
void GraphicSegmentAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicSegmentAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicSegmentAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicSegmentAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicSegmentAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicSegmentAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicSegmentAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicSegmentAttributes)
  return target;
}

size_t GraphicSegmentAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicSegmentAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicSegmentAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicSegmentAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicSegmentAttributes::GetClassData() const { return &_class_data_; }

void GraphicSegmentAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicSegmentAttributes *>(to)->MergeFrom(
      static_cast<const GraphicSegmentAttributes &>(from));
}


void GraphicSegmentAttributes::MergeFrom(const GraphicSegmentAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicSegmentAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicSegmentAttributes::CopyFrom(const GraphicSegmentAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicSegmentAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicSegmentAttributes::IsInitialized() const {
  return true;
}

void GraphicSegmentAttributes::InternalSwap(GraphicSegmentAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicSegmentAttributes, end_)
      + sizeof(GraphicSegmentAttributes::end_)
      - PROTOBUF_FIELD_OFFSET(GraphicSegmentAttributes, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicSegmentAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[27]);
}

// ===================================================================

class GraphicRectangleAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& top_left(const GraphicRectangleAttributes* msg);
  static const ::kiapi::common::types::Vector2& bottom_right(const GraphicRectangleAttributes* msg);
};

const ::kiapi::common::types::Vector2&
GraphicRectangleAttributes::_Internal::top_left(const GraphicRectangleAttributes* msg) {
  return *msg->top_left_;
}
const ::kiapi::common::types::Vector2&
GraphicRectangleAttributes::_Internal::bottom_right(const GraphicRectangleAttributes* msg) {
  return *msg->bottom_right_;
}
GraphicRectangleAttributes::GraphicRectangleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicRectangleAttributes)
}
GraphicRectangleAttributes::GraphicRectangleAttributes(const GraphicRectangleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_top_left()) {
    top_left_ = new ::kiapi::common::types::Vector2(*from.top_left_);
  } else {
    top_left_ = nullptr;
  }
  if (from._internal_has_bottom_right()) {
    bottom_right_ = new ::kiapi::common::types::Vector2(*from.bottom_right_);
  } else {
    bottom_right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicRectangleAttributes)
}

inline void GraphicRectangleAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_right_) -
    reinterpret_cast<char*>(&top_left_)) + sizeof(bottom_right_));
}

GraphicRectangleAttributes::~GraphicRectangleAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicRectangleAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicRectangleAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete top_left_;
  if (this != internal_default_instance()) delete bottom_right_;
}

void GraphicRectangleAttributes::ArenaDtor(void* object) {
  GraphicRectangleAttributes* _this = reinterpret_cast< GraphicRectangleAttributes* >(object);
  (void)_this;
}
void GraphicRectangleAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicRectangleAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicRectangleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicRectangleAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && top_left_ != nullptr) {
    delete top_left_;
  }
  top_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bottom_right_ != nullptr) {
    delete bottom_right_;
  }
  bottom_right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicRectangleAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 top_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 bottom_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicRectangleAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicRectangleAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 top_left = 1;
  if (this->_internal_has_top_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::top_left(this), target, stream);
  }

  // .kiapi.common.types.Vector2 bottom_right = 2;
  if (this->_internal_has_bottom_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bottom_right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicRectangleAttributes)
  return target;
}

size_t GraphicRectangleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicRectangleAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 top_left = 1;
  if (this->_internal_has_top_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_left_);
  }

  // .kiapi.common.types.Vector2 bottom_right = 2;
  if (this->_internal_has_bottom_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottom_right_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicRectangleAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicRectangleAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicRectangleAttributes::GetClassData() const { return &_class_data_; }

void GraphicRectangleAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicRectangleAttributes *>(to)->MergeFrom(
      static_cast<const GraphicRectangleAttributes &>(from));
}


void GraphicRectangleAttributes::MergeFrom(const GraphicRectangleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicRectangleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_top_left()) {
    _internal_mutable_top_left()->::kiapi::common::types::Vector2::MergeFrom(from._internal_top_left());
  }
  if (from._internal_has_bottom_right()) {
    _internal_mutable_bottom_right()->::kiapi::common::types::Vector2::MergeFrom(from._internal_bottom_right());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicRectangleAttributes::CopyFrom(const GraphicRectangleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicRectangleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicRectangleAttributes::IsInitialized() const {
  return true;
}

void GraphicRectangleAttributes::InternalSwap(GraphicRectangleAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicRectangleAttributes, bottom_right_)
      + sizeof(GraphicRectangleAttributes::bottom_right_)
      - PROTOBUF_FIELD_OFFSET(GraphicRectangleAttributes, top_left_)>(
          reinterpret_cast<char*>(&top_left_),
          reinterpret_cast<char*>(&other->top_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicRectangleAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[28]);
}

// ===================================================================

class GraphicArcAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& start(const GraphicArcAttributes* msg);
  static const ::kiapi::common::types::Vector2& mid(const GraphicArcAttributes* msg);
  static const ::kiapi::common::types::Vector2& end(const GraphicArcAttributes* msg);
};

const ::kiapi::common::types::Vector2&
GraphicArcAttributes::_Internal::start(const GraphicArcAttributes* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
GraphicArcAttributes::_Internal::mid(const GraphicArcAttributes* msg) {
  return *msg->mid_;
}
const ::kiapi::common::types::Vector2&
GraphicArcAttributes::_Internal::end(const GraphicArcAttributes* msg) {
  return *msg->end_;
}
GraphicArcAttributes::GraphicArcAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicArcAttributes)
}
GraphicArcAttributes::GraphicArcAttributes(const GraphicArcAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_mid()) {
    mid_ = new ::kiapi::common::types::Vector2(*from.mid_);
  } else {
    mid_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicArcAttributes)
}

inline void GraphicArcAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

GraphicArcAttributes::~GraphicArcAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicArcAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicArcAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete mid_;
  if (this != internal_default_instance()) delete end_;
}

void GraphicArcAttributes::ArenaDtor(void* object) {
  GraphicArcAttributes* _this = reinterpret_cast< GraphicArcAttributes* >(object);
  (void)_this;
}
void GraphicArcAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicArcAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicArcAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicArcAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mid_ != nullptr) {
    delete mid_;
  }
  mid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicArcAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicArcAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicArcAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 mid = 2;
  if (this->_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mid(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicArcAttributes)
  return target;
}

size_t GraphicArcAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicArcAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 mid = 2;
  if (this->_internal_has_mid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mid_);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicArcAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicArcAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicArcAttributes::GetClassData() const { return &_class_data_; }

void GraphicArcAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicArcAttributes *>(to)->MergeFrom(
      static_cast<const GraphicArcAttributes &>(from));
}


void GraphicArcAttributes::MergeFrom(const GraphicArcAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicArcAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_mid()) {
    _internal_mutable_mid()->::kiapi::common::types::Vector2::MergeFrom(from._internal_mid());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicArcAttributes::CopyFrom(const GraphicArcAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicArcAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicArcAttributes::IsInitialized() const {
  return true;
}

void GraphicArcAttributes::InternalSwap(GraphicArcAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicArcAttributes, end_)
      + sizeof(GraphicArcAttributes::end_)
      - PROTOBUF_FIELD_OFFSET(GraphicArcAttributes, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicArcAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[29]);
}

// ===================================================================

class GraphicCircleAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& center(const GraphicCircleAttributes* msg);
  static const ::kiapi::common::types::Vector2& radius_point(const GraphicCircleAttributes* msg);
};

const ::kiapi::common::types::Vector2&
GraphicCircleAttributes::_Internal::center(const GraphicCircleAttributes* msg) {
  return *msg->center_;
}
const ::kiapi::common::types::Vector2&
GraphicCircleAttributes::_Internal::radius_point(const GraphicCircleAttributes* msg) {
  return *msg->radius_point_;
}
GraphicCircleAttributes::GraphicCircleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicCircleAttributes)
}
GraphicCircleAttributes::GraphicCircleAttributes(const GraphicCircleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::kiapi::common::types::Vector2(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_radius_point()) {
    radius_point_ = new ::kiapi::common::types::Vector2(*from.radius_point_);
  } else {
    radius_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicCircleAttributes)
}

inline void GraphicCircleAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radius_point_) -
    reinterpret_cast<char*>(&center_)) + sizeof(radius_point_));
}

GraphicCircleAttributes::~GraphicCircleAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicCircleAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicCircleAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete radius_point_;
}

void GraphicCircleAttributes::ArenaDtor(void* object) {
  GraphicCircleAttributes* _this = reinterpret_cast< GraphicCircleAttributes* >(object);
  (void)_this;
}
void GraphicCircleAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicCircleAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicCircleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicCircleAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArenaForAllocation() == nullptr && radius_point_ != nullptr) {
    delete radius_point_;
  }
  radius_point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicCircleAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 radius_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radius_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicCircleAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicCircleAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 center = 1;
  if (this->_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .kiapi.common.types.Vector2 radius_point = 2;
  if (this->_internal_has_radius_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::radius_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicCircleAttributes)
  return target;
}

size_t GraphicCircleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicCircleAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .kiapi.common.types.Vector2 radius_point = 2;
  if (this->_internal_has_radius_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *radius_point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicCircleAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicCircleAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicCircleAttributes::GetClassData() const { return &_class_data_; }

void GraphicCircleAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicCircleAttributes *>(to)->MergeFrom(
      static_cast<const GraphicCircleAttributes &>(from));
}


void GraphicCircleAttributes::MergeFrom(const GraphicCircleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicCircleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _internal_mutable_center()->::kiapi::common::types::Vector2::MergeFrom(from._internal_center());
  }
  if (from._internal_has_radius_point()) {
    _internal_mutable_radius_point()->::kiapi::common::types::Vector2::MergeFrom(from._internal_radius_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicCircleAttributes::CopyFrom(const GraphicCircleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicCircleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicCircleAttributes::IsInitialized() const {
  return true;
}

void GraphicCircleAttributes::InternalSwap(GraphicCircleAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicCircleAttributes, radius_point_)
      + sizeof(GraphicCircleAttributes::radius_point_)
      - PROTOBUF_FIELD_OFFSET(GraphicCircleAttributes, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicCircleAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[30]);
}

// ===================================================================

class GraphicBezierAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& start(const GraphicBezierAttributes* msg);
  static const ::kiapi::common::types::Vector2& control1(const GraphicBezierAttributes* msg);
  static const ::kiapi::common::types::Vector2& control2(const GraphicBezierAttributes* msg);
  static const ::kiapi::common::types::Vector2& end(const GraphicBezierAttributes* msg);
};

const ::kiapi::common::types::Vector2&
GraphicBezierAttributes::_Internal::start(const GraphicBezierAttributes* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
GraphicBezierAttributes::_Internal::control1(const GraphicBezierAttributes* msg) {
  return *msg->control1_;
}
const ::kiapi::common::types::Vector2&
GraphicBezierAttributes::_Internal::control2(const GraphicBezierAttributes* msg) {
  return *msg->control2_;
}
const ::kiapi::common::types::Vector2&
GraphicBezierAttributes::_Internal::end(const GraphicBezierAttributes* msg) {
  return *msg->end_;
}
GraphicBezierAttributes::GraphicBezierAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicBezierAttributes)
}
GraphicBezierAttributes::GraphicBezierAttributes(const GraphicBezierAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_control1()) {
    control1_ = new ::kiapi::common::types::Vector2(*from.control1_);
  } else {
    control1_ = nullptr;
  }
  if (from._internal_has_control2()) {
    control2_ = new ::kiapi::common::types::Vector2(*from.control2_);
  } else {
    control2_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicBezierAttributes)
}

inline void GraphicBezierAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

GraphicBezierAttributes::~GraphicBezierAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicBezierAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicBezierAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete control1_;
  if (this != internal_default_instance()) delete control2_;
  if (this != internal_default_instance()) delete end_;
}

void GraphicBezierAttributes::ArenaDtor(void* object) {
  GraphicBezierAttributes* _this = reinterpret_cast< GraphicBezierAttributes* >(object);
  (void)_this;
}
void GraphicBezierAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicBezierAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicBezierAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicBezierAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control1_ != nullptr) {
    delete control1_;
  }
  control1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control2_ != nullptr) {
    delete control2_;
  }
  control2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicBezierAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 control1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_control1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 control2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicBezierAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicBezierAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 control1 = 2;
  if (this->_internal_has_control1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::control1(this), target, stream);
  }

  // .kiapi.common.types.Vector2 control2 = 3;
  if (this->_internal_has_control2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::control2(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 4;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicBezierAttributes)
  return target;
}

size_t GraphicBezierAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicBezierAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 control1 = 2;
  if (this->_internal_has_control1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control1_);
  }

  // .kiapi.common.types.Vector2 control2 = 3;
  if (this->_internal_has_control2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control2_);
  }

  // .kiapi.common.types.Vector2 end = 4;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicBezierAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicBezierAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicBezierAttributes::GetClassData() const { return &_class_data_; }

void GraphicBezierAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicBezierAttributes *>(to)->MergeFrom(
      static_cast<const GraphicBezierAttributes &>(from));
}


void GraphicBezierAttributes::MergeFrom(const GraphicBezierAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicBezierAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_control1()) {
    _internal_mutable_control1()->::kiapi::common::types::Vector2::MergeFrom(from._internal_control1());
  }
  if (from._internal_has_control2()) {
    _internal_mutable_control2()->::kiapi::common::types::Vector2::MergeFrom(from._internal_control2());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicBezierAttributes::CopyFrom(const GraphicBezierAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicBezierAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicBezierAttributes::IsInitialized() const {
  return true;
}

void GraphicBezierAttributes::InternalSwap(GraphicBezierAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicBezierAttributes, end_)
      + sizeof(GraphicBezierAttributes::end_)
      - PROTOBUF_FIELD_OFFSET(GraphicBezierAttributes, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicBezierAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[31]);
}

// ===================================================================

class GraphicShape::_Internal {
 public:
  static const ::kiapi::common::types::GraphicAttributes& attributes(const GraphicShape* msg);
  static const ::kiapi::common::types::GraphicSegmentAttributes& segment(const GraphicShape* msg);
  static const ::kiapi::common::types::GraphicRectangleAttributes& rectangle(const GraphicShape* msg);
  static const ::kiapi::common::types::GraphicArcAttributes& arc(const GraphicShape* msg);
  static const ::kiapi::common::types::GraphicCircleAttributes& circle(const GraphicShape* msg);
  static const ::kiapi::common::types::PolySet& polygon(const GraphicShape* msg);
  static const ::kiapi::common::types::GraphicBezierAttributes& bezier(const GraphicShape* msg);
};

const ::kiapi::common::types::GraphicAttributes&
GraphicShape::_Internal::attributes(const GraphicShape* msg) {
  return *msg->attributes_;
}
const ::kiapi::common::types::GraphicSegmentAttributes&
GraphicShape::_Internal::segment(const GraphicShape* msg) {
  return *msg->geometry_.segment_;
}
const ::kiapi::common::types::GraphicRectangleAttributes&
GraphicShape::_Internal::rectangle(const GraphicShape* msg) {
  return *msg->geometry_.rectangle_;
}
const ::kiapi::common::types::GraphicArcAttributes&
GraphicShape::_Internal::arc(const GraphicShape* msg) {
  return *msg->geometry_.arc_;
}
const ::kiapi::common::types::GraphicCircleAttributes&
GraphicShape::_Internal::circle(const GraphicShape* msg) {
  return *msg->geometry_.circle_;
}
const ::kiapi::common::types::PolySet&
GraphicShape::_Internal::polygon(const GraphicShape* msg) {
  return *msg->geometry_.polygon_;
}
const ::kiapi::common::types::GraphicBezierAttributes&
GraphicShape::_Internal::bezier(const GraphicShape* msg) {
  return *msg->geometry_.bezier_;
}
void GraphicShape::set_allocated_segment(::kiapi::common::types::GraphicSegmentAttributes* segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::GraphicSegmentAttributes>::GetOwningArena(segment);
    if (message_arena != submessage_arena) {
      segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    set_has_segment();
    geometry_.segment_ = segment;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.GraphicShape.segment)
}
void GraphicShape::set_allocated_rectangle(::kiapi::common::types::GraphicRectangleAttributes* rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::GraphicRectangleAttributes>::GetOwningArena(rectangle);
    if (message_arena != submessage_arena) {
      rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    set_has_rectangle();
    geometry_.rectangle_ = rectangle;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.GraphicShape.rectangle)
}
void GraphicShape::set_allocated_arc(::kiapi::common::types::GraphicArcAttributes* arc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (arc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::GraphicArcAttributes>::GetOwningArena(arc);
    if (message_arena != submessage_arena) {
      arc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc, submessage_arena);
    }
    set_has_arc();
    geometry_.arc_ = arc;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.GraphicShape.arc)
}
void GraphicShape::set_allocated_circle(::kiapi::common::types::GraphicCircleAttributes* circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::GraphicCircleAttributes>::GetOwningArena(circle);
    if (message_arena != submessage_arena) {
      circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    set_has_circle();
    geometry_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.GraphicShape.circle)
}
void GraphicShape::set_allocated_polygon(::kiapi::common::types::PolySet* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::PolySet>::GetOwningArena(polygon);
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
    geometry_.polygon_ = polygon;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.GraphicShape.polygon)
}
void GraphicShape::set_allocated_bezier(::kiapi::common::types::GraphicBezierAttributes* bezier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry();
  if (bezier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::types::GraphicBezierAttributes>::GetOwningArena(bezier);
    if (message_arena != submessage_arena) {
      bezier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bezier, submessage_arena);
    }
    set_has_bezier();
    geometry_.bezier_ = bezier;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.types.GraphicShape.bezier)
}
GraphicShape::GraphicShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.GraphicShape)
}
GraphicShape::GraphicShape(const GraphicShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    attributes_ = new ::kiapi::common::types::GraphicAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kSegment: {
      _internal_mutable_segment()->::kiapi::common::types::GraphicSegmentAttributes::MergeFrom(from._internal_segment());
      break;
    }
    case kRectangle: {
      _internal_mutable_rectangle()->::kiapi::common::types::GraphicRectangleAttributes::MergeFrom(from._internal_rectangle());
      break;
    }
    case kArc: {
      _internal_mutable_arc()->::kiapi::common::types::GraphicArcAttributes::MergeFrom(from._internal_arc());
      break;
    }
    case kCircle: {
      _internal_mutable_circle()->::kiapi::common::types::GraphicCircleAttributes::MergeFrom(from._internal_circle());
      break;
    }
    case kPolygon: {
      _internal_mutable_polygon()->::kiapi::common::types::PolySet::MergeFrom(from._internal_polygon());
      break;
    }
    case kBezier: {
      _internal_mutable_bezier()->::kiapi::common::types::GraphicBezierAttributes::MergeFrom(from._internal_bezier());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.GraphicShape)
}

inline void GraphicShape::SharedCtor() {
attributes_ = nullptr;
clear_has_geometry();
}

GraphicShape::~GraphicShape() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.GraphicShape)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicShape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete attributes_;
  if (has_geometry()) {
    clear_geometry();
  }
}

void GraphicShape::ArenaDtor(void* object) {
  GraphicShape* _this = reinterpret_cast< GraphicShape* >(object);
  (void)_this;
}
void GraphicShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicShape::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:kiapi.common.types.GraphicShape)
  switch (geometry_case()) {
    case kSegment: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.segment_;
      }
      break;
    }
    case kRectangle: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.rectangle_;
      }
      break;
    }
    case kArc: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.arc_;
      }
      break;
    }
    case kCircle: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.circle_;
      }
      break;
    }
    case kPolygon: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.polygon_;
      }
      break;
    }
    case kBezier: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_.bezier_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void GraphicShape::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.GraphicShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  clear_geometry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.GraphicAttributes attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.GraphicSegmentAttributes segment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.GraphicRectangleAttributes rectangle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rectangle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.GraphicArcAttributes arc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.GraphicCircleAttributes circle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_circle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.PolySet polygon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.GraphicBezierAttributes bezier = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bezier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.GraphicShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.GraphicAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attributes(this), target, stream);
  }

  // .kiapi.common.types.GraphicSegmentAttributes segment = 4;
  if (_internal_has_segment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::segment(this), target, stream);
  }

  // .kiapi.common.types.GraphicRectangleAttributes rectangle = 5;
  if (_internal_has_rectangle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rectangle(this), target, stream);
  }

  // .kiapi.common.types.GraphicArcAttributes arc = 6;
  if (_internal_has_arc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::arc(this), target, stream);
  }

  // .kiapi.common.types.GraphicCircleAttributes circle = 7;
  if (_internal_has_circle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::circle(this), target, stream);
  }

  // .kiapi.common.types.PolySet polygon = 8;
  if (_internal_has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::polygon(this), target, stream);
  }

  // .kiapi.common.types.GraphicBezierAttributes bezier = 9;
  if (_internal_has_bezier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::bezier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.GraphicShape)
  return target;
}

size_t GraphicShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.GraphicShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.GraphicAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  switch (geometry_case()) {
    // .kiapi.common.types.GraphicSegmentAttributes segment = 4;
    case kSegment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.segment_);
      break;
    }
    // .kiapi.common.types.GraphicRectangleAttributes rectangle = 5;
    case kRectangle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.rectangle_);
      break;
    }
    // .kiapi.common.types.GraphicArcAttributes arc = 6;
    case kArc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.arc_);
      break;
    }
    // .kiapi.common.types.GraphicCircleAttributes circle = 7;
    case kCircle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.circle_);
      break;
    }
    // .kiapi.common.types.PolySet polygon = 8;
    case kPolygon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.polygon_);
      break;
    }
    // .kiapi.common.types.GraphicBezierAttributes bezier = 9;
    case kBezier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.bezier_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicShape::GetClassData() const { return &_class_data_; }

void GraphicShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicShape *>(to)->MergeFrom(
      static_cast<const GraphicShape &>(from));
}


void GraphicShape::MergeFrom(const GraphicShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.GraphicShape)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::kiapi::common::types::GraphicAttributes::MergeFrom(from._internal_attributes());
  }
  switch (from.geometry_case()) {
    case kSegment: {
      _internal_mutable_segment()->::kiapi::common::types::GraphicSegmentAttributes::MergeFrom(from._internal_segment());
      break;
    }
    case kRectangle: {
      _internal_mutable_rectangle()->::kiapi::common::types::GraphicRectangleAttributes::MergeFrom(from._internal_rectangle());
      break;
    }
    case kArc: {
      _internal_mutable_arc()->::kiapi::common::types::GraphicArcAttributes::MergeFrom(from._internal_arc());
      break;
    }
    case kCircle: {
      _internal_mutable_circle()->::kiapi::common::types::GraphicCircleAttributes::MergeFrom(from._internal_circle());
      break;
    }
    case kPolygon: {
      _internal_mutable_polygon()->::kiapi::common::types::PolySet::MergeFrom(from._internal_polygon());
      break;
    }
    case kBezier: {
      _internal_mutable_bezier()->::kiapi::common::types::GraphicBezierAttributes::MergeFrom(from._internal_bezier());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicShape::CopyFrom(const GraphicShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.GraphicShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicShape::IsInitialized() const {
  return true;
}

void GraphicShape::InternalSwap(GraphicShape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(attributes_, other->attributes_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicShape::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[32]);
}

// ===================================================================

class CompoundShape::_Internal {
 public:
};

CompoundShape::CompoundShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shapes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.CompoundShape)
}
CompoundShape::CompoundShape(const CompoundShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.CompoundShape)
}

inline void CompoundShape::SharedCtor() {
}

CompoundShape::~CompoundShape() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.CompoundShape)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompoundShape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompoundShape::ArenaDtor(void* object) {
  CompoundShape* _this = reinterpret_cast< CompoundShape* >(object);
  (void)_this;
}
void CompoundShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompoundShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompoundShape::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.CompoundShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompoundShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.GraphicShape shapes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompoundShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.CompoundShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.GraphicShape shapes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.CompoundShape)
  return target;
}

size_t CompoundShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.CompoundShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.GraphicShape shapes = 1;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompoundShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompoundShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompoundShape::GetClassData() const { return &_class_data_; }

void CompoundShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompoundShape *>(to)->MergeFrom(
      static_cast<const CompoundShape &>(from));
}


void CompoundShape::MergeFrom(const CompoundShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.CompoundShape)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompoundShape::CopyFrom(const CompoundShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.CompoundShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompoundShape::IsInitialized() const {
  return true;
}

void CompoundShape::InternalSwap(CompoundShape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompoundShape::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[33]);
}

// ===================================================================

class TitleBlockInfo::_Internal {
 public:
};

TitleBlockInfo::TitleBlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.types.TitleBlockInfo)
}
TitleBlockInfo::TitleBlockInfo(const TitleBlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_date().empty()) {
    date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date(), 
      GetArenaForAllocation());
  }
  revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    revision_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_revision().empty()) {
    revision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_revision(), 
      GetArenaForAllocation());
  }
  company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company().empty()) {
    company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company(), 
      GetArenaForAllocation());
  }
  comment1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment1().empty()) {
    comment1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment1(), 
      GetArenaForAllocation());
  }
  comment2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment2().empty()) {
    comment2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment2(), 
      GetArenaForAllocation());
  }
  comment3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment3().empty()) {
    comment3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment3(), 
      GetArenaForAllocation());
  }
  comment4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment4().empty()) {
    comment4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment4(), 
      GetArenaForAllocation());
  }
  comment5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment5().empty()) {
    comment5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment5(), 
      GetArenaForAllocation());
  }
  comment6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment6().empty()) {
    comment6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment6(), 
      GetArenaForAllocation());
  }
  comment7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment7().empty()) {
    comment7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment7(), 
      GetArenaForAllocation());
  }
  comment8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment8().empty()) {
    comment8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment8(), 
      GetArenaForAllocation());
  }
  comment9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment9().empty()) {
    comment9_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment9(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.types.TitleBlockInfo)
}

inline void TitleBlockInfo::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  revision_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TitleBlockInfo::~TitleBlockInfo() {
  // @@protoc_insertion_point(destructor:kiapi.common.types.TitleBlockInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TitleBlockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TitleBlockInfo::ArenaDtor(void* object) {
  TitleBlockInfo* _this = reinterpret_cast< TitleBlockInfo* >(object);
  (void)_this;
}
void TitleBlockInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TitleBlockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TitleBlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.types.TitleBlockInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  date_.ClearToEmpty();
  revision_.ClearToEmpty();
  company_.ClearToEmpty();
  comment1_.ClearToEmpty();
  comment2_.ClearToEmpty();
  comment3_.ClearToEmpty();
  comment4_.ClearToEmpty();
  comment5_.ClearToEmpty();
  comment6_.ClearToEmpty();
  comment7_.ClearToEmpty();
  comment8_.ClearToEmpty();
  comment9_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TitleBlockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.date"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_revision();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.revision"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string company = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.company"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comment1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comment2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_comment3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment3"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_comment4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment4"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_comment5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment5"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_comment6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment6"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_comment7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment7"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment8 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_comment8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment8"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment9 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_comment9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.types.TitleBlockInfo.comment9"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TitleBlockInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.types.TitleBlockInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string date = 2;
  if (!this->_internal_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // string revision = 3;
  if (!this->_internal_revision().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_revision().data(), static_cast<int>(this->_internal_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.revision");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_revision(), target);
  }

  // string company = 4;
  if (!this->_internal_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.company");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_company(), target);
  }

  // string comment1 = 5;
  if (!this->_internal_comment1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment1().data(), static_cast<int>(this->_internal_comment1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment1");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comment1(), target);
  }

  // string comment2 = 6;
  if (!this->_internal_comment2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment2().data(), static_cast<int>(this->_internal_comment2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment2");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_comment2(), target);
  }

  // string comment3 = 7;
  if (!this->_internal_comment3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment3().data(), static_cast<int>(this->_internal_comment3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment3");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_comment3(), target);
  }

  // string comment4 = 8;
  if (!this->_internal_comment4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment4().data(), static_cast<int>(this->_internal_comment4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_comment4(), target);
  }

  // string comment5 = 9;
  if (!this->_internal_comment5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment5().data(), static_cast<int>(this->_internal_comment5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_comment5(), target);
  }

  // string comment6 = 10;
  if (!this->_internal_comment6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment6().data(), static_cast<int>(this->_internal_comment6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment6");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_comment6(), target);
  }

  // string comment7 = 11;
  if (!this->_internal_comment7().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment7().data(), static_cast<int>(this->_internal_comment7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment7");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_comment7(), target);
  }

  // string comment8 = 12;
  if (!this->_internal_comment8().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment8().data(), static_cast<int>(this->_internal_comment8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment8");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_comment8(), target);
  }

  // string comment9 = 13;
  if (!this->_internal_comment9().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment9().data(), static_cast<int>(this->_internal_comment9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.types.TitleBlockInfo.comment9");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_comment9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.types.TitleBlockInfo)
  return target;
}

size_t TitleBlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.types.TitleBlockInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string date = 2;
  if (!this->_internal_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string revision = 3;
  if (!this->_internal_revision().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_revision());
  }

  // string company = 4;
  if (!this->_internal_company().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // string comment1 = 5;
  if (!this->_internal_comment1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment1());
  }

  // string comment2 = 6;
  if (!this->_internal_comment2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment2());
  }

  // string comment3 = 7;
  if (!this->_internal_comment3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment3());
  }

  // string comment4 = 8;
  if (!this->_internal_comment4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment4());
  }

  // string comment5 = 9;
  if (!this->_internal_comment5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment5());
  }

  // string comment6 = 10;
  if (!this->_internal_comment6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment6());
  }

  // string comment7 = 11;
  if (!this->_internal_comment7().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment7());
  }

  // string comment8 = 12;
  if (!this->_internal_comment8().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment8());
  }

  // string comment9 = 13;
  if (!this->_internal_comment9().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment9());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TitleBlockInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TitleBlockInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TitleBlockInfo::GetClassData() const { return &_class_data_; }

void TitleBlockInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TitleBlockInfo *>(to)->MergeFrom(
      static_cast<const TitleBlockInfo &>(from));
}


void TitleBlockInfo::MergeFrom(const TitleBlockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.types.TitleBlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_date().empty()) {
    _internal_set_date(from._internal_date());
  }
  if (!from._internal_revision().empty()) {
    _internal_set_revision(from._internal_revision());
  }
  if (!from._internal_company().empty()) {
    _internal_set_company(from._internal_company());
  }
  if (!from._internal_comment1().empty()) {
    _internal_set_comment1(from._internal_comment1());
  }
  if (!from._internal_comment2().empty()) {
    _internal_set_comment2(from._internal_comment2());
  }
  if (!from._internal_comment3().empty()) {
    _internal_set_comment3(from._internal_comment3());
  }
  if (!from._internal_comment4().empty()) {
    _internal_set_comment4(from._internal_comment4());
  }
  if (!from._internal_comment5().empty()) {
    _internal_set_comment5(from._internal_comment5());
  }
  if (!from._internal_comment6().empty()) {
    _internal_set_comment6(from._internal_comment6());
  }
  if (!from._internal_comment7().empty()) {
    _internal_set_comment7(from._internal_comment7());
  }
  if (!from._internal_comment8().empty()) {
    _internal_set_comment8(from._internal_comment8());
  }
  if (!from._internal_comment9().empty()) {
    _internal_set_comment9(from._internal_comment9());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TitleBlockInfo::CopyFrom(const TitleBlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.types.TitleBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleBlockInfo::IsInitialized() const {
  return true;
}

void TitleBlockInfo::InternalSwap(TitleBlockInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_, lhs_arena,
      &other->date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &revision_, lhs_arena,
      &other->revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &company_, lhs_arena,
      &other->company_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment1_, lhs_arena,
      &other->comment1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment2_, lhs_arena,
      &other->comment2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment3_, lhs_arena,
      &other->comment3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment4_, lhs_arena,
      &other->comment4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment5_, lhs_arena,
      &other->comment5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment6_, lhs_arena,
      &other->comment6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment7_, lhs_arena,
      &other->comment7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment8_, lhs_arena,
      &other->comment8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment9_, lhs_arena,
      &other->comment9_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TitleBlockInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_getter, &descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto_once,
      file_level_metadata_common_2ftypes_2fbase_5ftypes_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::common::types::CommandStatusResponse* Arena::CreateMaybeMessage< ::kiapi::common::types::CommandStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::CommandStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::KiCadVersion* Arena::CreateMaybeMessage< ::kiapi::common::types::KiCadVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::KiCadVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::KIID* Arena::CreateMaybeMessage< ::kiapi::common::types::KIID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::KIID >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::LibraryIdentifier* Arena::CreateMaybeMessage< ::kiapi::common::types::LibraryIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::LibraryIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::SheetPath* Arena::CreateMaybeMessage< ::kiapi::common::types::SheetPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::SheetPath >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::ProjectSpecifier* Arena::CreateMaybeMessage< ::kiapi::common::types::ProjectSpecifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::ProjectSpecifier >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::DocumentSpecifier* Arena::CreateMaybeMessage< ::kiapi::common::types::DocumentSpecifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::DocumentSpecifier >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::ItemHeader* Arena::CreateMaybeMessage< ::kiapi::common::types::ItemHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::ItemHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Vector2* Arena::CreateMaybeMessage< ::kiapi::common::types::Vector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Vector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Vector3* Arena::CreateMaybeMessage< ::kiapi::common::types::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Vector3D* Arena::CreateMaybeMessage< ::kiapi::common::types::Vector3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Vector3D >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Box2* Arena::CreateMaybeMessage< ::kiapi::common::types::Box2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Box2 >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Distance* Arena::CreateMaybeMessage< ::kiapi::common::types::Distance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Distance >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Angle* Arena::CreateMaybeMessage< ::kiapi::common::types::Angle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Angle >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Ratio* Arena::CreateMaybeMessage< ::kiapi::common::types::Ratio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Ratio >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Color* Arena::CreateMaybeMessage< ::kiapi::common::types::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::ArcStartMidEnd* Arena::CreateMaybeMessage< ::kiapi::common::types::ArcStartMidEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::ArcStartMidEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::PolyLineNode* Arena::CreateMaybeMessage< ::kiapi::common::types::PolyLineNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::PolyLineNode >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::PolyLine* Arena::CreateMaybeMessage< ::kiapi::common::types::PolyLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::PolyLine >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::PolygonWithHoles* Arena::CreateMaybeMessage< ::kiapi::common::types::PolygonWithHoles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::PolygonWithHoles >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::PolySet* Arena::CreateMaybeMessage< ::kiapi::common::types::PolySet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::PolySet >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::TextAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::TextAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::TextAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::Text* Arena::CreateMaybeMessage< ::kiapi::common::types::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::TextBox* Arena::CreateMaybeMessage< ::kiapi::common::types::TextBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::TextBox >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::StrokeAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::StrokeAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::StrokeAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicFillAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicFillAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicFillAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicSegmentAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicSegmentAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicSegmentAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicRectangleAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicRectangleAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicRectangleAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicArcAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicArcAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicArcAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicCircleAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicCircleAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicCircleAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicBezierAttributes* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicBezierAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicBezierAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::GraphicShape* Arena::CreateMaybeMessage< ::kiapi::common::types::GraphicShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::GraphicShape >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::CompoundShape* Arena::CreateMaybeMessage< ::kiapi::common::types::CompoundShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::CompoundShape >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::types::TitleBlockInfo* Arena::CreateMaybeMessage< ::kiapi::common::types::TitleBlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::types::TitleBlockInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
