// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/commands/base_commands.proto

#include "common/commands/base_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace common {
namespace commands {
constexpr GetVersion::GetVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetVersionDefaultTypeInternal {
  constexpr GetVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVersionDefaultTypeInternal() {}
  union {
    GetVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVersionDefaultTypeInternal _GetVersion_default_instance_;
constexpr GetVersionResponse::GetVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(nullptr){}
struct GetVersionResponseDefaultTypeInternal {
  constexpr GetVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVersionResponseDefaultTypeInternal() {}
  union {
    GetVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVersionResponseDefaultTypeInternal _GetVersionResponse_default_instance_;
constexpr Ping::Ping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingDefaultTypeInternal {
  constexpr PingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingDefaultTypeInternal _Ping_default_instance_;
constexpr GetKiCadBinaryPath::GetKiCadBinaryPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : binary_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetKiCadBinaryPathDefaultTypeInternal {
  constexpr GetKiCadBinaryPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetKiCadBinaryPathDefaultTypeInternal() {}
  union {
    GetKiCadBinaryPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetKiCadBinaryPathDefaultTypeInternal _GetKiCadBinaryPath_default_instance_;
constexpr PathResponse::PathResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PathResponseDefaultTypeInternal {
  constexpr PathResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathResponseDefaultTypeInternal() {}
  union {
    PathResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathResponseDefaultTypeInternal _PathResponse_default_instance_;
constexpr GetTextExtents::GetTextExtents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(nullptr){}
struct GetTextExtentsDefaultTypeInternal {
  constexpr GetTextExtentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTextExtentsDefaultTypeInternal() {}
  union {
    GetTextExtents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTextExtentsDefaultTypeInternal _GetTextExtents_default_instance_;
constexpr TextOrTextBox::TextOrTextBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TextOrTextBoxDefaultTypeInternal {
  constexpr TextOrTextBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextOrTextBoxDefaultTypeInternal() {}
  union {
    TextOrTextBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextOrTextBoxDefaultTypeInternal _TextOrTextBox_default_instance_;
constexpr GetTextAsShapes::GetTextAsShapes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(){}
struct GetTextAsShapesDefaultTypeInternal {
  constexpr GetTextAsShapesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTextAsShapesDefaultTypeInternal() {}
  union {
    GetTextAsShapes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTextAsShapesDefaultTypeInternal _GetTextAsShapes_default_instance_;
constexpr TextWithShapes::TextWithShapes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(nullptr)
  , shapes_(nullptr){}
struct TextWithShapesDefaultTypeInternal {
  constexpr TextWithShapesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextWithShapesDefaultTypeInternal() {}
  union {
    TextWithShapes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextWithShapesDefaultTypeInternal _TextWithShapes_default_instance_;
constexpr GetTextAsShapesResponse::GetTextAsShapesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_with_shapes_(){}
struct GetTextAsShapesResponseDefaultTypeInternal {
  constexpr GetTextAsShapesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTextAsShapesResponseDefaultTypeInternal() {}
  union {
    GetTextAsShapesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTextAsShapesResponseDefaultTypeInternal _GetTextAsShapesResponse_default_instance_;
constexpr GetPluginSettingsPath::GetPluginSettingsPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetPluginSettingsPathDefaultTypeInternal {
  constexpr GetPluginSettingsPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPluginSettingsPathDefaultTypeInternal() {}
  union {
    GetPluginSettingsPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPluginSettingsPathDefaultTypeInternal _GetPluginSettingsPath_default_instance_;
constexpr StringResponse::StringResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringResponseDefaultTypeInternal {
  constexpr StringResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringResponseDefaultTypeInternal() {}
  union {
    StringResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringResponseDefaultTypeInternal _StringResponse_default_instance_;
}  // namespace commands
}  // namespace common
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2fcommands_2fbase_5fcommands_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fcommands_2fbase_5fcommands_2eproto = nullptr;

const uint32_t TableStruct_common_2fcommands_2fbase_5fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetVersionResponse, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetKiCadBinaryPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetKiCadBinaryPath, binary_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::PathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::PathResponse, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTextExtents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTextExtents, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::TextOrTextBox, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::TextOrTextBox, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::TextOrTextBox, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTextAsShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTextAsShapes, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::TextWithShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::TextWithShapes, text_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::TextWithShapes, shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTextAsShapesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTextAsShapesResponse, text_with_shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetPluginSettingsPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetPluginSettingsPath, identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::StringResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::StringResponse, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::common::commands::GetVersion)},
  { 6, -1, -1, sizeof(::kiapi::common::commands::GetVersionResponse)},
  { 13, -1, -1, sizeof(::kiapi::common::commands::Ping)},
  { 19, -1, -1, sizeof(::kiapi::common::commands::GetKiCadBinaryPath)},
  { 26, -1, -1, sizeof(::kiapi::common::commands::PathResponse)},
  { 33, -1, -1, sizeof(::kiapi::common::commands::GetTextExtents)},
  { 40, -1, -1, sizeof(::kiapi::common::commands::TextOrTextBox)},
  { 49, -1, -1, sizeof(::kiapi::common::commands::GetTextAsShapes)},
  { 56, -1, -1, sizeof(::kiapi::common::commands::TextWithShapes)},
  { 64, -1, -1, sizeof(::kiapi::common::commands::GetTextAsShapesResponse)},
  { 71, -1, -1, sizeof(::kiapi::common::commands::GetPluginSettingsPath)},
  { 78, -1, -1, sizeof(::kiapi::common::commands::StringResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetKiCadBinaryPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_PathResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetTextExtents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_TextOrTextBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetTextAsShapes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_TextWithShapes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetTextAsShapesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetPluginSettingsPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_StringResponse_default_instance_),
};

const char descriptor_table_protodef_common_2fcommands_2fbase_5fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#common/commands/base_commands.proto\022\025k"
  "iapi.common.commands\032\035common/types/base_"
  "types.proto\"\014\n\nGetVersion\"G\n\022GetVersionR"
  "esponse\0221\n\007version\030\001 \001(\0132 .kiapi.common."
  "types.KiCadVersion\"\006\n\004Ping\")\n\022GetKiCadBi"
  "naryPath\022\023\n\013binary_name\030\001 \001(\t\"\034\n\014PathRes"
  "ponse\022\014\n\004path\030\001 \001(\t\"8\n\016GetTextExtents\022&\n"
  "\004text\030\001 \001(\0132\030.kiapi.common.types.Text\"r\n"
  "\rTextOrTextBox\022(\n\004text\030\001 \001(\0132\030.kiapi.com"
  "mon.types.TextH\000\022.\n\007textbox\030\002 \001(\0132\033.kiap"
  "i.common.types.TextBoxH\000B\007\n\005inner\"E\n\017Get"
  "TextAsShapes\0222\n\004text\030\001 \003(\0132$.kiapi.commo"
  "n.commands.TextOrTextBox\"w\n\016TextWithShap"
  "es\0222\n\004text\030\001 \001(\0132$.kiapi.common.commands"
  ".TextOrTextBox\0221\n\006shapes\030\002 \001(\0132!.kiapi.c"
  "ommon.types.CompoundShape\"Z\n\027GetTextAsSh"
  "apesResponse\022\?\n\020text_with_shapes\030\001 \003(\0132%"
  ".kiapi.common.commands.TextWithShapes\"+\n"
  "\025GetPluginSettingsPath\022\022\n\nidentifier\030\001 \001"
  "(\t\"\"\n\016StringResponse\022\020\n\010response\030\001 \001(\tb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_deps[1] = {
  &::descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto = {
  false, false, 806, descriptor_table_protodef_common_2fcommands_2fbase_5fcommands_2eproto, "common/commands/base_commands.proto", 
  &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once, descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_common_2fcommands_2fbase_5fcommands_2eproto::offsets,
  file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto, file_level_enum_descriptors_common_2fcommands_2fbase_5fcommands_2eproto, file_level_service_descriptors_common_2fcommands_2fbase_5fcommands_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter() {
  return &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fcommands_2fbase_5fcommands_2eproto(&descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto);
namespace kiapi {
namespace common {
namespace commands {

// ===================================================================

class GetVersion::_Internal {
 public:
};

GetVersion::GetVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetVersion)
}
GetVersion::GetVersion(const GetVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetVersion)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersion::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[0]);
}

// ===================================================================

class GetVersionResponse::_Internal {
 public:
  static const ::kiapi::common::types::KiCadVersion& version(const GetVersionResponse* msg);
};

const ::kiapi::common::types::KiCadVersion&
GetVersionResponse::_Internal::version(const GetVersionResponse* msg) {
  return *msg->version_;
}
void GetVersionResponse::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
GetVersionResponse::GetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetVersionResponse)
}
GetVersionResponse::GetVersionResponse(const GetVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    version_ = new ::kiapi::common::types::KiCadVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetVersionResponse)
}

inline void GetVersionResponse::SharedCtor() {
version_ = nullptr;
}

GetVersionResponse::~GetVersionResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete version_;
}

void GetVersionResponse::ArenaDtor(void* object) {
  GetVersionResponse* _this = reinterpret_cast< GetVersionResponse* >(object);
  (void)_this;
}
void GetVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KiCadVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KiCadVersion version = 1;
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetVersionResponse)
  return target;
}

size_t GetVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KiCadVersion version = 1;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionResponse::GetClassData() const { return &_class_data_; }

void GetVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVersionResponse *>(to)->MergeFrom(
      static_cast<const GetVersionResponse &>(from));
}


void GetVersionResponse::MergeFrom(const GetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _internal_mutable_version()->::kiapi::common::types::KiCadVersion::MergeFrom(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVersionResponse::CopyFrom(const GetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionResponse::IsInitialized() const {
  return true;
}

void GetVersionResponse::InternalSwap(GetVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[1]);
}

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.Ping)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[2]);
}

// ===================================================================

class GetKiCadBinaryPath::_Internal {
 public:
};

GetKiCadBinaryPath::GetKiCadBinaryPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetKiCadBinaryPath)
}
GetKiCadBinaryPath::GetKiCadBinaryPath(const GetKiCadBinaryPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  binary_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    binary_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binary_name().empty()) {
    binary_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_binary_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetKiCadBinaryPath)
}

inline void GetKiCadBinaryPath::SharedCtor() {
binary_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  binary_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetKiCadBinaryPath::~GetKiCadBinaryPath() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetKiCadBinaryPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetKiCadBinaryPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  binary_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetKiCadBinaryPath::ArenaDtor(void* object) {
  GetKiCadBinaryPath* _this = reinterpret_cast< GetKiCadBinaryPath* >(object);
  (void)_this;
}
void GetKiCadBinaryPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetKiCadBinaryPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetKiCadBinaryPath::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetKiCadBinaryPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binary_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKiCadBinaryPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string binary_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_binary_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.GetKiCadBinaryPath.binary_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKiCadBinaryPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetKiCadBinaryPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string binary_name = 1;
  if (!this->_internal_binary_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_binary_name().data(), static_cast<int>(this->_internal_binary_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.GetKiCadBinaryPath.binary_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_binary_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetKiCadBinaryPath)
  return target;
}

size_t GetKiCadBinaryPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetKiCadBinaryPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string binary_name = 1;
  if (!this->_internal_binary_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_binary_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKiCadBinaryPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetKiCadBinaryPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKiCadBinaryPath::GetClassData() const { return &_class_data_; }

void GetKiCadBinaryPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetKiCadBinaryPath *>(to)->MergeFrom(
      static_cast<const GetKiCadBinaryPath &>(from));
}


void GetKiCadBinaryPath::MergeFrom(const GetKiCadBinaryPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetKiCadBinaryPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_binary_name().empty()) {
    _internal_set_binary_name(from._internal_binary_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKiCadBinaryPath::CopyFrom(const GetKiCadBinaryPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetKiCadBinaryPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKiCadBinaryPath::IsInitialized() const {
  return true;
}

void GetKiCadBinaryPath::InternalSwap(GetKiCadBinaryPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &binary_name_, lhs_arena,
      &other->binary_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKiCadBinaryPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[3]);
}

// ===================================================================

class PathResponse::_Internal {
 public:
};

PathResponse::PathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.PathResponse)
}
PathResponse::PathResponse(const PathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.PathResponse)
}

inline void PathResponse::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathResponse::~PathResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.PathResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathResponse::ArenaDtor(void* object) {
  PathResponse* _this = reinterpret_cast< PathResponse* >(object);
  (void)_this;
}
void PathResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.PathResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.PathResponse.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.PathResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.PathResponse.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.PathResponse)
  return target;
}

size_t PathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.PathResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathResponse::GetClassData() const { return &_class_data_; }

void PathResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathResponse *>(to)->MergeFrom(
      static_cast<const PathResponse &>(from));
}


void PathResponse::MergeFrom(const PathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.PathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathResponse::CopyFrom(const PathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.PathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathResponse::IsInitialized() const {
  return true;
}

void PathResponse::InternalSwap(PathResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PathResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[4]);
}

// ===================================================================

class GetTextExtents::_Internal {
 public:
  static const ::kiapi::common::types::Text& text(const GetTextExtents* msg);
};

const ::kiapi::common::types::Text&
GetTextExtents::_Internal::text(const GetTextExtents* msg) {
  return *msg->text_;
}
void GetTextExtents::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
GetTextExtents::GetTextExtents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetTextExtents)
}
GetTextExtents::GetTextExtents(const GetTextExtents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text()) {
    text_ = new ::kiapi::common::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetTextExtents)
}

inline void GetTextExtents::SharedCtor() {
text_ = nullptr;
}

GetTextExtents::~GetTextExtents() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetTextExtents)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTextExtents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete text_;
}

void GetTextExtents::ArenaDtor(void* object) {
  GetTextExtents* _this = reinterpret_cast< GetTextExtents* >(object);
  (void)_this;
}
void GetTextExtents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTextExtents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTextExtents::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetTextExtents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTextExtents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Text text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTextExtents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetTextExtents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Text text = 1;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetTextExtents)
  return target;
}

size_t GetTextExtents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetTextExtents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Text text = 1;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTextExtents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTextExtents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTextExtents::GetClassData() const { return &_class_data_; }

void GetTextExtents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTextExtents *>(to)->MergeFrom(
      static_cast<const GetTextExtents &>(from));
}


void GetTextExtents::MergeFrom(const GetTextExtents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetTextExtents)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::common::types::Text::MergeFrom(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTextExtents::CopyFrom(const GetTextExtents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetTextExtents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTextExtents::IsInitialized() const {
  return true;
}

void GetTextExtents::InternalSwap(GetTextExtents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(text_, other->text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTextExtents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[5]);
}

// ===================================================================

class TextOrTextBox::_Internal {
 public:
  static const ::kiapi::common::types::Text& text(const TextOrTextBox* msg);
  static const ::kiapi::common::types::TextBox& textbox(const TextOrTextBox* msg);
};

const ::kiapi::common::types::Text&
TextOrTextBox::_Internal::text(const TextOrTextBox* msg) {
  return *msg->inner_.text_;
}
const ::kiapi::common::types::TextBox&
TextOrTextBox::_Internal::textbox(const TextOrTextBox* msg) {
  return *msg->inner_.textbox_;
}
void TextOrTextBox::set_allocated_text(::kiapi::common::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_inner();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text));
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    inner_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.commands.TextOrTextBox.text)
}
void TextOrTextBox::clear_text() {
  if (_internal_has_text()) {
    if (GetArenaForAllocation() == nullptr) {
      delete inner_.text_;
    }
    clear_has_inner();
  }
}
void TextOrTextBox::set_allocated_textbox(::kiapi::common::types::TextBox* textbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_inner();
  if (textbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(textbox));
    if (message_arena != submessage_arena) {
      textbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textbox, submessage_arena);
    }
    set_has_textbox();
    inner_.textbox_ = textbox;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.commands.TextOrTextBox.textbox)
}
void TextOrTextBox::clear_textbox() {
  if (_internal_has_textbox()) {
    if (GetArenaForAllocation() == nullptr) {
      delete inner_.textbox_;
    }
    clear_has_inner();
  }
}
TextOrTextBox::TextOrTextBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.TextOrTextBox)
}
TextOrTextBox::TextOrTextBox(const TextOrTextBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kText: {
      _internal_mutable_text()->::kiapi::common::types::Text::MergeFrom(from._internal_text());
      break;
    }
    case kTextbox: {
      _internal_mutable_textbox()->::kiapi::common::types::TextBox::MergeFrom(from._internal_textbox());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.TextOrTextBox)
}

inline void TextOrTextBox::SharedCtor() {
clear_has_inner();
}

TextOrTextBox::~TextOrTextBox() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.TextOrTextBox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextOrTextBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void TextOrTextBox::ArenaDtor(void* object) {
  TextOrTextBox* _this = reinterpret_cast< TextOrTextBox* >(object);
  (void)_this;
}
void TextOrTextBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextOrTextBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextOrTextBox::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:kiapi.common.commands.TextOrTextBox)
  switch (inner_case()) {
    case kText: {
      if (GetArenaForAllocation() == nullptr) {
        delete inner_.text_;
      }
      break;
    }
    case kTextbox: {
      if (GetArenaForAllocation() == nullptr) {
        delete inner_.textbox_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void TextOrTextBox::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.TextOrTextBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextOrTextBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Text text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.TextBox textbox = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_textbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextOrTextBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.TextOrTextBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Text text = 1;
  if (_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::text(this), target, stream);
  }

  // .kiapi.common.types.TextBox textbox = 2;
  if (_internal_has_textbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::textbox(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.TextOrTextBox)
  return target;
}

size_t TextOrTextBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.TextOrTextBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .kiapi.common.types.Text text = 1;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.text_);
      break;
    }
    // .kiapi.common.types.TextBox textbox = 2;
    case kTextbox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.textbox_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextOrTextBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextOrTextBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextOrTextBox::GetClassData() const { return &_class_data_; }

void TextOrTextBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextOrTextBox *>(to)->MergeFrom(
      static_cast<const TextOrTextBox &>(from));
}


void TextOrTextBox::MergeFrom(const TextOrTextBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.TextOrTextBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kText: {
      _internal_mutable_text()->::kiapi::common::types::Text::MergeFrom(from._internal_text());
      break;
    }
    case kTextbox: {
      _internal_mutable_textbox()->::kiapi::common::types::TextBox::MergeFrom(from._internal_textbox());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextOrTextBox::CopyFrom(const TextOrTextBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.TextOrTextBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextOrTextBox::IsInitialized() const {
  return true;
}

void TextOrTextBox::InternalSwap(TextOrTextBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextOrTextBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[6]);
}

// ===================================================================

class GetTextAsShapes::_Internal {
 public:
};

GetTextAsShapes::GetTextAsShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  text_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetTextAsShapes)
}
GetTextAsShapes::GetTextAsShapes(const GetTextAsShapes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      text_(from.text_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetTextAsShapes)
}

inline void GetTextAsShapes::SharedCtor() {
}

GetTextAsShapes::~GetTextAsShapes() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetTextAsShapes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTextAsShapes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTextAsShapes::ArenaDtor(void* object) {
  GetTextAsShapes* _this = reinterpret_cast< GetTextAsShapes* >(object);
  (void)_this;
}
void GetTextAsShapes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTextAsShapes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTextAsShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetTextAsShapes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTextAsShapes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.commands.TextOrTextBox text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTextAsShapes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetTextAsShapes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.commands.TextOrTextBox text = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_text(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetTextAsShapes)
  return target;
}

size_t GetTextAsShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetTextAsShapes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.commands.TextOrTextBox text = 1;
  total_size += 1UL * this->_internal_text_size();
  for (const auto& msg : this->text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTextAsShapes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTextAsShapes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTextAsShapes::GetClassData() const { return &_class_data_; }

void GetTextAsShapes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTextAsShapes *>(to)->MergeFrom(
      static_cast<const GetTextAsShapes &>(from));
}


void GetTextAsShapes::MergeFrom(const GetTextAsShapes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetTextAsShapes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTextAsShapes::CopyFrom(const GetTextAsShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetTextAsShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTextAsShapes::IsInitialized() const {
  return true;
}

void GetTextAsShapes::InternalSwap(GetTextAsShapes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  text_.InternalSwap(&other->text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTextAsShapes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[7]);
}

// ===================================================================

class TextWithShapes::_Internal {
 public:
  static const ::kiapi::common::commands::TextOrTextBox& text(const TextWithShapes* msg);
  static const ::kiapi::common::types::CompoundShape& shapes(const TextWithShapes* msg);
};

const ::kiapi::common::commands::TextOrTextBox&
TextWithShapes::_Internal::text(const TextWithShapes* msg) {
  return *msg->text_;
}
const ::kiapi::common::types::CompoundShape&
TextWithShapes::_Internal::shapes(const TextWithShapes* msg) {
  return *msg->shapes_;
}
void TextWithShapes::clear_shapes() {
  if (GetArenaForAllocation() == nullptr && shapes_ != nullptr) {
    delete shapes_;
  }
  shapes_ = nullptr;
}
TextWithShapes::TextWithShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.TextWithShapes)
}
TextWithShapes::TextWithShapes(const TextWithShapes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text()) {
    text_ = new ::kiapi::common::commands::TextOrTextBox(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from._internal_has_shapes()) {
    shapes_ = new ::kiapi::common::types::CompoundShape(*from.shapes_);
  } else {
    shapes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.TextWithShapes)
}

inline void TextWithShapes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shapes_) -
    reinterpret_cast<char*>(&text_)) + sizeof(shapes_));
}

TextWithShapes::~TextWithShapes() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.TextWithShapes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextWithShapes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete shapes_;
}

void TextWithShapes::ArenaDtor(void* object) {
  TextWithShapes* _this = reinterpret_cast< TextWithShapes* >(object);
  (void)_this;
}
void TextWithShapes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextWithShapes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextWithShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.TextWithShapes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  if (GetArenaForAllocation() == nullptr && shapes_ != nullptr) {
    delete shapes_;
  }
  shapes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextWithShapes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.commands.TextOrTextBox text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.CompoundShape shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shapes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextWithShapes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.TextWithShapes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.commands.TextOrTextBox text = 1;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::text(this), target, stream);
  }

  // .kiapi.common.types.CompoundShape shapes = 2;
  if (this->_internal_has_shapes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shapes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.TextWithShapes)
  return target;
}

size_t TextWithShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.TextWithShapes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.commands.TextOrTextBox text = 1;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .kiapi.common.types.CompoundShape shapes = 2;
  if (this->_internal_has_shapes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shapes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextWithShapes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextWithShapes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextWithShapes::GetClassData() const { return &_class_data_; }

void TextWithShapes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextWithShapes *>(to)->MergeFrom(
      static_cast<const TextWithShapes &>(from));
}


void TextWithShapes::MergeFrom(const TextWithShapes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.TextWithShapes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::common::commands::TextOrTextBox::MergeFrom(from._internal_text());
  }
  if (from._internal_has_shapes()) {
    _internal_mutable_shapes()->::kiapi::common::types::CompoundShape::MergeFrom(from._internal_shapes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextWithShapes::CopyFrom(const TextWithShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.TextWithShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextWithShapes::IsInitialized() const {
  return true;
}

void TextWithShapes::InternalSwap(TextWithShapes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextWithShapes, shapes_)
      + sizeof(TextWithShapes::shapes_)
      - PROTOBUF_FIELD_OFFSET(TextWithShapes, text_)>(
          reinterpret_cast<char*>(&text_),
          reinterpret_cast<char*>(&other->text_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextWithShapes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[8]);
}

// ===================================================================

class GetTextAsShapesResponse::_Internal {
 public:
};

GetTextAsShapesResponse::GetTextAsShapesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  text_with_shapes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetTextAsShapesResponse)
}
GetTextAsShapesResponse::GetTextAsShapesResponse(const GetTextAsShapesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      text_with_shapes_(from.text_with_shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetTextAsShapesResponse)
}

inline void GetTextAsShapesResponse::SharedCtor() {
}

GetTextAsShapesResponse::~GetTextAsShapesResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetTextAsShapesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTextAsShapesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTextAsShapesResponse::ArenaDtor(void* object) {
  GetTextAsShapesResponse* _this = reinterpret_cast< GetTextAsShapesResponse* >(object);
  (void)_this;
}
void GetTextAsShapesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTextAsShapesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTextAsShapesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetTextAsShapesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_with_shapes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTextAsShapesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.commands.TextWithShapes text_with_shapes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_with_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTextAsShapesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetTextAsShapesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.commands.TextWithShapes text_with_shapes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_with_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_text_with_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetTextAsShapesResponse)
  return target;
}

size_t GetTextAsShapesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetTextAsShapesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.commands.TextWithShapes text_with_shapes = 1;
  total_size += 1UL * this->_internal_text_with_shapes_size();
  for (const auto& msg : this->text_with_shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTextAsShapesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTextAsShapesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTextAsShapesResponse::GetClassData() const { return &_class_data_; }

void GetTextAsShapesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTextAsShapesResponse *>(to)->MergeFrom(
      static_cast<const GetTextAsShapesResponse &>(from));
}


void GetTextAsShapesResponse::MergeFrom(const GetTextAsShapesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetTextAsShapesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  text_with_shapes_.MergeFrom(from.text_with_shapes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTextAsShapesResponse::CopyFrom(const GetTextAsShapesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetTextAsShapesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTextAsShapesResponse::IsInitialized() const {
  return true;
}

void GetTextAsShapesResponse::InternalSwap(GetTextAsShapesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  text_with_shapes_.InternalSwap(&other->text_with_shapes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTextAsShapesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[9]);
}

// ===================================================================

class GetPluginSettingsPath::_Internal {
 public:
};

GetPluginSettingsPath::GetPluginSettingsPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetPluginSettingsPath)
}
GetPluginSettingsPath::GetPluginSettingsPath(const GetPluginSettingsPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetPluginSettingsPath)
}

inline void GetPluginSettingsPath::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPluginSettingsPath::~GetPluginSettingsPath() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetPluginSettingsPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPluginSettingsPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPluginSettingsPath::ArenaDtor(void* object) {
  GetPluginSettingsPath* _this = reinterpret_cast< GetPluginSettingsPath* >(object);
  (void)_this;
}
void GetPluginSettingsPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPluginSettingsPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPluginSettingsPath::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetPluginSettingsPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPluginSettingsPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.GetPluginSettingsPath.identifier"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPluginSettingsPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetPluginSettingsPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.GetPluginSettingsPath.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetPluginSettingsPath)
  return target;
}

size_t GetPluginSettingsPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetPluginSettingsPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPluginSettingsPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPluginSettingsPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPluginSettingsPath::GetClassData() const { return &_class_data_; }

void GetPluginSettingsPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPluginSettingsPath *>(to)->MergeFrom(
      static_cast<const GetPluginSettingsPath &>(from));
}


void GetPluginSettingsPath::MergeFrom(const GetPluginSettingsPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetPluginSettingsPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPluginSettingsPath::CopyFrom(const GetPluginSettingsPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetPluginSettingsPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPluginSettingsPath::IsInitialized() const {
  return true;
}

void GetPluginSettingsPath::InternalSwap(GetPluginSettingsPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPluginSettingsPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[10]);
}

// ===================================================================

class StringResponse::_Internal {
 public:
};

StringResponse::StringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.StringResponse)
}
StringResponse::StringResponse(const StringResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response().empty()) {
    response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.StringResponse)
}

inline void StringResponse::SharedCtor() {
response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringResponse::~StringResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.StringResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringResponse::ArenaDtor(void* object) {
  StringResponse* _this = reinterpret_cast< StringResponse* >(object);
  (void)_this;
}
void StringResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.StringResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.StringResponse.response"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.StringResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (!this->_internal_response().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.StringResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.StringResponse)
  return target;
}

size_t StringResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.StringResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (!this->_internal_response().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringResponse::GetClassData() const { return &_class_data_; }

void StringResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StringResponse *>(to)->MergeFrom(
      static_cast<const StringResponse &>(from));
}


void StringResponse::MergeFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.StringResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response().empty()) {
    _internal_set_response(from._internal_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringResponse::CopyFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringResponse::IsInitialized() const {
  return true;
}

void StringResponse::InternalSwap(StringResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &response_, lhs_arena,
      &other->response_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2fbase_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2fbase_5fcommands_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetVersion* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetVersionResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::Ping* Arena::CreateMaybeMessage< ::kiapi::common::commands::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetKiCadBinaryPath* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetKiCadBinaryPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetKiCadBinaryPath >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::PathResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::PathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::PathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetTextExtents* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetTextExtents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetTextExtents >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::TextOrTextBox* Arena::CreateMaybeMessage< ::kiapi::common::commands::TextOrTextBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::TextOrTextBox >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetTextAsShapes* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetTextAsShapes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetTextAsShapes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::TextWithShapes* Arena::CreateMaybeMessage< ::kiapi::common::commands::TextWithShapes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::TextWithShapes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetTextAsShapesResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetTextAsShapesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetTextAsShapesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetPluginSettingsPath* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetPluginSettingsPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetPluginSettingsPath >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::StringResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::StringResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::StringResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
