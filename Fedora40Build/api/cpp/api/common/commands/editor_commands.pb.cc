// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/commands/editor_commands.proto

#include "common/commands/editor_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace common {
namespace commands {
constexpr RefreshEditor::RefreshEditor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_(0)
{}
struct RefreshEditorDefaultTypeInternal {
  constexpr RefreshEditorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RefreshEditorDefaultTypeInternal() {}
  union {
    RefreshEditor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RefreshEditorDefaultTypeInternal _RefreshEditor_default_instance_;
constexpr GetOpenDocuments::GetOpenDocuments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct GetOpenDocumentsDefaultTypeInternal {
  constexpr GetOpenDocumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOpenDocumentsDefaultTypeInternal() {}
  union {
    GetOpenDocuments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOpenDocumentsDefaultTypeInternal _GetOpenDocuments_default_instance_;
constexpr GetOpenDocumentsResponse::GetOpenDocumentsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : documents_(){}
struct GetOpenDocumentsResponseDefaultTypeInternal {
  constexpr GetOpenDocumentsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOpenDocumentsResponseDefaultTypeInternal() {}
  union {
    GetOpenDocumentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOpenDocumentsResponseDefaultTypeInternal _GetOpenDocumentsResponse_default_instance_;
constexpr SaveDocument::SaveDocument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_(nullptr){}
struct SaveDocumentDefaultTypeInternal {
  constexpr SaveDocumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveDocumentDefaultTypeInternal() {}
  union {
    SaveDocument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveDocumentDefaultTypeInternal _SaveDocument_default_instance_;
constexpr SaveOptions::SaveOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overwrite_(false)
  , include_project_(false){}
struct SaveOptionsDefaultTypeInternal {
  constexpr SaveOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveOptionsDefaultTypeInternal() {}
  union {
    SaveOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveOptionsDefaultTypeInternal _SaveOptions_default_instance_;
constexpr SaveCopyOfDocument::SaveCopyOfDocument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_(nullptr)
  , options_(nullptr){}
struct SaveCopyOfDocumentDefaultTypeInternal {
  constexpr SaveCopyOfDocumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveCopyOfDocumentDefaultTypeInternal() {}
  union {
    SaveCopyOfDocument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveCopyOfDocumentDefaultTypeInternal _SaveCopyOfDocument_default_instance_;
constexpr RevertDocument::RevertDocument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_(nullptr){}
struct RevertDocumentDefaultTypeInternal {
  constexpr RevertDocumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RevertDocumentDefaultTypeInternal() {}
  union {
    RevertDocument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RevertDocumentDefaultTypeInternal _RevertDocument_default_instance_;
constexpr RunAction::RunAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RunActionDefaultTypeInternal {
  constexpr RunActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RunActionDefaultTypeInternal() {}
  union {
    RunAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RunActionDefaultTypeInternal _RunAction_default_instance_;
constexpr RunActionResponse::RunActionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct RunActionResponseDefaultTypeInternal {
  constexpr RunActionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RunActionResponseDefaultTypeInternal() {}
  union {
    RunActionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RunActionResponseDefaultTypeInternal _RunActionResponse_default_instance_;
constexpr BeginCommit::BeginCommit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BeginCommitDefaultTypeInternal {
  constexpr BeginCommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginCommitDefaultTypeInternal() {}
  union {
    BeginCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginCommitDefaultTypeInternal _BeginCommit_default_instance_;
constexpr BeginCommitResponse::BeginCommitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct BeginCommitResponseDefaultTypeInternal {
  constexpr BeginCommitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginCommitResponseDefaultTypeInternal() {}
  union {
    BeginCommitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginCommitResponseDefaultTypeInternal _BeginCommitResponse_default_instance_;
constexpr EndCommit::EndCommit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , action_(0)
{}
struct EndCommitDefaultTypeInternal {
  constexpr EndCommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndCommitDefaultTypeInternal() {}
  union {
    EndCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndCommitDefaultTypeInternal _EndCommit_default_instance_;
constexpr EndCommitResponse::EndCommitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EndCommitResponseDefaultTypeInternal {
  constexpr EndCommitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndCommitResponseDefaultTypeInternal() {}
  union {
    EndCommitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndCommitResponseDefaultTypeInternal _EndCommitResponse_default_instance_;
constexpr CreateItems::CreateItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , header_(nullptr)
  , container_(nullptr){}
struct CreateItemsDefaultTypeInternal {
  constexpr CreateItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateItemsDefaultTypeInternal() {}
  union {
    CreateItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateItemsDefaultTypeInternal _CreateItems_default_instance_;
constexpr ItemStatus::ItemStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
{}
struct ItemStatusDefaultTypeInternal {
  constexpr ItemStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemStatusDefaultTypeInternal() {}
  union {
    ItemStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemStatusDefaultTypeInternal _ItemStatus_default_instance_;
constexpr ItemCreationResult::ItemCreationResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , item_(nullptr){}
struct ItemCreationResultDefaultTypeInternal {
  constexpr ItemCreationResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemCreationResultDefaultTypeInternal() {}
  union {
    ItemCreationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemCreationResultDefaultTypeInternal _ItemCreationResult_default_instance_;
constexpr CreateItemsResponse::CreateItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : created_items_()
  , header_(nullptr)
  , status_(0)
{}
struct CreateItemsResponseDefaultTypeInternal {
  constexpr CreateItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateItemsResponseDefaultTypeInternal() {}
  union {
    CreateItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateItemsResponseDefaultTypeInternal _CreateItemsResponse_default_instance_;
constexpr GetItems::GetItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_()
  , _types_cached_byte_size_(0)
  , header_(nullptr){}
struct GetItemsDefaultTypeInternal {
  constexpr GetItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetItemsDefaultTypeInternal() {}
  union {
    GetItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetItemsDefaultTypeInternal _GetItems_default_instance_;
constexpr GetItemsResponse::GetItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , header_(nullptr)
  , status_(0)
{}
struct GetItemsResponseDefaultTypeInternal {
  constexpr GetItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetItemsResponseDefaultTypeInternal() {}
  union {
    GetItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetItemsResponseDefaultTypeInternal _GetItemsResponse_default_instance_;
constexpr UpdateItems::UpdateItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , header_(nullptr){}
struct UpdateItemsDefaultTypeInternal {
  constexpr UpdateItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateItemsDefaultTypeInternal() {}
  union {
    UpdateItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateItemsDefaultTypeInternal _UpdateItems_default_instance_;
constexpr ItemUpdateResult::ItemUpdateResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , item_(nullptr){}
struct ItemUpdateResultDefaultTypeInternal {
  constexpr ItemUpdateResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemUpdateResultDefaultTypeInternal() {}
  union {
    ItemUpdateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemUpdateResultDefaultTypeInternal _ItemUpdateResult_default_instance_;
constexpr UpdateItemsResponse::UpdateItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updated_items_()
  , header_(nullptr)
  , status_(0)
{}
struct UpdateItemsResponseDefaultTypeInternal {
  constexpr UpdateItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateItemsResponseDefaultTypeInternal() {}
  union {
    UpdateItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateItemsResponseDefaultTypeInternal _UpdateItemsResponse_default_instance_;
constexpr DeleteItems::DeleteItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , header_(nullptr){}
struct DeleteItemsDefaultTypeInternal {
  constexpr DeleteItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteItemsDefaultTypeInternal() {}
  union {
    DeleteItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteItemsDefaultTypeInternal _DeleteItems_default_instance_;
constexpr ItemDeletionResult::ItemDeletionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , status_(0)
{}
struct ItemDeletionResultDefaultTypeInternal {
  constexpr ItemDeletionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemDeletionResultDefaultTypeInternal() {}
  union {
    ItemDeletionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemDeletionResultDefaultTypeInternal _ItemDeletionResult_default_instance_;
constexpr DeleteItemsResponse::DeleteItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deleted_items_()
  , header_(nullptr)
  , status_(0)
{}
struct DeleteItemsResponseDefaultTypeInternal {
  constexpr DeleteItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteItemsResponseDefaultTypeInternal() {}
  union {
    DeleteItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteItemsResponseDefaultTypeInternal _DeleteItemsResponse_default_instance_;
constexpr GetBoundingBox::GetBoundingBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , header_(nullptr)
  , mode_(0)
{}
struct GetBoundingBoxDefaultTypeInternal {
  constexpr GetBoundingBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBoundingBoxDefaultTypeInternal() {}
  union {
    GetBoundingBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBoundingBoxDefaultTypeInternal _GetBoundingBox_default_instance_;
constexpr GetBoundingBoxResponse::GetBoundingBoxResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , boxes_(){}
struct GetBoundingBoxResponseDefaultTypeInternal {
  constexpr GetBoundingBoxResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBoundingBoxResponseDefaultTypeInternal() {}
  union {
    GetBoundingBoxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBoundingBoxResponseDefaultTypeInternal _GetBoundingBoxResponse_default_instance_;
constexpr GetSelection::GetSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_()
  , _types_cached_byte_size_(0)
  , header_(nullptr){}
struct GetSelectionDefaultTypeInternal {
  constexpr GetSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSelectionDefaultTypeInternal() {}
  union {
    GetSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSelectionDefaultTypeInternal _GetSelection_default_instance_;
constexpr SelectionResponse::SelectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct SelectionResponseDefaultTypeInternal {
  constexpr SelectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionResponseDefaultTypeInternal() {}
  union {
    SelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionResponseDefaultTypeInternal _SelectionResponse_default_instance_;
constexpr AddToSelection::AddToSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , header_(nullptr){}
struct AddToSelectionDefaultTypeInternal {
  constexpr AddToSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddToSelectionDefaultTypeInternal() {}
  union {
    AddToSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddToSelectionDefaultTypeInternal _AddToSelection_default_instance_;
constexpr RemoveFromSelection::RemoveFromSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , header_(nullptr){}
struct RemoveFromSelectionDefaultTypeInternal {
  constexpr RemoveFromSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveFromSelectionDefaultTypeInternal() {}
  union {
    RemoveFromSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveFromSelectionDefaultTypeInternal _RemoveFromSelection_default_instance_;
constexpr ClearSelection::ClearSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct ClearSelectionDefaultTypeInternal {
  constexpr ClearSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearSelectionDefaultTypeInternal() {}
  union {
    ClearSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearSelectionDefaultTypeInternal _ClearSelection_default_instance_;
constexpr HitTest::HitTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , id_(nullptr)
  , position_(nullptr)
  , tolerance_(0){}
struct HitTestDefaultTypeInternal {
  constexpr HitTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HitTestDefaultTypeInternal() {}
  union {
    HitTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HitTestDefaultTypeInternal _HitTest_default_instance_;
constexpr HitTestResponse::HitTestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct HitTestResponseDefaultTypeInternal {
  constexpr HitTestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HitTestResponseDefaultTypeInternal() {}
  union {
    HitTestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HitTestResponseDefaultTypeInternal _HitTestResponse_default_instance_;
constexpr GetTitleBlockInfo::GetTitleBlockInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_(nullptr){}
struct GetTitleBlockInfoDefaultTypeInternal {
  constexpr GetTitleBlockInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTitleBlockInfoDefaultTypeInternal() {}
  union {
    GetTitleBlockInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTitleBlockInfoDefaultTypeInternal _GetTitleBlockInfo_default_instance_;
constexpr SaveDocumentToString::SaveDocumentToString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_(nullptr){}
struct SaveDocumentToStringDefaultTypeInternal {
  constexpr SaveDocumentToStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveDocumentToStringDefaultTypeInternal() {}
  union {
    SaveDocumentToString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveDocumentToStringDefaultTypeInternal _SaveDocumentToString_default_instance_;
constexpr SavedDocumentResponse::SavedDocumentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_(nullptr){}
struct SavedDocumentResponseDefaultTypeInternal {
  constexpr SavedDocumentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedDocumentResponseDefaultTypeInternal() {}
  union {
    SavedDocumentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedDocumentResponseDefaultTypeInternal _SavedDocumentResponse_default_instance_;
constexpr SaveSelectionToString::SaveSelectionToString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SaveSelectionToStringDefaultTypeInternal {
  constexpr SaveSelectionToStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveSelectionToStringDefaultTypeInternal() {}
  union {
    SaveSelectionToString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveSelectionToStringDefaultTypeInternal _SaveSelectionToString_default_instance_;
constexpr SavedSelectionResponse::SavedSelectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SavedSelectionResponseDefaultTypeInternal {
  constexpr SavedSelectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedSelectionResponseDefaultTypeInternal() {}
  union {
    SavedSelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedSelectionResponseDefaultTypeInternal _SavedSelectionResponse_default_instance_;
constexpr ParseAndCreateItemsFromString::ParseAndCreateItemsFromString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_(nullptr){}
struct ParseAndCreateItemsFromStringDefaultTypeInternal {
  constexpr ParseAndCreateItemsFromStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParseAndCreateItemsFromStringDefaultTypeInternal() {}
  union {
    ParseAndCreateItemsFromString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParseAndCreateItemsFromStringDefaultTypeInternal _ParseAndCreateItemsFromString_default_instance_;
}  // namespace commands
}  // namespace common
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[40];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fcommands_2feditor_5fcommands_2eproto = nullptr;

const uint32_t TableStruct_common_2fcommands_2feditor_5fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RefreshEditor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RefreshEditor, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetOpenDocuments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetOpenDocuments, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetOpenDocumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetOpenDocumentsResponse, documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveDocument, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveOptions, overwrite_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveOptions, include_project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveCopyOfDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveCopyOfDocument, document_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveCopyOfDocument, path_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveCopyOfDocument, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RevertDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RevertDocument, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RunAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RunAction, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RunActionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RunActionResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::BeginCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::BeginCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::BeginCommitResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::EndCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::EndCommit, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::EndCommit, action_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::EndCommit, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::EndCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItems, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItems, items_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItems, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemStatus, code_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemStatus, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemCreationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemCreationResult, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemCreationResult, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItemsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItemsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::CreateItemsResponse, created_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetItems, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetItems, types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetItemsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetItemsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetItemsResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::UpdateItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::UpdateItems, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::UpdateItems, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemUpdateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemUpdateResult, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemUpdateResult, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::UpdateItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::UpdateItemsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::UpdateItemsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::UpdateItemsResponse, updated_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::DeleteItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::DeleteItems, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::DeleteItems, item_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemDeletionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemDeletionResult, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ItemDeletionResult, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::DeleteItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::DeleteItemsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::DeleteItemsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::DeleteItemsResponse, deleted_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetBoundingBox, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetBoundingBox, items_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetBoundingBox, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetBoundingBoxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetBoundingBoxResponse, items_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetBoundingBoxResponse, boxes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetSelection, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetSelection, types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SelectionResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::AddToSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::AddToSelection, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::AddToSelection, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RemoveFromSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RemoveFromSelection, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::RemoveFromSelection, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ClearSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ClearSelection, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::HitTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::HitTest, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::HitTest, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::HitTest, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::HitTest, tolerance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::HitTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::HitTestResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTitleBlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::GetTitleBlockInfo, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveDocumentToString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveDocumentToString, document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SavedDocumentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SavedDocumentResponse, document_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SavedDocumentResponse, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SaveSelectionToString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SavedSelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SavedSelectionResponse, ids_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::SavedSelectionResponse, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ParseAndCreateItemsFromString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ParseAndCreateItemsFromString, document_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::commands::ParseAndCreateItemsFromString, contents_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::common::commands::RefreshEditor)},
  { 7, -1, -1, sizeof(::kiapi::common::commands::GetOpenDocuments)},
  { 14, -1, -1, sizeof(::kiapi::common::commands::GetOpenDocumentsResponse)},
  { 21, -1, -1, sizeof(::kiapi::common::commands::SaveDocument)},
  { 28, -1, -1, sizeof(::kiapi::common::commands::SaveOptions)},
  { 36, -1, -1, sizeof(::kiapi::common::commands::SaveCopyOfDocument)},
  { 45, -1, -1, sizeof(::kiapi::common::commands::RevertDocument)},
  { 52, -1, -1, sizeof(::kiapi::common::commands::RunAction)},
  { 59, -1, -1, sizeof(::kiapi::common::commands::RunActionResponse)},
  { 66, -1, -1, sizeof(::kiapi::common::commands::BeginCommit)},
  { 72, -1, -1, sizeof(::kiapi::common::commands::BeginCommitResponse)},
  { 79, -1, -1, sizeof(::kiapi::common::commands::EndCommit)},
  { 88, -1, -1, sizeof(::kiapi::common::commands::EndCommitResponse)},
  { 94, -1, -1, sizeof(::kiapi::common::commands::CreateItems)},
  { 103, -1, -1, sizeof(::kiapi::common::commands::ItemStatus)},
  { 111, -1, -1, sizeof(::kiapi::common::commands::ItemCreationResult)},
  { 119, -1, -1, sizeof(::kiapi::common::commands::CreateItemsResponse)},
  { 128, -1, -1, sizeof(::kiapi::common::commands::GetItems)},
  { 136, -1, -1, sizeof(::kiapi::common::commands::GetItemsResponse)},
  { 145, -1, -1, sizeof(::kiapi::common::commands::UpdateItems)},
  { 153, -1, -1, sizeof(::kiapi::common::commands::ItemUpdateResult)},
  { 161, -1, -1, sizeof(::kiapi::common::commands::UpdateItemsResponse)},
  { 170, -1, -1, sizeof(::kiapi::common::commands::DeleteItems)},
  { 178, -1, -1, sizeof(::kiapi::common::commands::ItemDeletionResult)},
  { 186, -1, -1, sizeof(::kiapi::common::commands::DeleteItemsResponse)},
  { 195, -1, -1, sizeof(::kiapi::common::commands::GetBoundingBox)},
  { 204, -1, -1, sizeof(::kiapi::common::commands::GetBoundingBoxResponse)},
  { 212, -1, -1, sizeof(::kiapi::common::commands::GetSelection)},
  { 220, -1, -1, sizeof(::kiapi::common::commands::SelectionResponse)},
  { 227, -1, -1, sizeof(::kiapi::common::commands::AddToSelection)},
  { 235, -1, -1, sizeof(::kiapi::common::commands::RemoveFromSelection)},
  { 243, -1, -1, sizeof(::kiapi::common::commands::ClearSelection)},
  { 250, -1, -1, sizeof(::kiapi::common::commands::HitTest)},
  { 260, -1, -1, sizeof(::kiapi::common::commands::HitTestResponse)},
  { 267, -1, -1, sizeof(::kiapi::common::commands::GetTitleBlockInfo)},
  { 274, -1, -1, sizeof(::kiapi::common::commands::SaveDocumentToString)},
  { 281, -1, -1, sizeof(::kiapi::common::commands::SavedDocumentResponse)},
  { 289, -1, -1, sizeof(::kiapi::common::commands::SaveSelectionToString)},
  { 295, -1, -1, sizeof(::kiapi::common::commands::SavedSelectionResponse)},
  { 303, -1, -1, sizeof(::kiapi::common::commands::ParseAndCreateItemsFromString)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_RefreshEditor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetOpenDocuments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetOpenDocumentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SaveDocument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SaveOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SaveCopyOfDocument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_RevertDocument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_RunAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_RunActionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_BeginCommit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_BeginCommitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_EndCommit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_EndCommitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_CreateItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_ItemStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_ItemCreationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_CreateItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_UpdateItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_ItemUpdateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_UpdateItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_DeleteItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_ItemDeletionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_DeleteItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetBoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetBoundingBoxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SelectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_AddToSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_RemoveFromSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_ClearSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_HitTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_HitTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_GetTitleBlockInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SaveDocumentToString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SavedDocumentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SaveSelectionToString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_SavedSelectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::commands::_ParseAndCreateItemsFromString_default_instance_),
};

const char descriptor_table_protodef_common_2fcommands_2feditor_5fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%common/commands/editor_commands.proto\022"
  "\025kiapi.common.commands\032\031google/protobuf/"
  "any.proto\032\035common/types/base_types.proto"
  "\032\030common/types/enums.proto\"=\n\rRefreshEdi"
  "tor\022,\n\005frame\030\001 \001(\0162\035.kiapi.common.types."
  "FrameType\"B\n\020GetOpenDocuments\022.\n\004type\030\001 "
  "\001(\0162 .kiapi.common.types.DocumentType\"T\n"
  "\030GetOpenDocumentsResponse\0228\n\tdocuments\030\001"
  " \003(\0132%.kiapi.common.types.DocumentSpecif"
  "ier\"G\n\014SaveDocument\0227\n\010document\030\001 \001(\0132%."
  "kiapi.common.types.DocumentSpecifier\"9\n\013"
  "SaveOptions\022\021\n\toverwrite\030\001 \001(\010\022\027\n\017includ"
  "e_project\030\002 \001(\010\"\220\001\n\022SaveCopyOfDocument\0227"
  "\n\010document\030\001 \001(\0132%.kiapi.common.types.Do"
  "cumentSpecifier\022\014\n\004path\030\002 \001(\t\0223\n\007options"
  "\030\003 \001(\0132\".kiapi.common.commands.SaveOptio"
  "ns\"I\n\016RevertDocument\0227\n\010document\030\001 \001(\0132%"
  ".kiapi.common.types.DocumentSpecifier\"\033\n"
  "\tRunAction\022\016\n\006action\030\001 \001(\t\"K\n\021RunActionR"
  "esponse\0226\n\006status\030\001 \001(\0162&.kiapi.common.c"
  "ommands.RunActionStatus\"\r\n\013BeginCommit\";"
  "\n\023BeginCommitResponse\022$\n\002id\030\001 \001(\0132\030.kiap"
  "i.common.types.KIID\"w\n\tEndCommit\022$\n\002id\030\001"
  " \001(\0132\030.kiapi.common.types.KIID\0223\n\006action"
  "\030\002 \001(\0162#.kiapi.common.commands.CommitAct"
  "ion\022\017\n\007message\030\003 \001(\t\"\023\n\021EndCommitRespons"
  "e\"\217\001\n\013CreateItems\022.\n\006header\030\001 \001(\0132\036.kiap"
  "i.common.types.ItemHeader\022#\n\005items\030\002 \003(\013"
  "2\024.google.protobuf.Any\022+\n\tcontainer\030\003 \001("
  "\0132\030.kiapi.common.types.KIID\"X\n\nItemStatu"
  "s\0223\n\004code\030\001 \001(\0162%.kiapi.common.commands."
  "ItemStatusCode\022\025\n\rerror_message\030\002 \001(\t\"k\n"
  "\022ItemCreationResult\0221\n\006status\030\001 \001(\0132!.ki"
  "api.common.commands.ItemStatus\022\"\n\004item\030\002"
  " \001(\0132\024.google.protobuf.Any\"\276\001\n\023CreateIte"
  "msResponse\022.\n\006header\030\001 \001(\0132\036.kiapi.commo"
  "n.types.ItemHeader\0225\n\006status\030\002 \001(\0162%.kia"
  "pi.common.types.ItemRequestStatus\022@\n\rcre"
  "ated_items\030\003 \003(\0132).kiapi.common.commands"
  ".ItemCreationResult\"n\n\010GetItems\022.\n\006heade"
  "r\030\001 \001(\0132\036.kiapi.common.types.ItemHeader\022"
  "2\n\005types\030\002 \003(\0162#.kiapi.common.types.KiCa"
  "dObjectType\"\236\001\n\020GetItemsResponse\022.\n\006head"
  "er\030\001 \001(\0132\036.kiapi.common.types.ItemHeader"
  "\0225\n\006status\030\002 \001(\0162%.kiapi.common.types.It"
  "emRequestStatus\022#\n\005items\030\003 \003(\0132\024.google."
  "protobuf.Any\"b\n\013UpdateItems\022.\n\006header\030\001 "
  "\001(\0132\036.kiapi.common.types.ItemHeader\022#\n\005i"
  "tems\030\002 \003(\0132\024.google.protobuf.Any\"i\n\020Item"
  "UpdateResult\0221\n\006status\030\001 \001(\0132!.kiapi.com"
  "mon.commands.ItemStatus\022\"\n\004item\030\002 \001(\0132\024."
  "google.protobuf.Any\"\274\001\n\023UpdateItemsRespo"
  "nse\022.\n\006header\030\001 \001(\0132\036.kiapi.common.types"
  ".ItemHeader\0225\n\006status\030\002 \001(\0162%.kiapi.comm"
  "on.types.ItemRequestStatus\022>\n\rupdated_it"
  "ems\030\003 \003(\0132\'.kiapi.common.commands.ItemUp"
  "dateResult\"i\n\013DeleteItems\022.\n\006header\030\001 \001("
  "\0132\036.kiapi.common.types.ItemHeader\022*\n\010ite"
  "m_ids\030\002 \003(\0132\030.kiapi.common.types.KIID\"u\n"
  "\022ItemDeletionResult\022$\n\002id\030\001 \001(\0132\030.kiapi."
  "common.types.KIID\0229\n\006status\030\002 \001(\0162).kiap"
  "i.common.commands.ItemDeletionStatus\"\276\001\n"
  "\023DeleteItemsResponse\022.\n\006header\030\001 \001(\0132\036.k"
  "iapi.common.types.ItemHeader\0225\n\006status\030\002"
  " \001(\0162%.kiapi.common.types.ItemRequestSta"
  "tus\022@\n\rdeleted_items\030\003 \003(\0132).kiapi.commo"
  "n.commands.ItemDeletionResult\"\237\001\n\016GetBou"
  "ndingBox\022.\n\006header\030\001 \001(\0132\036.kiapi.common."
  "types.ItemHeader\022\'\n\005items\030\002 \003(\0132\030.kiapi."
  "common.types.KIID\0224\n\004mode\030\003 \001(\0162&.kiapi."
  "common.commands.BoundingBoxMode\"j\n\026GetBo"
  "undingBoxResponse\022\'\n\005items\030\001 \003(\0132\030.kiapi"
  ".common.types.KIID\022\'\n\005boxes\030\002 \003(\0132\030.kiap"
  "i.common.types.Box2\"r\n\014GetSelection\022.\n\006h"
  "eader\030\001 \001(\0132\036.kiapi.common.types.ItemHea"
  "der\0222\n\005types\030\002 \003(\0162#.kiapi.common.types."
  "KiCadObjectType\"8\n\021SelectionResponse\022#\n\005"
  "items\030\001 \003(\0132\024.google.protobuf.Any\"i\n\016Add"
  "ToSelection\022.\n\006header\030\001 \001(\0132\036.kiapi.comm"
  "on.types.ItemHeader\022\'\n\005items\030\002 \003(\0132\030.kia"
  "pi.common.types.KIID\"n\n\023RemoveFromSelect"
  "ion\022.\n\006header\030\001 \001(\0132\036.kiapi.common.types"
  ".ItemHeader\022\'\n\005items\030\002 \003(\0132\030.kiapi.commo"
  "n.types.KIID\"@\n\016ClearSelection\022.\n\006header"
  "\030\001 \001(\0132\036.kiapi.common.types.ItemHeader\"\241"
  "\001\n\007HitTest\022.\n\006header\030\001 \001(\0132\036.kiapi.commo"
  "n.types.ItemHeader\022$\n\002id\030\002 \001(\0132\030.kiapi.c"
  "ommon.types.KIID\022-\n\010position\030\003 \001(\0132\033.kia"
  "pi.common.types.Vector2\022\021\n\ttolerance\030\004 \001"
  "(\005\"G\n\017HitTestResponse\0224\n\006result\030\001 \001(\0162$."
  "kiapi.common.commands.HitTestResult\"L\n\021G"
  "etTitleBlockInfo\0227\n\010document\030\001 \001(\0132%.kia"
  "pi.common.types.DocumentSpecifier\"O\n\024Sav"
  "eDocumentToString\0227\n\010document\030\001 \001(\0132%.ki"
  "api.common.types.DocumentSpecifier\"b\n\025Sa"
  "vedDocumentResponse\0227\n\010document\030\001 \001(\0132%."
  "kiapi.common.types.DocumentSpecifier\022\020\n\010"
  "contents\030\002 \001(\t\"\027\n\025SaveSelectionToString\""
  "Q\n\026SavedSelectionResponse\022%\n\003ids\030\001 \003(\0132\030"
  ".kiapi.common.types.KIID\022\020\n\010contents\030\002 \001"
  "(\t\"j\n\035ParseAndCreateItemsFromString\0227\n\010d"
  "ocument\030\001 \001(\0132%.kiapi.common.types.Docum"
  "entSpecifier\022\020\n\010contents\030\002 \001(\t*W\n\017RunAct"
  "ionStatus\022\017\n\013RAS_UNKNOWN\020\000\022\n\n\006RAS_OK\020\001\022\017"
  "\n\013RAS_INVALID\020\002\022\026\n\022RAS_FRAME_NOT_OPEN\020\003*"
  "=\n\014CommitAction\022\017\n\013CMA_UNKNOWN\020\000\022\016\n\nCMA_"
  "COMMIT\020\001\022\014\n\010CMA_DROP\020\002*\223\001\n\016ItemStatusCod"
  "e\022\017\n\013ISC_UNKNOWN\020\000\022\n\n\006ISC_OK\020\001\022\024\n\020ISC_IN"
  "VALID_TYPE\020\002\022\020\n\014ISC_EXISTING\020\003\022\023\n\017ISC_NO"
  "NEXISTENT\020\004\022\021\n\rISC_IMMUTABLE\020\005\022\024\n\020ISC_IN"
  "VALID_DATA\020\007*Y\n\022ItemDeletionStatus\022\017\n\013ID"
  "S_UNKNOWN\020\000\022\n\n\006IDS_OK\020\001\022\023\n\017IDS_NONEXISTE"
  "NT\020\002\022\021\n\rIDS_IMMUTABLE\020\003*R\n\017BoundingBoxMo"
  "de\022\017\n\013BBM_UNKNOWN\020\000\022\021\n\rBBM_ITEM_ONLY\020\001\022\033"
  "\n\027BBM_ITEM_AND_CHILD_TEXT\020\002*=\n\rHitTestRe"
  "sult\022\017\n\013HTR_UNKNOWN\020\000\022\016\n\nHTR_NO_HIT\020\001\022\013\n"
  "\007HTR_HIT\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_deps[3] = {
  &::descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto,
  &::descriptor_table_common_2ftypes_2fenums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto = {
  false, false, 4658, descriptor_table_protodef_common_2fcommands_2feditor_5fcommands_2eproto, "common/commands/editor_commands.proto", 
  &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once, descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_deps, 3, 40,
  schemas, file_default_instances, TableStruct_common_2fcommands_2feditor_5fcommands_2eproto::offsets,
  file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto, file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto, file_level_service_descriptors_common_2fcommands_2feditor_5fcommands_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter() {
  return &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fcommands_2feditor_5fcommands_2eproto(&descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto);
namespace kiapi {
namespace common {
namespace commands {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunActionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto);
  return file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto[0];
}
bool RunActionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommitAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto);
  return file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto[1];
}
bool CommitAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto);
  return file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto[2];
}
bool ItemStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemDeletionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto);
  return file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto[3];
}
bool ItemDeletionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundingBoxMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto);
  return file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto[4];
}
bool BoundingBoxMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HitTestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto);
  return file_level_enum_descriptors_common_2fcommands_2feditor_5fcommands_2eproto[5];
}
bool HitTestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RefreshEditor::_Internal {
 public:
};

RefreshEditor::RefreshEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.RefreshEditor)
}
RefreshEditor::RefreshEditor(const RefreshEditor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.RefreshEditor)
}

inline void RefreshEditor::SharedCtor() {
frame_ = 0;
}

RefreshEditor::~RefreshEditor() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.RefreshEditor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RefreshEditor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RefreshEditor::ArenaDtor(void* object) {
  RefreshEditor* _this = reinterpret_cast< RefreshEditor* >(object);
  (void)_this;
}
void RefreshEditor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefreshEditor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RefreshEditor::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.RefreshEditor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshEditor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.FrameType frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame(static_cast<::kiapi::common::types::FrameType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefreshEditor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.RefreshEditor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.FrameType frame = 1;
  if (this->_internal_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.RefreshEditor)
  return target;
}

size_t RefreshEditor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.RefreshEditor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.FrameType frame = 1;
  if (this->_internal_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefreshEditor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RefreshEditor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefreshEditor::GetClassData() const { return &_class_data_; }

void RefreshEditor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RefreshEditor *>(to)->MergeFrom(
      static_cast<const RefreshEditor &>(from));
}


void RefreshEditor::MergeFrom(const RefreshEditor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.RefreshEditor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshEditor::CopyFrom(const RefreshEditor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.RefreshEditor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshEditor::IsInitialized() const {
  return true;
}

void RefreshEditor::InternalSwap(RefreshEditor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(frame_, other->frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshEditor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[0]);
}

// ===================================================================

class GetOpenDocuments::_Internal {
 public:
};

GetOpenDocuments::GetOpenDocuments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetOpenDocuments)
}
GetOpenDocuments::GetOpenDocuments(const GetOpenDocuments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetOpenDocuments)
}

inline void GetOpenDocuments::SharedCtor() {
type_ = 0;
}

GetOpenDocuments::~GetOpenDocuments() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetOpenDocuments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOpenDocuments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOpenDocuments::ArenaDtor(void* object) {
  GetOpenDocuments* _this = reinterpret_cast< GetOpenDocuments* >(object);
  (void)_this;
}
void GetOpenDocuments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOpenDocuments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOpenDocuments::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetOpenDocuments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOpenDocuments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::common::types::DocumentType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOpenDocuments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetOpenDocuments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetOpenDocuments)
  return target;
}

size_t GetOpenDocuments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetOpenDocuments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOpenDocuments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOpenDocuments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOpenDocuments::GetClassData() const { return &_class_data_; }

void GetOpenDocuments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetOpenDocuments *>(to)->MergeFrom(
      static_cast<const GetOpenDocuments &>(from));
}


void GetOpenDocuments::MergeFrom(const GetOpenDocuments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetOpenDocuments)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOpenDocuments::CopyFrom(const GetOpenDocuments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetOpenDocuments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenDocuments::IsInitialized() const {
  return true;
}

void GetOpenDocuments::InternalSwap(GetOpenDocuments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOpenDocuments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[1]);
}

// ===================================================================

class GetOpenDocumentsResponse::_Internal {
 public:
};

void GetOpenDocumentsResponse::clear_documents() {
  documents_.Clear();
}
GetOpenDocumentsResponse::GetOpenDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  documents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetOpenDocumentsResponse)
}
GetOpenDocumentsResponse::GetOpenDocumentsResponse(const GetOpenDocumentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetOpenDocumentsResponse)
}

inline void GetOpenDocumentsResponse::SharedCtor() {
}

GetOpenDocumentsResponse::~GetOpenDocumentsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetOpenDocumentsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOpenDocumentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOpenDocumentsResponse::ArenaDtor(void* object) {
  GetOpenDocumentsResponse* _this = reinterpret_cast< GetOpenDocumentsResponse* >(object);
  (void)_this;
}
void GetOpenDocumentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOpenDocumentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOpenDocumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetOpenDocumentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOpenDocumentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.DocumentSpecifier documents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOpenDocumentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetOpenDocumentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.DocumentSpecifier documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_documents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_documents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetOpenDocumentsResponse)
  return target;
}

size_t GetOpenDocumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetOpenDocumentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.DocumentSpecifier documents = 1;
  total_size += 1UL * this->_internal_documents_size();
  for (const auto& msg : this->documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOpenDocumentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOpenDocumentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOpenDocumentsResponse::GetClassData() const { return &_class_data_; }

void GetOpenDocumentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetOpenDocumentsResponse *>(to)->MergeFrom(
      static_cast<const GetOpenDocumentsResponse &>(from));
}


void GetOpenDocumentsResponse::MergeFrom(const GetOpenDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetOpenDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOpenDocumentsResponse::CopyFrom(const GetOpenDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetOpenDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenDocumentsResponse::IsInitialized() const {
  return true;
}

void GetOpenDocumentsResponse::InternalSwap(GetOpenDocumentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  documents_.InternalSwap(&other->documents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOpenDocumentsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[2]);
}

// ===================================================================

class SaveDocument::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const SaveDocument* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
SaveDocument::_Internal::document(const SaveDocument* msg) {
  return *msg->document_;
}
void SaveDocument::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
SaveDocument::SaveDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SaveDocument)
}
SaveDocument::SaveDocument(const SaveDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SaveDocument)
}

inline void SaveDocument::SharedCtor() {
document_ = nullptr;
}

SaveDocument::~SaveDocument() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.SaveDocument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_;
}

void SaveDocument::ArenaDtor(void* object) {
  SaveDocument* _this = reinterpret_cast< SaveDocument* >(object);
  (void)_this;
}
void SaveDocument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.SaveDocument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveDocument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveDocument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.SaveDocument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.SaveDocument)
  return target;
}

size_t SaveDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.SaveDocument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveDocument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveDocument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveDocument::GetClassData() const { return &_class_data_; }

void SaveDocument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaveDocument *>(to)->MergeFrom(
      static_cast<const SaveDocument &>(from));
}


void SaveDocument::MergeFrom(const SaveDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.SaveDocument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveDocument::CopyFrom(const SaveDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.SaveDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveDocument::IsInitialized() const {
  return true;
}

void SaveDocument::InternalSwap(SaveDocument* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveDocument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[3]);
}

// ===================================================================

class SaveOptions::_Internal {
 public:
};

SaveOptions::SaveOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SaveOptions)
}
SaveOptions::SaveOptions(const SaveOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&overwrite_, &from.overwrite_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_project_) -
    reinterpret_cast<char*>(&overwrite_)) + sizeof(include_project_));
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SaveOptions)
}

inline void SaveOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&overwrite_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_project_) -
    reinterpret_cast<char*>(&overwrite_)) + sizeof(include_project_));
}

SaveOptions::~SaveOptions() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.SaveOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SaveOptions::ArenaDtor(void* object) {
  SaveOptions* _this = reinterpret_cast< SaveOptions* >(object);
  (void)_this;
}
void SaveOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.SaveOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&overwrite_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_project_) -
      reinterpret_cast<char*>(&overwrite_)) + sizeof(include_project_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool overwrite = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          overwrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_project = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          include_project_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.SaveOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool overwrite = 1;
  if (this->_internal_overwrite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_overwrite(), target);
  }

  // bool include_project = 2;
  if (this->_internal_include_project() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.SaveOptions)
  return target;
}

size_t SaveOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.SaveOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool overwrite = 1;
  if (this->_internal_overwrite() != 0) {
    total_size += 1 + 1;
  }

  // bool include_project = 2;
  if (this->_internal_include_project() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveOptions::GetClassData() const { return &_class_data_; }

void SaveOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaveOptions *>(to)->MergeFrom(
      static_cast<const SaveOptions &>(from));
}


void SaveOptions::MergeFrom(const SaveOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.SaveOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_overwrite() != 0) {
    _internal_set_overwrite(from._internal_overwrite());
  }
  if (from._internal_include_project() != 0) {
    _internal_set_include_project(from._internal_include_project());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveOptions::CopyFrom(const SaveOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.SaveOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOptions::IsInitialized() const {
  return true;
}

void SaveOptions::InternalSwap(SaveOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveOptions, include_project_)
      + sizeof(SaveOptions::include_project_)
      - PROTOBUF_FIELD_OFFSET(SaveOptions, overwrite_)>(
          reinterpret_cast<char*>(&overwrite_),
          reinterpret_cast<char*>(&other->overwrite_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[4]);
}

// ===================================================================

class SaveCopyOfDocument::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const SaveCopyOfDocument* msg);
  static const ::kiapi::common::commands::SaveOptions& options(const SaveCopyOfDocument* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
SaveCopyOfDocument::_Internal::document(const SaveCopyOfDocument* msg) {
  return *msg->document_;
}
const ::kiapi::common::commands::SaveOptions&
SaveCopyOfDocument::_Internal::options(const SaveCopyOfDocument* msg) {
  return *msg->options_;
}
void SaveCopyOfDocument::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
SaveCopyOfDocument::SaveCopyOfDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SaveCopyOfDocument)
}
SaveCopyOfDocument::SaveCopyOfDocument(const SaveCopyOfDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::kiapi::common::commands::SaveOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SaveCopyOfDocument)
}

inline void SaveCopyOfDocument::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&document_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&document_)) + sizeof(options_));
}

SaveCopyOfDocument::~SaveCopyOfDocument() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.SaveCopyOfDocument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveCopyOfDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete options_;
}

void SaveCopyOfDocument::ArenaDtor(void* object) {
  SaveCopyOfDocument* _this = reinterpret_cast< SaveCopyOfDocument* >(object);
  (void)_this;
}
void SaveCopyOfDocument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveCopyOfDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveCopyOfDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.SaveCopyOfDocument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveCopyOfDocument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.SaveCopyOfDocument.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.commands.SaveOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveCopyOfDocument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.SaveCopyOfDocument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.SaveCopyOfDocument.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // .kiapi.common.commands.SaveOptions options = 3;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.SaveCopyOfDocument)
  return target;
}

size_t SaveCopyOfDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.SaveCopyOfDocument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .kiapi.common.commands.SaveOptions options = 3;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveCopyOfDocument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveCopyOfDocument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveCopyOfDocument::GetClassData() const { return &_class_data_; }

void SaveCopyOfDocument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaveCopyOfDocument *>(to)->MergeFrom(
      static_cast<const SaveCopyOfDocument &>(from));
}


void SaveCopyOfDocument::MergeFrom(const SaveCopyOfDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.SaveCopyOfDocument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->::kiapi::common::commands::SaveOptions::MergeFrom(from._internal_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveCopyOfDocument::CopyFrom(const SaveCopyOfDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.SaveCopyOfDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveCopyOfDocument::IsInitialized() const {
  return true;
}

void SaveCopyOfDocument::InternalSwap(SaveCopyOfDocument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveCopyOfDocument, options_)
      + sizeof(SaveCopyOfDocument::options_)
      - PROTOBUF_FIELD_OFFSET(SaveCopyOfDocument, document_)>(
          reinterpret_cast<char*>(&document_),
          reinterpret_cast<char*>(&other->document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveCopyOfDocument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[5]);
}

// ===================================================================

class RevertDocument::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const RevertDocument* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
RevertDocument::_Internal::document(const RevertDocument* msg) {
  return *msg->document_;
}
void RevertDocument::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
RevertDocument::RevertDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.RevertDocument)
}
RevertDocument::RevertDocument(const RevertDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.RevertDocument)
}

inline void RevertDocument::SharedCtor() {
document_ = nullptr;
}

RevertDocument::~RevertDocument() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.RevertDocument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RevertDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_;
}

void RevertDocument::ArenaDtor(void* object) {
  RevertDocument* _this = reinterpret_cast< RevertDocument* >(object);
  (void)_this;
}
void RevertDocument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevertDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RevertDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.RevertDocument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevertDocument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RevertDocument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.RevertDocument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.RevertDocument)
  return target;
}

size_t RevertDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.RevertDocument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevertDocument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RevertDocument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevertDocument::GetClassData() const { return &_class_data_; }

void RevertDocument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RevertDocument *>(to)->MergeFrom(
      static_cast<const RevertDocument &>(from));
}


void RevertDocument::MergeFrom(const RevertDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.RevertDocument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevertDocument::CopyFrom(const RevertDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.RevertDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevertDocument::IsInitialized() const {
  return true;
}

void RevertDocument::InternalSwap(RevertDocument* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevertDocument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[6]);
}

// ===================================================================

class RunAction::_Internal {
 public:
};

RunAction::RunAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.RunAction)
}
RunAction::RunAction(const RunAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.RunAction)
}

inline void RunAction::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunAction::~RunAction() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.RunAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RunAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RunAction::ArenaDtor(void* object) {
  RunAction* _this = reinterpret_cast< RunAction* >(object);
  (void)_this;
}
void RunAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RunAction::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.RunAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.RunAction.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.RunAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.RunAction.action");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.RunAction)
  return target;
}

size_t RunAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.RunAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 1;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RunAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunAction::GetClassData() const { return &_class_data_; }

void RunAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RunAction *>(to)->MergeFrom(
      static_cast<const RunAction &>(from));
}


void RunAction::MergeFrom(const RunAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.RunAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunAction::CopyFrom(const RunAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.RunAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunAction::IsInitialized() const {
  return true;
}

void RunAction::InternalSwap(RunAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RunAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[7]);
}

// ===================================================================

class RunActionResponse::_Internal {
 public:
};

RunActionResponse::RunActionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.RunActionResponse)
}
RunActionResponse::RunActionResponse(const RunActionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.RunActionResponse)
}

inline void RunActionResponse::SharedCtor() {
status_ = 0;
}

RunActionResponse::~RunActionResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.RunActionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RunActionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RunActionResponse::ArenaDtor(void* object) {
  RunActionResponse* _this = reinterpret_cast< RunActionResponse* >(object);
  (void)_this;
}
void RunActionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunActionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RunActionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.RunActionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunActionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.commands.RunActionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::commands::RunActionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunActionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.RunActionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.commands.RunActionStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.RunActionResponse)
  return target;
}

size_t RunActionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.RunActionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.commands.RunActionStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunActionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RunActionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunActionResponse::GetClassData() const { return &_class_data_; }

void RunActionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RunActionResponse *>(to)->MergeFrom(
      static_cast<const RunActionResponse &>(from));
}


void RunActionResponse::MergeFrom(const RunActionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.RunActionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunActionResponse::CopyFrom(const RunActionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.RunActionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunActionResponse::IsInitialized() const {
  return true;
}

void RunActionResponse::InternalSwap(RunActionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunActionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[8]);
}

// ===================================================================

class BeginCommit::_Internal {
 public:
};

BeginCommit::BeginCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.BeginCommit)
}
BeginCommit::BeginCommit(const BeginCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.BeginCommit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginCommit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginCommit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BeginCommit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[9]);
}

// ===================================================================

class BeginCommitResponse::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const BeginCommitResponse* msg);
};

const ::kiapi::common::types::KIID&
BeginCommitResponse::_Internal::id(const BeginCommitResponse* msg) {
  return *msg->id_;
}
void BeginCommitResponse::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
BeginCommitResponse::BeginCommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.BeginCommitResponse)
}
BeginCommitResponse::BeginCommitResponse(const BeginCommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.BeginCommitResponse)
}

inline void BeginCommitResponse::SharedCtor() {
id_ = nullptr;
}

BeginCommitResponse::~BeginCommitResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.BeginCommitResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BeginCommitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void BeginCommitResponse::ArenaDtor(void* object) {
  BeginCommitResponse* _this = reinterpret_cast< BeginCommitResponse* >(object);
  (void)_this;
}
void BeginCommitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeginCommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BeginCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.BeginCommitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeginCommitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginCommitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.BeginCommitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.BeginCommitResponse)
  return target;
}

size_t BeginCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.BeginCommitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginCommitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BeginCommitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginCommitResponse::GetClassData() const { return &_class_data_; }

void BeginCommitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BeginCommitResponse *>(to)->MergeFrom(
      static_cast<const BeginCommitResponse &>(from));
}


void BeginCommitResponse::MergeFrom(const BeginCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.BeginCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeginCommitResponse::CopyFrom(const BeginCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.BeginCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginCommitResponse::IsInitialized() const {
  return true;
}

void BeginCommitResponse::InternalSwap(BeginCommitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeginCommitResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[10]);
}

// ===================================================================

class EndCommit::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const EndCommit* msg);
};

const ::kiapi::common::types::KIID&
EndCommit::_Internal::id(const EndCommit* msg) {
  return *msg->id_;
}
void EndCommit::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
EndCommit::EndCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.EndCommit)
}
EndCommit::EndCommit(const EndCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.EndCommit)
}

inline void EndCommit::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_)) + sizeof(action_));
}

EndCommit::~EndCommit() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.EndCommit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndCommit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void EndCommit::ArenaDtor(void* object) {
  EndCommit* _this = reinterpret_cast< EndCommit* >(object);
  (void)_this;
}
void EndCommit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.EndCommit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndCommit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.commands.CommitAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::kiapi::common::commands::CommitAction>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.EndCommit.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndCommit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.EndCommit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.commands.CommitAction action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.EndCommit.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.EndCommit)
  return target;
}

size_t EndCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.EndCommit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.commands.CommitAction action = 2;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndCommit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndCommit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndCommit::GetClassData() const { return &_class_data_; }

void EndCommit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndCommit *>(to)->MergeFrom(
      static_cast<const EndCommit &>(from));
}


void EndCommit::MergeFrom(const EndCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.EndCommit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndCommit::CopyFrom(const EndCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.EndCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndCommit::IsInitialized() const {
  return true;
}

void EndCommit::InternalSwap(EndCommit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndCommit, action_)
      + sizeof(EndCommit::action_)
      - PROTOBUF_FIELD_OFFSET(EndCommit, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndCommit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[11]);
}

// ===================================================================

class EndCommitResponse::_Internal {
 public:
};

EndCommitResponse::EndCommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.EndCommitResponse)
}
EndCommitResponse::EndCommitResponse(const EndCommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.EndCommitResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndCommitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndCommitResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EndCommitResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[12]);
}

// ===================================================================

class CreateItems::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const CreateItems* msg);
  static const ::kiapi::common::types::KIID& container(const CreateItems* msg);
};

const ::kiapi::common::types::ItemHeader&
CreateItems::_Internal::header(const CreateItems* msg) {
  return *msg->header_;
}
const ::kiapi::common::types::KIID&
CreateItems::_Internal::container(const CreateItems* msg) {
  return *msg->container_;
}
void CreateItems::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CreateItems::clear_items() {
  items_.Clear();
}
void CreateItems::clear_container() {
  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
}
CreateItems::CreateItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.CreateItems)
}
CreateItems::CreateItems(const CreateItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_container()) {
    container_ = new ::kiapi::common::types::KIID(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.CreateItems)
}

inline void CreateItems::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&container_) -
    reinterpret_cast<char*>(&header_)) + sizeof(container_));
}

CreateItems::~CreateItems() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.CreateItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete container_;
}

void CreateItems::ArenaDtor(void* object) {
  CreateItems* _this = reinterpret_cast< CreateItems* >(object);
  (void)_this;
}
void CreateItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateItems::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.CreateItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.KIID container = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.CreateItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .google.protobuf.Any items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  // .kiapi.common.types.KIID container = 3;
  if (this->_internal_has_container()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.CreateItems)
  return target;
}

size_t CreateItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.CreateItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.types.KIID container = 3;
  if (this->_internal_has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateItems::GetClassData() const { return &_class_data_; }

void CreateItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateItems *>(to)->MergeFrom(
      static_cast<const CreateItems &>(from));
}


void CreateItems::MergeFrom(const CreateItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.CreateItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_container()) {
    _internal_mutable_container()->::kiapi::common::types::KIID::MergeFrom(from._internal_container());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateItems::CopyFrom(const CreateItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.CreateItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateItems::IsInitialized() const {
  return true;
}

void CreateItems::InternalSwap(CreateItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateItems, container_)
      + sizeof(CreateItems::container_)
      - PROTOBUF_FIELD_OFFSET(CreateItems, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[13]);
}

// ===================================================================

class ItemStatus::_Internal {
 public:
};

ItemStatus::ItemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.ItemStatus)
}
ItemStatus::ItemStatus(const ItemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.ItemStatus)
}

inline void ItemStatus::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

ItemStatus::~ItemStatus() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.ItemStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ItemStatus::ArenaDtor(void* object) {
  ItemStatus* _this = reinterpret_cast< ItemStatus* >(object);
  (void)_this;
}
void ItemStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.ItemStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.commands.ItemStatusCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::kiapi::common::commands::ItemStatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.ItemStatus.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.ItemStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.commands.ItemStatusCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.ItemStatus.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.ItemStatus)
  return target;
}

size_t ItemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.ItemStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .kiapi.common.commands.ItemStatusCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemStatus::GetClassData() const { return &_class_data_; }

void ItemStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemStatus *>(to)->MergeFrom(
      static_cast<const ItemStatus &>(from));
}


void ItemStatus::MergeFrom(const ItemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.ItemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemStatus::CopyFrom(const ItemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.ItemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemStatus::IsInitialized() const {
  return true;
}

void ItemStatus::InternalSwap(ItemStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[14]);
}

// ===================================================================

class ItemCreationResult::_Internal {
 public:
  static const ::kiapi::common::commands::ItemStatus& status(const ItemCreationResult* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& item(const ItemCreationResult* msg);
};

const ::kiapi::common::commands::ItemStatus&
ItemCreationResult::_Internal::status(const ItemCreationResult* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ItemCreationResult::_Internal::item(const ItemCreationResult* msg) {
  return *msg->item_;
}
void ItemCreationResult::clear_item() {
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
ItemCreationResult::ItemCreationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.ItemCreationResult)
}
ItemCreationResult::ItemCreationResult(const ItemCreationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::kiapi::common::commands::ItemStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.ItemCreationResult)
}

inline void ItemCreationResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&status_)) + sizeof(item_));
}

ItemCreationResult::~ItemCreationResult() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.ItemCreationResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemCreationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete item_;
}

void ItemCreationResult::ArenaDtor(void* object) {
  ItemCreationResult* _this = reinterpret_cast< ItemCreationResult* >(object);
  (void)_this;
}
void ItemCreationResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemCreationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemCreationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.ItemCreationResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemCreationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.commands.ItemStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemCreationResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.ItemCreationResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.commands.ItemStatus status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Any item = 2;
  if (this->_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.ItemCreationResult)
  return target;
}

size_t ItemCreationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.ItemCreationResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.commands.ItemStatus status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Any item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemCreationResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemCreationResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemCreationResult::GetClassData() const { return &_class_data_; }

void ItemCreationResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemCreationResult *>(to)->MergeFrom(
      static_cast<const ItemCreationResult &>(from));
}


void ItemCreationResult::MergeFrom(const ItemCreationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.ItemCreationResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::kiapi::common::commands::ItemStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_item()) {
    _internal_mutable_item()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_item());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemCreationResult::CopyFrom(const ItemCreationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.ItemCreationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemCreationResult::IsInitialized() const {
  return true;
}

void ItemCreationResult::InternalSwap(ItemCreationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemCreationResult, item_)
      + sizeof(ItemCreationResult::item_)
      - PROTOBUF_FIELD_OFFSET(ItemCreationResult, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemCreationResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[15]);
}

// ===================================================================

class CreateItemsResponse::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const CreateItemsResponse* msg);
};

const ::kiapi::common::types::ItemHeader&
CreateItemsResponse::_Internal::header(const CreateItemsResponse* msg) {
  return *msg->header_;
}
void CreateItemsResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
CreateItemsResponse::CreateItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  created_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.CreateItemsResponse)
}
CreateItemsResponse::CreateItemsResponse(const CreateItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      created_items_(from.created_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.CreateItemsResponse)
}

inline void CreateItemsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

CreateItemsResponse::~CreateItemsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.CreateItemsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CreateItemsResponse::ArenaDtor(void* object) {
  CreateItemsResponse* _this = reinterpret_cast< CreateItemsResponse* >(object);
  (void)_this;
}
void CreateItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.CreateItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  created_items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.ItemRequestStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::types::ItemRequestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.commands.ItemCreationResult created_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_created_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.CreateItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .kiapi.common.commands.ItemCreationResult created_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_created_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_created_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.CreateItemsResponse)
  return target;
}

size_t CreateItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.CreateItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.commands.ItemCreationResult created_items = 3;
  total_size += 1UL * this->_internal_created_items_size();
  for (const auto& msg : this->created_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateItemsResponse::GetClassData() const { return &_class_data_; }

void CreateItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateItemsResponse *>(to)->MergeFrom(
      static_cast<const CreateItemsResponse &>(from));
}


void CreateItemsResponse::MergeFrom(const CreateItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.CreateItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  created_items_.MergeFrom(from.created_items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateItemsResponse::CopyFrom(const CreateItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.CreateItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateItemsResponse::IsInitialized() const {
  return true;
}

void CreateItemsResponse::InternalSwap(CreateItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  created_items_.InternalSwap(&other->created_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateItemsResponse, status_)
      + sizeof(CreateItemsResponse::status_)
      - PROTOBUF_FIELD_OFFSET(CreateItemsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateItemsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[16]);
}

// ===================================================================

class GetItems::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const GetItems* msg);
};

const ::kiapi::common::types::ItemHeader&
GetItems::_Internal::header(const GetItems* msg) {
  return *msg->header_;
}
void GetItems::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetItems::GetItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetItems)
}
GetItems::GetItems(const GetItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetItems)
}

inline void GetItems::SharedCtor() {
header_ = nullptr;
}

GetItems::~GetItems() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetItems::ArenaDtor(void* object) {
  GetItems* _this = reinterpret_cast< GetItems* >(object);
  (void)_this;
}
void GetItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetItems::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KiCadObjectType types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::kiapi::common::types::KiCadObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetItems)
  return target;
}

size_t GetItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetItems::GetClassData() const { return &_class_data_; }

void GetItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetItems *>(to)->MergeFrom(
      static_cast<const GetItems &>(from));
}


void GetItems::MergeFrom(const GetItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetItems::CopyFrom(const GetItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItems::IsInitialized() const {
  return true;
}

void GetItems::InternalSwap(GetItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[17]);
}

// ===================================================================

class GetItemsResponse::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const GetItemsResponse* msg);
};

const ::kiapi::common::types::ItemHeader&
GetItemsResponse::_Internal::header(const GetItemsResponse* msg) {
  return *msg->header_;
}
void GetItemsResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GetItemsResponse::clear_items() {
  items_.Clear();
}
GetItemsResponse::GetItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetItemsResponse)
}
GetItemsResponse::GetItemsResponse(const GetItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetItemsResponse)
}

inline void GetItemsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

GetItemsResponse::~GetItemsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetItemsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetItemsResponse::ArenaDtor(void* object) {
  GetItemsResponse* _this = reinterpret_cast< GetItemsResponse* >(object);
  (void)_this;
}
void GetItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.ItemRequestStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::types::ItemRequestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .google.protobuf.Any items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetItemsResponse)
  return target;
}

size_t GetItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetItemsResponse::GetClassData() const { return &_class_data_; }

void GetItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetItemsResponse *>(to)->MergeFrom(
      static_cast<const GetItemsResponse &>(from));
}


void GetItemsResponse::MergeFrom(const GetItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetItemsResponse::CopyFrom(const GetItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsResponse::IsInitialized() const {
  return true;
}

void GetItemsResponse::InternalSwap(GetItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetItemsResponse, status_)
      + sizeof(GetItemsResponse::status_)
      - PROTOBUF_FIELD_OFFSET(GetItemsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[18]);
}

// ===================================================================

class UpdateItems::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const UpdateItems* msg);
};

const ::kiapi::common::types::ItemHeader&
UpdateItems::_Internal::header(const UpdateItems* msg) {
  return *msg->header_;
}
void UpdateItems::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UpdateItems::clear_items() {
  items_.Clear();
}
UpdateItems::UpdateItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.UpdateItems)
}
UpdateItems::UpdateItems(const UpdateItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.UpdateItems)
}

inline void UpdateItems::SharedCtor() {
header_ = nullptr;
}

UpdateItems::~UpdateItems() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.UpdateItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void UpdateItems::ArenaDtor(void* object) {
  UpdateItems* _this = reinterpret_cast< UpdateItems* >(object);
  (void)_this;
}
void UpdateItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateItems::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.UpdateItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.UpdateItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .google.protobuf.Any items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.UpdateItems)
  return target;
}

size_t UpdateItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.UpdateItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateItems::GetClassData() const { return &_class_data_; }

void UpdateItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateItems *>(to)->MergeFrom(
      static_cast<const UpdateItems &>(from));
}


void UpdateItems::MergeFrom(const UpdateItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.UpdateItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateItems::CopyFrom(const UpdateItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.UpdateItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateItems::IsInitialized() const {
  return true;
}

void UpdateItems::InternalSwap(UpdateItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[19]);
}

// ===================================================================

class ItemUpdateResult::_Internal {
 public:
  static const ::kiapi::common::commands::ItemStatus& status(const ItemUpdateResult* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& item(const ItemUpdateResult* msg);
};

const ::kiapi::common::commands::ItemStatus&
ItemUpdateResult::_Internal::status(const ItemUpdateResult* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ItemUpdateResult::_Internal::item(const ItemUpdateResult* msg) {
  return *msg->item_;
}
void ItemUpdateResult::clear_item() {
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
ItemUpdateResult::ItemUpdateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.ItemUpdateResult)
}
ItemUpdateResult::ItemUpdateResult(const ItemUpdateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::kiapi::common::commands::ItemStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.ItemUpdateResult)
}

inline void ItemUpdateResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&status_)) + sizeof(item_));
}

ItemUpdateResult::~ItemUpdateResult() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.ItemUpdateResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemUpdateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete item_;
}

void ItemUpdateResult::ArenaDtor(void* object) {
  ItemUpdateResult* _this = reinterpret_cast< ItemUpdateResult* >(object);
  (void)_this;
}
void ItemUpdateResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemUpdateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemUpdateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.ItemUpdateResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemUpdateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.commands.ItemStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemUpdateResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.ItemUpdateResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.commands.ItemStatus status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Any item = 2;
  if (this->_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.ItemUpdateResult)
  return target;
}

size_t ItemUpdateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.ItemUpdateResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.commands.ItemStatus status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Any item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemUpdateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemUpdateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemUpdateResult::GetClassData() const { return &_class_data_; }

void ItemUpdateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemUpdateResult *>(to)->MergeFrom(
      static_cast<const ItemUpdateResult &>(from));
}


void ItemUpdateResult::MergeFrom(const ItemUpdateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.ItemUpdateResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::kiapi::common::commands::ItemStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_item()) {
    _internal_mutable_item()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_item());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemUpdateResult::CopyFrom(const ItemUpdateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.ItemUpdateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUpdateResult::IsInitialized() const {
  return true;
}

void ItemUpdateResult::InternalSwap(ItemUpdateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemUpdateResult, item_)
      + sizeof(ItemUpdateResult::item_)
      - PROTOBUF_FIELD_OFFSET(ItemUpdateResult, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemUpdateResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[20]);
}

// ===================================================================

class UpdateItemsResponse::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const UpdateItemsResponse* msg);
};

const ::kiapi::common::types::ItemHeader&
UpdateItemsResponse::_Internal::header(const UpdateItemsResponse* msg) {
  return *msg->header_;
}
void UpdateItemsResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
UpdateItemsResponse::UpdateItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updated_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.UpdateItemsResponse)
}
UpdateItemsResponse::UpdateItemsResponse(const UpdateItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updated_items_(from.updated_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.UpdateItemsResponse)
}

inline void UpdateItemsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

UpdateItemsResponse::~UpdateItemsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.UpdateItemsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void UpdateItemsResponse::ArenaDtor(void* object) {
  UpdateItemsResponse* _this = reinterpret_cast< UpdateItemsResponse* >(object);
  (void)_this;
}
void UpdateItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.UpdateItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.ItemRequestStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::types::ItemRequestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.commands.ItemUpdateResult updated_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updated_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.UpdateItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .kiapi.common.commands.ItemUpdateResult updated_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updated_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_updated_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.UpdateItemsResponse)
  return target;
}

size_t UpdateItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.UpdateItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.commands.ItemUpdateResult updated_items = 3;
  total_size += 1UL * this->_internal_updated_items_size();
  for (const auto& msg : this->updated_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateItemsResponse::GetClassData() const { return &_class_data_; }

void UpdateItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateItemsResponse *>(to)->MergeFrom(
      static_cast<const UpdateItemsResponse &>(from));
}


void UpdateItemsResponse::MergeFrom(const UpdateItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.UpdateItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  updated_items_.MergeFrom(from.updated_items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateItemsResponse::CopyFrom(const UpdateItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.UpdateItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateItemsResponse::IsInitialized() const {
  return true;
}

void UpdateItemsResponse::InternalSwap(UpdateItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  updated_items_.InternalSwap(&other->updated_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateItemsResponse, status_)
      + sizeof(UpdateItemsResponse::status_)
      - PROTOBUF_FIELD_OFFSET(UpdateItemsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateItemsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[21]);
}

// ===================================================================

class DeleteItems::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const DeleteItems* msg);
};

const ::kiapi::common::types::ItemHeader&
DeleteItems::_Internal::header(const DeleteItems* msg) {
  return *msg->header_;
}
void DeleteItems::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void DeleteItems::clear_item_ids() {
  item_ids_.Clear();
}
DeleteItems::DeleteItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.DeleteItems)
}
DeleteItems::DeleteItems(const DeleteItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.DeleteItems)
}

inline void DeleteItems::SharedCtor() {
header_ = nullptr;
}

DeleteItems::~DeleteItems() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.DeleteItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DeleteItems::ArenaDtor(void* object) {
  DeleteItems* _this = reinterpret_cast< DeleteItems* >(object);
  (void)_this;
}
void DeleteItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteItems::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.DeleteItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KIID item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.DeleteItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KIID item_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.DeleteItems)
  return target;
}

size_t DeleteItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.DeleteItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID item_ids = 2;
  total_size += 1UL * this->_internal_item_ids_size();
  for (const auto& msg : this->item_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteItems::GetClassData() const { return &_class_data_; }

void DeleteItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteItems *>(to)->MergeFrom(
      static_cast<const DeleteItems &>(from));
}


void DeleteItems::MergeFrom(const DeleteItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.DeleteItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteItems::CopyFrom(const DeleteItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.DeleteItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteItems::IsInitialized() const {
  return true;
}

void DeleteItems::InternalSwap(DeleteItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[22]);
}

// ===================================================================

class ItemDeletionResult::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const ItemDeletionResult* msg);
};

const ::kiapi::common::types::KIID&
ItemDeletionResult::_Internal::id(const ItemDeletionResult* msg) {
  return *msg->id_;
}
void ItemDeletionResult::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ItemDeletionResult::ItemDeletionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.ItemDeletionResult)
}
ItemDeletionResult::ItemDeletionResult(const ItemDeletionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.ItemDeletionResult)
}

inline void ItemDeletionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

ItemDeletionResult::~ItemDeletionResult() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.ItemDeletionResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemDeletionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void ItemDeletionResult::ArenaDtor(void* object) {
  ItemDeletionResult* _this = reinterpret_cast< ItemDeletionResult* >(object);
  (void)_this;
}
void ItemDeletionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemDeletionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemDeletionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.ItemDeletionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemDeletionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.commands.ItemDeletionStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::commands::ItemDeletionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemDeletionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.ItemDeletionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.commands.ItemDeletionStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.ItemDeletionResult)
  return target;
}

size_t ItemDeletionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.ItemDeletionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.commands.ItemDeletionStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemDeletionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemDeletionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemDeletionResult::GetClassData() const { return &_class_data_; }

void ItemDeletionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemDeletionResult *>(to)->MergeFrom(
      static_cast<const ItemDeletionResult &>(from));
}


void ItemDeletionResult::MergeFrom(const ItemDeletionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.ItemDeletionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemDeletionResult::CopyFrom(const ItemDeletionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.ItemDeletionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDeletionResult::IsInitialized() const {
  return true;
}

void ItemDeletionResult::InternalSwap(ItemDeletionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemDeletionResult, status_)
      + sizeof(ItemDeletionResult::status_)
      - PROTOBUF_FIELD_OFFSET(ItemDeletionResult, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemDeletionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[23]);
}

// ===================================================================

class DeleteItemsResponse::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const DeleteItemsResponse* msg);
};

const ::kiapi::common::types::ItemHeader&
DeleteItemsResponse::_Internal::header(const DeleteItemsResponse* msg) {
  return *msg->header_;
}
void DeleteItemsResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DeleteItemsResponse::DeleteItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deleted_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.DeleteItemsResponse)
}
DeleteItemsResponse::DeleteItemsResponse(const DeleteItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deleted_items_(from.deleted_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.DeleteItemsResponse)
}

inline void DeleteItemsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

DeleteItemsResponse::~DeleteItemsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.DeleteItemsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DeleteItemsResponse::ArenaDtor(void* object) {
  DeleteItemsResponse* _this = reinterpret_cast< DeleteItemsResponse* >(object);
  (void)_this;
}
void DeleteItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.DeleteItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.ItemRequestStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::types::ItemRequestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.commands.ItemDeletionResult deleted_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deleted_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.DeleteItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .kiapi.common.commands.ItemDeletionResult deleted_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deleted_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_deleted_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.DeleteItemsResponse)
  return target;
}

size_t DeleteItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.DeleteItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.commands.ItemDeletionResult deleted_items = 3;
  total_size += 1UL * this->_internal_deleted_items_size();
  for (const auto& msg : this->deleted_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.types.ItemRequestStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteItemsResponse::GetClassData() const { return &_class_data_; }

void DeleteItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteItemsResponse *>(to)->MergeFrom(
      static_cast<const DeleteItemsResponse &>(from));
}


void DeleteItemsResponse::MergeFrom(const DeleteItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.DeleteItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_items_.MergeFrom(from.deleted_items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteItemsResponse::CopyFrom(const DeleteItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.DeleteItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteItemsResponse::IsInitialized() const {
  return true;
}

void DeleteItemsResponse::InternalSwap(DeleteItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deleted_items_.InternalSwap(&other->deleted_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteItemsResponse, status_)
      + sizeof(DeleteItemsResponse::status_)
      - PROTOBUF_FIELD_OFFSET(DeleteItemsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteItemsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[24]);
}

// ===================================================================

class GetBoundingBox::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const GetBoundingBox* msg);
};

const ::kiapi::common::types::ItemHeader&
GetBoundingBox::_Internal::header(const GetBoundingBox* msg) {
  return *msg->header_;
}
void GetBoundingBox::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GetBoundingBox::clear_items() {
  items_.Clear();
}
GetBoundingBox::GetBoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetBoundingBox)
}
GetBoundingBox::GetBoundingBox(const GetBoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetBoundingBox)
}

inline void GetBoundingBox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mode_));
}

GetBoundingBox::~GetBoundingBox() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetBoundingBox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetBoundingBox::ArenaDtor(void* object) {
  GetBoundingBox* _this = reinterpret_cast< GetBoundingBox* >(object);
  (void)_this;
}
void GetBoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetBoundingBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KIID items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.commands.BoundingBoxMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::kiapi::common::commands::BoundingBoxMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBoundingBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetBoundingBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KIID items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  // .kiapi.common.commands.BoundingBoxMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetBoundingBox)
  return target;
}

size_t GetBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetBoundingBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.commands.BoundingBoxMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBoundingBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBoundingBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBoundingBox::GetClassData() const { return &_class_data_; }

void GetBoundingBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBoundingBox *>(to)->MergeFrom(
      static_cast<const GetBoundingBox &>(from));
}


void GetBoundingBox::MergeFrom(const GetBoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBoundingBox::CopyFrom(const GetBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBoundingBox::IsInitialized() const {
  return true;
}

void GetBoundingBox::InternalSwap(GetBoundingBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBoundingBox, mode_)
      + sizeof(GetBoundingBox::mode_)
      - PROTOBUF_FIELD_OFFSET(GetBoundingBox, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBoundingBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[25]);
}

// ===================================================================

class GetBoundingBoxResponse::_Internal {
 public:
};

void GetBoundingBoxResponse::clear_items() {
  items_.Clear();
}
void GetBoundingBoxResponse::clear_boxes() {
  boxes_.Clear();
}
GetBoundingBoxResponse::GetBoundingBoxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena),
  boxes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetBoundingBoxResponse)
}
GetBoundingBoxResponse::GetBoundingBoxResponse(const GetBoundingBoxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_),
      boxes_(from.boxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetBoundingBoxResponse)
}

inline void GetBoundingBoxResponse::SharedCtor() {
}

GetBoundingBoxResponse::~GetBoundingBoxResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetBoundingBoxResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBoundingBoxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBoundingBoxResponse::ArenaDtor(void* object) {
  GetBoundingBoxResponse* _this = reinterpret_cast< GetBoundingBoxResponse* >(object);
  (void)_this;
}
void GetBoundingBoxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBoundingBoxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBoundingBoxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetBoundingBoxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  boxes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBoundingBoxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.KIID items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.Box2 boxes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBoundingBoxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetBoundingBoxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // repeated .kiapi.common.types.Box2 boxes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_boxes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetBoundingBoxResponse)
  return target;
}

size_t GetBoundingBoxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetBoundingBoxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kiapi.common.types.Box2 boxes = 2;
  total_size += 1UL * this->_internal_boxes_size();
  for (const auto& msg : this->boxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBoundingBoxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBoundingBoxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBoundingBoxResponse::GetClassData() const { return &_class_data_; }

void GetBoundingBoxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBoundingBoxResponse *>(to)->MergeFrom(
      static_cast<const GetBoundingBoxResponse &>(from));
}


void GetBoundingBoxResponse::MergeFrom(const GetBoundingBoxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetBoundingBoxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  boxes_.MergeFrom(from.boxes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBoundingBoxResponse::CopyFrom(const GetBoundingBoxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetBoundingBoxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBoundingBoxResponse::IsInitialized() const {
  return true;
}

void GetBoundingBoxResponse::InternalSwap(GetBoundingBoxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  boxes_.InternalSwap(&other->boxes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBoundingBoxResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[26]);
}

// ===================================================================

class GetSelection::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const GetSelection* msg);
};

const ::kiapi::common::types::ItemHeader&
GetSelection::_Internal::header(const GetSelection* msg) {
  return *msg->header_;
}
void GetSelection::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetSelection::GetSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetSelection)
}
GetSelection::GetSelection(const GetSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetSelection)
}

inline void GetSelection::SharedCtor() {
header_ = nullptr;
}

GetSelection::~GetSelection() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetSelection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetSelection::ArenaDtor(void* object) {
  GetSelection* _this = reinterpret_cast< GetSelection* >(object);
  (void)_this;
}
void GetSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KiCadObjectType types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::kiapi::common::types::KiCadObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetSelection)
  return target;
}

size_t GetSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetSelection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSelection::GetClassData() const { return &_class_data_; }

void GetSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSelection *>(to)->MergeFrom(
      static_cast<const GetSelection &>(from));
}


void GetSelection::MergeFrom(const GetSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetSelection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSelection::CopyFrom(const GetSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSelection::IsInitialized() const {
  return true;
}

void GetSelection::InternalSwap(GetSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSelection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[27]);
}

// ===================================================================

class SelectionResponse::_Internal {
 public:
};

void SelectionResponse::clear_items() {
  items_.Clear();
}
SelectionResponse::SelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SelectionResponse)
}
SelectionResponse::SelectionResponse(const SelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SelectionResponse)
}

inline void SelectionResponse::SharedCtor() {
}

SelectionResponse::~SelectionResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.SelectionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelectionResponse::ArenaDtor(void* object) {
  SelectionResponse* _this = reinterpret_cast< SelectionResponse* >(object);
  (void)_this;
}
void SelectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.SelectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.SelectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.SelectionResponse)
  return target;
}

size_t SelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.SelectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionResponse::GetClassData() const { return &_class_data_; }

void SelectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionResponse *>(to)->MergeFrom(
      static_cast<const SelectionResponse &>(from));
}


void SelectionResponse::MergeFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.SelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionResponse::CopyFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.SelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionResponse::IsInitialized() const {
  return true;
}

void SelectionResponse::InternalSwap(SelectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[28]);
}

// ===================================================================

class AddToSelection::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const AddToSelection* msg);
};

const ::kiapi::common::types::ItemHeader&
AddToSelection::_Internal::header(const AddToSelection* msg) {
  return *msg->header_;
}
void AddToSelection::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void AddToSelection::clear_items() {
  items_.Clear();
}
AddToSelection::AddToSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.AddToSelection)
}
AddToSelection::AddToSelection(const AddToSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.AddToSelection)
}

inline void AddToSelection::SharedCtor() {
header_ = nullptr;
}

AddToSelection::~AddToSelection() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.AddToSelection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddToSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AddToSelection::ArenaDtor(void* object) {
  AddToSelection* _this = reinterpret_cast< AddToSelection* >(object);
  (void)_this;
}
void AddToSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddToSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddToSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.AddToSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddToSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KIID items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddToSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.AddToSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KIID items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.AddToSelection)
  return target;
}

size_t AddToSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.AddToSelection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddToSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddToSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddToSelection::GetClassData() const { return &_class_data_; }

void AddToSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddToSelection *>(to)->MergeFrom(
      static_cast<const AddToSelection &>(from));
}


void AddToSelection::MergeFrom(const AddToSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.AddToSelection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddToSelection::CopyFrom(const AddToSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.AddToSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddToSelection::IsInitialized() const {
  return true;
}

void AddToSelection::InternalSwap(AddToSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddToSelection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[29]);
}

// ===================================================================

class RemoveFromSelection::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const RemoveFromSelection* msg);
};

const ::kiapi::common::types::ItemHeader&
RemoveFromSelection::_Internal::header(const RemoveFromSelection* msg) {
  return *msg->header_;
}
void RemoveFromSelection::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RemoveFromSelection::clear_items() {
  items_.Clear();
}
RemoveFromSelection::RemoveFromSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.RemoveFromSelection)
}
RemoveFromSelection::RemoveFromSelection(const RemoveFromSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.RemoveFromSelection)
}

inline void RemoveFromSelection::SharedCtor() {
header_ = nullptr;
}

RemoveFromSelection::~RemoveFromSelection() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.RemoveFromSelection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveFromSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RemoveFromSelection::ArenaDtor(void* object) {
  RemoveFromSelection* _this = reinterpret_cast< RemoveFromSelection* >(object);
  (void)_this;
}
void RemoveFromSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveFromSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveFromSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.RemoveFromSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveFromSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KIID items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveFromSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.RemoveFromSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KIID items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.RemoveFromSelection)
  return target;
}

size_t RemoveFromSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.RemoveFromSelection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveFromSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveFromSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveFromSelection::GetClassData() const { return &_class_data_; }

void RemoveFromSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveFromSelection *>(to)->MergeFrom(
      static_cast<const RemoveFromSelection &>(from));
}


void RemoveFromSelection::MergeFrom(const RemoveFromSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.RemoveFromSelection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveFromSelection::CopyFrom(const RemoveFromSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.RemoveFromSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFromSelection::IsInitialized() const {
  return true;
}

void RemoveFromSelection::InternalSwap(RemoveFromSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveFromSelection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[30]);
}

// ===================================================================

class ClearSelection::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const ClearSelection* msg);
};

const ::kiapi::common::types::ItemHeader&
ClearSelection::_Internal::header(const ClearSelection* msg) {
  return *msg->header_;
}
void ClearSelection::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ClearSelection::ClearSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.ClearSelection)
}
ClearSelection::ClearSelection(const ClearSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.ClearSelection)
}

inline void ClearSelection::SharedCtor() {
header_ = nullptr;
}

ClearSelection::~ClearSelection() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.ClearSelection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ClearSelection::ArenaDtor(void* object) {
  ClearSelection* _this = reinterpret_cast< ClearSelection* >(object);
  (void)_this;
}
void ClearSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.ClearSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClearSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.ClearSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.ClearSelection)
  return target;
}

size_t ClearSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.ClearSelection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearSelection::GetClassData() const { return &_class_data_; }

void ClearSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearSelection *>(to)->MergeFrom(
      static_cast<const ClearSelection &>(from));
}


void ClearSelection::MergeFrom(const ClearSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.ClearSelection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearSelection::CopyFrom(const ClearSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.ClearSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearSelection::IsInitialized() const {
  return true;
}

void ClearSelection::InternalSwap(ClearSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearSelection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[31]);
}

// ===================================================================

class HitTest::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const HitTest* msg);
  static const ::kiapi::common::types::KIID& id(const HitTest* msg);
  static const ::kiapi::common::types::Vector2& position(const HitTest* msg);
};

const ::kiapi::common::types::ItemHeader&
HitTest::_Internal::header(const HitTest* msg) {
  return *msg->header_;
}
const ::kiapi::common::types::KIID&
HitTest::_Internal::id(const HitTest* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
HitTest::_Internal::position(const HitTest* msg) {
  return *msg->position_;
}
void HitTest::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void HitTest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void HitTest::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
HitTest::HitTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.HitTest)
}
HitTest::HitTest(const HitTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  tolerance_ = from.tolerance_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.HitTest)
}

inline void HitTest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tolerance_) -
    reinterpret_cast<char*>(&header_)) + sizeof(tolerance_));
}

HitTest::~HitTest() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.HitTest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HitTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
}

void HitTest::ArenaDtor(void* object) {
  HitTest* _this = reinterpret_cast< HitTest* >(object);
  (void)_this;
}
void HitTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HitTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.HitTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  tolerance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.KIID id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tolerance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.HitTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .kiapi.common.types.KIID id = 2;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 3;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // int32 tolerance = 4;
  if (this->_internal_tolerance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.HitTest)
  return target;
}

size_t HitTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.HitTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.types.KIID id = 2;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 tolerance = 4;
  if (this->_internal_tolerance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tolerance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HitTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitTest::GetClassData() const { return &_class_data_; }

void HitTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HitTest *>(to)->MergeFrom(
      static_cast<const HitTest &>(from));
}


void HitTest::MergeFrom(const HitTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.HitTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_tolerance() != 0) {
    _internal_set_tolerance(from._internal_tolerance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitTest::CopyFrom(const HitTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.HitTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitTest::IsInitialized() const {
  return true;
}

void HitTest::InternalSwap(HitTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitTest, tolerance_)
      + sizeof(HitTest::tolerance_)
      - PROTOBUF_FIELD_OFFSET(HitTest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[32]);
}

// ===================================================================

class HitTestResponse::_Internal {
 public:
};

HitTestResponse::HitTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.HitTestResponse)
}
HitTestResponse::HitTestResponse(const HitTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.HitTestResponse)
}

inline void HitTestResponse::SharedCtor() {
result_ = 0;
}

HitTestResponse::~HitTestResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.HitTestResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HitTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HitTestResponse::ArenaDtor(void* object) {
  HitTestResponse* _this = reinterpret_cast< HitTestResponse* >(object);
  (void)_this;
}
void HitTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HitTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.HitTestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.commands.HitTestResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::kiapi::common::commands::HitTestResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitTestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.HitTestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.commands.HitTestResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.HitTestResponse)
  return target;
}

size_t HitTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.HitTestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.commands.HitTestResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitTestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HitTestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitTestResponse::GetClassData() const { return &_class_data_; }

void HitTestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HitTestResponse *>(to)->MergeFrom(
      static_cast<const HitTestResponse &>(from));
}


void HitTestResponse::MergeFrom(const HitTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.HitTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitTestResponse::CopyFrom(const HitTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.HitTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitTestResponse::IsInitialized() const {
  return true;
}

void HitTestResponse::InternalSwap(HitTestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitTestResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[33]);
}

// ===================================================================

class GetTitleBlockInfo::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const GetTitleBlockInfo* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetTitleBlockInfo::_Internal::document(const GetTitleBlockInfo* msg) {
  return *msg->document_;
}
void GetTitleBlockInfo::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
GetTitleBlockInfo::GetTitleBlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.GetTitleBlockInfo)
}
GetTitleBlockInfo::GetTitleBlockInfo(const GetTitleBlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.GetTitleBlockInfo)
}

inline void GetTitleBlockInfo::SharedCtor() {
document_ = nullptr;
}

GetTitleBlockInfo::~GetTitleBlockInfo() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.GetTitleBlockInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTitleBlockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_;
}

void GetTitleBlockInfo::ArenaDtor(void* object) {
  GetTitleBlockInfo* _this = reinterpret_cast< GetTitleBlockInfo* >(object);
  (void)_this;
}
void GetTitleBlockInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTitleBlockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTitleBlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.GetTitleBlockInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTitleBlockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTitleBlockInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.GetTitleBlockInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.GetTitleBlockInfo)
  return target;
}

size_t GetTitleBlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.GetTitleBlockInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTitleBlockInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTitleBlockInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTitleBlockInfo::GetClassData() const { return &_class_data_; }

void GetTitleBlockInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTitleBlockInfo *>(to)->MergeFrom(
      static_cast<const GetTitleBlockInfo &>(from));
}


void GetTitleBlockInfo::MergeFrom(const GetTitleBlockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.GetTitleBlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTitleBlockInfo::CopyFrom(const GetTitleBlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.GetTitleBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitleBlockInfo::IsInitialized() const {
  return true;
}

void GetTitleBlockInfo::InternalSwap(GetTitleBlockInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTitleBlockInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[34]);
}

// ===================================================================

class SaveDocumentToString::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const SaveDocumentToString* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
SaveDocumentToString::_Internal::document(const SaveDocumentToString* msg) {
  return *msg->document_;
}
void SaveDocumentToString::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
SaveDocumentToString::SaveDocumentToString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SaveDocumentToString)
}
SaveDocumentToString::SaveDocumentToString(const SaveDocumentToString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SaveDocumentToString)
}

inline void SaveDocumentToString::SharedCtor() {
document_ = nullptr;
}

SaveDocumentToString::~SaveDocumentToString() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.SaveDocumentToString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveDocumentToString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_;
}

void SaveDocumentToString::ArenaDtor(void* object) {
  SaveDocumentToString* _this = reinterpret_cast< SaveDocumentToString* >(object);
  (void)_this;
}
void SaveDocumentToString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveDocumentToString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveDocumentToString::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.SaveDocumentToString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveDocumentToString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveDocumentToString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.SaveDocumentToString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.SaveDocumentToString)
  return target;
}

size_t SaveDocumentToString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.SaveDocumentToString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveDocumentToString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveDocumentToString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveDocumentToString::GetClassData() const { return &_class_data_; }

void SaveDocumentToString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaveDocumentToString *>(to)->MergeFrom(
      static_cast<const SaveDocumentToString &>(from));
}


void SaveDocumentToString::MergeFrom(const SaveDocumentToString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.SaveDocumentToString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveDocumentToString::CopyFrom(const SaveDocumentToString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.SaveDocumentToString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveDocumentToString::IsInitialized() const {
  return true;
}

void SaveDocumentToString::InternalSwap(SaveDocumentToString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveDocumentToString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[35]);
}

// ===================================================================

class SavedDocumentResponse::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const SavedDocumentResponse* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
SavedDocumentResponse::_Internal::document(const SavedDocumentResponse* msg) {
  return *msg->document_;
}
void SavedDocumentResponse::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
SavedDocumentResponse::SavedDocumentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SavedDocumentResponse)
}
SavedDocumentResponse::SavedDocumentResponse(const SavedDocumentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SavedDocumentResponse)
}

inline void SavedDocumentResponse::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
document_ = nullptr;
}

SavedDocumentResponse::~SavedDocumentResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.SavedDocumentResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SavedDocumentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
}

void SavedDocumentResponse::ArenaDtor(void* object) {
  SavedDocumentResponse* _this = reinterpret_cast< SavedDocumentResponse* >(object);
  (void)_this;
}
void SavedDocumentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedDocumentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedDocumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.SavedDocumentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedDocumentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.SavedDocumentResponse.contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedDocumentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.SavedDocumentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  // string contents = 2;
  if (!this->_internal_contents().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.SavedDocumentResponse.contents");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.SavedDocumentResponse)
  return target;
}

size_t SavedDocumentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.SavedDocumentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contents = 2;
  if (!this->_internal_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedDocumentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SavedDocumentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedDocumentResponse::GetClassData() const { return &_class_data_; }

void SavedDocumentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SavedDocumentResponse *>(to)->MergeFrom(
      static_cast<const SavedDocumentResponse &>(from));
}


void SavedDocumentResponse::MergeFrom(const SavedDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.SavedDocumentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedDocumentResponse::CopyFrom(const SavedDocumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.SavedDocumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedDocumentResponse::IsInitialized() const {
  return true;
}

void SavedDocumentResponse::InternalSwap(SavedDocumentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedDocumentResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[36]);
}

// ===================================================================

class SaveSelectionToString::_Internal {
 public:
};

SaveSelectionToString::SaveSelectionToString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SaveSelectionToString)
}
SaveSelectionToString::SaveSelectionToString(const SaveSelectionToString& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SaveSelectionToString)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveSelectionToString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveSelectionToString::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SaveSelectionToString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[37]);
}

// ===================================================================

class SavedSelectionResponse::_Internal {
 public:
};

void SavedSelectionResponse::clear_ids() {
  ids_.Clear();
}
SavedSelectionResponse::SavedSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.SavedSelectionResponse)
}
SavedSelectionResponse::SavedSelectionResponse(const SavedSelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.SavedSelectionResponse)
}

inline void SavedSelectionResponse::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SavedSelectionResponse::~SavedSelectionResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.SavedSelectionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SavedSelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SavedSelectionResponse::ArenaDtor(void* object) {
  SavedSelectionResponse* _this = reinterpret_cast< SavedSelectionResponse* >(object);
  (void)_this;
}
void SavedSelectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedSelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedSelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.SavedSelectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  contents_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedSelectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.KIID ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.SavedSelectionResponse.contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedSelectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.SavedSelectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ids(i), target, stream);
  }

  // string contents = 2;
  if (!this->_internal_contents().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.SavedSelectionResponse.contents");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.SavedSelectionResponse)
  return target;
}

size_t SavedSelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.SavedSelectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID ids = 1;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contents = 2;
  if (!this->_internal_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedSelectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SavedSelectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedSelectionResponse::GetClassData() const { return &_class_data_; }

void SavedSelectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SavedSelectionResponse *>(to)->MergeFrom(
      static_cast<const SavedSelectionResponse &>(from));
}


void SavedSelectionResponse::MergeFrom(const SavedSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.SavedSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (!from._internal_contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedSelectionResponse::CopyFrom(const SavedSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.SavedSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedSelectionResponse::IsInitialized() const {
  return true;
}

void SavedSelectionResponse::InternalSwap(SavedSelectionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedSelectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[38]);
}

// ===================================================================

class ParseAndCreateItemsFromString::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& document(const ParseAndCreateItemsFromString* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
ParseAndCreateItemsFromString::_Internal::document(const ParseAndCreateItemsFromString* msg) {
  return *msg->document_;
}
void ParseAndCreateItemsFromString::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
ParseAndCreateItemsFromString::ParseAndCreateItemsFromString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.commands.ParseAndCreateItemsFromString)
}
ParseAndCreateItemsFromString::ParseAndCreateItemsFromString(const ParseAndCreateItemsFromString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    document_ = new ::kiapi::common::types::DocumentSpecifier(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.commands.ParseAndCreateItemsFromString)
}

inline void ParseAndCreateItemsFromString::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
document_ = nullptr;
}

ParseAndCreateItemsFromString::~ParseAndCreateItemsFromString() {
  // @@protoc_insertion_point(destructor:kiapi.common.commands.ParseAndCreateItemsFromString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParseAndCreateItemsFromString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
}

void ParseAndCreateItemsFromString::ArenaDtor(void* object) {
  ParseAndCreateItemsFromString* _this = reinterpret_cast< ParseAndCreateItemsFromString* >(object);
  (void)_this;
}
void ParseAndCreateItemsFromString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParseAndCreateItemsFromString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParseAndCreateItemsFromString::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.commands.ParseAndCreateItemsFromString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParseAndCreateItemsFromString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.commands.ParseAndCreateItemsFromString.contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParseAndCreateItemsFromString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.commands.ParseAndCreateItemsFromString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  // string contents = 2;
  if (!this->_internal_contents().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.commands.ParseAndCreateItemsFromString.contents");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.commands.ParseAndCreateItemsFromString)
  return target;
}

size_t ParseAndCreateItemsFromString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.commands.ParseAndCreateItemsFromString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contents = 2;
  if (!this->_internal_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  // .kiapi.common.types.DocumentSpecifier document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParseAndCreateItemsFromString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParseAndCreateItemsFromString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParseAndCreateItemsFromString::GetClassData() const { return &_class_data_; }

void ParseAndCreateItemsFromString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParseAndCreateItemsFromString *>(to)->MergeFrom(
      static_cast<const ParseAndCreateItemsFromString &>(from));
}


void ParseAndCreateItemsFromString::MergeFrom(const ParseAndCreateItemsFromString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.commands.ParseAndCreateItemsFromString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
  if (from._internal_has_document()) {
    _internal_mutable_document()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParseAndCreateItemsFromString::CopyFrom(const ParseAndCreateItemsFromString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.commands.ParseAndCreateItemsFromString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseAndCreateItemsFromString::IsInitialized() const {
  return true;
}

void ParseAndCreateItemsFromString::InternalSwap(ParseAndCreateItemsFromString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParseAndCreateItemsFromString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_getter, &descriptor_table_common_2fcommands_2feditor_5fcommands_2eproto_once,
      file_level_metadata_common_2fcommands_2feditor_5fcommands_2eproto[39]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::RefreshEditor* Arena::CreateMaybeMessage< ::kiapi::common::commands::RefreshEditor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::RefreshEditor >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetOpenDocuments* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetOpenDocuments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetOpenDocuments >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetOpenDocumentsResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetOpenDocumentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetOpenDocumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SaveDocument* Arena::CreateMaybeMessage< ::kiapi::common::commands::SaveDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SaveDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SaveOptions* Arena::CreateMaybeMessage< ::kiapi::common::commands::SaveOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SaveOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SaveCopyOfDocument* Arena::CreateMaybeMessage< ::kiapi::common::commands::SaveCopyOfDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SaveCopyOfDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::RevertDocument* Arena::CreateMaybeMessage< ::kiapi::common::commands::RevertDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::RevertDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::RunAction* Arena::CreateMaybeMessage< ::kiapi::common::commands::RunAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::RunAction >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::RunActionResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::RunActionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::RunActionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::BeginCommit* Arena::CreateMaybeMessage< ::kiapi::common::commands::BeginCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::BeginCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::BeginCommitResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::BeginCommitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::BeginCommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::EndCommit* Arena::CreateMaybeMessage< ::kiapi::common::commands::EndCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::EndCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::EndCommitResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::EndCommitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::EndCommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::CreateItems* Arena::CreateMaybeMessage< ::kiapi::common::commands::CreateItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::CreateItems >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::ItemStatus* Arena::CreateMaybeMessage< ::kiapi::common::commands::ItemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::ItemStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::ItemCreationResult* Arena::CreateMaybeMessage< ::kiapi::common::commands::ItemCreationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::ItemCreationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::CreateItemsResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::CreateItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::CreateItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetItems* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetItems >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetItemsResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::UpdateItems* Arena::CreateMaybeMessage< ::kiapi::common::commands::UpdateItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::UpdateItems >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::ItemUpdateResult* Arena::CreateMaybeMessage< ::kiapi::common::commands::ItemUpdateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::ItemUpdateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::UpdateItemsResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::UpdateItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::UpdateItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::DeleteItems* Arena::CreateMaybeMessage< ::kiapi::common::commands::DeleteItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::DeleteItems >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::ItemDeletionResult* Arena::CreateMaybeMessage< ::kiapi::common::commands::ItemDeletionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::ItemDeletionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::DeleteItemsResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::DeleteItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::DeleteItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetBoundingBox* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetBoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetBoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetBoundingBoxResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetBoundingBoxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetBoundingBoxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetSelection* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SelectionResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::SelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::AddToSelection* Arena::CreateMaybeMessage< ::kiapi::common::commands::AddToSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::AddToSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::RemoveFromSelection* Arena::CreateMaybeMessage< ::kiapi::common::commands::RemoveFromSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::RemoveFromSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::ClearSelection* Arena::CreateMaybeMessage< ::kiapi::common::commands::ClearSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::ClearSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::HitTest* Arena::CreateMaybeMessage< ::kiapi::common::commands::HitTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::HitTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::HitTestResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::HitTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::HitTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::GetTitleBlockInfo* Arena::CreateMaybeMessage< ::kiapi::common::commands::GetTitleBlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::GetTitleBlockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SaveDocumentToString* Arena::CreateMaybeMessage< ::kiapi::common::commands::SaveDocumentToString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SaveDocumentToString >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SavedDocumentResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::SavedDocumentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SavedDocumentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SaveSelectionToString* Arena::CreateMaybeMessage< ::kiapi::common::commands::SaveSelectionToString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SaveSelectionToString >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::SavedSelectionResponse* Arena::CreateMaybeMessage< ::kiapi::common::commands::SavedSelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::SavedSelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::commands::ParseAndCreateItemsFromString* Arena::CreateMaybeMessage< ::kiapi::common::commands::ParseAndCreateItemsFromString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::commands::ParseAndCreateItemsFromString >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
