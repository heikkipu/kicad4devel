// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/commands/project_commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fcommands_2fproject_5fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fcommands_2fproject_5fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/types/base_types.pb.h"
#include "common/types/project_settings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fcommands_2fproject_5fcommands_2eproto KIAPI_IMPORTEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct KIAPI_IMPORTEXPORT TableStruct_common_2fcommands_2fproject_5fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
KIAPI_IMPORTEXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcommands_2fproject_5fcommands_2eproto;
namespace kiapi {
namespace common {
namespace commands {
class ExpandTextVariables;
struct ExpandTextVariablesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ExpandTextVariablesDefaultTypeInternal _ExpandTextVariables_default_instance_;
class ExpandTextVariablesResponse;
struct ExpandTextVariablesResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ExpandTextVariablesResponseDefaultTypeInternal _ExpandTextVariablesResponse_default_instance_;
class GetNetClasses;
struct GetNetClassesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetNetClassesDefaultTypeInternal _GetNetClasses_default_instance_;
class GetTextVariables;
struct GetTextVariablesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetTextVariablesDefaultTypeInternal _GetTextVariables_default_instance_;
class NetClassesResponse;
struct NetClassesResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetClassesResponseDefaultTypeInternal _NetClassesResponse_default_instance_;
class SetNetClasses;
struct SetNetClassesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SetNetClassesDefaultTypeInternal _SetNetClasses_default_instance_;
class SetTextVariables;
struct SetTextVariablesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SetTextVariablesDefaultTypeInternal _SetTextVariables_default_instance_;
}  // namespace commands
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> KIAPI_IMPORTEXPORT ::kiapi::common::commands::ExpandTextVariables* Arena::CreateMaybeMessage<::kiapi::common::commands::ExpandTextVariables>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::commands::ExpandTextVariablesResponse* Arena::CreateMaybeMessage<::kiapi::common::commands::ExpandTextVariablesResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::commands::GetNetClasses* Arena::CreateMaybeMessage<::kiapi::common::commands::GetNetClasses>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::commands::GetTextVariables* Arena::CreateMaybeMessage<::kiapi::common::commands::GetTextVariables>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::commands::NetClassesResponse* Arena::CreateMaybeMessage<::kiapi::common::commands::NetClassesResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::commands::SetNetClasses* Arena::CreateMaybeMessage<::kiapi::common::commands::SetNetClasses>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::commands::SetTextVariables* Arena::CreateMaybeMessage<::kiapi::common::commands::SetTextVariables>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kiapi {
namespace common {
namespace commands {

// ===================================================================

class KIAPI_IMPORTEXPORT GetNetClasses final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kiapi.common.commands.GetNetClasses) */ {
 public:
  inline GetNetClasses() : GetNetClasses(nullptr) {}
  explicit constexpr GetNetClasses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNetClasses(const GetNetClasses& from);
  GetNetClasses(GetNetClasses&& from) noexcept
    : GetNetClasses() {
    *this = ::std::move(from);
  }

  inline GetNetClasses& operator=(const GetNetClasses& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetClasses& operator=(GetNetClasses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNetClasses& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNetClasses* internal_default_instance() {
    return reinterpret_cast<const GetNetClasses*>(
               &_GetNetClasses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetNetClasses& a, GetNetClasses& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetClasses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetClasses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNetClasses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNetClasses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetNetClasses& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetNetClasses& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.commands.GetNetClasses";
  }
  protected:
  explicit GetNetClasses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kiapi.common.commands.GetNetClasses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fcommands_2fproject_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT NetClassesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.commands.NetClassesResponse) */ {
 public:
  inline NetClassesResponse() : NetClassesResponse(nullptr) {}
  ~NetClassesResponse() override;
  explicit constexpr NetClassesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetClassesResponse(const NetClassesResponse& from);
  NetClassesResponse(NetClassesResponse&& from) noexcept
    : NetClassesResponse() {
    *this = ::std::move(from);
  }

  inline NetClassesResponse& operator=(const NetClassesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetClassesResponse& operator=(NetClassesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetClassesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetClassesResponse* internal_default_instance() {
    return reinterpret_cast<const NetClassesResponse*>(
               &_NetClassesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetClassesResponse& a, NetClassesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetClassesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetClassesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetClassesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetClassesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetClassesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetClassesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetClassesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.commands.NetClassesResponse";
  }
  protected:
  explicit NetClassesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetClassesFieldNumber = 1,
  };
  // repeated .kiapi.common.project.NetClass net_classes = 1;
  int net_classes_size() const;
  private:
  int _internal_net_classes_size() const;
  public:
  void clear_net_classes();
  ::kiapi::common::project::NetClass* mutable_net_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >*
      mutable_net_classes();
  private:
  const ::kiapi::common::project::NetClass& _internal_net_classes(int index) const;
  ::kiapi::common::project::NetClass* _internal_add_net_classes();
  public:
  const ::kiapi::common::project::NetClass& net_classes(int index) const;
  ::kiapi::common::project::NetClass* add_net_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >&
      net_classes() const;

  // @@protoc_insertion_point(class_scope:kiapi.common.commands.NetClassesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass > net_classes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fcommands_2fproject_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SetNetClasses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.commands.SetNetClasses) */ {
 public:
  inline SetNetClasses() : SetNetClasses(nullptr) {}
  ~SetNetClasses() override;
  explicit constexpr SetNetClasses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetNetClasses(const SetNetClasses& from);
  SetNetClasses(SetNetClasses&& from) noexcept
    : SetNetClasses() {
    *this = ::std::move(from);
  }

  inline SetNetClasses& operator=(const SetNetClasses& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNetClasses& operator=(SetNetClasses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetNetClasses& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetNetClasses* internal_default_instance() {
    return reinterpret_cast<const SetNetClasses*>(
               &_SetNetClasses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetNetClasses& a, SetNetClasses& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNetClasses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNetClasses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetNetClasses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetNetClasses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetNetClasses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetNetClasses& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNetClasses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.commands.SetNetClasses";
  }
  protected:
  explicit SetNetClasses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetClassesFieldNumber = 1,
    kMergeModeFieldNumber = 3,
  };
  // repeated .kiapi.common.project.NetClass net_classes = 1;
  int net_classes_size() const;
  private:
  int _internal_net_classes_size() const;
  public:
  void clear_net_classes();
  ::kiapi::common::project::NetClass* mutable_net_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >*
      mutable_net_classes();
  private:
  const ::kiapi::common::project::NetClass& _internal_net_classes(int index) const;
  ::kiapi::common::project::NetClass* _internal_add_net_classes();
  public:
  const ::kiapi::common::project::NetClass& net_classes(int index) const;
  ::kiapi::common::project::NetClass* add_net_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >&
      net_classes() const;

  // .kiapi.common.types.MapMergeMode merge_mode = 3;
  void clear_merge_mode();
  ::kiapi::common::types::MapMergeMode merge_mode() const;
  void set_merge_mode(::kiapi::common::types::MapMergeMode value);
  private:
  ::kiapi::common::types::MapMergeMode _internal_merge_mode() const;
  void _internal_set_merge_mode(::kiapi::common::types::MapMergeMode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.commands.SetNetClasses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass > net_classes_;
  int merge_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fcommands_2fproject_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ExpandTextVariables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.commands.ExpandTextVariables) */ {
 public:
  inline ExpandTextVariables() : ExpandTextVariables(nullptr) {}
  ~ExpandTextVariables() override;
  explicit constexpr ExpandTextVariables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandTextVariables(const ExpandTextVariables& from);
  ExpandTextVariables(ExpandTextVariables&& from) noexcept
    : ExpandTextVariables() {
    *this = ::std::move(from);
  }

  inline ExpandTextVariables& operator=(const ExpandTextVariables& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandTextVariables& operator=(ExpandTextVariables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandTextVariables& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandTextVariables* internal_default_instance() {
    return reinterpret_cast<const ExpandTextVariables*>(
               &_ExpandTextVariables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExpandTextVariables& a, ExpandTextVariables& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandTextVariables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandTextVariables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpandTextVariables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpandTextVariables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpandTextVariables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExpandTextVariables& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandTextVariables* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.commands.ExpandTextVariables";
  }
  protected:
  explicit ExpandTextVariables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kDocumentFieldNumber = 1,
  };
  // repeated string text = 2;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // .kiapi.common.types.DocumentSpecifier document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::kiapi::common::types::DocumentSpecifier& document() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_document();
  ::kiapi::common::types::DocumentSpecifier* mutable_document();
  void set_allocated_document(::kiapi::common::types::DocumentSpecifier* document);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_document() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::kiapi::common::types::DocumentSpecifier* document);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_document();

  // @@protoc_insertion_point(class_scope:kiapi.common.commands.ExpandTextVariables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  ::kiapi::common::types::DocumentSpecifier* document_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fcommands_2fproject_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ExpandTextVariablesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.commands.ExpandTextVariablesResponse) */ {
 public:
  inline ExpandTextVariablesResponse() : ExpandTextVariablesResponse(nullptr) {}
  ~ExpandTextVariablesResponse() override;
  explicit constexpr ExpandTextVariablesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandTextVariablesResponse(const ExpandTextVariablesResponse& from);
  ExpandTextVariablesResponse(ExpandTextVariablesResponse&& from) noexcept
    : ExpandTextVariablesResponse() {
    *this = ::std::move(from);
  }

  inline ExpandTextVariablesResponse& operator=(const ExpandTextVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandTextVariablesResponse& operator=(ExpandTextVariablesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandTextVariablesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandTextVariablesResponse* internal_default_instance() {
    return reinterpret_cast<const ExpandTextVariablesResponse*>(
               &_ExpandTextVariablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExpandTextVariablesResponse& a, ExpandTextVariablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandTextVariablesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandTextVariablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpandTextVariablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpandTextVariablesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpandTextVariablesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExpandTextVariablesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandTextVariablesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.commands.ExpandTextVariablesResponse";
  }
  protected:
  explicit ExpandTextVariablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // repeated string text = 1;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.commands.ExpandTextVariablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fcommands_2fproject_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetTextVariables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.commands.GetTextVariables) */ {
 public:
  inline GetTextVariables() : GetTextVariables(nullptr) {}
  ~GetTextVariables() override;
  explicit constexpr GetTextVariables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTextVariables(const GetTextVariables& from);
  GetTextVariables(GetTextVariables&& from) noexcept
    : GetTextVariables() {
    *this = ::std::move(from);
  }

  inline GetTextVariables& operator=(const GetTextVariables& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTextVariables& operator=(GetTextVariables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTextVariables& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTextVariables* internal_default_instance() {
    return reinterpret_cast<const GetTextVariables*>(
               &_GetTextVariables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetTextVariables& a, GetTextVariables& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTextVariables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTextVariables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTextVariables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTextVariables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTextVariables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTextVariables& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTextVariables* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.commands.GetTextVariables";
  }
  protected:
  explicit GetTextVariables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentFieldNumber = 1,
  };
  // .kiapi.common.types.DocumentSpecifier document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::kiapi::common::types::DocumentSpecifier& document() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_document();
  ::kiapi::common::types::DocumentSpecifier* mutable_document();
  void set_allocated_document(::kiapi::common::types::DocumentSpecifier* document);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_document() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::kiapi::common::types::DocumentSpecifier* document);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_document();

  // @@protoc_insertion_point(class_scope:kiapi.common.commands.GetTextVariables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* document_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fcommands_2fproject_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SetTextVariables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.commands.SetTextVariables) */ {
 public:
  inline SetTextVariables() : SetTextVariables(nullptr) {}
  ~SetTextVariables() override;
  explicit constexpr SetTextVariables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTextVariables(const SetTextVariables& from);
  SetTextVariables(SetTextVariables&& from) noexcept
    : SetTextVariables() {
    *this = ::std::move(from);
  }

  inline SetTextVariables& operator=(const SetTextVariables& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTextVariables& operator=(SetTextVariables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTextVariables& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTextVariables* internal_default_instance() {
    return reinterpret_cast<const SetTextVariables*>(
               &_SetTextVariables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetTextVariables& a, SetTextVariables& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTextVariables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTextVariables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTextVariables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTextVariables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTextVariables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTextVariables& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTextVariables* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.commands.SetTextVariables";
  }
  protected:
  explicit SetTextVariables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentFieldNumber = 1,
    kVariablesFieldNumber = 2,
    kMergeModeFieldNumber = 3,
  };
  // .kiapi.common.types.DocumentSpecifier document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::kiapi::common::types::DocumentSpecifier& document() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_document();
  ::kiapi::common::types::DocumentSpecifier* mutable_document();
  void set_allocated_document(::kiapi::common::types::DocumentSpecifier* document);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_document() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::kiapi::common::types::DocumentSpecifier* document);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_document();

  // .kiapi.common.project.TextVariables variables = 2;
  bool has_variables() const;
  private:
  bool _internal_has_variables() const;
  public:
  void clear_variables();
  const ::kiapi::common::project::TextVariables& variables() const;
  PROTOBUF_NODISCARD ::kiapi::common::project::TextVariables* release_variables();
  ::kiapi::common::project::TextVariables* mutable_variables();
  void set_allocated_variables(::kiapi::common::project::TextVariables* variables);
  private:
  const ::kiapi::common::project::TextVariables& _internal_variables() const;
  ::kiapi::common::project::TextVariables* _internal_mutable_variables();
  public:
  void unsafe_arena_set_allocated_variables(
      ::kiapi::common::project::TextVariables* variables);
  ::kiapi::common::project::TextVariables* unsafe_arena_release_variables();

  // .kiapi.common.types.MapMergeMode merge_mode = 3;
  void clear_merge_mode();
  ::kiapi::common::types::MapMergeMode merge_mode() const;
  void set_merge_mode(::kiapi::common::types::MapMergeMode value);
  private:
  ::kiapi::common::types::MapMergeMode _internal_merge_mode() const;
  void _internal_set_merge_mode(::kiapi::common::types::MapMergeMode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.commands.SetTextVariables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* document_;
  ::kiapi::common::project::TextVariables* variables_;
  int merge_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fcommands_2fproject_5fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetNetClasses

// -------------------------------------------------------------------

// NetClassesResponse

// repeated .kiapi.common.project.NetClass net_classes = 1;
inline int NetClassesResponse::_internal_net_classes_size() const {
  return net_classes_.size();
}
inline int NetClassesResponse::net_classes_size() const {
  return _internal_net_classes_size();
}
inline ::kiapi::common::project::NetClass* NetClassesResponse::mutable_net_classes(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.NetClassesResponse.net_classes)
  return net_classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >*
NetClassesResponse::mutable_net_classes() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.common.commands.NetClassesResponse.net_classes)
  return &net_classes_;
}
inline const ::kiapi::common::project::NetClass& NetClassesResponse::_internal_net_classes(int index) const {
  return net_classes_.Get(index);
}
inline const ::kiapi::common::project::NetClass& NetClassesResponse::net_classes(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.NetClassesResponse.net_classes)
  return _internal_net_classes(index);
}
inline ::kiapi::common::project::NetClass* NetClassesResponse::_internal_add_net_classes() {
  return net_classes_.Add();
}
inline ::kiapi::common::project::NetClass* NetClassesResponse::add_net_classes() {
  ::kiapi::common::project::NetClass* _add = _internal_add_net_classes();
  // @@protoc_insertion_point(field_add:kiapi.common.commands.NetClassesResponse.net_classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >&
NetClassesResponse::net_classes() const {
  // @@protoc_insertion_point(field_list:kiapi.common.commands.NetClassesResponse.net_classes)
  return net_classes_;
}

// -------------------------------------------------------------------

// SetNetClasses

// repeated .kiapi.common.project.NetClass net_classes = 1;
inline int SetNetClasses::_internal_net_classes_size() const {
  return net_classes_.size();
}
inline int SetNetClasses::net_classes_size() const {
  return _internal_net_classes_size();
}
inline ::kiapi::common::project::NetClass* SetNetClasses::mutable_net_classes(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.SetNetClasses.net_classes)
  return net_classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >*
SetNetClasses::mutable_net_classes() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.common.commands.SetNetClasses.net_classes)
  return &net_classes_;
}
inline const ::kiapi::common::project::NetClass& SetNetClasses::_internal_net_classes(int index) const {
  return net_classes_.Get(index);
}
inline const ::kiapi::common::project::NetClass& SetNetClasses::net_classes(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.SetNetClasses.net_classes)
  return _internal_net_classes(index);
}
inline ::kiapi::common::project::NetClass* SetNetClasses::_internal_add_net_classes() {
  return net_classes_.Add();
}
inline ::kiapi::common::project::NetClass* SetNetClasses::add_net_classes() {
  ::kiapi::common::project::NetClass* _add = _internal_add_net_classes();
  // @@protoc_insertion_point(field_add:kiapi.common.commands.SetNetClasses.net_classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::project::NetClass >&
SetNetClasses::net_classes() const {
  // @@protoc_insertion_point(field_list:kiapi.common.commands.SetNetClasses.net_classes)
  return net_classes_;
}

// .kiapi.common.types.MapMergeMode merge_mode = 3;
inline void SetNetClasses::clear_merge_mode() {
  merge_mode_ = 0;
}
inline ::kiapi::common::types::MapMergeMode SetNetClasses::_internal_merge_mode() const {
  return static_cast< ::kiapi::common::types::MapMergeMode >(merge_mode_);
}
inline ::kiapi::common::types::MapMergeMode SetNetClasses::merge_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.SetNetClasses.merge_mode)
  return _internal_merge_mode();
}
inline void SetNetClasses::_internal_set_merge_mode(::kiapi::common::types::MapMergeMode value) {
  
  merge_mode_ = value;
}
inline void SetNetClasses::set_merge_mode(::kiapi::common::types::MapMergeMode value) {
  _internal_set_merge_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.common.commands.SetNetClasses.merge_mode)
}

// -------------------------------------------------------------------

// ExpandTextVariables

// .kiapi.common.types.DocumentSpecifier document = 1;
inline bool ExpandTextVariables::_internal_has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline bool ExpandTextVariables::has_document() const {
  return _internal_has_document();
}
inline const ::kiapi::common::types::DocumentSpecifier& ExpandTextVariables::_internal_document() const {
  const ::kiapi::common::types::DocumentSpecifier* p = document_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& ExpandTextVariables::document() const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.ExpandTextVariables.document)
  return _internal_document();
}
inline void ExpandTextVariables::unsafe_arena_set_allocated_document(
    ::kiapi::common::types::DocumentSpecifier* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.commands.ExpandTextVariables.document)
}
inline ::kiapi::common::types::DocumentSpecifier* ExpandTextVariables::release_document() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = document_;
  document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* ExpandTextVariables::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:kiapi.common.commands.ExpandTextVariables.document)
  
  ::kiapi::common::types::DocumentSpecifier* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* ExpandTextVariables::_internal_mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    document_ = p;
  }
  return document_;
}
inline ::kiapi::common::types::DocumentSpecifier* ExpandTextVariables::mutable_document() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.ExpandTextVariables.document)
  return _msg;
}
inline void ExpandTextVariables::set_allocated_document(::kiapi::common::types::DocumentSpecifier* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.commands.ExpandTextVariables.document)
}

// repeated string text = 2;
inline int ExpandTextVariables::_internal_text_size() const {
  return text_.size();
}
inline int ExpandTextVariables::text_size() const {
  return _internal_text_size();
}
inline void ExpandTextVariables::clear_text() {
  text_.Clear();
}
inline std::string* ExpandTextVariables::add_text() {
  std::string* _s = _internal_add_text();
  // @@protoc_insertion_point(field_add_mutable:kiapi.common.commands.ExpandTextVariables.text)
  return _s;
}
inline const std::string& ExpandTextVariables::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& ExpandTextVariables::text(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.ExpandTextVariables.text)
  return _internal_text(index);
}
inline std::string* ExpandTextVariables::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.ExpandTextVariables.text)
  return text_.Mutable(index);
}
inline void ExpandTextVariables::set_text(int index, const std::string& value) {
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kiapi.common.commands.ExpandTextVariables.text)
}
inline void ExpandTextVariables::set_text(int index, std::string&& value) {
  text_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kiapi.common.commands.ExpandTextVariables.text)
}
inline void ExpandTextVariables::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kiapi.common.commands.ExpandTextVariables.text)
}
inline void ExpandTextVariables::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kiapi.common.commands.ExpandTextVariables.text)
}
inline std::string* ExpandTextVariables::_internal_add_text() {
  return text_.Add();
}
inline void ExpandTextVariables::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kiapi.common.commands.ExpandTextVariables.text)
}
inline void ExpandTextVariables::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kiapi.common.commands.ExpandTextVariables.text)
}
inline void ExpandTextVariables::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kiapi.common.commands.ExpandTextVariables.text)
}
inline void ExpandTextVariables::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kiapi.common.commands.ExpandTextVariables.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExpandTextVariables::text() const {
  // @@protoc_insertion_point(field_list:kiapi.common.commands.ExpandTextVariables.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExpandTextVariables::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.common.commands.ExpandTextVariables.text)
  return &text_;
}

// -------------------------------------------------------------------

// ExpandTextVariablesResponse

// repeated string text = 1;
inline int ExpandTextVariablesResponse::_internal_text_size() const {
  return text_.size();
}
inline int ExpandTextVariablesResponse::text_size() const {
  return _internal_text_size();
}
inline void ExpandTextVariablesResponse::clear_text() {
  text_.Clear();
}
inline std::string* ExpandTextVariablesResponse::add_text() {
  std::string* _s = _internal_add_text();
  // @@protoc_insertion_point(field_add_mutable:kiapi.common.commands.ExpandTextVariablesResponse.text)
  return _s;
}
inline const std::string& ExpandTextVariablesResponse::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& ExpandTextVariablesResponse::text(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.ExpandTextVariablesResponse.text)
  return _internal_text(index);
}
inline std::string* ExpandTextVariablesResponse::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.ExpandTextVariablesResponse.text)
  return text_.Mutable(index);
}
inline void ExpandTextVariablesResponse::set_text(int index, const std::string& value) {
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline void ExpandTextVariablesResponse::set_text(int index, std::string&& value) {
  text_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline void ExpandTextVariablesResponse::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline void ExpandTextVariablesResponse::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline std::string* ExpandTextVariablesResponse::_internal_add_text() {
  return text_.Add();
}
inline void ExpandTextVariablesResponse::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline void ExpandTextVariablesResponse::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline void ExpandTextVariablesResponse::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline void ExpandTextVariablesResponse::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kiapi.common.commands.ExpandTextVariablesResponse.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExpandTextVariablesResponse::text() const {
  // @@protoc_insertion_point(field_list:kiapi.common.commands.ExpandTextVariablesResponse.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExpandTextVariablesResponse::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.common.commands.ExpandTextVariablesResponse.text)
  return &text_;
}

// -------------------------------------------------------------------

// GetTextVariables

// .kiapi.common.types.DocumentSpecifier document = 1;
inline bool GetTextVariables::_internal_has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline bool GetTextVariables::has_document() const {
  return _internal_has_document();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetTextVariables::_internal_document() const {
  const ::kiapi::common::types::DocumentSpecifier* p = document_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetTextVariables::document() const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.GetTextVariables.document)
  return _internal_document();
}
inline void GetTextVariables::unsafe_arena_set_allocated_document(
    ::kiapi::common::types::DocumentSpecifier* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.commands.GetTextVariables.document)
}
inline ::kiapi::common::types::DocumentSpecifier* GetTextVariables::release_document() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = document_;
  document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetTextVariables::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:kiapi.common.commands.GetTextVariables.document)
  
  ::kiapi::common::types::DocumentSpecifier* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetTextVariables::_internal_mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    document_ = p;
  }
  return document_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetTextVariables::mutable_document() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.GetTextVariables.document)
  return _msg;
}
inline void GetTextVariables::set_allocated_document(::kiapi::common::types::DocumentSpecifier* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.commands.GetTextVariables.document)
}

// -------------------------------------------------------------------

// SetTextVariables

// .kiapi.common.types.DocumentSpecifier document = 1;
inline bool SetTextVariables::_internal_has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline bool SetTextVariables::has_document() const {
  return _internal_has_document();
}
inline const ::kiapi::common::types::DocumentSpecifier& SetTextVariables::_internal_document() const {
  const ::kiapi::common::types::DocumentSpecifier* p = document_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& SetTextVariables::document() const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.SetTextVariables.document)
  return _internal_document();
}
inline void SetTextVariables::unsafe_arena_set_allocated_document(
    ::kiapi::common::types::DocumentSpecifier* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.commands.SetTextVariables.document)
}
inline ::kiapi::common::types::DocumentSpecifier* SetTextVariables::release_document() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = document_;
  document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetTextVariables::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:kiapi.common.commands.SetTextVariables.document)
  
  ::kiapi::common::types::DocumentSpecifier* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetTextVariables::_internal_mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    document_ = p;
  }
  return document_;
}
inline ::kiapi::common::types::DocumentSpecifier* SetTextVariables::mutable_document() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.SetTextVariables.document)
  return _msg;
}
inline void SetTextVariables::set_allocated_document(::kiapi::common::types::DocumentSpecifier* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.commands.SetTextVariables.document)
}

// .kiapi.common.project.TextVariables variables = 2;
inline bool SetTextVariables::_internal_has_variables() const {
  return this != internal_default_instance() && variables_ != nullptr;
}
inline bool SetTextVariables::has_variables() const {
  return _internal_has_variables();
}
inline const ::kiapi::common::project::TextVariables& SetTextVariables::_internal_variables() const {
  const ::kiapi::common::project::TextVariables* p = variables_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::project::TextVariables&>(
      ::kiapi::common::project::_TextVariables_default_instance_);
}
inline const ::kiapi::common::project::TextVariables& SetTextVariables::variables() const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.SetTextVariables.variables)
  return _internal_variables();
}
inline void SetTextVariables::unsafe_arena_set_allocated_variables(
    ::kiapi::common::project::TextVariables* variables) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variables_);
  }
  variables_ = variables;
  if (variables) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.commands.SetTextVariables.variables)
}
inline ::kiapi::common::project::TextVariables* SetTextVariables::release_variables() {
  
  ::kiapi::common::project::TextVariables* temp = variables_;
  variables_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::project::TextVariables* SetTextVariables::unsafe_arena_release_variables() {
  // @@protoc_insertion_point(field_release:kiapi.common.commands.SetTextVariables.variables)
  
  ::kiapi::common::project::TextVariables* temp = variables_;
  variables_ = nullptr;
  return temp;
}
inline ::kiapi::common::project::TextVariables* SetTextVariables::_internal_mutable_variables() {
  
  if (variables_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::project::TextVariables>(GetArenaForAllocation());
    variables_ = p;
  }
  return variables_;
}
inline ::kiapi::common::project::TextVariables* SetTextVariables::mutable_variables() {
  ::kiapi::common::project::TextVariables* _msg = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:kiapi.common.commands.SetTextVariables.variables)
  return _msg;
}
inline void SetTextVariables::set_allocated_variables(::kiapi::common::project::TextVariables* variables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(variables_);
  }
  if (variables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variables));
    if (message_arena != submessage_arena) {
      variables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variables, submessage_arena);
    }
    
  } else {
    
  }
  variables_ = variables;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.commands.SetTextVariables.variables)
}

// .kiapi.common.types.MapMergeMode merge_mode = 3;
inline void SetTextVariables::clear_merge_mode() {
  merge_mode_ = 0;
}
inline ::kiapi::common::types::MapMergeMode SetTextVariables::_internal_merge_mode() const {
  return static_cast< ::kiapi::common::types::MapMergeMode >(merge_mode_);
}
inline ::kiapi::common::types::MapMergeMode SetTextVariables::merge_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.common.commands.SetTextVariables.merge_mode)
  return _internal_merge_mode();
}
inline void SetTextVariables::_internal_set_merge_mode(::kiapi::common::types::MapMergeMode value) {
  
  merge_mode_ = value;
}
inline void SetTextVariables::set_merge_mode(::kiapi::common::types::MapMergeMode value) {
  _internal_set_merge_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.common.commands.SetTextVariables.merge_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace common
}  // namespace kiapi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fcommands_2fproject_5fcommands_2eproto
