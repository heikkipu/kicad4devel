// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/envelope.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fenvelope_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fenvelope_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fenvelope_2eproto KIAPI_IMPORTEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct KIAPI_IMPORTEXPORT TableStruct_common_2fenvelope_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
KIAPI_IMPORTEXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fenvelope_2eproto;
namespace kiapi {
namespace common {
class ApiRequest;
struct ApiRequestDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ApiRequestDefaultTypeInternal _ApiRequest_default_instance_;
class ApiRequestHeader;
struct ApiRequestHeaderDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ApiRequestHeaderDefaultTypeInternal _ApiRequestHeader_default_instance_;
class ApiResponse;
struct ApiResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ApiResponseDefaultTypeInternal _ApiResponse_default_instance_;
class ApiResponseHeader;
struct ApiResponseHeaderDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ApiResponseHeaderDefaultTypeInternal _ApiResponseHeader_default_instance_;
class ApiResponseStatus;
struct ApiResponseStatusDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ApiResponseStatusDefaultTypeInternal _ApiResponseStatus_default_instance_;
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> KIAPI_IMPORTEXPORT ::kiapi::common::ApiRequest* Arena::CreateMaybeMessage<::kiapi::common::ApiRequest>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::ApiRequestHeader* Arena::CreateMaybeMessage<::kiapi::common::ApiRequestHeader>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::ApiResponse* Arena::CreateMaybeMessage<::kiapi::common::ApiResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::ApiResponseHeader* Arena::CreateMaybeMessage<::kiapi::common::ApiResponseHeader>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::common::ApiResponseStatus* Arena::CreateMaybeMessage<::kiapi::common::ApiResponseStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kiapi {
namespace common {

enum ApiStatusCode : int {
  AS_UNKNOWN = 0,
  AS_OK = 1,
  AS_TIMEOUT = 2,
  AS_BAD_REQUEST = 3,
  AS_NOT_READY = 4,
  AS_UNHANDLED = 5,
  AS_TOKEN_MISMATCH = 6,
  AS_BUSY = 7,
  AS_UNIMPLEMENTED = 8,
  ApiStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ApiStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ApiStatusCode_IsValid(int value);
constexpr ApiStatusCode ApiStatusCode_MIN = AS_UNKNOWN;
constexpr ApiStatusCode ApiStatusCode_MAX = AS_UNIMPLEMENTED;
constexpr int ApiStatusCode_ARRAYSIZE = ApiStatusCode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApiStatusCode_descriptor();
template<typename T>
inline const std::string& ApiStatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApiStatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApiStatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApiStatusCode_descriptor(), enum_t_value);
}
inline bool ApiStatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApiStatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApiStatusCode>(
    ApiStatusCode_descriptor(), name, value);
}
// ===================================================================

class KIAPI_IMPORTEXPORT ApiRequestHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.ApiRequestHeader) */ {
 public:
  inline ApiRequestHeader() : ApiRequestHeader(nullptr) {}
  ~ApiRequestHeader() override;
  explicit constexpr ApiRequestHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiRequestHeader(const ApiRequestHeader& from);
  ApiRequestHeader(ApiRequestHeader&& from) noexcept
    : ApiRequestHeader() {
    *this = ::std::move(from);
  }

  inline ApiRequestHeader& operator=(const ApiRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiRequestHeader& operator=(ApiRequestHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiRequestHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiRequestHeader* internal_default_instance() {
    return reinterpret_cast<const ApiRequestHeader*>(
               &_ApiRequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApiRequestHeader& a, ApiRequestHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiRequestHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiRequestHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiRequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiRequestHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiRequestHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApiRequestHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiRequestHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.ApiRequestHeader";
  }
  protected:
  explicit ApiRequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKicadTokenFieldNumber = 1,
    kClientNameFieldNumber = 2,
  };
  // string kicad_token = 1;
  void clear_kicad_token();
  const std::string& kicad_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kicad_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kicad_token();
  PROTOBUF_NODISCARD std::string* release_kicad_token();
  void set_allocated_kicad_token(std::string* kicad_token);
  private:
  const std::string& _internal_kicad_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kicad_token(const std::string& value);
  std::string* _internal_mutable_kicad_token();
  public:

  // string client_name = 2;
  void clear_client_name();
  const std::string& client_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_name();
  PROTOBUF_NODISCARD std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.ApiRequestHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kicad_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fenvelope_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ApiRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.ApiRequest) */ {
 public:
  inline ApiRequest() : ApiRequest(nullptr) {}
  ~ApiRequest() override;
  explicit constexpr ApiRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiRequest(const ApiRequest& from);
  ApiRequest(ApiRequest&& from) noexcept
    : ApiRequest() {
    *this = ::std::move(from);
  }

  inline ApiRequest& operator=(const ApiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiRequest& operator=(ApiRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiRequest* internal_default_instance() {
    return reinterpret_cast<const ApiRequest*>(
               &_ApiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApiRequest& a, ApiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApiRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.ApiRequest";
  }
  protected:
  explicit ApiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // .kiapi.common.ApiRequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kiapi::common::ApiRequestHeader& header() const;
  PROTOBUF_NODISCARD ::kiapi::common::ApiRequestHeader* release_header();
  ::kiapi::common::ApiRequestHeader* mutable_header();
  void set_allocated_header(::kiapi::common::ApiRequestHeader* header);
  private:
  const ::kiapi::common::ApiRequestHeader& _internal_header() const;
  ::kiapi::common::ApiRequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kiapi::common::ApiRequestHeader* header);
  ::kiapi::common::ApiRequestHeader* unsafe_arena_release_header();

  // .google.protobuf.Any message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::PROTOBUF_NAMESPACE_ID::Any& message() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_message();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_message();
  void set_allocated_message(::PROTOBUF_NAMESPACE_ID::Any* message);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_message() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::PROTOBUF_NAMESPACE_ID::Any* message);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:kiapi.common.ApiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::ApiRequestHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::Any* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fenvelope_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ApiResponseHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.ApiResponseHeader) */ {
 public:
  inline ApiResponseHeader() : ApiResponseHeader(nullptr) {}
  ~ApiResponseHeader() override;
  explicit constexpr ApiResponseHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiResponseHeader(const ApiResponseHeader& from);
  ApiResponseHeader(ApiResponseHeader&& from) noexcept
    : ApiResponseHeader() {
    *this = ::std::move(from);
  }

  inline ApiResponseHeader& operator=(const ApiResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiResponseHeader& operator=(ApiResponseHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiResponseHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ApiResponseHeader*>(
               &_ApiResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApiResponseHeader& a, ApiResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiResponseHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiResponseHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiResponseHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiResponseHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApiResponseHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiResponseHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.ApiResponseHeader";
  }
  protected:
  explicit ApiResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKicadTokenFieldNumber = 1,
  };
  // string kicad_token = 1;
  void clear_kicad_token();
  const std::string& kicad_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kicad_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kicad_token();
  PROTOBUF_NODISCARD std::string* release_kicad_token();
  void set_allocated_kicad_token(std::string* kicad_token);
  private:
  const std::string& _internal_kicad_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kicad_token(const std::string& value);
  std::string* _internal_mutable_kicad_token();
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.ApiResponseHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kicad_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fenvelope_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ApiResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.ApiResponse) */ {
 public:
  inline ApiResponse() : ApiResponse(nullptr) {}
  ~ApiResponse() override;
  explicit constexpr ApiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiResponse(const ApiResponse& from);
  ApiResponse(ApiResponse&& from) noexcept
    : ApiResponse() {
    *this = ::std::move(from);
  }

  inline ApiResponse& operator=(const ApiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiResponse& operator=(ApiResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiResponse* internal_default_instance() {
    return reinterpret_cast<const ApiResponse*>(
               &_ApiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ApiResponse& a, ApiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApiResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.ApiResponse";
  }
  protected:
  explicit ApiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // .kiapi.common.ApiResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kiapi::common::ApiResponseHeader& header() const;
  PROTOBUF_NODISCARD ::kiapi::common::ApiResponseHeader* release_header();
  ::kiapi::common::ApiResponseHeader* mutable_header();
  void set_allocated_header(::kiapi::common::ApiResponseHeader* header);
  private:
  const ::kiapi::common::ApiResponseHeader& _internal_header() const;
  ::kiapi::common::ApiResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kiapi::common::ApiResponseHeader* header);
  ::kiapi::common::ApiResponseHeader* unsafe_arena_release_header();

  // .kiapi.common.ApiResponseStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::kiapi::common::ApiResponseStatus& status() const;
  PROTOBUF_NODISCARD ::kiapi::common::ApiResponseStatus* release_status();
  ::kiapi::common::ApiResponseStatus* mutable_status();
  void set_allocated_status(::kiapi::common::ApiResponseStatus* status);
  private:
  const ::kiapi::common::ApiResponseStatus& _internal_status() const;
  ::kiapi::common::ApiResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::kiapi::common::ApiResponseStatus* status);
  ::kiapi::common::ApiResponseStatus* unsafe_arena_release_status();

  // .google.protobuf.Any message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::PROTOBUF_NAMESPACE_ID::Any& message() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_message();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_message();
  void set_allocated_message(::PROTOBUF_NAMESPACE_ID::Any* message);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_message() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::PROTOBUF_NAMESPACE_ID::Any* message);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:kiapi.common.ApiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::ApiResponseHeader* header_;
  ::kiapi::common::ApiResponseStatus* status_;
  ::PROTOBUF_NAMESPACE_ID::Any* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fenvelope_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ApiResponseStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.common.ApiResponseStatus) */ {
 public:
  inline ApiResponseStatus() : ApiResponseStatus(nullptr) {}
  ~ApiResponseStatus() override;
  explicit constexpr ApiResponseStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiResponseStatus(const ApiResponseStatus& from);
  ApiResponseStatus(ApiResponseStatus&& from) noexcept
    : ApiResponseStatus() {
    *this = ::std::move(from);
  }

  inline ApiResponseStatus& operator=(const ApiResponseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiResponseStatus& operator=(ApiResponseStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiResponseStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiResponseStatus* internal_default_instance() {
    return reinterpret_cast<const ApiResponseStatus*>(
               &_ApiResponseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ApiResponseStatus& a, ApiResponseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiResponseStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiResponseStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiResponseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiResponseStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiResponseStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApiResponseStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiResponseStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.common.ApiResponseStatus";
  }
  protected:
  explicit ApiResponseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .kiapi.common.ApiStatusCode status = 1;
  void clear_status();
  ::kiapi::common::ApiStatusCode status() const;
  void set_status(::kiapi::common::ApiStatusCode value);
  private:
  ::kiapi::common::ApiStatusCode _internal_status() const;
  void _internal_set_status(::kiapi::common::ApiStatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.common.ApiResponseStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fenvelope_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApiRequestHeader

// string kicad_token = 1;
inline void ApiRequestHeader::clear_kicad_token() {
  kicad_token_.ClearToEmpty();
}
inline const std::string& ApiRequestHeader::kicad_token() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiRequestHeader.kicad_token)
  return _internal_kicad_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiRequestHeader::set_kicad_token(ArgT0&& arg0, ArgT... args) {
 
 kicad_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.common.ApiRequestHeader.kicad_token)
}
inline std::string* ApiRequestHeader::mutable_kicad_token() {
  std::string* _s = _internal_mutable_kicad_token();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiRequestHeader.kicad_token)
  return _s;
}
inline const std::string& ApiRequestHeader::_internal_kicad_token() const {
  return kicad_token_.Get();
}
inline void ApiRequestHeader::_internal_set_kicad_token(const std::string& value) {
  
  kicad_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiRequestHeader::_internal_mutable_kicad_token() {
  
  return kicad_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiRequestHeader::release_kicad_token() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiRequestHeader.kicad_token)
  return kicad_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiRequestHeader::set_allocated_kicad_token(std::string* kicad_token) {
  if (kicad_token != nullptr) {
    
  } else {
    
  }
  kicad_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kicad_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kicad_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kicad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiRequestHeader.kicad_token)
}

// string client_name = 2;
inline void ApiRequestHeader::clear_client_name() {
  client_name_.ClearToEmpty();
}
inline const std::string& ApiRequestHeader::client_name() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiRequestHeader.client_name)
  return _internal_client_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiRequestHeader::set_client_name(ArgT0&& arg0, ArgT... args) {
 
 client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.common.ApiRequestHeader.client_name)
}
inline std::string* ApiRequestHeader::mutable_client_name() {
  std::string* _s = _internal_mutable_client_name();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiRequestHeader.client_name)
  return _s;
}
inline const std::string& ApiRequestHeader::_internal_client_name() const {
  return client_name_.Get();
}
inline void ApiRequestHeader::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiRequestHeader::_internal_mutable_client_name() {
  
  return client_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiRequestHeader::release_client_name() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiRequestHeader.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiRequestHeader::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiRequestHeader.client_name)
}

// -------------------------------------------------------------------

// ApiRequest

// .kiapi.common.ApiRequestHeader header = 1;
inline bool ApiRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ApiRequest::has_header() const {
  return _internal_has_header();
}
inline void ApiRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::kiapi::common::ApiRequestHeader& ApiRequest::_internal_header() const {
  const ::kiapi::common::ApiRequestHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::ApiRequestHeader&>(
      ::kiapi::common::_ApiRequestHeader_default_instance_);
}
inline const ::kiapi::common::ApiRequestHeader& ApiRequest::header() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiRequest.header)
  return _internal_header();
}
inline void ApiRequest::unsafe_arena_set_allocated_header(
    ::kiapi::common::ApiRequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.ApiRequest.header)
}
inline ::kiapi::common::ApiRequestHeader* ApiRequest::release_header() {
  
  ::kiapi::common::ApiRequestHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::ApiRequestHeader* ApiRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiRequest.header)
  
  ::kiapi::common::ApiRequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kiapi::common::ApiRequestHeader* ApiRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::ApiRequestHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::kiapi::common::ApiRequestHeader* ApiRequest::mutable_header() {
  ::kiapi::common::ApiRequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiRequest.header)
  return _msg;
}
inline void ApiRequest::set_allocated_header(::kiapi::common::ApiRequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::ApiRequestHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiRequest.header)
}

// .google.protobuf.Any message = 2;
inline bool ApiRequest::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ApiRequest::has_message() const {
  return _internal_has_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ApiRequest::_internal_message() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ApiRequest::message() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiRequest.message)
  return _internal_message();
}
inline void ApiRequest::unsafe_arena_set_allocated_message(
    ::PROTOBUF_NAMESPACE_ID::Any* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.ApiRequest.message)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiRequest::release_message() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiRequest.message)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiRequest::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiRequest::mutable_message() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiRequest.message)
  return _msg;
}
inline void ApiRequest::set_allocated_message(::PROTOBUF_NAMESPACE_ID::Any* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiRequest.message)
}

// -------------------------------------------------------------------

// ApiResponseHeader

// string kicad_token = 1;
inline void ApiResponseHeader::clear_kicad_token() {
  kicad_token_.ClearToEmpty();
}
inline const std::string& ApiResponseHeader::kicad_token() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiResponseHeader.kicad_token)
  return _internal_kicad_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiResponseHeader::set_kicad_token(ArgT0&& arg0, ArgT... args) {
 
 kicad_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.common.ApiResponseHeader.kicad_token)
}
inline std::string* ApiResponseHeader::mutable_kicad_token() {
  std::string* _s = _internal_mutable_kicad_token();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiResponseHeader.kicad_token)
  return _s;
}
inline const std::string& ApiResponseHeader::_internal_kicad_token() const {
  return kicad_token_.Get();
}
inline void ApiResponseHeader::_internal_set_kicad_token(const std::string& value) {
  
  kicad_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiResponseHeader::_internal_mutable_kicad_token() {
  
  return kicad_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiResponseHeader::release_kicad_token() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiResponseHeader.kicad_token)
  return kicad_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiResponseHeader::set_allocated_kicad_token(std::string* kicad_token) {
  if (kicad_token != nullptr) {
    
  } else {
    
  }
  kicad_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kicad_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kicad_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kicad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiResponseHeader.kicad_token)
}

// -------------------------------------------------------------------

// ApiResponse

// .kiapi.common.ApiResponseHeader header = 1;
inline bool ApiResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ApiResponse::has_header() const {
  return _internal_has_header();
}
inline void ApiResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::kiapi::common::ApiResponseHeader& ApiResponse::_internal_header() const {
  const ::kiapi::common::ApiResponseHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::ApiResponseHeader&>(
      ::kiapi::common::_ApiResponseHeader_default_instance_);
}
inline const ::kiapi::common::ApiResponseHeader& ApiResponse::header() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiResponse.header)
  return _internal_header();
}
inline void ApiResponse::unsafe_arena_set_allocated_header(
    ::kiapi::common::ApiResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.ApiResponse.header)
}
inline ::kiapi::common::ApiResponseHeader* ApiResponse::release_header() {
  
  ::kiapi::common::ApiResponseHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::ApiResponseHeader* ApiResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiResponse.header)
  
  ::kiapi::common::ApiResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kiapi::common::ApiResponseHeader* ApiResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::ApiResponseHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::kiapi::common::ApiResponseHeader* ApiResponse::mutable_header() {
  ::kiapi::common::ApiResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiResponse.header)
  return _msg;
}
inline void ApiResponse::set_allocated_header(::kiapi::common::ApiResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::ApiResponseHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiResponse.header)
}

// .kiapi.common.ApiResponseStatus status = 2;
inline bool ApiResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ApiResponse::has_status() const {
  return _internal_has_status();
}
inline void ApiResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::kiapi::common::ApiResponseStatus& ApiResponse::_internal_status() const {
  const ::kiapi::common::ApiResponseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::ApiResponseStatus&>(
      ::kiapi::common::_ApiResponseStatus_default_instance_);
}
inline const ::kiapi::common::ApiResponseStatus& ApiResponse::status() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiResponse.status)
  return _internal_status();
}
inline void ApiResponse::unsafe_arena_set_allocated_status(
    ::kiapi::common::ApiResponseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.ApiResponse.status)
}
inline ::kiapi::common::ApiResponseStatus* ApiResponse::release_status() {
  
  ::kiapi::common::ApiResponseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::ApiResponseStatus* ApiResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiResponse.status)
  
  ::kiapi::common::ApiResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::kiapi::common::ApiResponseStatus* ApiResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::ApiResponseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::kiapi::common::ApiResponseStatus* ApiResponse::mutable_status() {
  ::kiapi::common::ApiResponseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiResponse.status)
  return _msg;
}
inline void ApiResponse::set_allocated_status(::kiapi::common::ApiResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::common::ApiResponseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiResponse.status)
}

// .google.protobuf.Any message = 3;
inline bool ApiResponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ApiResponse::has_message() const {
  return _internal_has_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ApiResponse::_internal_message() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ApiResponse::message() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiResponse.message)
  return _internal_message();
}
inline void ApiResponse::unsafe_arena_set_allocated_message(
    ::PROTOBUF_NAMESPACE_ID::Any* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.common.ApiResponse.message)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiResponse::release_message() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiResponse.message)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiResponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ApiResponse::mutable_message() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiResponse.message)
  return _msg;
}
inline void ApiResponse::set_allocated_message(::PROTOBUF_NAMESPACE_ID::Any* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiResponse.message)
}

// -------------------------------------------------------------------

// ApiResponseStatus

// .kiapi.common.ApiStatusCode status = 1;
inline void ApiResponseStatus::clear_status() {
  status_ = 0;
}
inline ::kiapi::common::ApiStatusCode ApiResponseStatus::_internal_status() const {
  return static_cast< ::kiapi::common::ApiStatusCode >(status_);
}
inline ::kiapi::common::ApiStatusCode ApiResponseStatus::status() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiResponseStatus.status)
  return _internal_status();
}
inline void ApiResponseStatus::_internal_set_status(::kiapi::common::ApiStatusCode value) {
  
  status_ = value;
}
inline void ApiResponseStatus::set_status(::kiapi::common::ApiStatusCode value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kiapi.common.ApiResponseStatus.status)
}

// string error_message = 2;
inline void ApiResponseStatus::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& ApiResponseStatus::error_message() const {
  // @@protoc_insertion_point(field_get:kiapi.common.ApiResponseStatus.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiResponseStatus::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.common.ApiResponseStatus.error_message)
}
inline std::string* ApiResponseStatus::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:kiapi.common.ApiResponseStatus.error_message)
  return _s;
}
inline const std::string& ApiResponseStatus::_internal_error_message() const {
  return error_message_.Get();
}
inline void ApiResponseStatus::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiResponseStatus::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiResponseStatus::release_error_message() {
  // @@protoc_insertion_point(field_release:kiapi.common.ApiResponseStatus.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiResponseStatus::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.common.ApiResponseStatus.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace kiapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kiapi::common::ApiStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::common::ApiStatusCode>() {
  return ::kiapi::common::ApiStatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fenvelope_2eproto
