// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/envelope.proto

#include "common/envelope.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace common {
constexpr ApiRequestHeader::ApiRequestHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kicad_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ApiRequestHeaderDefaultTypeInternal {
  constexpr ApiRequestHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApiRequestHeaderDefaultTypeInternal() {}
  union {
    ApiRequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApiRequestHeaderDefaultTypeInternal _ApiRequestHeader_default_instance_;
constexpr ApiRequest::ApiRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , message_(nullptr){}
struct ApiRequestDefaultTypeInternal {
  constexpr ApiRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApiRequestDefaultTypeInternal() {}
  union {
    ApiRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApiRequestDefaultTypeInternal _ApiRequest_default_instance_;
constexpr ApiResponseHeader::ApiResponseHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kicad_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ApiResponseHeaderDefaultTypeInternal {
  constexpr ApiResponseHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApiResponseHeaderDefaultTypeInternal() {}
  union {
    ApiResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApiResponseHeaderDefaultTypeInternal _ApiResponseHeader_default_instance_;
constexpr ApiResponse::ApiResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , status_(nullptr)
  , message_(nullptr){}
struct ApiResponseDefaultTypeInternal {
  constexpr ApiResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApiResponseDefaultTypeInternal() {}
  union {
    ApiResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApiResponseDefaultTypeInternal _ApiResponse_default_instance_;
constexpr ApiResponseStatus::ApiResponseStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct ApiResponseStatusDefaultTypeInternal {
  constexpr ApiResponseStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApiResponseStatusDefaultTypeInternal() {}
  union {
    ApiResponseStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApiResponseStatusDefaultTypeInternal _ApiResponseStatus_default_instance_;
}  // namespace common
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fenvelope_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fenvelope_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fenvelope_2eproto = nullptr;

const uint32_t TableStruct_common_2fenvelope_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiRequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiRequestHeader, kicad_token_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiRequestHeader, client_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiRequest, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponseHeader, kicad_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponse, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponse, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponseStatus, status_),
  PROTOBUF_FIELD_OFFSET(::kiapi::common::ApiResponseStatus, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::common::ApiRequestHeader)},
  { 8, -1, -1, sizeof(::kiapi::common::ApiRequest)},
  { 16, -1, -1, sizeof(::kiapi::common::ApiResponseHeader)},
  { 23, -1, -1, sizeof(::kiapi::common::ApiResponse)},
  { 32, -1, -1, sizeof(::kiapi::common::ApiResponseStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::_ApiRequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::_ApiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::_ApiResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::_ApiResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::common::_ApiResponseStatus_default_instance_),
};

const char descriptor_table_protodef_common_2fenvelope_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025common/envelope.proto\022\014kiapi.common\032\031g"
  "oogle/protobuf/any.proto\"<\n\020ApiRequestHe"
  "ader\022\023\n\013kicad_token\030\001 \001(\t\022\023\n\013client_name"
  "\030\002 \001(\t\"c\n\nApiRequest\022.\n\006header\030\001 \001(\0132\036.k"
  "iapi.common.ApiRequestHeader\022%\n\007message\030"
  "\002 \001(\0132\024.google.protobuf.Any\"(\n\021ApiRespon"
  "seHeader\022\023\n\013kicad_token\030\001 \001(\t\"\226\001\n\013ApiRes"
  "ponse\022/\n\006header\030\001 \001(\0132\037.kiapi.common.Api"
  "ResponseHeader\022/\n\006status\030\002 \001(\0132\037.kiapi.c"
  "ommon.ApiResponseStatus\022%\n\007message\030\003 \001(\013"
  "2\024.google.protobuf.Any\"W\n\021ApiResponseSta"
  "tus\022+\n\006status\030\001 \001(\0162\033.kiapi.common.ApiSt"
  "atusCode\022\025\n\rerror_message\030\002 \001(\t*\254\001\n\rApiS"
  "tatusCode\022\016\n\nAS_UNKNOWN\020\000\022\t\n\005AS_OK\020\001\022\016\n\n"
  "AS_TIMEOUT\020\002\022\022\n\016AS_BAD_REQUEST\020\003\022\020\n\014AS_N"
  "OT_READY\020\004\022\020\n\014AS_UNHANDLED\020\005\022\025\n\021AS_TOKEN"
  "_MISMATCH\020\006\022\013\n\007AS_BUSY\020\007\022\024\n\020AS_UNIMPLEME"
  "NTED\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fenvelope_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fenvelope_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fenvelope_2eproto = {
  false, false, 694, descriptor_table_protodef_common_2fenvelope_2eproto, "common/envelope.proto", 
  &descriptor_table_common_2fenvelope_2eproto_once, descriptor_table_common_2fenvelope_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_common_2fenvelope_2eproto::offsets,
  file_level_metadata_common_2fenvelope_2eproto, file_level_enum_descriptors_common_2fenvelope_2eproto, file_level_service_descriptors_common_2fenvelope_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2fenvelope_2eproto_getter() {
  return &descriptor_table_common_2fenvelope_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fenvelope_2eproto(&descriptor_table_common_2fenvelope_2eproto);
namespace kiapi {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApiStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fenvelope_2eproto);
  return file_level_enum_descriptors_common_2fenvelope_2eproto[0];
}
bool ApiStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ApiRequestHeader::_Internal {
 public:
};

ApiRequestHeader::ApiRequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.ApiRequestHeader)
}
ApiRequestHeader::ApiRequestHeader(const ApiRequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kicad_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    kicad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kicad_token().empty()) {
    kicad_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kicad_token(), 
      GetArenaForAllocation());
  }
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_name().empty()) {
    client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.ApiRequestHeader)
}

inline void ApiRequestHeader::SharedCtor() {
kicad_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  kicad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApiRequestHeader::~ApiRequestHeader() {
  // @@protoc_insertion_point(destructor:kiapi.common.ApiRequestHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApiRequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kicad_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApiRequestHeader::ArenaDtor(void* object) {
  ApiRequestHeader* _this = reinterpret_cast< ApiRequestHeader* >(object);
  (void)_this;
}
void ApiRequestHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApiRequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApiRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.ApiRequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kicad_token_.ClearToEmpty();
  client_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiRequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kicad_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kicad_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.ApiRequestHeader.kicad_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.ApiRequestHeader.client_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApiRequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.ApiRequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string kicad_token = 1;
  if (!this->_internal_kicad_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kicad_token().data(), static_cast<int>(this->_internal_kicad_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.ApiRequestHeader.kicad_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kicad_token(), target);
  }

  // string client_name = 2;
  if (!this->_internal_client_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.ApiRequestHeader.client_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.ApiRequestHeader)
  return target;
}

size_t ApiRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.ApiRequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kicad_token = 1;
  if (!this->_internal_kicad_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kicad_token());
  }

  // string client_name = 2;
  if (!this->_internal_client_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiRequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApiRequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiRequestHeader::GetClassData() const { return &_class_data_; }

void ApiRequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApiRequestHeader *>(to)->MergeFrom(
      static_cast<const ApiRequestHeader &>(from));
}


void ApiRequestHeader::MergeFrom(const ApiRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.ApiRequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kicad_token().empty()) {
    _internal_set_kicad_token(from._internal_kicad_token());
  }
  if (!from._internal_client_name().empty()) {
    _internal_set_client_name(from._internal_client_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiRequestHeader::CopyFrom(const ApiRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.ApiRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiRequestHeader::IsInitialized() const {
  return true;
}

void ApiRequestHeader::InternalSwap(ApiRequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kicad_token_, lhs_arena,
      &other->kicad_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_name_, lhs_arena,
      &other->client_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiRequestHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fenvelope_2eproto_getter, &descriptor_table_common_2fenvelope_2eproto_once,
      file_level_metadata_common_2fenvelope_2eproto[0]);
}

// ===================================================================

class ApiRequest::_Internal {
 public:
  static const ::kiapi::common::ApiRequestHeader& header(const ApiRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& message(const ApiRequest* msg);
};

const ::kiapi::common::ApiRequestHeader&
ApiRequest::_Internal::header(const ApiRequest* msg) {
  return *msg->header_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ApiRequest::_Internal::message(const ApiRequest* msg) {
  return *msg->message_;
}
void ApiRequest::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
ApiRequest::ApiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.ApiRequest)
}
ApiRequest::ApiRequest(const ApiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::ApiRequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.ApiRequest)
}

inline void ApiRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&header_)) + sizeof(message_));
}

ApiRequest::~ApiRequest() {
  // @@protoc_insertion_point(destructor:kiapi.common.ApiRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete message_;
}

void ApiRequest::ArenaDtor(void* object) {
  ApiRequest* _this = reinterpret_cast< ApiRequest* >(object);
  (void)_this;
}
void ApiRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.ApiRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.ApiRequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApiRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.ApiRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.ApiRequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .google.protobuf.Any message = 2;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.ApiRequest)
  return target;
}

size_t ApiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.ApiRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.ApiRequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Any message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApiRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiRequest::GetClassData() const { return &_class_data_; }

void ApiRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApiRequest *>(to)->MergeFrom(
      static_cast<const ApiRequest &>(from));
}


void ApiRequest::MergeFrom(const ApiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.ApiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::ApiRequestHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiRequest::CopyFrom(const ApiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.ApiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiRequest::IsInitialized() const {
  return true;
}

void ApiRequest::InternalSwap(ApiRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApiRequest, message_)
      + sizeof(ApiRequest::message_)
      - PROTOBUF_FIELD_OFFSET(ApiRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fenvelope_2eproto_getter, &descriptor_table_common_2fenvelope_2eproto_once,
      file_level_metadata_common_2fenvelope_2eproto[1]);
}

// ===================================================================

class ApiResponseHeader::_Internal {
 public:
};

ApiResponseHeader::ApiResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.ApiResponseHeader)
}
ApiResponseHeader::ApiResponseHeader(const ApiResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kicad_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    kicad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kicad_token().empty()) {
    kicad_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kicad_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.ApiResponseHeader)
}

inline void ApiResponseHeader::SharedCtor() {
kicad_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  kicad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApiResponseHeader::~ApiResponseHeader() {
  // @@protoc_insertion_point(destructor:kiapi.common.ApiResponseHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApiResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kicad_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApiResponseHeader::ArenaDtor(void* object) {
  ApiResponseHeader* _this = reinterpret_cast< ApiResponseHeader* >(object);
  (void)_this;
}
void ApiResponseHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApiResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApiResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.ApiResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kicad_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kicad_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kicad_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.ApiResponseHeader.kicad_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApiResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.ApiResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string kicad_token = 1;
  if (!this->_internal_kicad_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kicad_token().data(), static_cast<int>(this->_internal_kicad_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.ApiResponseHeader.kicad_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kicad_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.ApiResponseHeader)
  return target;
}

size_t ApiResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.ApiResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kicad_token = 1;
  if (!this->_internal_kicad_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kicad_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApiResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiResponseHeader::GetClassData() const { return &_class_data_; }

void ApiResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApiResponseHeader *>(to)->MergeFrom(
      static_cast<const ApiResponseHeader &>(from));
}


void ApiResponseHeader::MergeFrom(const ApiResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.ApiResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kicad_token().empty()) {
    _internal_set_kicad_token(from._internal_kicad_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiResponseHeader::CopyFrom(const ApiResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.ApiResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiResponseHeader::IsInitialized() const {
  return true;
}

void ApiResponseHeader::InternalSwap(ApiResponseHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kicad_token_, lhs_arena,
      &other->kicad_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiResponseHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fenvelope_2eproto_getter, &descriptor_table_common_2fenvelope_2eproto_once,
      file_level_metadata_common_2fenvelope_2eproto[2]);
}

// ===================================================================

class ApiResponse::_Internal {
 public:
  static const ::kiapi::common::ApiResponseHeader& header(const ApiResponse* msg);
  static const ::kiapi::common::ApiResponseStatus& status(const ApiResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& message(const ApiResponse* msg);
};

const ::kiapi::common::ApiResponseHeader&
ApiResponse::_Internal::header(const ApiResponse* msg) {
  return *msg->header_;
}
const ::kiapi::common::ApiResponseStatus&
ApiResponse::_Internal::status(const ApiResponse* msg) {
  return *msg->status_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ApiResponse::_Internal::message(const ApiResponse* msg) {
  return *msg->message_;
}
void ApiResponse::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
ApiResponse::ApiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.ApiResponse)
}
ApiResponse::ApiResponse(const ApiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::ApiResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::kiapi::common::ApiResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.common.ApiResponse)
}

inline void ApiResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&header_)) + sizeof(message_));
}

ApiResponse::~ApiResponse() {
  // @@protoc_insertion_point(destructor:kiapi.common.ApiResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApiResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete message_;
}

void ApiResponse::ArenaDtor(void* object) {
  ApiResponse* _this = reinterpret_cast< ApiResponse* >(object);
  (void)_this;
}
void ApiResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApiResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.ApiResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.ApiResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.ApiResponseStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApiResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.ApiResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.ApiResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .kiapi.common.ApiResponseStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Any message = 3;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.ApiResponse)
  return target;
}

size_t ApiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.ApiResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.ApiResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .kiapi.common.ApiResponseStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Any message = 3;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiResponse::GetClassData() const { return &_class_data_; }

void ApiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApiResponse *>(to)->MergeFrom(
      static_cast<const ApiResponse &>(from));
}


void ApiResponse::MergeFrom(const ApiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.ApiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::ApiResponseHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::kiapi::common::ApiResponseStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiResponse::CopyFrom(const ApiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.ApiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiResponse::IsInitialized() const {
  return true;
}

void ApiResponse::InternalSwap(ApiResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApiResponse, message_)
      + sizeof(ApiResponse::message_)
      - PROTOBUF_FIELD_OFFSET(ApiResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fenvelope_2eproto_getter, &descriptor_table_common_2fenvelope_2eproto_once,
      file_level_metadata_common_2fenvelope_2eproto[3]);
}

// ===================================================================

class ApiResponseStatus::_Internal {
 public:
};

ApiResponseStatus::ApiResponseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.common.ApiResponseStatus)
}
ApiResponseStatus::ApiResponseStatus(const ApiResponseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kiapi.common.ApiResponseStatus)
}

inline void ApiResponseStatus::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

ApiResponseStatus::~ApiResponseStatus() {
  // @@protoc_insertion_point(destructor:kiapi.common.ApiResponseStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApiResponseStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApiResponseStatus::ArenaDtor(void* object) {
  ApiResponseStatus* _this = reinterpret_cast< ApiResponseStatus* >(object);
  (void)_this;
}
void ApiResponseStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApiResponseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApiResponseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.common.ApiResponseStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiResponseStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.ApiStatusCode status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kiapi::common::ApiStatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.common.ApiResponseStatus.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApiResponseStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.common.ApiResponseStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.ApiStatusCode status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.common.ApiResponseStatus.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.common.ApiResponseStatus)
  return target;
}

size_t ApiResponseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.common.ApiResponseStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .kiapi.common.ApiStatusCode status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiResponseStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApiResponseStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiResponseStatus::GetClassData() const { return &_class_data_; }

void ApiResponseStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApiResponseStatus *>(to)->MergeFrom(
      static_cast<const ApiResponseStatus &>(from));
}


void ApiResponseStatus::MergeFrom(const ApiResponseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.common.ApiResponseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiResponseStatus::CopyFrom(const ApiResponseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.common.ApiResponseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiResponseStatus::IsInitialized() const {
  return true;
}

void ApiResponseStatus::InternalSwap(ApiResponseStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiResponseStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fenvelope_2eproto_getter, &descriptor_table_common_2fenvelope_2eproto_once,
      file_level_metadata_common_2fenvelope_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::common::ApiRequestHeader* Arena::CreateMaybeMessage< ::kiapi::common::ApiRequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::ApiRequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::ApiRequest* Arena::CreateMaybeMessage< ::kiapi::common::ApiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::ApiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::ApiResponseHeader* Arena::CreateMaybeMessage< ::kiapi::common::ApiResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::ApiResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::ApiResponse* Arena::CreateMaybeMessage< ::kiapi::common::ApiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::ApiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::common::ApiResponseStatus* Arena::CreateMaybeMessage< ::kiapi::common::ApiResponseStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::common::ApiResponseStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
