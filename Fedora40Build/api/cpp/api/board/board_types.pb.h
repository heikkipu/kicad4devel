// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board/board_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_board_2fboard_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_board_2fboard_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "common/types/base_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_board_2fboard_5ftypes_2eproto KIAPI_IMPORTEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct KIAPI_IMPORTEXPORT TableStruct_board_2fboard_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[44]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
KIAPI_IMPORTEXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_board_2fboard_5ftypes_2eproto;
namespace kiapi {
namespace board {
namespace types {
class AlignedDimensionAttributes;
struct AlignedDimensionAttributesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern AlignedDimensionAttributesDefaultTypeInternal _AlignedDimensionAttributes_default_instance_;
class Arc;
struct ArcDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ArcDefaultTypeInternal _Arc_default_instance_;
class BoardGraphicShape;
struct BoardGraphicShapeDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardGraphicShapeDefaultTypeInternal _BoardGraphicShape_default_instance_;
class BoardText;
struct BoardTextDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardTextDefaultTypeInternal _BoardText_default_instance_;
class BoardTextBox;
struct BoardTextBoxDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardTextBoxDefaultTypeInternal _BoardTextBox_default_instance_;
class CenterDimensionAttributes;
struct CenterDimensionAttributesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern CenterDimensionAttributesDefaultTypeInternal _CenterDimensionAttributes_default_instance_;
class ChamferedRectCorners;
struct ChamferedRectCornersDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ChamferedRectCornersDefaultTypeInternal _ChamferedRectCorners_default_instance_;
class CopperZoneSettings;
struct CopperZoneSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern CopperZoneSettingsDefaultTypeInternal _CopperZoneSettings_default_instance_;
class Dimension;
struct DimensionDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class DrillProperties;
struct DrillPropertiesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern DrillPropertiesDefaultTypeInternal _DrillProperties_default_instance_;
class Field;
struct FieldDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern FieldDefaultTypeInternal _Field_default_instance_;
class FieldId;
struct FieldIdDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern FieldIdDefaultTypeInternal _FieldId_default_instance_;
class Footprint;
struct FootprintDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern FootprintDefaultTypeInternal _Footprint_default_instance_;
class Footprint3DModel;
struct Footprint3DModelDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern Footprint3DModelDefaultTypeInternal _Footprint3DModel_default_instance_;
class FootprintAttributes;
struct FootprintAttributesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern FootprintAttributesDefaultTypeInternal _FootprintAttributes_default_instance_;
class FootprintDesignRuleOverrides;
struct FootprintDesignRuleOverridesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern FootprintDesignRuleOverridesDefaultTypeInternal _FootprintDesignRuleOverrides_default_instance_;
class FootprintInstance;
struct FootprintInstanceDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern FootprintInstanceDefaultTypeInternal _FootprintInstance_default_instance_;
class Group;
struct GroupDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GroupDefaultTypeInternal _Group_default_instance_;
class HatchFillSettings;
struct HatchFillSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern HatchFillSettingsDefaultTypeInternal _HatchFillSettings_default_instance_;
class JumperGroup;
struct JumperGroupDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern JumperGroupDefaultTypeInternal _JumperGroup_default_instance_;
class JumperSettings;
struct JumperSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern JumperSettingsDefaultTypeInternal _JumperSettings_default_instance_;
class LeaderDimensionAttributes;
struct LeaderDimensionAttributesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern LeaderDimensionAttributesDefaultTypeInternal _LeaderDimensionAttributes_default_instance_;
class Net;
struct NetDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetDefaultTypeInternal _Net_default_instance_;
class NetCode;
struct NetCodeDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetCodeDefaultTypeInternal _NetCode_default_instance_;
class NetTieDefinition;
struct NetTieDefinitionDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetTieDefinitionDefaultTypeInternal _NetTieDefinition_default_instance_;
class OrthogonalDimensionAttributes;
struct OrthogonalDimensionAttributesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern OrthogonalDimensionAttributesDefaultTypeInternal _OrthogonalDimensionAttributes_default_instance_;
class Pad;
struct PadDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern PadDefaultTypeInternal _Pad_default_instance_;
class PadStack;
struct PadStackDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern PadStackDefaultTypeInternal _PadStack_default_instance_;
class PadStackLayer;
struct PadStackLayerDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern PadStackLayerDefaultTypeInternal _PadStackLayer_default_instance_;
class PadStackOuterLayer;
struct PadStackOuterLayerDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern PadStackOuterLayerDefaultTypeInternal _PadStackOuterLayer_default_instance_;
class RadialDimensionAttributes;
struct RadialDimensionAttributesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern RadialDimensionAttributesDefaultTypeInternal _RadialDimensionAttributes_default_instance_;
class ReferenceImage;
struct ReferenceImageDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ReferenceImageDefaultTypeInternal _ReferenceImage_default_instance_;
class RuleAreaSettings;
struct RuleAreaSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern RuleAreaSettingsDefaultTypeInternal _RuleAreaSettings_default_instance_;
class SolderMaskOverrides;
struct SolderMaskOverridesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SolderMaskOverridesDefaultTypeInternal _SolderMaskOverrides_default_instance_;
class SolderPasteOverrides;
struct SolderPasteOverridesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SolderPasteOverridesDefaultTypeInternal _SolderPasteOverrides_default_instance_;
class TeardropSettings;
struct TeardropSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern TeardropSettingsDefaultTypeInternal _TeardropSettings_default_instance_;
class ThermalSpokeSettings;
struct ThermalSpokeSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ThermalSpokeSettingsDefaultTypeInternal _ThermalSpokeSettings_default_instance_;
class Track;
struct TrackDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern TrackDefaultTypeInternal _Track_default_instance_;
class Via;
struct ViaDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ViaDefaultTypeInternal _Via_default_instance_;
class Zone;
struct ZoneDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ZoneDefaultTypeInternal _Zone_default_instance_;
class ZoneBorderSettings;
struct ZoneBorderSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ZoneBorderSettingsDefaultTypeInternal _ZoneBorderSettings_default_instance_;
class ZoneConnectionSettings;
struct ZoneConnectionSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ZoneConnectionSettingsDefaultTypeInternal _ZoneConnectionSettings_default_instance_;
class ZoneFilledPolygons;
struct ZoneFilledPolygonsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ZoneFilledPolygonsDefaultTypeInternal _ZoneFilledPolygons_default_instance_;
class ZoneLayerProperties;
struct ZoneLayerPropertiesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern ZoneLayerPropertiesDefaultTypeInternal _ZoneLayerProperties_default_instance_;
}  // namespace types
}  // namespace board
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::AlignedDimensionAttributes* Arena::CreateMaybeMessage<::kiapi::board::types::AlignedDimensionAttributes>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Arc* Arena::CreateMaybeMessage<::kiapi::board::types::Arc>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::BoardGraphicShape* Arena::CreateMaybeMessage<::kiapi::board::types::BoardGraphicShape>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::BoardText* Arena::CreateMaybeMessage<::kiapi::board::types::BoardText>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::BoardTextBox* Arena::CreateMaybeMessage<::kiapi::board::types::BoardTextBox>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::CenterDimensionAttributes* Arena::CreateMaybeMessage<::kiapi::board::types::CenterDimensionAttributes>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::ChamferedRectCorners* Arena::CreateMaybeMessage<::kiapi::board::types::ChamferedRectCorners>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::CopperZoneSettings* Arena::CreateMaybeMessage<::kiapi::board::types::CopperZoneSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Dimension* Arena::CreateMaybeMessage<::kiapi::board::types::Dimension>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::DrillProperties* Arena::CreateMaybeMessage<::kiapi::board::types::DrillProperties>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Field* Arena::CreateMaybeMessage<::kiapi::board::types::Field>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::FieldId* Arena::CreateMaybeMessage<::kiapi::board::types::FieldId>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Footprint* Arena::CreateMaybeMessage<::kiapi::board::types::Footprint>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Footprint3DModel* Arena::CreateMaybeMessage<::kiapi::board::types::Footprint3DModel>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::FootprintAttributes* Arena::CreateMaybeMessage<::kiapi::board::types::FootprintAttributes>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::FootprintDesignRuleOverrides* Arena::CreateMaybeMessage<::kiapi::board::types::FootprintDesignRuleOverrides>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::FootprintInstance* Arena::CreateMaybeMessage<::kiapi::board::types::FootprintInstance>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Group* Arena::CreateMaybeMessage<::kiapi::board::types::Group>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::HatchFillSettings* Arena::CreateMaybeMessage<::kiapi::board::types::HatchFillSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::JumperGroup* Arena::CreateMaybeMessage<::kiapi::board::types::JumperGroup>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::JumperSettings* Arena::CreateMaybeMessage<::kiapi::board::types::JumperSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::LeaderDimensionAttributes* Arena::CreateMaybeMessage<::kiapi::board::types::LeaderDimensionAttributes>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Net* Arena::CreateMaybeMessage<::kiapi::board::types::Net>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::NetCode* Arena::CreateMaybeMessage<::kiapi::board::types::NetCode>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::NetTieDefinition* Arena::CreateMaybeMessage<::kiapi::board::types::NetTieDefinition>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::OrthogonalDimensionAttributes* Arena::CreateMaybeMessage<::kiapi::board::types::OrthogonalDimensionAttributes>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Pad* Arena::CreateMaybeMessage<::kiapi::board::types::Pad>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::PadStack* Arena::CreateMaybeMessage<::kiapi::board::types::PadStack>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::PadStackLayer* Arena::CreateMaybeMessage<::kiapi::board::types::PadStackLayer>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::PadStackOuterLayer* Arena::CreateMaybeMessage<::kiapi::board::types::PadStackOuterLayer>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::RadialDimensionAttributes* Arena::CreateMaybeMessage<::kiapi::board::types::RadialDimensionAttributes>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::ReferenceImage* Arena::CreateMaybeMessage<::kiapi::board::types::ReferenceImage>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::RuleAreaSettings* Arena::CreateMaybeMessage<::kiapi::board::types::RuleAreaSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::SolderMaskOverrides* Arena::CreateMaybeMessage<::kiapi::board::types::SolderMaskOverrides>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::SolderPasteOverrides* Arena::CreateMaybeMessage<::kiapi::board::types::SolderPasteOverrides>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::TeardropSettings* Arena::CreateMaybeMessage<::kiapi::board::types::TeardropSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::ThermalSpokeSettings* Arena::CreateMaybeMessage<::kiapi::board::types::ThermalSpokeSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Track* Arena::CreateMaybeMessage<::kiapi::board::types::Track>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Via* Arena::CreateMaybeMessage<::kiapi::board::types::Via>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::Zone* Arena::CreateMaybeMessage<::kiapi::board::types::Zone>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::ZoneBorderSettings* Arena::CreateMaybeMessage<::kiapi::board::types::ZoneBorderSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::ZoneConnectionSettings* Arena::CreateMaybeMessage<::kiapi::board::types::ZoneConnectionSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::ZoneFilledPolygons* Arena::CreateMaybeMessage<::kiapi::board::types::ZoneFilledPolygons>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::types::ZoneLayerProperties* Arena::CreateMaybeMessage<::kiapi::board::types::ZoneLayerProperties>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kiapi {
namespace board {
namespace types {

enum BoardLayer : int {
  BL_UNKNOWN = 0,
  BL_UNDEFINED = 1,
  BL_UNSELECTED = 2,
  BL_F_Cu = 3,
  BL_In1_Cu = 4,
  BL_In2_Cu = 5,
  BL_In3_Cu = 6,
  BL_In4_Cu = 7,
  BL_In5_Cu = 8,
  BL_In6_Cu = 9,
  BL_In7_Cu = 10,
  BL_In8_Cu = 11,
  BL_In9_Cu = 12,
  BL_In10_Cu = 13,
  BL_In11_Cu = 14,
  BL_In12_Cu = 15,
  BL_In13_Cu = 16,
  BL_In14_Cu = 17,
  BL_In15_Cu = 18,
  BL_In16_Cu = 19,
  BL_In17_Cu = 20,
  BL_In18_Cu = 21,
  BL_In19_Cu = 22,
  BL_In20_Cu = 23,
  BL_In21_Cu = 24,
  BL_In22_Cu = 25,
  BL_In23_Cu = 26,
  BL_In24_Cu = 27,
  BL_In25_Cu = 28,
  BL_In26_Cu = 29,
  BL_In27_Cu = 30,
  BL_In28_Cu = 31,
  BL_In29_Cu = 32,
  BL_In30_Cu = 33,
  BL_B_Cu = 34,
  BL_B_Adhes = 35,
  BL_F_Adhes = 36,
  BL_B_Paste = 37,
  BL_F_Paste = 38,
  BL_B_SilkS = 39,
  BL_F_SilkS = 40,
  BL_B_Mask = 41,
  BL_F_Mask = 42,
  BL_Dwgs_User = 43,
  BL_Cmts_User = 44,
  BL_Eco1_User = 45,
  BL_Eco2_User = 46,
  BL_Edge_Cuts = 47,
  BL_Margin = 48,
  BL_B_CrtYd = 49,
  BL_F_CrtYd = 50,
  BL_B_Fab = 51,
  BL_F_Fab = 52,
  BL_User_1 = 53,
  BL_User_2 = 54,
  BL_User_3 = 55,
  BL_User_4 = 56,
  BL_User_5 = 57,
  BL_User_6 = 58,
  BL_User_7 = 59,
  BL_User_8 = 60,
  BL_User_9 = 61,
  BL_Rescue = 62,
  BL_User_10 = 63,
  BL_User_11 = 64,
  BL_User_12 = 65,
  BL_User_13 = 66,
  BL_User_14 = 67,
  BL_User_15 = 68,
  BL_User_16 = 69,
  BL_User_17 = 70,
  BL_User_18 = 71,
  BL_User_19 = 72,
  BL_User_20 = 73,
  BL_User_21 = 74,
  BL_User_22 = 75,
  BL_User_23 = 76,
  BL_User_24 = 77,
  BL_User_25 = 78,
  BL_User_26 = 79,
  BL_User_27 = 80,
  BL_User_28 = 81,
  BL_User_29 = 82,
  BL_User_30 = 83,
  BL_User_31 = 84,
  BL_User_32 = 85,
  BL_User_33 = 86,
  BL_User_34 = 87,
  BL_User_35 = 88,
  BL_User_36 = 89,
  BL_User_37 = 90,
  BL_User_38 = 91,
  BL_User_39 = 92,
  BL_User_40 = 93,
  BL_User_41 = 94,
  BL_User_42 = 95,
  BL_User_43 = 96,
  BL_User_44 = 97,
  BL_User_45 = 98,
  BoardLayer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BoardLayer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool BoardLayer_IsValid(int value);
constexpr BoardLayer BoardLayer_MIN = BL_UNKNOWN;
constexpr BoardLayer BoardLayer_MAX = BL_User_45;
constexpr int BoardLayer_ARRAYSIZE = BoardLayer_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardLayer_descriptor();
template<typename T>
inline const std::string& BoardLayer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoardLayer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoardLayer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoardLayer_descriptor(), enum_t_value);
}
inline bool BoardLayer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoardLayer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoardLayer>(
    BoardLayer_descriptor(), name, value);
}
enum PadStackType : int {
  PST_UNKNOWN = 0,
  PST_NORMAL = 1,
  PST_FRONT_INNER_BACK = 2,
  PST_CUSTOM = 3,
  PadStackType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PadStackType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool PadStackType_IsValid(int value);
constexpr PadStackType PadStackType_MIN = PST_UNKNOWN;
constexpr PadStackType PadStackType_MAX = PST_CUSTOM;
constexpr int PadStackType_ARRAYSIZE = PadStackType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PadStackType_descriptor();
template<typename T>
inline const std::string& PadStackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PadStackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PadStackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PadStackType_descriptor(), enum_t_value);
}
inline bool PadStackType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PadStackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PadStackType>(
    PadStackType_descriptor(), name, value);
}
enum UnconnectedLayerRemoval : int {
  ULR_UNKNOWN = 0,
  ULR_KEEP = 1,
  ULR_REMOVE = 2,
  ULR_REMOVE_EXCEPT_START_AND_END = 3,
  UnconnectedLayerRemoval_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UnconnectedLayerRemoval_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool UnconnectedLayerRemoval_IsValid(int value);
constexpr UnconnectedLayerRemoval UnconnectedLayerRemoval_MIN = ULR_UNKNOWN;
constexpr UnconnectedLayerRemoval UnconnectedLayerRemoval_MAX = ULR_REMOVE_EXCEPT_START_AND_END;
constexpr int UnconnectedLayerRemoval_ARRAYSIZE = UnconnectedLayerRemoval_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnconnectedLayerRemoval_descriptor();
template<typename T>
inline const std::string& UnconnectedLayerRemoval_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnconnectedLayerRemoval>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnconnectedLayerRemoval_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnconnectedLayerRemoval_descriptor(), enum_t_value);
}
inline bool UnconnectedLayerRemoval_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnconnectedLayerRemoval* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnconnectedLayerRemoval>(
    UnconnectedLayerRemoval_descriptor(), name, value);
}
enum PadStackShape : int {
  PSS_UNKNOWN = 0,
  PSS_CIRCLE = 1,
  PSS_RECTANGLE = 2,
  PSS_OVAL = 3,
  PSS_TRAPEZOID = 4,
  PSS_ROUNDRECT = 5,
  PSS_CHAMFEREDRECT = 6,
  PSS_CUSTOM = 7,
  PadStackShape_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PadStackShape_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool PadStackShape_IsValid(int value);
constexpr PadStackShape PadStackShape_MIN = PSS_UNKNOWN;
constexpr PadStackShape PadStackShape_MAX = PSS_CUSTOM;
constexpr int PadStackShape_ARRAYSIZE = PadStackShape_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PadStackShape_descriptor();
template<typename T>
inline const std::string& PadStackShape_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PadStackShape>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PadStackShape_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PadStackShape_descriptor(), enum_t_value);
}
inline bool PadStackShape_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PadStackShape* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PadStackShape>(
    PadStackShape_descriptor(), name, value);
}
enum ZoneConnectionStyle : int {
  ZCS_UNKNOWN = 0,
  ZCS_INHERITED = 1,
  ZCS_NONE = 2,
  ZCS_THERMAL = 3,
  ZCS_FULL = 4,
  ZCS_PTH_THERMAL = 5,
  ZoneConnectionStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZoneConnectionStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ZoneConnectionStyle_IsValid(int value);
constexpr ZoneConnectionStyle ZoneConnectionStyle_MIN = ZCS_UNKNOWN;
constexpr ZoneConnectionStyle ZoneConnectionStyle_MAX = ZCS_PTH_THERMAL;
constexpr int ZoneConnectionStyle_ARRAYSIZE = ZoneConnectionStyle_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneConnectionStyle_descriptor();
template<typename T>
inline const std::string& ZoneConnectionStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZoneConnectionStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZoneConnectionStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZoneConnectionStyle_descriptor(), enum_t_value);
}
inline bool ZoneConnectionStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZoneConnectionStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZoneConnectionStyle>(
    ZoneConnectionStyle_descriptor(), name, value);
}
enum SolderMaskMode : int {
  SMM_UNKNOWN = 0,
  SMM_MASKED = 1,
  SMM_UNMASKED = 2,
  SMM_FROM_DESIGN_RULES = 3,
  SolderMaskMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SolderMaskMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool SolderMaskMode_IsValid(int value);
constexpr SolderMaskMode SolderMaskMode_MIN = SMM_UNKNOWN;
constexpr SolderMaskMode SolderMaskMode_MAX = SMM_FROM_DESIGN_RULES;
constexpr int SolderMaskMode_ARRAYSIZE = SolderMaskMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolderMaskMode_descriptor();
template<typename T>
inline const std::string& SolderMaskMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolderMaskMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolderMaskMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolderMaskMode_descriptor(), enum_t_value);
}
inline bool SolderMaskMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SolderMaskMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolderMaskMode>(
    SolderMaskMode_descriptor(), name, value);
}
enum ViaCoveringMode : int {
  VCM_UNKNOWN = 0,
  VCM_COVERED = 1,
  VCM_UNCOVERED = 2,
  VCM_FROM_DESIGN_RULES = 3,
  ViaCoveringMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ViaCoveringMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ViaCoveringMode_IsValid(int value);
constexpr ViaCoveringMode ViaCoveringMode_MIN = VCM_UNKNOWN;
constexpr ViaCoveringMode ViaCoveringMode_MAX = VCM_FROM_DESIGN_RULES;
constexpr int ViaCoveringMode_ARRAYSIZE = ViaCoveringMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaCoveringMode_descriptor();
template<typename T>
inline const std::string& ViaCoveringMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViaCoveringMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViaCoveringMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViaCoveringMode_descriptor(), enum_t_value);
}
inline bool ViaCoveringMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViaCoveringMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViaCoveringMode>(
    ViaCoveringMode_descriptor(), name, value);
}
enum ViaPluggingMode : int {
  VPM_UNKNOWN = 0,
  VPM_PLUGGED = 1,
  VPM_UNPLUGGED = 2,
  VPM_FROM_DESIGN_RULES = 3,
  ViaPluggingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ViaPluggingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ViaPluggingMode_IsValid(int value);
constexpr ViaPluggingMode ViaPluggingMode_MIN = VPM_UNKNOWN;
constexpr ViaPluggingMode ViaPluggingMode_MAX = VPM_FROM_DESIGN_RULES;
constexpr int ViaPluggingMode_ARRAYSIZE = ViaPluggingMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaPluggingMode_descriptor();
template<typename T>
inline const std::string& ViaPluggingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViaPluggingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViaPluggingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViaPluggingMode_descriptor(), enum_t_value);
}
inline bool ViaPluggingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViaPluggingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViaPluggingMode>(
    ViaPluggingMode_descriptor(), name, value);
}
enum SolderPasteMode : int {
  SPM_UNKNOWN = 0,
  SPM_PASTE = 1,
  SPM_NO_PASTE = 2,
  SPM_FROM_DESIGN_RULES = 3,
  SolderPasteMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SolderPasteMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool SolderPasteMode_IsValid(int value);
constexpr SolderPasteMode SolderPasteMode_MIN = SPM_UNKNOWN;
constexpr SolderPasteMode SolderPasteMode_MAX = SPM_FROM_DESIGN_RULES;
constexpr int SolderPasteMode_ARRAYSIZE = SolderPasteMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolderPasteMode_descriptor();
template<typename T>
inline const std::string& SolderPasteMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolderPasteMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolderPasteMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolderPasteMode_descriptor(), enum_t_value);
}
inline bool SolderPasteMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SolderPasteMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolderPasteMode>(
    SolderPasteMode_descriptor(), name, value);
}
enum DrillShape : int {
  DS_UNKNOWN = 0,
  DS_CIRCLE = 1,
  DS_OBLONG = 2,
  DS_UNDEFINED = 3,
  DrillShape_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DrillShape_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool DrillShape_IsValid(int value);
constexpr DrillShape DrillShape_MIN = DS_UNKNOWN;
constexpr DrillShape DrillShape_MAX = DS_UNDEFINED;
constexpr int DrillShape_ARRAYSIZE = DrillShape_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrillShape_descriptor();
template<typename T>
inline const std::string& DrillShape_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrillShape>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrillShape_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrillShape_descriptor(), enum_t_value);
}
inline bool DrillShape_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DrillShape* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrillShape>(
    DrillShape_descriptor(), name, value);
}
enum ViaDrillCappingMode : int {
  VDCM_UNKNOWN = 0,
  VDCM_CAPPED = 1,
  VDCM_UNCAPPED = 2,
  VDCM_FROM_DESIGN_RULES = 3,
  ViaDrillCappingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ViaDrillCappingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ViaDrillCappingMode_IsValid(int value);
constexpr ViaDrillCappingMode ViaDrillCappingMode_MIN = VDCM_UNKNOWN;
constexpr ViaDrillCappingMode ViaDrillCappingMode_MAX = VDCM_FROM_DESIGN_RULES;
constexpr int ViaDrillCappingMode_ARRAYSIZE = ViaDrillCappingMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaDrillCappingMode_descriptor();
template<typename T>
inline const std::string& ViaDrillCappingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViaDrillCappingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViaDrillCappingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViaDrillCappingMode_descriptor(), enum_t_value);
}
inline bool ViaDrillCappingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViaDrillCappingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViaDrillCappingMode>(
    ViaDrillCappingMode_descriptor(), name, value);
}
enum ViaDrillFillingMode : int {
  VDFM_UNKNOWN = 0,
  VDFM_FILLED = 1,
  VDFM_UNFILLED = 2,
  VDFM_FROM_DESIGN_RULES = 3,
  ViaDrillFillingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ViaDrillFillingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ViaDrillFillingMode_IsValid(int value);
constexpr ViaDrillFillingMode ViaDrillFillingMode_MIN = VDFM_UNKNOWN;
constexpr ViaDrillFillingMode ViaDrillFillingMode_MAX = VDFM_FROM_DESIGN_RULES;
constexpr int ViaDrillFillingMode_ARRAYSIZE = ViaDrillFillingMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaDrillFillingMode_descriptor();
template<typename T>
inline const std::string& ViaDrillFillingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViaDrillFillingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViaDrillFillingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViaDrillFillingMode_descriptor(), enum_t_value);
}
inline bool ViaDrillFillingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViaDrillFillingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViaDrillFillingMode>(
    ViaDrillFillingMode_descriptor(), name, value);
}
enum ViaType : int {
  VT_UNKNOWN = 0,
  VT_THROUGH = 1,
  VT_BLIND_BURIED = 2,
  VT_MICRO = 3,
  ViaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ViaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ViaType_IsValid(int value);
constexpr ViaType ViaType_MIN = VT_UNKNOWN;
constexpr ViaType ViaType_MAX = VT_MICRO;
constexpr int ViaType_ARRAYSIZE = ViaType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaType_descriptor();
template<typename T>
inline const std::string& ViaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViaType_descriptor(), enum_t_value);
}
inline bool ViaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViaType>(
    ViaType_descriptor(), name, value);
}
enum PadType : int {
  PT_UNKNOWN = 0,
  PT_PTH = 1,
  PT_SMD = 2,
  PT_EDGE_CONNECTOR = 3,
  PT_NPTH = 4,
  PadType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PadType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool PadType_IsValid(int value);
constexpr PadType PadType_MIN = PT_UNKNOWN;
constexpr PadType PadType_MAX = PT_NPTH;
constexpr int PadType_ARRAYSIZE = PadType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PadType_descriptor();
template<typename T>
inline const std::string& PadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PadType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PadType_descriptor(), enum_t_value);
}
inline bool PadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PadType>(
    PadType_descriptor(), name, value);
}
enum CustomPadShapeZoneFillStrategy : int {
  CPSZ_UNKNOWN = 0,
  CPSZ_OUTLINE = 1,
  CPSZ_CONVEXHULL = 2,
  CustomPadShapeZoneFillStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CustomPadShapeZoneFillStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool CustomPadShapeZoneFillStrategy_IsValid(int value);
constexpr CustomPadShapeZoneFillStrategy CustomPadShapeZoneFillStrategy_MIN = CPSZ_UNKNOWN;
constexpr CustomPadShapeZoneFillStrategy CustomPadShapeZoneFillStrategy_MAX = CPSZ_CONVEXHULL;
constexpr int CustomPadShapeZoneFillStrategy_ARRAYSIZE = CustomPadShapeZoneFillStrategy_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CustomPadShapeZoneFillStrategy_descriptor();
template<typename T>
inline const std::string& CustomPadShapeZoneFillStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CustomPadShapeZoneFillStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CustomPadShapeZoneFillStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CustomPadShapeZoneFillStrategy_descriptor(), enum_t_value);
}
inline bool CustomPadShapeZoneFillStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CustomPadShapeZoneFillStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CustomPadShapeZoneFillStrategy>(
    CustomPadShapeZoneFillStrategy_descriptor(), name, value);
}
enum ZoneType : int {
  ZT_UNKNOWN = 0,
  ZT_COPPER = 1,
  ZT_GRAPHICAL = 2,
  ZT_RULE_AREA = 3,
  ZT_TEARDROP = 4,
  ZoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ZoneType_IsValid(int value);
constexpr ZoneType ZoneType_MIN = ZT_UNKNOWN;
constexpr ZoneType ZoneType_MAX = ZT_TEARDROP;
constexpr int ZoneType_ARRAYSIZE = ZoneType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneType_descriptor();
template<typename T>
inline const std::string& ZoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZoneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZoneType_descriptor(), enum_t_value);
}
inline bool ZoneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZoneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZoneType>(
    ZoneType_descriptor(), name, value);
}
enum TeardropType : int {
  TDT_UNKNOWN = 0,
  TDT_NONE = 1,
  TDT_UNSPECIFIED = 2,
  TDT_VIA_PAD = 3,
  TDT_TRACK_END = 4,
  TeardropType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TeardropType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool TeardropType_IsValid(int value);
constexpr TeardropType TeardropType_MIN = TDT_UNKNOWN;
constexpr TeardropType TeardropType_MAX = TDT_TRACK_END;
constexpr int TeardropType_ARRAYSIZE = TeardropType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeardropType_descriptor();
template<typename T>
inline const std::string& TeardropType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeardropType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeardropType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeardropType_descriptor(), enum_t_value);
}
inline bool TeardropType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TeardropType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeardropType>(
    TeardropType_descriptor(), name, value);
}
enum IslandRemovalMode : int {
  IRM_UNKNOWN = 0,
  IRM_ALWAYS = 1,
  IRM_NEVER = 2,
  IRM_AREA = 3,
  IslandRemovalMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IslandRemovalMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool IslandRemovalMode_IsValid(int value);
constexpr IslandRemovalMode IslandRemovalMode_MIN = IRM_UNKNOWN;
constexpr IslandRemovalMode IslandRemovalMode_MAX = IRM_AREA;
constexpr int IslandRemovalMode_ARRAYSIZE = IslandRemovalMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IslandRemovalMode_descriptor();
template<typename T>
inline const std::string& IslandRemovalMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IslandRemovalMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IslandRemovalMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IslandRemovalMode_descriptor(), enum_t_value);
}
inline bool IslandRemovalMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IslandRemovalMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IslandRemovalMode>(
    IslandRemovalMode_descriptor(), name, value);
}
enum ZoneFillMode : int {
  ZFM_UNKNOWN = 0,
  ZFM_SOLID = 1,
  ZFM_HATCHED = 2,
  ZoneFillMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZoneFillMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ZoneFillMode_IsValid(int value);
constexpr ZoneFillMode ZoneFillMode_MIN = ZFM_UNKNOWN;
constexpr ZoneFillMode ZoneFillMode_MAX = ZFM_HATCHED;
constexpr int ZoneFillMode_ARRAYSIZE = ZoneFillMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneFillMode_descriptor();
template<typename T>
inline const std::string& ZoneFillMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZoneFillMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZoneFillMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZoneFillMode_descriptor(), enum_t_value);
}
inline bool ZoneFillMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZoneFillMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZoneFillMode>(
    ZoneFillMode_descriptor(), name, value);
}
enum ZoneHatchSmoothing : int {
  ZHS_UNKNOWN = 0,
  ZHS_NONE = 1,
  ZHS_FILLET = 2,
  ZHS_ARC_LOW_DEF = 3,
  ZHS_ARC_HIGH_DEF = 4,
  ZoneHatchSmoothing_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZoneHatchSmoothing_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ZoneHatchSmoothing_IsValid(int value);
constexpr ZoneHatchSmoothing ZoneHatchSmoothing_MIN = ZHS_UNKNOWN;
constexpr ZoneHatchSmoothing ZoneHatchSmoothing_MAX = ZHS_ARC_HIGH_DEF;
constexpr int ZoneHatchSmoothing_ARRAYSIZE = ZoneHatchSmoothing_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneHatchSmoothing_descriptor();
template<typename T>
inline const std::string& ZoneHatchSmoothing_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZoneHatchSmoothing>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZoneHatchSmoothing_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZoneHatchSmoothing_descriptor(), enum_t_value);
}
inline bool ZoneHatchSmoothing_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZoneHatchSmoothing* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZoneHatchSmoothing>(
    ZoneHatchSmoothing_descriptor(), name, value);
}
enum ZoneHatchFillBorderMode : int {
  ZHFBM_UNKNOWN = 0,
  ZHFBM_USE_MIN_ZONE_THICKNESS = 1,
  ZHFBM_USE_HATCH_THICKNESS = 2,
  ZoneHatchFillBorderMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZoneHatchFillBorderMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ZoneHatchFillBorderMode_IsValid(int value);
constexpr ZoneHatchFillBorderMode ZoneHatchFillBorderMode_MIN = ZHFBM_UNKNOWN;
constexpr ZoneHatchFillBorderMode ZoneHatchFillBorderMode_MAX = ZHFBM_USE_HATCH_THICKNESS;
constexpr int ZoneHatchFillBorderMode_ARRAYSIZE = ZoneHatchFillBorderMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneHatchFillBorderMode_descriptor();
template<typename T>
inline const std::string& ZoneHatchFillBorderMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZoneHatchFillBorderMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZoneHatchFillBorderMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZoneHatchFillBorderMode_descriptor(), enum_t_value);
}
inline bool ZoneHatchFillBorderMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZoneHatchFillBorderMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZoneHatchFillBorderMode>(
    ZoneHatchFillBorderMode_descriptor(), name, value);
}
enum PlacementRuleSourceType : int {
  PRST_UNKNOWN = 0,
  PRST_SHEET_NAME = 1,
  PRST_COMPONENT_CLASS = 2,
  PlacementRuleSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlacementRuleSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool PlacementRuleSourceType_IsValid(int value);
constexpr PlacementRuleSourceType PlacementRuleSourceType_MIN = PRST_UNKNOWN;
constexpr PlacementRuleSourceType PlacementRuleSourceType_MAX = PRST_COMPONENT_CLASS;
constexpr int PlacementRuleSourceType_ARRAYSIZE = PlacementRuleSourceType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlacementRuleSourceType_descriptor();
template<typename T>
inline const std::string& PlacementRuleSourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlacementRuleSourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlacementRuleSourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlacementRuleSourceType_descriptor(), enum_t_value);
}
inline bool PlacementRuleSourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlacementRuleSourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlacementRuleSourceType>(
    PlacementRuleSourceType_descriptor(), name, value);
}
enum ZoneBorderStyle : int {
  ZBS_UNKNOWN = 0,
  ZBS_SOLID = 1,
  ZBS_DIAGONAL_FULL = 2,
  ZBS_DIAGONAL_EDGE = 3,
  ZBS_INVISIBLE = 4,
  ZoneBorderStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZoneBorderStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool ZoneBorderStyle_IsValid(int value);
constexpr ZoneBorderStyle ZoneBorderStyle_MIN = ZBS_UNKNOWN;
constexpr ZoneBorderStyle ZoneBorderStyle_MAX = ZBS_INVISIBLE;
constexpr int ZoneBorderStyle_ARRAYSIZE = ZoneBorderStyle_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneBorderStyle_descriptor();
template<typename T>
inline const std::string& ZoneBorderStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZoneBorderStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZoneBorderStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZoneBorderStyle_descriptor(), enum_t_value);
}
inline bool ZoneBorderStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZoneBorderStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZoneBorderStyle>(
    ZoneBorderStyle_descriptor(), name, value);
}
enum DimensionTextBorderStyle : int {
  DTBS_UNKNOWN = 0,
  DTBS_NONE = 1,
  DTBS_RECTANGLE = 2,
  DTBS_CIRCLE = 3,
  DTBS_ROUNDRECT = 4,
  DimensionTextBorderStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DimensionTextBorderStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool DimensionTextBorderStyle_IsValid(int value);
constexpr DimensionTextBorderStyle DimensionTextBorderStyle_MIN = DTBS_UNKNOWN;
constexpr DimensionTextBorderStyle DimensionTextBorderStyle_MAX = DTBS_ROUNDRECT;
constexpr int DimensionTextBorderStyle_ARRAYSIZE = DimensionTextBorderStyle_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionTextBorderStyle_descriptor();
template<typename T>
inline const std::string& DimensionTextBorderStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionTextBorderStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionTextBorderStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionTextBorderStyle_descriptor(), enum_t_value);
}
inline bool DimensionTextBorderStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DimensionTextBorderStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionTextBorderStyle>(
    DimensionTextBorderStyle_descriptor(), name, value);
}
enum DimensionUnitFormat : int {
  DUF_UNKNOWN = 0,
  DUF_NO_SUFFIX = 1,
  DUF_BARE_SUFFIX = 2,
  DUF_PAREN_SUFFIX = 3,
  DimensionUnitFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DimensionUnitFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool DimensionUnitFormat_IsValid(int value);
constexpr DimensionUnitFormat DimensionUnitFormat_MIN = DUF_UNKNOWN;
constexpr DimensionUnitFormat DimensionUnitFormat_MAX = DUF_PAREN_SUFFIX;
constexpr int DimensionUnitFormat_ARRAYSIZE = DimensionUnitFormat_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionUnitFormat_descriptor();
template<typename T>
inline const std::string& DimensionUnitFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionUnitFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionUnitFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionUnitFormat_descriptor(), enum_t_value);
}
inline bool DimensionUnitFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DimensionUnitFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionUnitFormat>(
    DimensionUnitFormat_descriptor(), name, value);
}
enum DimensionArrowDirection : int {
  DAD_UNKNOWN = 0,
  DAD_INWARD = 1,
  DAD_OUTWARD = 2,
  DimensionArrowDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DimensionArrowDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool DimensionArrowDirection_IsValid(int value);
constexpr DimensionArrowDirection DimensionArrowDirection_MIN = DAD_UNKNOWN;
constexpr DimensionArrowDirection DimensionArrowDirection_MAX = DAD_OUTWARD;
constexpr int DimensionArrowDirection_ARRAYSIZE = DimensionArrowDirection_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionArrowDirection_descriptor();
template<typename T>
inline const std::string& DimensionArrowDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionArrowDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionArrowDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionArrowDirection_descriptor(), enum_t_value);
}
inline bool DimensionArrowDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DimensionArrowDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionArrowDirection>(
    DimensionArrowDirection_descriptor(), name, value);
}
enum DimensionPrecision : int {
  DP_UNKNOWN = 0,
  DP_FIXED_0 = 1,
  DP_FIXED_1 = 2,
  DP_FIXED_2 = 3,
  DP_FIXED_3 = 4,
  DP_FIXED_4 = 5,
  DP_FIXED_5 = 6,
  DP_SCALED_IN_2 = 7,
  DP_SCALED_IN_3 = 8,
  DP_SCALED_IN_4 = 9,
  DP_SCALED_IN_5 = 10,
  DimensionPrecision_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DimensionPrecision_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool DimensionPrecision_IsValid(int value);
constexpr DimensionPrecision DimensionPrecision_MIN = DP_UNKNOWN;
constexpr DimensionPrecision DimensionPrecision_MAX = DP_SCALED_IN_5;
constexpr int DimensionPrecision_ARRAYSIZE = DimensionPrecision_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionPrecision_descriptor();
template<typename T>
inline const std::string& DimensionPrecision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionPrecision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionPrecision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionPrecision_descriptor(), enum_t_value);
}
inline bool DimensionPrecision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DimensionPrecision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionPrecision>(
    DimensionPrecision_descriptor(), name, value);
}
enum DimensionTextPosition : int {
  DTP_UNKNOWN = 0,
  DTP_OUTSIDE = 1,
  DTP_INLINE = 2,
  DTP_MANUAL = 3,
  DimensionTextPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DimensionTextPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool DimensionTextPosition_IsValid(int value);
constexpr DimensionTextPosition DimensionTextPosition_MIN = DTP_UNKNOWN;
constexpr DimensionTextPosition DimensionTextPosition_MAX = DTP_MANUAL;
constexpr int DimensionTextPosition_ARRAYSIZE = DimensionTextPosition_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionTextPosition_descriptor();
template<typename T>
inline const std::string& DimensionTextPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionTextPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionTextPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionTextPosition_descriptor(), enum_t_value);
}
inline bool DimensionTextPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DimensionTextPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionTextPosition>(
    DimensionTextPosition_descriptor(), name, value);
}
enum DimensionUnit : int {
  DU_UNKNOWN = 0,
  DU_INCHES = 1,
  DU_MILS = 2,
  DU_MILLIMETERS = 3,
  DU_AUTOMATIC = 4,
  DimensionUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DimensionUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool DimensionUnit_IsValid(int value);
constexpr DimensionUnit DimensionUnit_MIN = DU_UNKNOWN;
constexpr DimensionUnit DimensionUnit_MAX = DU_AUTOMATIC;
constexpr int DimensionUnit_ARRAYSIZE = DimensionUnit_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionUnit_descriptor();
template<typename T>
inline const std::string& DimensionUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionUnit_descriptor(), enum_t_value);
}
inline bool DimensionUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DimensionUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionUnit>(
    DimensionUnit_descriptor(), name, value);
}
enum FootprintMountingStyle : int {
  FMS_UNKNOWN = 0,
  FMS_THROUGH_HOLE = 1,
  FMS_SMD = 2,
  FMS_UNSPECIFIED = 3,
  FootprintMountingStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FootprintMountingStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool FootprintMountingStyle_IsValid(int value);
constexpr FootprintMountingStyle FootprintMountingStyle_MIN = FMS_UNKNOWN;
constexpr FootprintMountingStyle FootprintMountingStyle_MAX = FMS_UNSPECIFIED;
constexpr int FootprintMountingStyle_ARRAYSIZE = FootprintMountingStyle_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FootprintMountingStyle_descriptor();
template<typename T>
inline const std::string& FootprintMountingStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FootprintMountingStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FootprintMountingStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FootprintMountingStyle_descriptor(), enum_t_value);
}
inline bool FootprintMountingStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FootprintMountingStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FootprintMountingStyle>(
    FootprintMountingStyle_descriptor(), name, value);
}
// ===================================================================

class KIAPI_IMPORTEXPORT NetCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.NetCode) */ {
 public:
  inline NetCode() : NetCode(nullptr) {}
  ~NetCode() override;
  explicit constexpr NetCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetCode(const NetCode& from);
  NetCode(NetCode&& from) noexcept
    : NetCode() {
    *this = ::std::move(from);
  }

  inline NetCode& operator=(const NetCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetCode& operator=(NetCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetCode* internal_default_instance() {
    return reinterpret_cast<const NetCode*>(
               &_NetCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetCode& a, NetCode& b) {
    a.Swap(&b);
  }
  inline void Swap(NetCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.NetCode";
  }
  protected:
  explicit NetCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.NetCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Net final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Net) */ {
 public:
  inline Net() : Net(nullptr) {}
  ~Net() override;
  explicit constexpr Net(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Net(const Net& from);
  Net(Net&& from) noexcept
    : Net() {
    *this = ::std::move(from);
  }

  inline Net& operator=(const Net& from) {
    CopyFrom(from);
    return *this;
  }
  inline Net& operator=(Net&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Net& default_instance() {
    return *internal_default_instance();
  }
  static inline const Net* internal_default_instance() {
    return reinterpret_cast<const Net*>(
               &_Net_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Net& a, Net& b) {
    a.Swap(&b);
  }
  inline void Swap(Net* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Net* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Net* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Net>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Net& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Net& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Net* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Net";
  }
  protected:
  explicit Net(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .kiapi.board.types.NetCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::kiapi::board::types::NetCode& code() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::NetCode* release_code();
  ::kiapi::board::types::NetCode* mutable_code();
  void set_allocated_code(::kiapi::board::types::NetCode* code);
  private:
  const ::kiapi::board::types::NetCode& _internal_code() const;
  ::kiapi::board::types::NetCode* _internal_mutable_code();
  public:
  void unsafe_arena_set_allocated_code(
      ::kiapi::board::types::NetCode* code);
  ::kiapi::board::types::NetCode* unsafe_arena_release_code();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Net)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::kiapi::board::types::NetCode* code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Track final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Track) */ {
 public:
  inline Track() : Track(nullptr) {}
  ~Track() override;
  explicit constexpr Track(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Track(const Track& from);
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track& operator=(Track&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Track& default_instance() {
    return *internal_default_instance();
  }
  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }
  inline void Swap(Track* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Track* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Track& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Track& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Track";
  }
  protected:
  explicit Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kWidthFieldNumber = 4,
    kNetFieldNumber = 7,
    kLockedFieldNumber = 5,
    kLayerFieldNumber = 6,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::kiapi::common::types::Vector2& start() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_start();
  ::kiapi::common::types::Vector2* mutable_start();
  void set_allocated_start(::kiapi::common::types::Vector2* start);
  private:
  const ::kiapi::common::types::Vector2& _internal_start() const;
  ::kiapi::common::types::Vector2* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::kiapi::common::types::Vector2* start);
  ::kiapi::common::types::Vector2* unsafe_arena_release_start();

  // .kiapi.common.types.Vector2 end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::kiapi::common::types::Vector2& end() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_end();
  ::kiapi::common::types::Vector2* mutable_end();
  void set_allocated_end(::kiapi::common::types::Vector2* end);
  private:
  const ::kiapi::common::types::Vector2& _internal_end() const;
  ::kiapi::common::types::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::kiapi::common::types::Vector2* end);
  ::kiapi::common::types::Vector2* unsafe_arena_release_end();

  // .kiapi.common.types.Distance width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::kiapi::common::types::Distance& width() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_width();
  ::kiapi::common::types::Distance* mutable_width();
  void set_allocated_width(::kiapi::common::types::Distance* width);
  private:
  const ::kiapi::common::types::Distance& _internal_width() const;
  ::kiapi::common::types::Distance* _internal_mutable_width();
  public:
  void unsafe_arena_set_allocated_width(
      ::kiapi::common::types::Distance* width);
  ::kiapi::common::types::Distance* unsafe_arena_release_width();

  // .kiapi.board.types.Net net = 7;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::kiapi::board::types::Net& net() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Net* release_net();
  ::kiapi::board::types::Net* mutable_net();
  void set_allocated_net(::kiapi::board::types::Net* net);
  private:
  const ::kiapi::board::types::Net& _internal_net() const;
  ::kiapi::board::types::Net* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::kiapi::board::types::Net* net);
  ::kiapi::board::types::Net* unsafe_arena_release_net();

  // .kiapi.common.types.LockedState locked = 5;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // .kiapi.board.types.BoardLayer layer = 6;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Track)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* start_;
  ::kiapi::common::types::Vector2* end_;
  ::kiapi::common::types::Distance* width_;
  ::kiapi::board::types::Net* net_;
  int locked_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Arc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Arc) */ {
 public:
  inline Arc() : Arc(nullptr) {}
  ~Arc() override;
  explicit constexpr Arc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Arc(const Arc& from);
  Arc(Arc&& from) noexcept
    : Arc() {
    *this = ::std::move(from);
  }

  inline Arc& operator=(const Arc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Arc& operator=(Arc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Arc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Arc* internal_default_instance() {
    return reinterpret_cast<const Arc*>(
               &_Arc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Arc& a, Arc& b) {
    a.Swap(&b);
  }
  inline void Swap(Arc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Arc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Arc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Arc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Arc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Arc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Arc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Arc";
  }
  protected:
  explicit Arc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStartFieldNumber = 2,
    kMidFieldNumber = 3,
    kEndFieldNumber = 4,
    kWidthFieldNumber = 5,
    kNetFieldNumber = 8,
    kLockedFieldNumber = 6,
    kLayerFieldNumber = 7,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::kiapi::common::types::Vector2& start() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_start();
  ::kiapi::common::types::Vector2* mutable_start();
  void set_allocated_start(::kiapi::common::types::Vector2* start);
  private:
  const ::kiapi::common::types::Vector2& _internal_start() const;
  ::kiapi::common::types::Vector2* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::kiapi::common::types::Vector2* start);
  ::kiapi::common::types::Vector2* unsafe_arena_release_start();

  // .kiapi.common.types.Vector2 mid = 3;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  const ::kiapi::common::types::Vector2& mid() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_mid();
  ::kiapi::common::types::Vector2* mutable_mid();
  void set_allocated_mid(::kiapi::common::types::Vector2* mid);
  private:
  const ::kiapi::common::types::Vector2& _internal_mid() const;
  ::kiapi::common::types::Vector2* _internal_mutable_mid();
  public:
  void unsafe_arena_set_allocated_mid(
      ::kiapi::common::types::Vector2* mid);
  ::kiapi::common::types::Vector2* unsafe_arena_release_mid();

  // .kiapi.common.types.Vector2 end = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::kiapi::common::types::Vector2& end() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_end();
  ::kiapi::common::types::Vector2* mutable_end();
  void set_allocated_end(::kiapi::common::types::Vector2* end);
  private:
  const ::kiapi::common::types::Vector2& _internal_end() const;
  ::kiapi::common::types::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::kiapi::common::types::Vector2* end);
  ::kiapi::common::types::Vector2* unsafe_arena_release_end();

  // .kiapi.common.types.Distance width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::kiapi::common::types::Distance& width() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_width();
  ::kiapi::common::types::Distance* mutable_width();
  void set_allocated_width(::kiapi::common::types::Distance* width);
  private:
  const ::kiapi::common::types::Distance& _internal_width() const;
  ::kiapi::common::types::Distance* _internal_mutable_width();
  public:
  void unsafe_arena_set_allocated_width(
      ::kiapi::common::types::Distance* width);
  ::kiapi::common::types::Distance* unsafe_arena_release_width();

  // .kiapi.board.types.Net net = 8;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::kiapi::board::types::Net& net() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Net* release_net();
  ::kiapi::board::types::Net* mutable_net();
  void set_allocated_net(::kiapi::board::types::Net* net);
  private:
  const ::kiapi::board::types::Net& _internal_net() const;
  ::kiapi::board::types::Net* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::kiapi::board::types::Net* net);
  ::kiapi::board::types::Net* unsafe_arena_release_net();

  // .kiapi.common.types.LockedState locked = 6;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // .kiapi.board.types.BoardLayer layer = 7;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Arc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* start_;
  ::kiapi::common::types::Vector2* mid_;
  ::kiapi::common::types::Vector2* end_;
  ::kiapi::common::types::Distance* width_;
  ::kiapi::board::types::Net* net_;
  int locked_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ChamferedRectCorners final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.ChamferedRectCorners) */ {
 public:
  inline ChamferedRectCorners() : ChamferedRectCorners(nullptr) {}
  ~ChamferedRectCorners() override;
  explicit constexpr ChamferedRectCorners(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChamferedRectCorners(const ChamferedRectCorners& from);
  ChamferedRectCorners(ChamferedRectCorners&& from) noexcept
    : ChamferedRectCorners() {
    *this = ::std::move(from);
  }

  inline ChamferedRectCorners& operator=(const ChamferedRectCorners& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChamferedRectCorners& operator=(ChamferedRectCorners&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChamferedRectCorners& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChamferedRectCorners* internal_default_instance() {
    return reinterpret_cast<const ChamferedRectCorners*>(
               &_ChamferedRectCorners_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChamferedRectCorners& a, ChamferedRectCorners& b) {
    a.Swap(&b);
  }
  inline void Swap(ChamferedRectCorners* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChamferedRectCorners* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChamferedRectCorners* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChamferedRectCorners>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChamferedRectCorners& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChamferedRectCorners& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChamferedRectCorners* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.ChamferedRectCorners";
  }
  protected:
  explicit ChamferedRectCorners(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftFieldNumber = 1,
    kTopRightFieldNumber = 2,
    kBottomLeftFieldNumber = 3,
    kBottomRightFieldNumber = 4,
  };
  // bool top_left = 1;
  void clear_top_left();
  bool top_left() const;
  void set_top_left(bool value);
  private:
  bool _internal_top_left() const;
  void _internal_set_top_left(bool value);
  public:

  // bool top_right = 2;
  void clear_top_right();
  bool top_right() const;
  void set_top_right(bool value);
  private:
  bool _internal_top_right() const;
  void _internal_set_top_right(bool value);
  public:

  // bool bottom_left = 3;
  void clear_bottom_left();
  bool bottom_left() const;
  void set_bottom_left(bool value);
  private:
  bool _internal_bottom_left() const;
  void _internal_set_bottom_left(bool value);
  public:

  // bool bottom_right = 4;
  void clear_bottom_right();
  bool bottom_right() const;
  void set_bottom_right(bool value);
  private:
  bool _internal_bottom_right() const;
  void _internal_set_bottom_right(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.ChamferedRectCorners)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool top_left_;
  bool top_right_;
  bool bottom_left_;
  bool bottom_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ZoneConnectionSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.ZoneConnectionSettings) */ {
 public:
  inline ZoneConnectionSettings() : ZoneConnectionSettings(nullptr) {}
  ~ZoneConnectionSettings() override;
  explicit constexpr ZoneConnectionSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoneConnectionSettings(const ZoneConnectionSettings& from);
  ZoneConnectionSettings(ZoneConnectionSettings&& from) noexcept
    : ZoneConnectionSettings() {
    *this = ::std::move(from);
  }

  inline ZoneConnectionSettings& operator=(const ZoneConnectionSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneConnectionSettings& operator=(ZoneConnectionSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneConnectionSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneConnectionSettings* internal_default_instance() {
    return reinterpret_cast<const ZoneConnectionSettings*>(
               &_ZoneConnectionSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ZoneConnectionSettings& a, ZoneConnectionSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoneConnectionSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneConnectionSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneConnectionSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoneConnectionSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoneConnectionSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZoneConnectionSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoneConnectionSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.ZoneConnectionSettings";
  }
  protected:
  explicit ZoneConnectionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThermalSpokesFieldNumber = 2,
    kZoneConnectionFieldNumber = 1,
  };
  // .kiapi.board.types.ThermalSpokeSettings thermal_spokes = 2;
  bool has_thermal_spokes() const;
  private:
  bool _internal_has_thermal_spokes() const;
  public:
  void clear_thermal_spokes();
  const ::kiapi::board::types::ThermalSpokeSettings& thermal_spokes() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::ThermalSpokeSettings* release_thermal_spokes();
  ::kiapi::board::types::ThermalSpokeSettings* mutable_thermal_spokes();
  void set_allocated_thermal_spokes(::kiapi::board::types::ThermalSpokeSettings* thermal_spokes);
  private:
  const ::kiapi::board::types::ThermalSpokeSettings& _internal_thermal_spokes() const;
  ::kiapi::board::types::ThermalSpokeSettings* _internal_mutable_thermal_spokes();
  public:
  void unsafe_arena_set_allocated_thermal_spokes(
      ::kiapi::board::types::ThermalSpokeSettings* thermal_spokes);
  ::kiapi::board::types::ThermalSpokeSettings* unsafe_arena_release_thermal_spokes();

  // .kiapi.board.types.ZoneConnectionStyle zone_connection = 1;
  void clear_zone_connection();
  ::kiapi::board::types::ZoneConnectionStyle zone_connection() const;
  void set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value);
  private:
  ::kiapi::board::types::ZoneConnectionStyle _internal_zone_connection() const;
  void _internal_set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.ZoneConnectionSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::types::ThermalSpokeSettings* thermal_spokes_;
  int zone_connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SolderMaskOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.SolderMaskOverrides) */ {
 public:
  inline SolderMaskOverrides() : SolderMaskOverrides(nullptr) {}
  ~SolderMaskOverrides() override;
  explicit constexpr SolderMaskOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolderMaskOverrides(const SolderMaskOverrides& from);
  SolderMaskOverrides(SolderMaskOverrides&& from) noexcept
    : SolderMaskOverrides() {
    *this = ::std::move(from);
  }

  inline SolderMaskOverrides& operator=(const SolderMaskOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolderMaskOverrides& operator=(SolderMaskOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolderMaskOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolderMaskOverrides* internal_default_instance() {
    return reinterpret_cast<const SolderMaskOverrides*>(
               &_SolderMaskOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SolderMaskOverrides& a, SolderMaskOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(SolderMaskOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolderMaskOverrides* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolderMaskOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolderMaskOverrides>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolderMaskOverrides& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SolderMaskOverrides& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolderMaskOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.SolderMaskOverrides";
  }
  protected:
  explicit SolderMaskOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolderMaskMarginFieldNumber = 1,
  };
  // .kiapi.common.types.Distance solder_mask_margin = 1;
  bool has_solder_mask_margin() const;
  private:
  bool _internal_has_solder_mask_margin() const;
  public:
  void clear_solder_mask_margin();
  const ::kiapi::common::types::Distance& solder_mask_margin() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_solder_mask_margin();
  ::kiapi::common::types::Distance* mutable_solder_mask_margin();
  void set_allocated_solder_mask_margin(::kiapi::common::types::Distance* solder_mask_margin);
  private:
  const ::kiapi::common::types::Distance& _internal_solder_mask_margin() const;
  ::kiapi::common::types::Distance* _internal_mutable_solder_mask_margin();
  public:
  void unsafe_arena_set_allocated_solder_mask_margin(
      ::kiapi::common::types::Distance* solder_mask_margin);
  ::kiapi::common::types::Distance* unsafe_arena_release_solder_mask_margin();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.SolderMaskOverrides)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Distance* solder_mask_margin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SolderPasteOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.SolderPasteOverrides) */ {
 public:
  inline SolderPasteOverrides() : SolderPasteOverrides(nullptr) {}
  ~SolderPasteOverrides() override;
  explicit constexpr SolderPasteOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolderPasteOverrides(const SolderPasteOverrides& from);
  SolderPasteOverrides(SolderPasteOverrides&& from) noexcept
    : SolderPasteOverrides() {
    *this = ::std::move(from);
  }

  inline SolderPasteOverrides& operator=(const SolderPasteOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolderPasteOverrides& operator=(SolderPasteOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolderPasteOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolderPasteOverrides* internal_default_instance() {
    return reinterpret_cast<const SolderPasteOverrides*>(
               &_SolderPasteOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SolderPasteOverrides& a, SolderPasteOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(SolderPasteOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolderPasteOverrides* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolderPasteOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolderPasteOverrides>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolderPasteOverrides& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SolderPasteOverrides& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolderPasteOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.SolderPasteOverrides";
  }
  protected:
  explicit SolderPasteOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolderPasteMarginFieldNumber = 1,
    kSolderPasteMarginRatioFieldNumber = 2,
  };
  // .kiapi.common.types.Distance solder_paste_margin = 1;
  bool has_solder_paste_margin() const;
  private:
  bool _internal_has_solder_paste_margin() const;
  public:
  void clear_solder_paste_margin();
  const ::kiapi::common::types::Distance& solder_paste_margin() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_solder_paste_margin();
  ::kiapi::common::types::Distance* mutable_solder_paste_margin();
  void set_allocated_solder_paste_margin(::kiapi::common::types::Distance* solder_paste_margin);
  private:
  const ::kiapi::common::types::Distance& _internal_solder_paste_margin() const;
  ::kiapi::common::types::Distance* _internal_mutable_solder_paste_margin();
  public:
  void unsafe_arena_set_allocated_solder_paste_margin(
      ::kiapi::common::types::Distance* solder_paste_margin);
  ::kiapi::common::types::Distance* unsafe_arena_release_solder_paste_margin();

  // .kiapi.common.types.Ratio solder_paste_margin_ratio = 2;
  bool has_solder_paste_margin_ratio() const;
  private:
  bool _internal_has_solder_paste_margin_ratio() const;
  public:
  void clear_solder_paste_margin_ratio();
  const ::kiapi::common::types::Ratio& solder_paste_margin_ratio() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Ratio* release_solder_paste_margin_ratio();
  ::kiapi::common::types::Ratio* mutable_solder_paste_margin_ratio();
  void set_allocated_solder_paste_margin_ratio(::kiapi::common::types::Ratio* solder_paste_margin_ratio);
  private:
  const ::kiapi::common::types::Ratio& _internal_solder_paste_margin_ratio() const;
  ::kiapi::common::types::Ratio* _internal_mutable_solder_paste_margin_ratio();
  public:
  void unsafe_arena_set_allocated_solder_paste_margin_ratio(
      ::kiapi::common::types::Ratio* solder_paste_margin_ratio);
  ::kiapi::common::types::Ratio* unsafe_arena_release_solder_paste_margin_ratio();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.SolderPasteOverrides)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Distance* solder_paste_margin_;
  ::kiapi::common::types::Ratio* solder_paste_margin_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT PadStackLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.PadStackLayer) */ {
 public:
  inline PadStackLayer() : PadStackLayer(nullptr) {}
  ~PadStackLayer() override;
  explicit constexpr PadStackLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PadStackLayer(const PadStackLayer& from);
  PadStackLayer(PadStackLayer&& from) noexcept
    : PadStackLayer() {
    *this = ::std::move(from);
  }

  inline PadStackLayer& operator=(const PadStackLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PadStackLayer& operator=(PadStackLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PadStackLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const PadStackLayer* internal_default_instance() {
    return reinterpret_cast<const PadStackLayer*>(
               &_PadStackLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PadStackLayer& a, PadStackLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(PadStackLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PadStackLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PadStackLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PadStackLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PadStackLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PadStackLayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PadStackLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.PadStackLayer";
  }
  protected:
  explicit PadStackLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomShapesFieldNumber = 7,
    kSizeFieldNumber = 3,
    kChamferedCornersFieldNumber = 6,
    kZoneSettingsFieldNumber = 9,
    kTrapezoidDeltaFieldNumber = 10,
    kOffsetFieldNumber = 11,
    kLayerFieldNumber = 1,
    kShapeFieldNumber = 2,
    kCornerRoundingRatioFieldNumber = 4,
    kChamferRatioFieldNumber = 5,
    kCustomAnchorShapeFieldNumber = 8,
  };
  // repeated .kiapi.board.types.BoardGraphicShape custom_shapes = 7;
  int custom_shapes_size() const;
  private:
  int _internal_custom_shapes_size() const;
  public:
  void clear_custom_shapes();
  ::kiapi::board::types::BoardGraphicShape* mutable_custom_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::BoardGraphicShape >*
      mutable_custom_shapes();
  private:
  const ::kiapi::board::types::BoardGraphicShape& _internal_custom_shapes(int index) const;
  ::kiapi::board::types::BoardGraphicShape* _internal_add_custom_shapes();
  public:
  const ::kiapi::board::types::BoardGraphicShape& custom_shapes(int index) const;
  ::kiapi::board::types::BoardGraphicShape* add_custom_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::BoardGraphicShape >&
      custom_shapes() const;

  // .kiapi.common.types.Vector2 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::kiapi::common::types::Vector2& size() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_size();
  ::kiapi::common::types::Vector2* mutable_size();
  void set_allocated_size(::kiapi::common::types::Vector2* size);
  private:
  const ::kiapi::common::types::Vector2& _internal_size() const;
  ::kiapi::common::types::Vector2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::kiapi::common::types::Vector2* size);
  ::kiapi::common::types::Vector2* unsafe_arena_release_size();

  // .kiapi.board.types.ChamferedRectCorners chamfered_corners = 6;
  bool has_chamfered_corners() const;
  private:
  bool _internal_has_chamfered_corners() const;
  public:
  void clear_chamfered_corners();
  const ::kiapi::board::types::ChamferedRectCorners& chamfered_corners() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::ChamferedRectCorners* release_chamfered_corners();
  ::kiapi::board::types::ChamferedRectCorners* mutable_chamfered_corners();
  void set_allocated_chamfered_corners(::kiapi::board::types::ChamferedRectCorners* chamfered_corners);
  private:
  const ::kiapi::board::types::ChamferedRectCorners& _internal_chamfered_corners() const;
  ::kiapi::board::types::ChamferedRectCorners* _internal_mutable_chamfered_corners();
  public:
  void unsafe_arena_set_allocated_chamfered_corners(
      ::kiapi::board::types::ChamferedRectCorners* chamfered_corners);
  ::kiapi::board::types::ChamferedRectCorners* unsafe_arena_release_chamfered_corners();

  // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
  bool has_zone_settings() const;
  private:
  bool _internal_has_zone_settings() const;
  public:
  void clear_zone_settings();
  const ::kiapi::board::types::ZoneConnectionSettings& zone_settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::ZoneConnectionSettings* release_zone_settings();
  ::kiapi::board::types::ZoneConnectionSettings* mutable_zone_settings();
  void set_allocated_zone_settings(::kiapi::board::types::ZoneConnectionSettings* zone_settings);
  private:
  const ::kiapi::board::types::ZoneConnectionSettings& _internal_zone_settings() const;
  ::kiapi::board::types::ZoneConnectionSettings* _internal_mutable_zone_settings();
  public:
  void unsafe_arena_set_allocated_zone_settings(
      ::kiapi::board::types::ZoneConnectionSettings* zone_settings);
  ::kiapi::board::types::ZoneConnectionSettings* unsafe_arena_release_zone_settings();

  // .kiapi.common.types.Vector2 trapezoid_delta = 10;
  bool has_trapezoid_delta() const;
  private:
  bool _internal_has_trapezoid_delta() const;
  public:
  void clear_trapezoid_delta();
  const ::kiapi::common::types::Vector2& trapezoid_delta() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_trapezoid_delta();
  ::kiapi::common::types::Vector2* mutable_trapezoid_delta();
  void set_allocated_trapezoid_delta(::kiapi::common::types::Vector2* trapezoid_delta);
  private:
  const ::kiapi::common::types::Vector2& _internal_trapezoid_delta() const;
  ::kiapi::common::types::Vector2* _internal_mutable_trapezoid_delta();
  public:
  void unsafe_arena_set_allocated_trapezoid_delta(
      ::kiapi::common::types::Vector2* trapezoid_delta);
  ::kiapi::common::types::Vector2* unsafe_arena_release_trapezoid_delta();

  // .kiapi.common.types.Vector2 offset = 11;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::kiapi::common::types::Vector2& offset() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_offset();
  ::kiapi::common::types::Vector2* mutable_offset();
  void set_allocated_offset(::kiapi::common::types::Vector2* offset);
  private:
  const ::kiapi::common::types::Vector2& _internal_offset() const;
  ::kiapi::common::types::Vector2* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::kiapi::common::types::Vector2* offset);
  ::kiapi::common::types::Vector2* unsafe_arena_release_offset();

  // .kiapi.board.types.BoardLayer layer = 1;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // .kiapi.board.types.PadStackShape shape = 2;
  void clear_shape();
  ::kiapi::board::types::PadStackShape shape() const;
  void set_shape(::kiapi::board::types::PadStackShape value);
  private:
  ::kiapi::board::types::PadStackShape _internal_shape() const;
  void _internal_set_shape(::kiapi::board::types::PadStackShape value);
  public:

  // double corner_rounding_ratio = 4;
  void clear_corner_rounding_ratio();
  double corner_rounding_ratio() const;
  void set_corner_rounding_ratio(double value);
  private:
  double _internal_corner_rounding_ratio() const;
  void _internal_set_corner_rounding_ratio(double value);
  public:

  // double chamfer_ratio = 5;
  void clear_chamfer_ratio();
  double chamfer_ratio() const;
  void set_chamfer_ratio(double value);
  private:
  double _internal_chamfer_ratio() const;
  void _internal_set_chamfer_ratio(double value);
  public:

  // .kiapi.board.types.PadStackShape custom_anchor_shape = 8;
  void clear_custom_anchor_shape();
  ::kiapi::board::types::PadStackShape custom_anchor_shape() const;
  void set_custom_anchor_shape(::kiapi::board::types::PadStackShape value);
  private:
  ::kiapi::board::types::PadStackShape _internal_custom_anchor_shape() const;
  void _internal_set_custom_anchor_shape(::kiapi::board::types::PadStackShape value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.PadStackLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::BoardGraphicShape > custom_shapes_;
  ::kiapi::common::types::Vector2* size_;
  ::kiapi::board::types::ChamferedRectCorners* chamfered_corners_;
  ::kiapi::board::types::ZoneConnectionSettings* zone_settings_;
  ::kiapi::common::types::Vector2* trapezoid_delta_;
  ::kiapi::common::types::Vector2* offset_;
  int layer_;
  int shape_;
  double corner_rounding_ratio_;
  double chamfer_ratio_;
  int custom_anchor_shape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT PadStackOuterLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.PadStackOuterLayer) */ {
 public:
  inline PadStackOuterLayer() : PadStackOuterLayer(nullptr) {}
  ~PadStackOuterLayer() override;
  explicit constexpr PadStackOuterLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PadStackOuterLayer(const PadStackOuterLayer& from);
  PadStackOuterLayer(PadStackOuterLayer&& from) noexcept
    : PadStackOuterLayer() {
    *this = ::std::move(from);
  }

  inline PadStackOuterLayer& operator=(const PadStackOuterLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PadStackOuterLayer& operator=(PadStackOuterLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PadStackOuterLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const PadStackOuterLayer* internal_default_instance() {
    return reinterpret_cast<const PadStackOuterLayer*>(
               &_PadStackOuterLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PadStackOuterLayer& a, PadStackOuterLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(PadStackOuterLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PadStackOuterLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PadStackOuterLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PadStackOuterLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PadStackOuterLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PadStackOuterLayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PadStackOuterLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.PadStackOuterLayer";
  }
  protected:
  explicit PadStackOuterLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolderMaskSettingsFieldNumber = 3,
    kSolderPasteSettingsFieldNumber = 4,
    kSolderMaskModeFieldNumber = 1,
    kSolderPasteModeFieldNumber = 2,
    kPluggingModeFieldNumber = 5,
    kCoveringModeFieldNumber = 6,
  };
  // .kiapi.board.types.SolderMaskOverrides solder_mask_settings = 3;
  bool has_solder_mask_settings() const;
  private:
  bool _internal_has_solder_mask_settings() const;
  public:
  void clear_solder_mask_settings();
  const ::kiapi::board::types::SolderMaskOverrides& solder_mask_settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::SolderMaskOverrides* release_solder_mask_settings();
  ::kiapi::board::types::SolderMaskOverrides* mutable_solder_mask_settings();
  void set_allocated_solder_mask_settings(::kiapi::board::types::SolderMaskOverrides* solder_mask_settings);
  private:
  const ::kiapi::board::types::SolderMaskOverrides& _internal_solder_mask_settings() const;
  ::kiapi::board::types::SolderMaskOverrides* _internal_mutable_solder_mask_settings();
  public:
  void unsafe_arena_set_allocated_solder_mask_settings(
      ::kiapi::board::types::SolderMaskOverrides* solder_mask_settings);
  ::kiapi::board::types::SolderMaskOverrides* unsafe_arena_release_solder_mask_settings();

  // .kiapi.board.types.SolderPasteOverrides solder_paste_settings = 4;
  bool has_solder_paste_settings() const;
  private:
  bool _internal_has_solder_paste_settings() const;
  public:
  void clear_solder_paste_settings();
  const ::kiapi::board::types::SolderPasteOverrides& solder_paste_settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::SolderPasteOverrides* release_solder_paste_settings();
  ::kiapi::board::types::SolderPasteOverrides* mutable_solder_paste_settings();
  void set_allocated_solder_paste_settings(::kiapi::board::types::SolderPasteOverrides* solder_paste_settings);
  private:
  const ::kiapi::board::types::SolderPasteOverrides& _internal_solder_paste_settings() const;
  ::kiapi::board::types::SolderPasteOverrides* _internal_mutable_solder_paste_settings();
  public:
  void unsafe_arena_set_allocated_solder_paste_settings(
      ::kiapi::board::types::SolderPasteOverrides* solder_paste_settings);
  ::kiapi::board::types::SolderPasteOverrides* unsafe_arena_release_solder_paste_settings();

  // .kiapi.board.types.SolderMaskMode solder_mask_mode = 1;
  void clear_solder_mask_mode();
  ::kiapi::board::types::SolderMaskMode solder_mask_mode() const;
  void set_solder_mask_mode(::kiapi::board::types::SolderMaskMode value);
  private:
  ::kiapi::board::types::SolderMaskMode _internal_solder_mask_mode() const;
  void _internal_set_solder_mask_mode(::kiapi::board::types::SolderMaskMode value);
  public:

  // .kiapi.board.types.SolderPasteMode solder_paste_mode = 2;
  void clear_solder_paste_mode();
  ::kiapi::board::types::SolderPasteMode solder_paste_mode() const;
  void set_solder_paste_mode(::kiapi::board::types::SolderPasteMode value);
  private:
  ::kiapi::board::types::SolderPasteMode _internal_solder_paste_mode() const;
  void _internal_set_solder_paste_mode(::kiapi::board::types::SolderPasteMode value);
  public:

  // .kiapi.board.types.ViaPluggingMode plugging_mode = 5;
  void clear_plugging_mode();
  ::kiapi::board::types::ViaPluggingMode plugging_mode() const;
  void set_plugging_mode(::kiapi::board::types::ViaPluggingMode value);
  private:
  ::kiapi::board::types::ViaPluggingMode _internal_plugging_mode() const;
  void _internal_set_plugging_mode(::kiapi::board::types::ViaPluggingMode value);
  public:

  // .kiapi.board.types.ViaCoveringMode covering_mode = 6;
  void clear_covering_mode();
  ::kiapi::board::types::ViaCoveringMode covering_mode() const;
  void set_covering_mode(::kiapi::board::types::ViaCoveringMode value);
  private:
  ::kiapi::board::types::ViaCoveringMode _internal_covering_mode() const;
  void _internal_set_covering_mode(::kiapi::board::types::ViaCoveringMode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.PadStackOuterLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::types::SolderMaskOverrides* solder_mask_settings_;
  ::kiapi::board::types::SolderPasteOverrides* solder_paste_settings_;
  int solder_mask_mode_;
  int solder_paste_mode_;
  int plugging_mode_;
  int covering_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT DrillProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.DrillProperties) */ {
 public:
  inline DrillProperties() : DrillProperties(nullptr) {}
  ~DrillProperties() override;
  explicit constexpr DrillProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillProperties(const DrillProperties& from);
  DrillProperties(DrillProperties&& from) noexcept
    : DrillProperties() {
    *this = ::std::move(from);
  }

  inline DrillProperties& operator=(const DrillProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillProperties& operator=(DrillProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrillProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillProperties* internal_default_instance() {
    return reinterpret_cast<const DrillProperties*>(
               &_DrillProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DrillProperties& a, DrillProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrillProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrillProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrillProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DrillProperties& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.DrillProperties";
  }
  protected:
  explicit DrillProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiameterFieldNumber = 3,
    kStartLayerFieldNumber = 1,
    kEndLayerFieldNumber = 2,
    kShapeFieldNumber = 4,
    kCappedFieldNumber = 5,
    kFilledFieldNumber = 6,
  };
  // .kiapi.common.types.Vector2 diameter = 3;
  bool has_diameter() const;
  private:
  bool _internal_has_diameter() const;
  public:
  void clear_diameter();
  const ::kiapi::common::types::Vector2& diameter() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_diameter();
  ::kiapi::common::types::Vector2* mutable_diameter();
  void set_allocated_diameter(::kiapi::common::types::Vector2* diameter);
  private:
  const ::kiapi::common::types::Vector2& _internal_diameter() const;
  ::kiapi::common::types::Vector2* _internal_mutable_diameter();
  public:
  void unsafe_arena_set_allocated_diameter(
      ::kiapi::common::types::Vector2* diameter);
  ::kiapi::common::types::Vector2* unsafe_arena_release_diameter();

  // .kiapi.board.types.BoardLayer start_layer = 1;
  void clear_start_layer();
  ::kiapi::board::types::BoardLayer start_layer() const;
  void set_start_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_start_layer() const;
  void _internal_set_start_layer(::kiapi::board::types::BoardLayer value);
  public:

  // .kiapi.board.types.BoardLayer end_layer = 2;
  void clear_end_layer();
  ::kiapi::board::types::BoardLayer end_layer() const;
  void set_end_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_end_layer() const;
  void _internal_set_end_layer(::kiapi::board::types::BoardLayer value);
  public:

  // .kiapi.board.types.DrillShape shape = 4;
  void clear_shape();
  ::kiapi::board::types::DrillShape shape() const;
  void set_shape(::kiapi::board::types::DrillShape value);
  private:
  ::kiapi::board::types::DrillShape _internal_shape() const;
  void _internal_set_shape(::kiapi::board::types::DrillShape value);
  public:

  // .kiapi.board.types.ViaDrillCappingMode capped = 5;
  void clear_capped();
  ::kiapi::board::types::ViaDrillCappingMode capped() const;
  void set_capped(::kiapi::board::types::ViaDrillCappingMode value);
  private:
  ::kiapi::board::types::ViaDrillCappingMode _internal_capped() const;
  void _internal_set_capped(::kiapi::board::types::ViaDrillCappingMode value);
  public:

  // .kiapi.board.types.ViaDrillFillingMode filled = 6;
  void clear_filled();
  ::kiapi::board::types::ViaDrillFillingMode filled() const;
  void set_filled(::kiapi::board::types::ViaDrillFillingMode value);
  private:
  ::kiapi::board::types::ViaDrillFillingMode _internal_filled() const;
  void _internal_set_filled(::kiapi::board::types::ViaDrillFillingMode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.DrillProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Vector2* diameter_;
  int start_layer_;
  int end_layer_;
  int shape_;
  int capped_;
  int filled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT PadStack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.PadStack) */ {
 public:
  inline PadStack() : PadStack(nullptr) {}
  ~PadStack() override;
  explicit constexpr PadStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PadStack(const PadStack& from);
  PadStack(PadStack&& from) noexcept
    : PadStack() {
    *this = ::std::move(from);
  }

  inline PadStack& operator=(const PadStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline PadStack& operator=(PadStack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PadStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const PadStack* internal_default_instance() {
    return reinterpret_cast<const PadStack*>(
               &_PadStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PadStack& a, PadStack& b) {
    a.Swap(&b);
  }
  inline void Swap(PadStack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PadStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PadStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PadStack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PadStack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PadStack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PadStack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.PadStack";
  }
  protected:
  explicit PadStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kCopperLayersFieldNumber = 5,
    kDrillFieldNumber = 3,
    kAngleFieldNumber = 6,
    kFrontOuterLayersFieldNumber = 7,
    kBackOuterLayersFieldNumber = 8,
    kZoneSettingsFieldNumber = 9,
    kTypeFieldNumber = 1,
    kUnconnectedLayerRemovalFieldNumber = 4,
  };
  // repeated .kiapi.board.types.BoardLayer layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  private:
  ::kiapi::board::types::BoardLayer _internal_layers(int index) const;
  void _internal_add_layers(::kiapi::board::types::BoardLayer value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_layers();
  public:
  ::kiapi::board::types::BoardLayer layers(int index) const;
  void set_layers(int index, ::kiapi::board::types::BoardLayer value);
  void add_layers(::kiapi::board::types::BoardLayer value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_layers();

  // repeated .kiapi.board.types.PadStackLayer copper_layers = 5;
  int copper_layers_size() const;
  private:
  int _internal_copper_layers_size() const;
  public:
  void clear_copper_layers();
  ::kiapi::board::types::PadStackLayer* mutable_copper_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::PadStackLayer >*
      mutable_copper_layers();
  private:
  const ::kiapi::board::types::PadStackLayer& _internal_copper_layers(int index) const;
  ::kiapi::board::types::PadStackLayer* _internal_add_copper_layers();
  public:
  const ::kiapi::board::types::PadStackLayer& copper_layers(int index) const;
  ::kiapi::board::types::PadStackLayer* add_copper_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::PadStackLayer >&
      copper_layers() const;

  // .kiapi.board.types.DrillProperties drill = 3;
  bool has_drill() const;
  private:
  bool _internal_has_drill() const;
  public:
  void clear_drill();
  const ::kiapi::board::types::DrillProperties& drill() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::DrillProperties* release_drill();
  ::kiapi::board::types::DrillProperties* mutable_drill();
  void set_allocated_drill(::kiapi::board::types::DrillProperties* drill);
  private:
  const ::kiapi::board::types::DrillProperties& _internal_drill() const;
  ::kiapi::board::types::DrillProperties* _internal_mutable_drill();
  public:
  void unsafe_arena_set_allocated_drill(
      ::kiapi::board::types::DrillProperties* drill);
  ::kiapi::board::types::DrillProperties* unsafe_arena_release_drill();

  // .kiapi.common.types.Angle angle = 6;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::kiapi::common::types::Angle& angle() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Angle* release_angle();
  ::kiapi::common::types::Angle* mutable_angle();
  void set_allocated_angle(::kiapi::common::types::Angle* angle);
  private:
  const ::kiapi::common::types::Angle& _internal_angle() const;
  ::kiapi::common::types::Angle* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::kiapi::common::types::Angle* angle);
  ::kiapi::common::types::Angle* unsafe_arena_release_angle();

  // .kiapi.board.types.PadStackOuterLayer front_outer_layers = 7;
  bool has_front_outer_layers() const;
  private:
  bool _internal_has_front_outer_layers() const;
  public:
  void clear_front_outer_layers();
  const ::kiapi::board::types::PadStackOuterLayer& front_outer_layers() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::PadStackOuterLayer* release_front_outer_layers();
  ::kiapi::board::types::PadStackOuterLayer* mutable_front_outer_layers();
  void set_allocated_front_outer_layers(::kiapi::board::types::PadStackOuterLayer* front_outer_layers);
  private:
  const ::kiapi::board::types::PadStackOuterLayer& _internal_front_outer_layers() const;
  ::kiapi::board::types::PadStackOuterLayer* _internal_mutable_front_outer_layers();
  public:
  void unsafe_arena_set_allocated_front_outer_layers(
      ::kiapi::board::types::PadStackOuterLayer* front_outer_layers);
  ::kiapi::board::types::PadStackOuterLayer* unsafe_arena_release_front_outer_layers();

  // .kiapi.board.types.PadStackOuterLayer back_outer_layers = 8;
  bool has_back_outer_layers() const;
  private:
  bool _internal_has_back_outer_layers() const;
  public:
  void clear_back_outer_layers();
  const ::kiapi::board::types::PadStackOuterLayer& back_outer_layers() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::PadStackOuterLayer* release_back_outer_layers();
  ::kiapi::board::types::PadStackOuterLayer* mutable_back_outer_layers();
  void set_allocated_back_outer_layers(::kiapi::board::types::PadStackOuterLayer* back_outer_layers);
  private:
  const ::kiapi::board::types::PadStackOuterLayer& _internal_back_outer_layers() const;
  ::kiapi::board::types::PadStackOuterLayer* _internal_mutable_back_outer_layers();
  public:
  void unsafe_arena_set_allocated_back_outer_layers(
      ::kiapi::board::types::PadStackOuterLayer* back_outer_layers);
  ::kiapi::board::types::PadStackOuterLayer* unsafe_arena_release_back_outer_layers();

  // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
  bool has_zone_settings() const;
  private:
  bool _internal_has_zone_settings() const;
  public:
  void clear_zone_settings();
  const ::kiapi::board::types::ZoneConnectionSettings& zone_settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::ZoneConnectionSettings* release_zone_settings();
  ::kiapi::board::types::ZoneConnectionSettings* mutable_zone_settings();
  void set_allocated_zone_settings(::kiapi::board::types::ZoneConnectionSettings* zone_settings);
  private:
  const ::kiapi::board::types::ZoneConnectionSettings& _internal_zone_settings() const;
  ::kiapi::board::types::ZoneConnectionSettings* _internal_mutable_zone_settings();
  public:
  void unsafe_arena_set_allocated_zone_settings(
      ::kiapi::board::types::ZoneConnectionSettings* zone_settings);
  ::kiapi::board::types::ZoneConnectionSettings* unsafe_arena_release_zone_settings();

  // .kiapi.board.types.PadStackType type = 1;
  void clear_type();
  ::kiapi::board::types::PadStackType type() const;
  void set_type(::kiapi::board::types::PadStackType value);
  private:
  ::kiapi::board::types::PadStackType _internal_type() const;
  void _internal_set_type(::kiapi::board::types::PadStackType value);
  public:

  // .kiapi.board.types.UnconnectedLayerRemoval unconnected_layer_removal = 4;
  void clear_unconnected_layer_removal();
  ::kiapi::board::types::UnconnectedLayerRemoval unconnected_layer_removal() const;
  void set_unconnected_layer_removal(::kiapi::board::types::UnconnectedLayerRemoval value);
  private:
  ::kiapi::board::types::UnconnectedLayerRemoval _internal_unconnected_layer_removal() const;
  void _internal_set_unconnected_layer_removal(::kiapi::board::types::UnconnectedLayerRemoval value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.PadStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> layers_;
  mutable std::atomic<int> _layers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::PadStackLayer > copper_layers_;
  ::kiapi::board::types::DrillProperties* drill_;
  ::kiapi::common::types::Angle* angle_;
  ::kiapi::board::types::PadStackOuterLayer* front_outer_layers_;
  ::kiapi::board::types::PadStackOuterLayer* back_outer_layers_;
  ::kiapi::board::types::ZoneConnectionSettings* zone_settings_;
  int type_;
  int unconnected_layer_removal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Via final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Via) */ {
 public:
  inline Via() : Via(nullptr) {}
  ~Via() override;
  explicit constexpr Via(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Via(const Via& from);
  Via(Via&& from) noexcept
    : Via() {
    *this = ::std::move(from);
  }

  inline Via& operator=(const Via& from) {
    CopyFrom(from);
    return *this;
  }
  inline Via& operator=(Via&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Via& default_instance() {
    return *internal_default_instance();
  }
  static inline const Via* internal_default_instance() {
    return reinterpret_cast<const Via*>(
               &_Via_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Via& a, Via& b) {
    a.Swap(&b);
  }
  inline void Swap(Via* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Via* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Via* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Via>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Via& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Via& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Via* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Via";
  }
  protected:
  explicit Via(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kPadStackFieldNumber = 3,
    kNetFieldNumber = 5,
    kLockedFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::kiapi::common::types::Vector2& position() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_position();
  ::kiapi::common::types::Vector2* mutable_position();
  void set_allocated_position(::kiapi::common::types::Vector2* position);
  private:
  const ::kiapi::common::types::Vector2& _internal_position() const;
  ::kiapi::common::types::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::kiapi::common::types::Vector2* position);
  ::kiapi::common::types::Vector2* unsafe_arena_release_position();

  // .kiapi.board.types.PadStack pad_stack = 3;
  bool has_pad_stack() const;
  private:
  bool _internal_has_pad_stack() const;
  public:
  void clear_pad_stack();
  const ::kiapi::board::types::PadStack& pad_stack() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::PadStack* release_pad_stack();
  ::kiapi::board::types::PadStack* mutable_pad_stack();
  void set_allocated_pad_stack(::kiapi::board::types::PadStack* pad_stack);
  private:
  const ::kiapi::board::types::PadStack& _internal_pad_stack() const;
  ::kiapi::board::types::PadStack* _internal_mutable_pad_stack();
  public:
  void unsafe_arena_set_allocated_pad_stack(
      ::kiapi::board::types::PadStack* pad_stack);
  ::kiapi::board::types::PadStack* unsafe_arena_release_pad_stack();

  // .kiapi.board.types.Net net = 5;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::kiapi::board::types::Net& net() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Net* release_net();
  ::kiapi::board::types::Net* mutable_net();
  void set_allocated_net(::kiapi::board::types::Net* net);
  private:
  const ::kiapi::board::types::Net& _internal_net() const;
  ::kiapi::board::types::Net* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::kiapi::board::types::Net* net);
  ::kiapi::board::types::Net* unsafe_arena_release_net();

  // .kiapi.common.types.LockedState locked = 4;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // .kiapi.board.types.ViaType type = 6;
  void clear_type();
  ::kiapi::board::types::ViaType type() const;
  void set_type(::kiapi::board::types::ViaType value);
  private:
  ::kiapi::board::types::ViaType _internal_type() const;
  void _internal_set_type(::kiapi::board::types::ViaType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Via)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* position_;
  ::kiapi::board::types::PadStack* pad_stack_;
  ::kiapi::board::types::Net* net_;
  int locked_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardGraphicShape final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.BoardGraphicShape) */ {
 public:
  inline BoardGraphicShape() : BoardGraphicShape(nullptr) {}
  ~BoardGraphicShape() override;
  explicit constexpr BoardGraphicShape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardGraphicShape(const BoardGraphicShape& from);
  BoardGraphicShape(BoardGraphicShape&& from) noexcept
    : BoardGraphicShape() {
    *this = ::std::move(from);
  }

  inline BoardGraphicShape& operator=(const BoardGraphicShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardGraphicShape& operator=(BoardGraphicShape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardGraphicShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardGraphicShape* internal_default_instance() {
    return reinterpret_cast<const BoardGraphicShape*>(
               &_BoardGraphicShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BoardGraphicShape& a, BoardGraphicShape& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardGraphicShape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardGraphicShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardGraphicShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardGraphicShape>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardGraphicShape& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardGraphicShape& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardGraphicShape* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.BoardGraphicShape";
  }
  protected:
  explicit BoardGraphicShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kNetFieldNumber = 3,
    kIdFieldNumber = 4,
    kLayerFieldNumber = 2,
    kLockedFieldNumber = 5,
  };
  // .kiapi.common.types.GraphicShape shape = 1;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::kiapi::common::types::GraphicShape& shape() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::GraphicShape* release_shape();
  ::kiapi::common::types::GraphicShape* mutable_shape();
  void set_allocated_shape(::kiapi::common::types::GraphicShape* shape);
  private:
  const ::kiapi::common::types::GraphicShape& _internal_shape() const;
  ::kiapi::common::types::GraphicShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::kiapi::common::types::GraphicShape* shape);
  ::kiapi::common::types::GraphicShape* unsafe_arena_release_shape();

  // .kiapi.board.types.Net net = 3;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::kiapi::board::types::Net& net() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Net* release_net();
  ::kiapi::board::types::Net* mutable_net();
  void set_allocated_net(::kiapi::board::types::Net* net);
  private:
  const ::kiapi::board::types::Net& _internal_net() const;
  ::kiapi::board::types::Net* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::kiapi::board::types::Net* net);
  ::kiapi::board::types::Net* unsafe_arena_release_net();

  // .kiapi.common.types.KIID id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.board.types.BoardLayer layer = 2;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // .kiapi.common.types.LockedState locked = 5;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.BoardGraphicShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::GraphicShape* shape_;
  ::kiapi::board::types::Net* net_;
  ::kiapi::common::types::KIID* id_;
  int layer_;
  int locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.BoardText) */ {
 public:
  inline BoardText() : BoardText(nullptr) {}
  ~BoardText() override;
  explicit constexpr BoardText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardText(const BoardText& from);
  BoardText(BoardText&& from) noexcept
    : BoardText() {
    *this = ::std::move(from);
  }

  inline BoardText& operator=(const BoardText& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardText& operator=(BoardText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardText& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardText* internal_default_instance() {
    return reinterpret_cast<const BoardText*>(
               &_BoardText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BoardText& a, BoardText& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardText& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.BoardText";
  }
  protected:
  explicit BoardText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTextFieldNumber = 2,
    kLayerFieldNumber = 3,
    kKnockoutFieldNumber = 4,
    kLockedFieldNumber = 5,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Text text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::common::types::Text& text() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Text* release_text();
  ::kiapi::common::types::Text* mutable_text();
  void set_allocated_text(::kiapi::common::types::Text* text);
  private:
  const ::kiapi::common::types::Text& _internal_text() const;
  ::kiapi::common::types::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::common::types::Text* text);
  ::kiapi::common::types::Text* unsafe_arena_release_text();

  // .kiapi.board.types.BoardLayer layer = 3;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // bool knockout = 4;
  void clear_knockout();
  bool knockout() const;
  void set_knockout(bool value);
  private:
  bool _internal_knockout() const;
  void _internal_set_knockout(bool value);
  public:

  // .kiapi.common.types.LockedState locked = 5;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.BoardText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Text* text_;
  int layer_;
  bool knockout_;
  int locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardTextBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.BoardTextBox) */ {
 public:
  inline BoardTextBox() : BoardTextBox(nullptr) {}
  ~BoardTextBox() override;
  explicit constexpr BoardTextBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardTextBox(const BoardTextBox& from);
  BoardTextBox(BoardTextBox&& from) noexcept
    : BoardTextBox() {
    *this = ::std::move(from);
  }

  inline BoardTextBox& operator=(const BoardTextBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardTextBox& operator=(BoardTextBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardTextBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardTextBox* internal_default_instance() {
    return reinterpret_cast<const BoardTextBox*>(
               &_BoardTextBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BoardTextBox& a, BoardTextBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardTextBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardTextBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardTextBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardTextBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardTextBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardTextBox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardTextBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.BoardTextBox";
  }
  protected:
  explicit BoardTextBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTextboxFieldNumber = 2,
    kLayerFieldNumber = 3,
    kLockedFieldNumber = 4,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.TextBox textbox = 2;
  bool has_textbox() const;
  private:
  bool _internal_has_textbox() const;
  public:
  void clear_textbox();
  const ::kiapi::common::types::TextBox& textbox() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::TextBox* release_textbox();
  ::kiapi::common::types::TextBox* mutable_textbox();
  void set_allocated_textbox(::kiapi::common::types::TextBox* textbox);
  private:
  const ::kiapi::common::types::TextBox& _internal_textbox() const;
  ::kiapi::common::types::TextBox* _internal_mutable_textbox();
  public:
  void unsafe_arena_set_allocated_textbox(
      ::kiapi::common::types::TextBox* textbox);
  ::kiapi::common::types::TextBox* unsafe_arena_release_textbox();

  // .kiapi.board.types.BoardLayer layer = 3;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // .kiapi.common.types.LockedState locked = 4;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.BoardTextBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::TextBox* textbox_;
  int layer_;
  int locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ThermalSpokeSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.ThermalSpokeSettings) */ {
 public:
  inline ThermalSpokeSettings() : ThermalSpokeSettings(nullptr) {}
  ~ThermalSpokeSettings() override;
  explicit constexpr ThermalSpokeSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThermalSpokeSettings(const ThermalSpokeSettings& from);
  ThermalSpokeSettings(ThermalSpokeSettings&& from) noexcept
    : ThermalSpokeSettings() {
    *this = ::std::move(from);
  }

  inline ThermalSpokeSettings& operator=(const ThermalSpokeSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalSpokeSettings& operator=(ThermalSpokeSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThermalSpokeSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThermalSpokeSettings* internal_default_instance() {
    return reinterpret_cast<const ThermalSpokeSettings*>(
               &_ThermalSpokeSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ThermalSpokeSettings& a, ThermalSpokeSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalSpokeSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalSpokeSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThermalSpokeSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThermalSpokeSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThermalSpokeSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThermalSpokeSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalSpokeSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.ThermalSpokeSettings";
  }
  protected:
  explicit ThermalSpokeSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kAngleFieldNumber = 2,
    kGapFieldNumber = 3,
  };
  // .kiapi.common.types.Distance width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::kiapi::common::types::Distance& width() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_width();
  ::kiapi::common::types::Distance* mutable_width();
  void set_allocated_width(::kiapi::common::types::Distance* width);
  private:
  const ::kiapi::common::types::Distance& _internal_width() const;
  ::kiapi::common::types::Distance* _internal_mutable_width();
  public:
  void unsafe_arena_set_allocated_width(
      ::kiapi::common::types::Distance* width);
  ::kiapi::common::types::Distance* unsafe_arena_release_width();

  // .kiapi.common.types.Angle angle = 2;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::kiapi::common::types::Angle& angle() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Angle* release_angle();
  ::kiapi::common::types::Angle* mutable_angle();
  void set_allocated_angle(::kiapi::common::types::Angle* angle);
  private:
  const ::kiapi::common::types::Angle& _internal_angle() const;
  ::kiapi::common::types::Angle* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::kiapi::common::types::Angle* angle);
  ::kiapi::common::types::Angle* unsafe_arena_release_angle();

  // .kiapi.common.types.Distance gap = 3;
  bool has_gap() const;
  private:
  bool _internal_has_gap() const;
  public:
  void clear_gap();
  const ::kiapi::common::types::Distance& gap() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_gap();
  ::kiapi::common::types::Distance* mutable_gap();
  void set_allocated_gap(::kiapi::common::types::Distance* gap);
  private:
  const ::kiapi::common::types::Distance& _internal_gap() const;
  ::kiapi::common::types::Distance* _internal_mutable_gap();
  public:
  void unsafe_arena_set_allocated_gap(
      ::kiapi::common::types::Distance* gap);
  ::kiapi::common::types::Distance* unsafe_arena_release_gap();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.ThermalSpokeSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Distance* width_;
  ::kiapi::common::types::Angle* angle_;
  ::kiapi::common::types::Distance* gap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Pad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Pad) */ {
 public:
  inline Pad() : Pad(nullptr) {}
  ~Pad() override;
  explicit constexpr Pad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pad(const Pad& from);
  Pad(Pad&& from) noexcept
    : Pad() {
    *this = ::std::move(from);
  }

  inline Pad& operator=(const Pad& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pad& operator=(Pad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pad& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pad* internal_default_instance() {
    return reinterpret_cast<const Pad*>(
               &_Pad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Pad& a, Pad& b) {
    a.Swap(&b);
  }
  inline void Swap(Pad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pad& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Pad";
  }
  protected:
  explicit Pad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 3,
    kIdFieldNumber = 1,
    kNetFieldNumber = 4,
    kPadStackFieldNumber = 6,
    kPositionFieldNumber = 7,
    kCopperClearanceOverrideFieldNumber = 8,
    kLockedFieldNumber = 2,
    kTypeFieldNumber = 5,
  };
  // string number = 3;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.board.types.Net net = 4;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::kiapi::board::types::Net& net() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Net* release_net();
  ::kiapi::board::types::Net* mutable_net();
  void set_allocated_net(::kiapi::board::types::Net* net);
  private:
  const ::kiapi::board::types::Net& _internal_net() const;
  ::kiapi::board::types::Net* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::kiapi::board::types::Net* net);
  ::kiapi::board::types::Net* unsafe_arena_release_net();

  // .kiapi.board.types.PadStack pad_stack = 6;
  bool has_pad_stack() const;
  private:
  bool _internal_has_pad_stack() const;
  public:
  void clear_pad_stack();
  const ::kiapi::board::types::PadStack& pad_stack() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::PadStack* release_pad_stack();
  ::kiapi::board::types::PadStack* mutable_pad_stack();
  void set_allocated_pad_stack(::kiapi::board::types::PadStack* pad_stack);
  private:
  const ::kiapi::board::types::PadStack& _internal_pad_stack() const;
  ::kiapi::board::types::PadStack* _internal_mutable_pad_stack();
  public:
  void unsafe_arena_set_allocated_pad_stack(
      ::kiapi::board::types::PadStack* pad_stack);
  ::kiapi::board::types::PadStack* unsafe_arena_release_pad_stack();

  // .kiapi.common.types.Vector2 position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::kiapi::common::types::Vector2& position() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_position();
  ::kiapi::common::types::Vector2* mutable_position();
  void set_allocated_position(::kiapi::common::types::Vector2* position);
  private:
  const ::kiapi::common::types::Vector2& _internal_position() const;
  ::kiapi::common::types::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::kiapi::common::types::Vector2* position);
  ::kiapi::common::types::Vector2* unsafe_arena_release_position();

  // .kiapi.common.types.Distance copper_clearance_override = 8;
  bool has_copper_clearance_override() const;
  private:
  bool _internal_has_copper_clearance_override() const;
  public:
  void clear_copper_clearance_override();
  const ::kiapi::common::types::Distance& copper_clearance_override() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_copper_clearance_override();
  ::kiapi::common::types::Distance* mutable_copper_clearance_override();
  void set_allocated_copper_clearance_override(::kiapi::common::types::Distance* copper_clearance_override);
  private:
  const ::kiapi::common::types::Distance& _internal_copper_clearance_override() const;
  ::kiapi::common::types::Distance* _internal_mutable_copper_clearance_override();
  public:
  void unsafe_arena_set_allocated_copper_clearance_override(
      ::kiapi::common::types::Distance* copper_clearance_override);
  ::kiapi::common::types::Distance* unsafe_arena_release_copper_clearance_override();

  // .kiapi.common.types.LockedState locked = 2;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // .kiapi.board.types.PadType type = 5;
  void clear_type();
  ::kiapi::board::types::PadType type() const;
  void set_type(::kiapi::board::types::PadType value);
  private:
  ::kiapi::board::types::PadType _internal_type() const;
  void _internal_set_type(::kiapi::board::types::PadType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Pad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::board::types::Net* net_;
  ::kiapi::board::types::PadStack* pad_stack_;
  ::kiapi::common::types::Vector2* position_;
  ::kiapi::common::types::Distance* copper_clearance_override_;
  int locked_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT HatchFillSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.HatchFillSettings) */ {
 public:
  inline HatchFillSettings() : HatchFillSettings(nullptr) {}
  ~HatchFillSettings() override;
  explicit constexpr HatchFillSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HatchFillSettings(const HatchFillSettings& from);
  HatchFillSettings(HatchFillSettings&& from) noexcept
    : HatchFillSettings() {
    *this = ::std::move(from);
  }

  inline HatchFillSettings& operator=(const HatchFillSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline HatchFillSettings& operator=(HatchFillSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HatchFillSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const HatchFillSettings* internal_default_instance() {
    return reinterpret_cast<const HatchFillSettings*>(
               &_HatchFillSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(HatchFillSettings& a, HatchFillSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(HatchFillSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HatchFillSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HatchFillSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HatchFillSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HatchFillSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HatchFillSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HatchFillSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.HatchFillSettings";
  }
  protected:
  explicit HatchFillSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThicknessFieldNumber = 1,
    kGapFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kHatchSmoothingRatioFieldNumber = 4,
    kHatchHoleMinAreaRatioFieldNumber = 5,
    kBorderModeFieldNumber = 6,
  };
  // .kiapi.common.types.Distance thickness = 1;
  bool has_thickness() const;
  private:
  bool _internal_has_thickness() const;
  public:
  void clear_thickness();
  const ::kiapi::common::types::Distance& thickness() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_thickness();
  ::kiapi::common::types::Distance* mutable_thickness();
  void set_allocated_thickness(::kiapi::common::types::Distance* thickness);
  private:
  const ::kiapi::common::types::Distance& _internal_thickness() const;
  ::kiapi::common::types::Distance* _internal_mutable_thickness();
  public:
  void unsafe_arena_set_allocated_thickness(
      ::kiapi::common::types::Distance* thickness);
  ::kiapi::common::types::Distance* unsafe_arena_release_thickness();

  // .kiapi.common.types.Distance gap = 2;
  bool has_gap() const;
  private:
  bool _internal_has_gap() const;
  public:
  void clear_gap();
  const ::kiapi::common::types::Distance& gap() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_gap();
  ::kiapi::common::types::Distance* mutable_gap();
  void set_allocated_gap(::kiapi::common::types::Distance* gap);
  private:
  const ::kiapi::common::types::Distance& _internal_gap() const;
  ::kiapi::common::types::Distance* _internal_mutable_gap();
  public:
  void unsafe_arena_set_allocated_gap(
      ::kiapi::common::types::Distance* gap);
  ::kiapi::common::types::Distance* unsafe_arena_release_gap();

  // .kiapi.common.types.Angle orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::kiapi::common::types::Angle& orientation() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Angle* release_orientation();
  ::kiapi::common::types::Angle* mutable_orientation();
  void set_allocated_orientation(::kiapi::common::types::Angle* orientation);
  private:
  const ::kiapi::common::types::Angle& _internal_orientation() const;
  ::kiapi::common::types::Angle* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::kiapi::common::types::Angle* orientation);
  ::kiapi::common::types::Angle* unsafe_arena_release_orientation();

  // double hatch_smoothing_ratio = 4;
  void clear_hatch_smoothing_ratio();
  double hatch_smoothing_ratio() const;
  void set_hatch_smoothing_ratio(double value);
  private:
  double _internal_hatch_smoothing_ratio() const;
  void _internal_set_hatch_smoothing_ratio(double value);
  public:

  // double hatch_hole_min_area_ratio = 5;
  void clear_hatch_hole_min_area_ratio();
  double hatch_hole_min_area_ratio() const;
  void set_hatch_hole_min_area_ratio(double value);
  private:
  double _internal_hatch_hole_min_area_ratio() const;
  void _internal_set_hatch_hole_min_area_ratio(double value);
  public:

  // .kiapi.board.types.ZoneHatchFillBorderMode border_mode = 6;
  void clear_border_mode();
  ::kiapi::board::types::ZoneHatchFillBorderMode border_mode() const;
  void set_border_mode(::kiapi::board::types::ZoneHatchFillBorderMode value);
  private:
  ::kiapi::board::types::ZoneHatchFillBorderMode _internal_border_mode() const;
  void _internal_set_border_mode(::kiapi::board::types::ZoneHatchFillBorderMode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.HatchFillSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Distance* thickness_;
  ::kiapi::common::types::Distance* gap_;
  ::kiapi::common::types::Angle* orientation_;
  double hatch_smoothing_ratio_;
  double hatch_hole_min_area_ratio_;
  int border_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT TeardropSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.TeardropSettings) */ {
 public:
  inline TeardropSettings() : TeardropSettings(nullptr) {}
  ~TeardropSettings() override;
  explicit constexpr TeardropSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeardropSettings(const TeardropSettings& from);
  TeardropSettings(TeardropSettings&& from) noexcept
    : TeardropSettings() {
    *this = ::std::move(from);
  }

  inline TeardropSettings& operator=(const TeardropSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeardropSettings& operator=(TeardropSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeardropSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeardropSettings* internal_default_instance() {
    return reinterpret_cast<const TeardropSettings*>(
               &_TeardropSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TeardropSettings& a, TeardropSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TeardropSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeardropSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeardropSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeardropSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeardropSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeardropSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeardropSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.TeardropSettings";
  }
  protected:
  explicit TeardropSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .kiapi.board.types.TeardropType type = 1;
  void clear_type();
  ::kiapi::board::types::TeardropType type() const;
  void set_type(::kiapi::board::types::TeardropType value);
  private:
  ::kiapi::board::types::TeardropType _internal_type() const;
  void _internal_set_type(::kiapi::board::types::TeardropType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.TeardropSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT CopperZoneSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.CopperZoneSettings) */ {
 public:
  inline CopperZoneSettings() : CopperZoneSettings(nullptr) {}
  ~CopperZoneSettings() override;
  explicit constexpr CopperZoneSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CopperZoneSettings(const CopperZoneSettings& from);
  CopperZoneSettings(CopperZoneSettings&& from) noexcept
    : CopperZoneSettings() {
    *this = ::std::move(from);
  }

  inline CopperZoneSettings& operator=(const CopperZoneSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopperZoneSettings& operator=(CopperZoneSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopperZoneSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CopperZoneSettings* internal_default_instance() {
    return reinterpret_cast<const CopperZoneSettings*>(
               &_CopperZoneSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CopperZoneSettings& a, CopperZoneSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CopperZoneSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopperZoneSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopperZoneSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopperZoneSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CopperZoneSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CopperZoneSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopperZoneSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.CopperZoneSettings";
  }
  protected:
  explicit CopperZoneSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
    kClearanceFieldNumber = 2,
    kMinThicknessFieldNumber = 3,
    kHatchSettingsFieldNumber = 7,
    kNetFieldNumber = 8,
    kTeardropFieldNumber = 9,
    kMinIslandAreaFieldNumber = 5,
    kIslandModeFieldNumber = 4,
    kFillModeFieldNumber = 6,
  };
  // .kiapi.board.types.ZoneConnectionSettings connection = 1;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::kiapi::board::types::ZoneConnectionSettings& connection() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::ZoneConnectionSettings* release_connection();
  ::kiapi::board::types::ZoneConnectionSettings* mutable_connection();
  void set_allocated_connection(::kiapi::board::types::ZoneConnectionSettings* connection);
  private:
  const ::kiapi::board::types::ZoneConnectionSettings& _internal_connection() const;
  ::kiapi::board::types::ZoneConnectionSettings* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::kiapi::board::types::ZoneConnectionSettings* connection);
  ::kiapi::board::types::ZoneConnectionSettings* unsafe_arena_release_connection();

  // .kiapi.common.types.Distance clearance = 2;
  bool has_clearance() const;
  private:
  bool _internal_has_clearance() const;
  public:
  void clear_clearance();
  const ::kiapi::common::types::Distance& clearance() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_clearance();
  ::kiapi::common::types::Distance* mutable_clearance();
  void set_allocated_clearance(::kiapi::common::types::Distance* clearance);
  private:
  const ::kiapi::common::types::Distance& _internal_clearance() const;
  ::kiapi::common::types::Distance* _internal_mutable_clearance();
  public:
  void unsafe_arena_set_allocated_clearance(
      ::kiapi::common::types::Distance* clearance);
  ::kiapi::common::types::Distance* unsafe_arena_release_clearance();

  // .kiapi.common.types.Distance min_thickness = 3;
  bool has_min_thickness() const;
  private:
  bool _internal_has_min_thickness() const;
  public:
  void clear_min_thickness();
  const ::kiapi::common::types::Distance& min_thickness() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_min_thickness();
  ::kiapi::common::types::Distance* mutable_min_thickness();
  void set_allocated_min_thickness(::kiapi::common::types::Distance* min_thickness);
  private:
  const ::kiapi::common::types::Distance& _internal_min_thickness() const;
  ::kiapi::common::types::Distance* _internal_mutable_min_thickness();
  public:
  void unsafe_arena_set_allocated_min_thickness(
      ::kiapi::common::types::Distance* min_thickness);
  ::kiapi::common::types::Distance* unsafe_arena_release_min_thickness();

  // .kiapi.board.types.HatchFillSettings hatch_settings = 7;
  bool has_hatch_settings() const;
  private:
  bool _internal_has_hatch_settings() const;
  public:
  void clear_hatch_settings();
  const ::kiapi::board::types::HatchFillSettings& hatch_settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::HatchFillSettings* release_hatch_settings();
  ::kiapi::board::types::HatchFillSettings* mutable_hatch_settings();
  void set_allocated_hatch_settings(::kiapi::board::types::HatchFillSettings* hatch_settings);
  private:
  const ::kiapi::board::types::HatchFillSettings& _internal_hatch_settings() const;
  ::kiapi::board::types::HatchFillSettings* _internal_mutable_hatch_settings();
  public:
  void unsafe_arena_set_allocated_hatch_settings(
      ::kiapi::board::types::HatchFillSettings* hatch_settings);
  ::kiapi::board::types::HatchFillSettings* unsafe_arena_release_hatch_settings();

  // .kiapi.board.types.Net net = 8;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::kiapi::board::types::Net& net() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Net* release_net();
  ::kiapi::board::types::Net* mutable_net();
  void set_allocated_net(::kiapi::board::types::Net* net);
  private:
  const ::kiapi::board::types::Net& _internal_net() const;
  ::kiapi::board::types::Net* _internal_mutable_net();
  public:
  void unsafe_arena_set_allocated_net(
      ::kiapi::board::types::Net* net);
  ::kiapi::board::types::Net* unsafe_arena_release_net();

  // .kiapi.board.types.TeardropSettings teardrop = 9;
  bool has_teardrop() const;
  private:
  bool _internal_has_teardrop() const;
  public:
  void clear_teardrop();
  const ::kiapi::board::types::TeardropSettings& teardrop() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::TeardropSettings* release_teardrop();
  ::kiapi::board::types::TeardropSettings* mutable_teardrop();
  void set_allocated_teardrop(::kiapi::board::types::TeardropSettings* teardrop);
  private:
  const ::kiapi::board::types::TeardropSettings& _internal_teardrop() const;
  ::kiapi::board::types::TeardropSettings* _internal_mutable_teardrop();
  public:
  void unsafe_arena_set_allocated_teardrop(
      ::kiapi::board::types::TeardropSettings* teardrop);
  ::kiapi::board::types::TeardropSettings* unsafe_arena_release_teardrop();

  // uint64 min_island_area = 5;
  void clear_min_island_area();
  uint64_t min_island_area() const;
  void set_min_island_area(uint64_t value);
  private:
  uint64_t _internal_min_island_area() const;
  void _internal_set_min_island_area(uint64_t value);
  public:

  // .kiapi.board.types.IslandRemovalMode island_mode = 4;
  void clear_island_mode();
  ::kiapi::board::types::IslandRemovalMode island_mode() const;
  void set_island_mode(::kiapi::board::types::IslandRemovalMode value);
  private:
  ::kiapi::board::types::IslandRemovalMode _internal_island_mode() const;
  void _internal_set_island_mode(::kiapi::board::types::IslandRemovalMode value);
  public:

  // .kiapi.board.types.ZoneFillMode fill_mode = 6;
  void clear_fill_mode();
  ::kiapi::board::types::ZoneFillMode fill_mode() const;
  void set_fill_mode(::kiapi::board::types::ZoneFillMode value);
  private:
  ::kiapi::board::types::ZoneFillMode _internal_fill_mode() const;
  void _internal_set_fill_mode(::kiapi::board::types::ZoneFillMode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.CopperZoneSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::types::ZoneConnectionSettings* connection_;
  ::kiapi::common::types::Distance* clearance_;
  ::kiapi::common::types::Distance* min_thickness_;
  ::kiapi::board::types::HatchFillSettings* hatch_settings_;
  ::kiapi::board::types::Net* net_;
  ::kiapi::board::types::TeardropSettings* teardrop_;
  uint64_t min_island_area_;
  int island_mode_;
  int fill_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT RuleAreaSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.RuleAreaSettings) */ {
 public:
  inline RuleAreaSettings() : RuleAreaSettings(nullptr) {}
  ~RuleAreaSettings() override;
  explicit constexpr RuleAreaSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuleAreaSettings(const RuleAreaSettings& from);
  RuleAreaSettings(RuleAreaSettings&& from) noexcept
    : RuleAreaSettings() {
    *this = ::std::move(from);
  }

  inline RuleAreaSettings& operator=(const RuleAreaSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleAreaSettings& operator=(RuleAreaSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuleAreaSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuleAreaSettings* internal_default_instance() {
    return reinterpret_cast<const RuleAreaSettings*>(
               &_RuleAreaSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RuleAreaSettings& a, RuleAreaSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleAreaSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleAreaSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuleAreaSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuleAreaSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuleAreaSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuleAreaSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleAreaSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.RuleAreaSettings";
  }
  protected:
  explicit RuleAreaSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlacementSourceFieldNumber = 8,
    kKeepoutCopperFieldNumber = 1,
    kKeepoutViasFieldNumber = 2,
    kKeepoutTracksFieldNumber = 3,
    kKeepoutPadsFieldNumber = 4,
    kKeepoutFootprintsFieldNumber = 5,
    kPlacementEnabledFieldNumber = 6,
    kPlacementSourceTypeFieldNumber = 7,
  };
  // string placement_source = 8;
  void clear_placement_source();
  const std::string& placement_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_placement_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_placement_source();
  PROTOBUF_NODISCARD std::string* release_placement_source();
  void set_allocated_placement_source(std::string* placement_source);
  private:
  const std::string& _internal_placement_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_placement_source(const std::string& value);
  std::string* _internal_mutable_placement_source();
  public:

  // bool keepout_copper = 1;
  void clear_keepout_copper();
  bool keepout_copper() const;
  void set_keepout_copper(bool value);
  private:
  bool _internal_keepout_copper() const;
  void _internal_set_keepout_copper(bool value);
  public:

  // bool keepout_vias = 2;
  void clear_keepout_vias();
  bool keepout_vias() const;
  void set_keepout_vias(bool value);
  private:
  bool _internal_keepout_vias() const;
  void _internal_set_keepout_vias(bool value);
  public:

  // bool keepout_tracks = 3;
  void clear_keepout_tracks();
  bool keepout_tracks() const;
  void set_keepout_tracks(bool value);
  private:
  bool _internal_keepout_tracks() const;
  void _internal_set_keepout_tracks(bool value);
  public:

  // bool keepout_pads = 4;
  void clear_keepout_pads();
  bool keepout_pads() const;
  void set_keepout_pads(bool value);
  private:
  bool _internal_keepout_pads() const;
  void _internal_set_keepout_pads(bool value);
  public:

  // bool keepout_footprints = 5;
  void clear_keepout_footprints();
  bool keepout_footprints() const;
  void set_keepout_footprints(bool value);
  private:
  bool _internal_keepout_footprints() const;
  void _internal_set_keepout_footprints(bool value);
  public:

  // bool placement_enabled = 6;
  void clear_placement_enabled();
  bool placement_enabled() const;
  void set_placement_enabled(bool value);
  private:
  bool _internal_placement_enabled() const;
  void _internal_set_placement_enabled(bool value);
  public:

  // .kiapi.board.types.PlacementRuleSourceType placement_source_type = 7;
  void clear_placement_source_type();
  ::kiapi::board::types::PlacementRuleSourceType placement_source_type() const;
  void set_placement_source_type(::kiapi::board::types::PlacementRuleSourceType value);
  private:
  ::kiapi::board::types::PlacementRuleSourceType _internal_placement_source_type() const;
  void _internal_set_placement_source_type(::kiapi::board::types::PlacementRuleSourceType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.RuleAreaSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placement_source_;
  bool keepout_copper_;
  bool keepout_vias_;
  bool keepout_tracks_;
  bool keepout_pads_;
  bool keepout_footprints_;
  bool placement_enabled_;
  int placement_source_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ZoneBorderSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.ZoneBorderSettings) */ {
 public:
  inline ZoneBorderSettings() : ZoneBorderSettings(nullptr) {}
  ~ZoneBorderSettings() override;
  explicit constexpr ZoneBorderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoneBorderSettings(const ZoneBorderSettings& from);
  ZoneBorderSettings(ZoneBorderSettings&& from) noexcept
    : ZoneBorderSettings() {
    *this = ::std::move(from);
  }

  inline ZoneBorderSettings& operator=(const ZoneBorderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneBorderSettings& operator=(ZoneBorderSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneBorderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneBorderSettings* internal_default_instance() {
    return reinterpret_cast<const ZoneBorderSettings*>(
               &_ZoneBorderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ZoneBorderSettings& a, ZoneBorderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoneBorderSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneBorderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneBorderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoneBorderSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoneBorderSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZoneBorderSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoneBorderSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.ZoneBorderSettings";
  }
  protected:
  explicit ZoneBorderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPitchFieldNumber = 2,
    kStyleFieldNumber = 1,
  };
  // .kiapi.common.types.Distance pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  const ::kiapi::common::types::Distance& pitch() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_pitch();
  ::kiapi::common::types::Distance* mutable_pitch();
  void set_allocated_pitch(::kiapi::common::types::Distance* pitch);
  private:
  const ::kiapi::common::types::Distance& _internal_pitch() const;
  ::kiapi::common::types::Distance* _internal_mutable_pitch();
  public:
  void unsafe_arena_set_allocated_pitch(
      ::kiapi::common::types::Distance* pitch);
  ::kiapi::common::types::Distance* unsafe_arena_release_pitch();

  // .kiapi.board.types.ZoneBorderStyle style = 1;
  void clear_style();
  ::kiapi::board::types::ZoneBorderStyle style() const;
  void set_style(::kiapi::board::types::ZoneBorderStyle value);
  private:
  ::kiapi::board::types::ZoneBorderStyle _internal_style() const;
  void _internal_set_style(::kiapi::board::types::ZoneBorderStyle value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.ZoneBorderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Distance* pitch_;
  int style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ZoneFilledPolygons final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.ZoneFilledPolygons) */ {
 public:
  inline ZoneFilledPolygons() : ZoneFilledPolygons(nullptr) {}
  ~ZoneFilledPolygons() override;
  explicit constexpr ZoneFilledPolygons(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoneFilledPolygons(const ZoneFilledPolygons& from);
  ZoneFilledPolygons(ZoneFilledPolygons&& from) noexcept
    : ZoneFilledPolygons() {
    *this = ::std::move(from);
  }

  inline ZoneFilledPolygons& operator=(const ZoneFilledPolygons& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneFilledPolygons& operator=(ZoneFilledPolygons&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneFilledPolygons& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneFilledPolygons* internal_default_instance() {
    return reinterpret_cast<const ZoneFilledPolygons*>(
               &_ZoneFilledPolygons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ZoneFilledPolygons& a, ZoneFilledPolygons& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoneFilledPolygons* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneFilledPolygons* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneFilledPolygons* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoneFilledPolygons>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoneFilledPolygons& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZoneFilledPolygons& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoneFilledPolygons* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.ZoneFilledPolygons";
  }
  protected:
  explicit ZoneFilledPolygons(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapesFieldNumber = 2,
    kLayerFieldNumber = 1,
  };
  // .kiapi.common.types.PolySet shapes = 2;
  bool has_shapes() const;
  private:
  bool _internal_has_shapes() const;
  public:
  void clear_shapes();
  const ::kiapi::common::types::PolySet& shapes() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::PolySet* release_shapes();
  ::kiapi::common::types::PolySet* mutable_shapes();
  void set_allocated_shapes(::kiapi::common::types::PolySet* shapes);
  private:
  const ::kiapi::common::types::PolySet& _internal_shapes() const;
  ::kiapi::common::types::PolySet* _internal_mutable_shapes();
  public:
  void unsafe_arena_set_allocated_shapes(
      ::kiapi::common::types::PolySet* shapes);
  ::kiapi::common::types::PolySet* unsafe_arena_release_shapes();

  // .kiapi.board.types.BoardLayer layer = 1;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.ZoneFilledPolygons)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::PolySet* shapes_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ZoneLayerProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.ZoneLayerProperties) */ {
 public:
  inline ZoneLayerProperties() : ZoneLayerProperties(nullptr) {}
  ~ZoneLayerProperties() override;
  explicit constexpr ZoneLayerProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoneLayerProperties(const ZoneLayerProperties& from);
  ZoneLayerProperties(ZoneLayerProperties&& from) noexcept
    : ZoneLayerProperties() {
    *this = ::std::move(from);
  }

  inline ZoneLayerProperties& operator=(const ZoneLayerProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneLayerProperties& operator=(ZoneLayerProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneLayerProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneLayerProperties* internal_default_instance() {
    return reinterpret_cast<const ZoneLayerProperties*>(
               &_ZoneLayerProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ZoneLayerProperties& a, ZoneLayerProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoneLayerProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneLayerProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneLayerProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoneLayerProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoneLayerProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZoneLayerProperties& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoneLayerProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.ZoneLayerProperties";
  }
  protected:
  explicit ZoneLayerProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHatchingOffsetFieldNumber = 2,
    kLayerFieldNumber = 1,
  };
  // .kiapi.common.types.Vector2 hatching_offset = 2;
  bool has_hatching_offset() const;
  private:
  bool _internal_has_hatching_offset() const;
  public:
  void clear_hatching_offset();
  const ::kiapi::common::types::Vector2& hatching_offset() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_hatching_offset();
  ::kiapi::common::types::Vector2* mutable_hatching_offset();
  void set_allocated_hatching_offset(::kiapi::common::types::Vector2* hatching_offset);
  private:
  const ::kiapi::common::types::Vector2& _internal_hatching_offset() const;
  ::kiapi::common::types::Vector2* _internal_mutable_hatching_offset();
  public:
  void unsafe_arena_set_allocated_hatching_offset(
      ::kiapi::common::types::Vector2* hatching_offset);
  ::kiapi::common::types::Vector2* unsafe_arena_release_hatching_offset();

  // .kiapi.board.types.BoardLayer layer = 1;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.ZoneLayerProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Vector2* hatching_offset_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Zone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Zone) */ {
 public:
  inline Zone() : Zone(nullptr) {}
  ~Zone() override;
  explicit constexpr Zone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Zone(const Zone& from);
  Zone(Zone&& from) noexcept
    : Zone() {
    *this = ::std::move(from);
  }

  inline Zone& operator=(const Zone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zone& operator=(Zone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Zone& default_instance() {
    return *internal_default_instance();
  }
  enum SettingsCase {
    kCopperSettings = 6,
    kRuleAreaSettings = 7,
    SETTINGS_NOT_SET = 0,
  };

  static inline const Zone* internal_default_instance() {
    return reinterpret_cast<const Zone*>(
               &_Zone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Zone& a, Zone& b) {
    a.Swap(&b);
  }
  inline void Swap(Zone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Zone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Zone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Zone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Zone& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Zone";
  }
  protected:
  explicit Zone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 3,
    kFilledPolygonsFieldNumber = 10,
    kLayerPropertiesFieldNumber = 13,
    kNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kOutlineFieldNumber = 4,
    kBorderFieldNumber = 11,
    kTypeFieldNumber = 2,
    kPriorityFieldNumber = 8,
    kFilledFieldNumber = 9,
    kLockedFieldNumber = 12,
    kCopperSettingsFieldNumber = 6,
    kRuleAreaSettingsFieldNumber = 7,
  };
  // repeated .kiapi.board.types.BoardLayer layers = 3;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  private:
  ::kiapi::board::types::BoardLayer _internal_layers(int index) const;
  void _internal_add_layers(::kiapi::board::types::BoardLayer value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_layers();
  public:
  ::kiapi::board::types::BoardLayer layers(int index) const;
  void set_layers(int index, ::kiapi::board::types::BoardLayer value);
  void add_layers(::kiapi::board::types::BoardLayer value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_layers();

  // repeated .kiapi.board.types.ZoneFilledPolygons filled_polygons = 10;
  int filled_polygons_size() const;
  private:
  int _internal_filled_polygons_size() const;
  public:
  void clear_filled_polygons();
  ::kiapi::board::types::ZoneFilledPolygons* mutable_filled_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneFilledPolygons >*
      mutable_filled_polygons();
  private:
  const ::kiapi::board::types::ZoneFilledPolygons& _internal_filled_polygons(int index) const;
  ::kiapi::board::types::ZoneFilledPolygons* _internal_add_filled_polygons();
  public:
  const ::kiapi::board::types::ZoneFilledPolygons& filled_polygons(int index) const;
  ::kiapi::board::types::ZoneFilledPolygons* add_filled_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneFilledPolygons >&
      filled_polygons() const;

  // repeated .kiapi.board.types.ZoneLayerProperties layer_properties = 13;
  int layer_properties_size() const;
  private:
  int _internal_layer_properties_size() const;
  public:
  void clear_layer_properties();
  ::kiapi::board::types::ZoneLayerProperties* mutable_layer_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneLayerProperties >*
      mutable_layer_properties();
  private:
  const ::kiapi::board::types::ZoneLayerProperties& _internal_layer_properties(int index) const;
  ::kiapi::board::types::ZoneLayerProperties* _internal_add_layer_properties();
  public:
  const ::kiapi::board::types::ZoneLayerProperties& layer_properties(int index) const;
  ::kiapi::board::types::ZoneLayerProperties* add_layer_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneLayerProperties >&
      layer_properties() const;

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.PolySet outline = 4;
  bool has_outline() const;
  private:
  bool _internal_has_outline() const;
  public:
  void clear_outline();
  const ::kiapi::common::types::PolySet& outline() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::PolySet* release_outline();
  ::kiapi::common::types::PolySet* mutable_outline();
  void set_allocated_outline(::kiapi::common::types::PolySet* outline);
  private:
  const ::kiapi::common::types::PolySet& _internal_outline() const;
  ::kiapi::common::types::PolySet* _internal_mutable_outline();
  public:
  void unsafe_arena_set_allocated_outline(
      ::kiapi::common::types::PolySet* outline);
  ::kiapi::common::types::PolySet* unsafe_arena_release_outline();

  // .kiapi.board.types.ZoneBorderSettings border = 11;
  bool has_border() const;
  private:
  bool _internal_has_border() const;
  public:
  void clear_border();
  const ::kiapi::board::types::ZoneBorderSettings& border() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::ZoneBorderSettings* release_border();
  ::kiapi::board::types::ZoneBorderSettings* mutable_border();
  void set_allocated_border(::kiapi::board::types::ZoneBorderSettings* border);
  private:
  const ::kiapi::board::types::ZoneBorderSettings& _internal_border() const;
  ::kiapi::board::types::ZoneBorderSettings* _internal_mutable_border();
  public:
  void unsafe_arena_set_allocated_border(
      ::kiapi::board::types::ZoneBorderSettings* border);
  ::kiapi::board::types::ZoneBorderSettings* unsafe_arena_release_border();

  // .kiapi.board.types.ZoneType type = 2;
  void clear_type();
  ::kiapi::board::types::ZoneType type() const;
  void set_type(::kiapi::board::types::ZoneType value);
  private:
  ::kiapi::board::types::ZoneType _internal_type() const;
  void _internal_set_type(::kiapi::board::types::ZoneType value);
  public:

  // uint32 priority = 8;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // bool filled = 9;
  void clear_filled();
  bool filled() const;
  void set_filled(bool value);
  private:
  bool _internal_filled() const;
  void _internal_set_filled(bool value);
  public:

  // .kiapi.common.types.LockedState locked = 12;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // .kiapi.board.types.CopperZoneSettings copper_settings = 6;
  bool has_copper_settings() const;
  private:
  bool _internal_has_copper_settings() const;
  public:
  void clear_copper_settings();
  const ::kiapi::board::types::CopperZoneSettings& copper_settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::CopperZoneSettings* release_copper_settings();
  ::kiapi::board::types::CopperZoneSettings* mutable_copper_settings();
  void set_allocated_copper_settings(::kiapi::board::types::CopperZoneSettings* copper_settings);
  private:
  const ::kiapi::board::types::CopperZoneSettings& _internal_copper_settings() const;
  ::kiapi::board::types::CopperZoneSettings* _internal_mutable_copper_settings();
  public:
  void unsafe_arena_set_allocated_copper_settings(
      ::kiapi::board::types::CopperZoneSettings* copper_settings);
  ::kiapi::board::types::CopperZoneSettings* unsafe_arena_release_copper_settings();

  // .kiapi.board.types.RuleAreaSettings rule_area_settings = 7;
  bool has_rule_area_settings() const;
  private:
  bool _internal_has_rule_area_settings() const;
  public:
  void clear_rule_area_settings();
  const ::kiapi::board::types::RuleAreaSettings& rule_area_settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::RuleAreaSettings* release_rule_area_settings();
  ::kiapi::board::types::RuleAreaSettings* mutable_rule_area_settings();
  void set_allocated_rule_area_settings(::kiapi::board::types::RuleAreaSettings* rule_area_settings);
  private:
  const ::kiapi::board::types::RuleAreaSettings& _internal_rule_area_settings() const;
  ::kiapi::board::types::RuleAreaSettings* _internal_mutable_rule_area_settings();
  public:
  void unsafe_arena_set_allocated_rule_area_settings(
      ::kiapi::board::types::RuleAreaSettings* rule_area_settings);
  ::kiapi::board::types::RuleAreaSettings* unsafe_arena_release_rule_area_settings();

  void clear_settings();
  SettingsCase settings_case() const;
  // @@protoc_insertion_point(class_scope:kiapi.board.types.Zone)
 private:
  class _Internal;
  void set_has_copper_settings();
  void set_has_rule_area_settings();

  inline bool has_settings() const;
  inline void clear_has_settings();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> layers_;
  mutable std::atomic<int> _layers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneFilledPolygons > filled_polygons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneLayerProperties > layer_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::PolySet* outline_;
  ::kiapi::board::types::ZoneBorderSettings* border_;
  int type_;
  uint32_t priority_;
  bool filled_;
  int locked_;
  union SettingsUnion {
    constexpr SettingsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::kiapi::board::types::CopperZoneSettings* copper_settings_;
    ::kiapi::board::types::RuleAreaSettings* rule_area_settings_;
  } settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT AlignedDimensionAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.AlignedDimensionAttributes) */ {
 public:
  inline AlignedDimensionAttributes() : AlignedDimensionAttributes(nullptr) {}
  ~AlignedDimensionAttributes() override;
  explicit constexpr AlignedDimensionAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlignedDimensionAttributes(const AlignedDimensionAttributes& from);
  AlignedDimensionAttributes(AlignedDimensionAttributes&& from) noexcept
    : AlignedDimensionAttributes() {
    *this = ::std::move(from);
  }

  inline AlignedDimensionAttributes& operator=(const AlignedDimensionAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlignedDimensionAttributes& operator=(AlignedDimensionAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlignedDimensionAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlignedDimensionAttributes* internal_default_instance() {
    return reinterpret_cast<const AlignedDimensionAttributes*>(
               &_AlignedDimensionAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(AlignedDimensionAttributes& a, AlignedDimensionAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(AlignedDimensionAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlignedDimensionAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlignedDimensionAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlignedDimensionAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlignedDimensionAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlignedDimensionAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlignedDimensionAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.AlignedDimensionAttributes";
  }
  protected:
  explicit AlignedDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kHeightFieldNumber = 3,
    kExtensionHeightFieldNumber = 4,
  };
  // .kiapi.common.types.Vector2 start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::kiapi::common::types::Vector2& start() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_start();
  ::kiapi::common::types::Vector2* mutable_start();
  void set_allocated_start(::kiapi::common::types::Vector2* start);
  private:
  const ::kiapi::common::types::Vector2& _internal_start() const;
  ::kiapi::common::types::Vector2* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::kiapi::common::types::Vector2* start);
  ::kiapi::common::types::Vector2* unsafe_arena_release_start();

  // .kiapi.common.types.Vector2 end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::kiapi::common::types::Vector2& end() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_end();
  ::kiapi::common::types::Vector2* mutable_end();
  void set_allocated_end(::kiapi::common::types::Vector2* end);
  private:
  const ::kiapi::common::types::Vector2& _internal_end() const;
  ::kiapi::common::types::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::kiapi::common::types::Vector2* end);
  ::kiapi::common::types::Vector2* unsafe_arena_release_end();

  // .kiapi.common.types.Distance height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  const ::kiapi::common::types::Distance& height() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_height();
  ::kiapi::common::types::Distance* mutable_height();
  void set_allocated_height(::kiapi::common::types::Distance* height);
  private:
  const ::kiapi::common::types::Distance& _internal_height() const;
  ::kiapi::common::types::Distance* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::kiapi::common::types::Distance* height);
  ::kiapi::common::types::Distance* unsafe_arena_release_height();

  // .kiapi.common.types.Distance extension_height = 4;
  bool has_extension_height() const;
  private:
  bool _internal_has_extension_height() const;
  public:
  void clear_extension_height();
  const ::kiapi::common::types::Distance& extension_height() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_extension_height();
  ::kiapi::common::types::Distance* mutable_extension_height();
  void set_allocated_extension_height(::kiapi::common::types::Distance* extension_height);
  private:
  const ::kiapi::common::types::Distance& _internal_extension_height() const;
  ::kiapi::common::types::Distance* _internal_mutable_extension_height();
  public:
  void unsafe_arena_set_allocated_extension_height(
      ::kiapi::common::types::Distance* extension_height);
  ::kiapi::common::types::Distance* unsafe_arena_release_extension_height();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.AlignedDimensionAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Vector2* start_;
  ::kiapi::common::types::Vector2* end_;
  ::kiapi::common::types::Distance* height_;
  ::kiapi::common::types::Distance* extension_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT OrthogonalDimensionAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.OrthogonalDimensionAttributes) */ {
 public:
  inline OrthogonalDimensionAttributes() : OrthogonalDimensionAttributes(nullptr) {}
  ~OrthogonalDimensionAttributes() override;
  explicit constexpr OrthogonalDimensionAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrthogonalDimensionAttributes(const OrthogonalDimensionAttributes& from);
  OrthogonalDimensionAttributes(OrthogonalDimensionAttributes&& from) noexcept
    : OrthogonalDimensionAttributes() {
    *this = ::std::move(from);
  }

  inline OrthogonalDimensionAttributes& operator=(const OrthogonalDimensionAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrthogonalDimensionAttributes& operator=(OrthogonalDimensionAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrthogonalDimensionAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrthogonalDimensionAttributes* internal_default_instance() {
    return reinterpret_cast<const OrthogonalDimensionAttributes*>(
               &_OrthogonalDimensionAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(OrthogonalDimensionAttributes& a, OrthogonalDimensionAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(OrthogonalDimensionAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrthogonalDimensionAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrthogonalDimensionAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrthogonalDimensionAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrthogonalDimensionAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrthogonalDimensionAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrthogonalDimensionAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.OrthogonalDimensionAttributes";
  }
  protected:
  explicit OrthogonalDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kHeightFieldNumber = 3,
    kExtensionHeightFieldNumber = 4,
    kAlignmentFieldNumber = 5,
  };
  // .kiapi.common.types.Vector2 start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::kiapi::common::types::Vector2& start() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_start();
  ::kiapi::common::types::Vector2* mutable_start();
  void set_allocated_start(::kiapi::common::types::Vector2* start);
  private:
  const ::kiapi::common::types::Vector2& _internal_start() const;
  ::kiapi::common::types::Vector2* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::kiapi::common::types::Vector2* start);
  ::kiapi::common::types::Vector2* unsafe_arena_release_start();

  // .kiapi.common.types.Vector2 end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::kiapi::common::types::Vector2& end() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_end();
  ::kiapi::common::types::Vector2* mutable_end();
  void set_allocated_end(::kiapi::common::types::Vector2* end);
  private:
  const ::kiapi::common::types::Vector2& _internal_end() const;
  ::kiapi::common::types::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::kiapi::common::types::Vector2* end);
  ::kiapi::common::types::Vector2* unsafe_arena_release_end();

  // .kiapi.common.types.Distance height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  const ::kiapi::common::types::Distance& height() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_height();
  ::kiapi::common::types::Distance* mutable_height();
  void set_allocated_height(::kiapi::common::types::Distance* height);
  private:
  const ::kiapi::common::types::Distance& _internal_height() const;
  ::kiapi::common::types::Distance* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::kiapi::common::types::Distance* height);
  ::kiapi::common::types::Distance* unsafe_arena_release_height();

  // .kiapi.common.types.Distance extension_height = 4;
  bool has_extension_height() const;
  private:
  bool _internal_has_extension_height() const;
  public:
  void clear_extension_height();
  const ::kiapi::common::types::Distance& extension_height() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_extension_height();
  ::kiapi::common::types::Distance* mutable_extension_height();
  void set_allocated_extension_height(::kiapi::common::types::Distance* extension_height);
  private:
  const ::kiapi::common::types::Distance& _internal_extension_height() const;
  ::kiapi::common::types::Distance* _internal_mutable_extension_height();
  public:
  void unsafe_arena_set_allocated_extension_height(
      ::kiapi::common::types::Distance* extension_height);
  ::kiapi::common::types::Distance* unsafe_arena_release_extension_height();

  // .kiapi.common.types.AxisAlignment alignment = 5;
  void clear_alignment();
  ::kiapi::common::types::AxisAlignment alignment() const;
  void set_alignment(::kiapi::common::types::AxisAlignment value);
  private:
  ::kiapi::common::types::AxisAlignment _internal_alignment() const;
  void _internal_set_alignment(::kiapi::common::types::AxisAlignment value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.OrthogonalDimensionAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Vector2* start_;
  ::kiapi::common::types::Vector2* end_;
  ::kiapi::common::types::Distance* height_;
  ::kiapi::common::types::Distance* extension_height_;
  int alignment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT RadialDimensionAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.RadialDimensionAttributes) */ {
 public:
  inline RadialDimensionAttributes() : RadialDimensionAttributes(nullptr) {}
  ~RadialDimensionAttributes() override;
  explicit constexpr RadialDimensionAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadialDimensionAttributes(const RadialDimensionAttributes& from);
  RadialDimensionAttributes(RadialDimensionAttributes&& from) noexcept
    : RadialDimensionAttributes() {
    *this = ::std::move(from);
  }

  inline RadialDimensionAttributes& operator=(const RadialDimensionAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadialDimensionAttributes& operator=(RadialDimensionAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadialDimensionAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadialDimensionAttributes* internal_default_instance() {
    return reinterpret_cast<const RadialDimensionAttributes*>(
               &_RadialDimensionAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RadialDimensionAttributes& a, RadialDimensionAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(RadialDimensionAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadialDimensionAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadialDimensionAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadialDimensionAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadialDimensionAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RadialDimensionAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadialDimensionAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.RadialDimensionAttributes";
  }
  protected:
  explicit RadialDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusPointFieldNumber = 2,
    kLeaderLengthFieldNumber = 3,
  };
  // .kiapi.common.types.Vector2 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::kiapi::common::types::Vector2& center() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_center();
  ::kiapi::common::types::Vector2* mutable_center();
  void set_allocated_center(::kiapi::common::types::Vector2* center);
  private:
  const ::kiapi::common::types::Vector2& _internal_center() const;
  ::kiapi::common::types::Vector2* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::kiapi::common::types::Vector2* center);
  ::kiapi::common::types::Vector2* unsafe_arena_release_center();

  // .kiapi.common.types.Vector2 radius_point = 2;
  bool has_radius_point() const;
  private:
  bool _internal_has_radius_point() const;
  public:
  void clear_radius_point();
  const ::kiapi::common::types::Vector2& radius_point() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_radius_point();
  ::kiapi::common::types::Vector2* mutable_radius_point();
  void set_allocated_radius_point(::kiapi::common::types::Vector2* radius_point);
  private:
  const ::kiapi::common::types::Vector2& _internal_radius_point() const;
  ::kiapi::common::types::Vector2* _internal_mutable_radius_point();
  public:
  void unsafe_arena_set_allocated_radius_point(
      ::kiapi::common::types::Vector2* radius_point);
  ::kiapi::common::types::Vector2* unsafe_arena_release_radius_point();

  // .kiapi.common.types.Distance leader_length = 3;
  bool has_leader_length() const;
  private:
  bool _internal_has_leader_length() const;
  public:
  void clear_leader_length();
  const ::kiapi::common::types::Distance& leader_length() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_leader_length();
  ::kiapi::common::types::Distance* mutable_leader_length();
  void set_allocated_leader_length(::kiapi::common::types::Distance* leader_length);
  private:
  const ::kiapi::common::types::Distance& _internal_leader_length() const;
  ::kiapi::common::types::Distance* _internal_mutable_leader_length();
  public:
  void unsafe_arena_set_allocated_leader_length(
      ::kiapi::common::types::Distance* leader_length);
  ::kiapi::common::types::Distance* unsafe_arena_release_leader_length();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.RadialDimensionAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Vector2* center_;
  ::kiapi::common::types::Vector2* radius_point_;
  ::kiapi::common::types::Distance* leader_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT LeaderDimensionAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.LeaderDimensionAttributes) */ {
 public:
  inline LeaderDimensionAttributes() : LeaderDimensionAttributes(nullptr) {}
  ~LeaderDimensionAttributes() override;
  explicit constexpr LeaderDimensionAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaderDimensionAttributes(const LeaderDimensionAttributes& from);
  LeaderDimensionAttributes(LeaderDimensionAttributes&& from) noexcept
    : LeaderDimensionAttributes() {
    *this = ::std::move(from);
  }

  inline LeaderDimensionAttributes& operator=(const LeaderDimensionAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderDimensionAttributes& operator=(LeaderDimensionAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaderDimensionAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaderDimensionAttributes* internal_default_instance() {
    return reinterpret_cast<const LeaderDimensionAttributes*>(
               &_LeaderDimensionAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LeaderDimensionAttributes& a, LeaderDimensionAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderDimensionAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderDimensionAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaderDimensionAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaderDimensionAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaderDimensionAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LeaderDimensionAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderDimensionAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.LeaderDimensionAttributes";
  }
  protected:
  explicit LeaderDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kBorderStyleFieldNumber = 3,
  };
  // .kiapi.common.types.Vector2 start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::kiapi::common::types::Vector2& start() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_start();
  ::kiapi::common::types::Vector2* mutable_start();
  void set_allocated_start(::kiapi::common::types::Vector2* start);
  private:
  const ::kiapi::common::types::Vector2& _internal_start() const;
  ::kiapi::common::types::Vector2* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::kiapi::common::types::Vector2* start);
  ::kiapi::common::types::Vector2* unsafe_arena_release_start();

  // .kiapi.common.types.Vector2 end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::kiapi::common::types::Vector2& end() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_end();
  ::kiapi::common::types::Vector2* mutable_end();
  void set_allocated_end(::kiapi::common::types::Vector2* end);
  private:
  const ::kiapi::common::types::Vector2& _internal_end() const;
  ::kiapi::common::types::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::kiapi::common::types::Vector2* end);
  ::kiapi::common::types::Vector2* unsafe_arena_release_end();

  // .kiapi.board.types.DimensionTextBorderStyle border_style = 3;
  void clear_border_style();
  ::kiapi::board::types::DimensionTextBorderStyle border_style() const;
  void set_border_style(::kiapi::board::types::DimensionTextBorderStyle value);
  private:
  ::kiapi::board::types::DimensionTextBorderStyle _internal_border_style() const;
  void _internal_set_border_style(::kiapi::board::types::DimensionTextBorderStyle value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.LeaderDimensionAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Vector2* start_;
  ::kiapi::common::types::Vector2* end_;
  int border_style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT CenterDimensionAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.CenterDimensionAttributes) */ {
 public:
  inline CenterDimensionAttributes() : CenterDimensionAttributes(nullptr) {}
  ~CenterDimensionAttributes() override;
  explicit constexpr CenterDimensionAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CenterDimensionAttributes(const CenterDimensionAttributes& from);
  CenterDimensionAttributes(CenterDimensionAttributes&& from) noexcept
    : CenterDimensionAttributes() {
    *this = ::std::move(from);
  }

  inline CenterDimensionAttributes& operator=(const CenterDimensionAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CenterDimensionAttributes& operator=(CenterDimensionAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CenterDimensionAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CenterDimensionAttributes* internal_default_instance() {
    return reinterpret_cast<const CenterDimensionAttributes*>(
               &_CenterDimensionAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CenterDimensionAttributes& a, CenterDimensionAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(CenterDimensionAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CenterDimensionAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CenterDimensionAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CenterDimensionAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CenterDimensionAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CenterDimensionAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CenterDimensionAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.CenterDimensionAttributes";
  }
  protected:
  explicit CenterDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .kiapi.common.types.Vector2 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::kiapi::common::types::Vector2& center() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_center();
  ::kiapi::common::types::Vector2* mutable_center();
  void set_allocated_center(::kiapi::common::types::Vector2* center);
  private:
  const ::kiapi::common::types::Vector2& _internal_center() const;
  ::kiapi::common::types::Vector2* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::kiapi::common::types::Vector2* center);
  ::kiapi::common::types::Vector2* unsafe_arena_release_center();

  // .kiapi.common.types.Vector2 end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::kiapi::common::types::Vector2& end() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_end();
  ::kiapi::common::types::Vector2* mutable_end();
  void set_allocated_end(::kiapi::common::types::Vector2* end);
  private:
  const ::kiapi::common::types::Vector2& _internal_end() const;
  ::kiapi::common::types::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::kiapi::common::types::Vector2* end);
  ::kiapi::common::types::Vector2* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.CenterDimensionAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::Vector2* center_;
  ::kiapi::common::types::Vector2* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Dimension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Dimension) */ {
 public:
  inline Dimension() : Dimension(nullptr) {}
  ~Dimension() override;
  explicit constexpr Dimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimension(const Dimension& from);
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension& operator=(Dimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dimension& default_instance() {
    return *internal_default_instance();
  }
  enum DimensionStyleCase {
    kAligned = 5,
    kOrthogonal = 6,
    kRadial = 7,
    kLeader = 8,
    kCenter = 9,
    DIMENSION_STYLE_NOT_SET = 0,
  };

  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dimension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Dimension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Dimension";
  }
  protected:
  explicit Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverrideTextFieldNumber = 11,
    kPrefixFieldNumber = 12,
    kSuffixFieldNumber = 13,
    kIdFieldNumber = 1,
    kTextFieldNumber = 4,
    kLineThicknessFieldNumber = 19,
    kArrowLengthFieldNumber = 20,
    kExtensionOffsetFieldNumber = 21,
    kLockedFieldNumber = 2,
    kLayerFieldNumber = 3,
    kUnitFieldNumber = 14,
    kUnitFormatFieldNumber = 15,
    kArrowDirectionFieldNumber = 16,
    kPrecisionFieldNumber = 17,
    kOverrideTextEnabledFieldNumber = 10,
    kSuppressTrailingZeroesFieldNumber = 18,
    kKeepTextAlignedFieldNumber = 23,
    kTextPositionFieldNumber = 22,
    kAlignedFieldNumber = 5,
    kOrthogonalFieldNumber = 6,
    kRadialFieldNumber = 7,
    kLeaderFieldNumber = 8,
    kCenterFieldNumber = 9,
  };
  // string override_text = 11;
  void clear_override_text();
  const std::string& override_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_override_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_override_text();
  PROTOBUF_NODISCARD std::string* release_override_text();
  void set_allocated_override_text(std::string* override_text);
  private:
  const std::string& _internal_override_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_override_text(const std::string& value);
  std::string* _internal_mutable_override_text();
  public:

  // string prefix = 12;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // string suffix = 13;
  void clear_suffix();
  const std::string& suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix();
  PROTOBUF_NODISCARD std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Text text = 4;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::common::types::Text& text() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Text* release_text();
  ::kiapi::common::types::Text* mutable_text();
  void set_allocated_text(::kiapi::common::types::Text* text);
  private:
  const ::kiapi::common::types::Text& _internal_text() const;
  ::kiapi::common::types::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::common::types::Text* text);
  ::kiapi::common::types::Text* unsafe_arena_release_text();

  // .kiapi.common.types.Distance line_thickness = 19;
  bool has_line_thickness() const;
  private:
  bool _internal_has_line_thickness() const;
  public:
  void clear_line_thickness();
  const ::kiapi::common::types::Distance& line_thickness() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_line_thickness();
  ::kiapi::common::types::Distance* mutable_line_thickness();
  void set_allocated_line_thickness(::kiapi::common::types::Distance* line_thickness);
  private:
  const ::kiapi::common::types::Distance& _internal_line_thickness() const;
  ::kiapi::common::types::Distance* _internal_mutable_line_thickness();
  public:
  void unsafe_arena_set_allocated_line_thickness(
      ::kiapi::common::types::Distance* line_thickness);
  ::kiapi::common::types::Distance* unsafe_arena_release_line_thickness();

  // .kiapi.common.types.Distance arrow_length = 20;
  bool has_arrow_length() const;
  private:
  bool _internal_has_arrow_length() const;
  public:
  void clear_arrow_length();
  const ::kiapi::common::types::Distance& arrow_length() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_arrow_length();
  ::kiapi::common::types::Distance* mutable_arrow_length();
  void set_allocated_arrow_length(::kiapi::common::types::Distance* arrow_length);
  private:
  const ::kiapi::common::types::Distance& _internal_arrow_length() const;
  ::kiapi::common::types::Distance* _internal_mutable_arrow_length();
  public:
  void unsafe_arena_set_allocated_arrow_length(
      ::kiapi::common::types::Distance* arrow_length);
  ::kiapi::common::types::Distance* unsafe_arena_release_arrow_length();

  // .kiapi.common.types.Distance extension_offset = 21;
  bool has_extension_offset() const;
  private:
  bool _internal_has_extension_offset() const;
  public:
  void clear_extension_offset();
  const ::kiapi::common::types::Distance& extension_offset() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_extension_offset();
  ::kiapi::common::types::Distance* mutable_extension_offset();
  void set_allocated_extension_offset(::kiapi::common::types::Distance* extension_offset);
  private:
  const ::kiapi::common::types::Distance& _internal_extension_offset() const;
  ::kiapi::common::types::Distance* _internal_mutable_extension_offset();
  public:
  void unsafe_arena_set_allocated_extension_offset(
      ::kiapi::common::types::Distance* extension_offset);
  ::kiapi::common::types::Distance* unsafe_arena_release_extension_offset();

  // .kiapi.common.types.LockedState locked = 2;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // .kiapi.board.types.BoardLayer layer = 3;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // .kiapi.board.types.DimensionUnit unit = 14;
  void clear_unit();
  ::kiapi::board::types::DimensionUnit unit() const;
  void set_unit(::kiapi::board::types::DimensionUnit value);
  private:
  ::kiapi::board::types::DimensionUnit _internal_unit() const;
  void _internal_set_unit(::kiapi::board::types::DimensionUnit value);
  public:

  // .kiapi.board.types.DimensionUnitFormat unit_format = 15;
  void clear_unit_format();
  ::kiapi::board::types::DimensionUnitFormat unit_format() const;
  void set_unit_format(::kiapi::board::types::DimensionUnitFormat value);
  private:
  ::kiapi::board::types::DimensionUnitFormat _internal_unit_format() const;
  void _internal_set_unit_format(::kiapi::board::types::DimensionUnitFormat value);
  public:

  // .kiapi.board.types.DimensionArrowDirection arrow_direction = 16;
  void clear_arrow_direction();
  ::kiapi::board::types::DimensionArrowDirection arrow_direction() const;
  void set_arrow_direction(::kiapi::board::types::DimensionArrowDirection value);
  private:
  ::kiapi::board::types::DimensionArrowDirection _internal_arrow_direction() const;
  void _internal_set_arrow_direction(::kiapi::board::types::DimensionArrowDirection value);
  public:

  // .kiapi.board.types.DimensionPrecision precision = 17;
  void clear_precision();
  ::kiapi::board::types::DimensionPrecision precision() const;
  void set_precision(::kiapi::board::types::DimensionPrecision value);
  private:
  ::kiapi::board::types::DimensionPrecision _internal_precision() const;
  void _internal_set_precision(::kiapi::board::types::DimensionPrecision value);
  public:

  // bool override_text_enabled = 10;
  void clear_override_text_enabled();
  bool override_text_enabled() const;
  void set_override_text_enabled(bool value);
  private:
  bool _internal_override_text_enabled() const;
  void _internal_set_override_text_enabled(bool value);
  public:

  // bool suppress_trailing_zeroes = 18;
  void clear_suppress_trailing_zeroes();
  bool suppress_trailing_zeroes() const;
  void set_suppress_trailing_zeroes(bool value);
  private:
  bool _internal_suppress_trailing_zeroes() const;
  void _internal_set_suppress_trailing_zeroes(bool value);
  public:

  // bool keep_text_aligned = 23;
  void clear_keep_text_aligned();
  bool keep_text_aligned() const;
  void set_keep_text_aligned(bool value);
  private:
  bool _internal_keep_text_aligned() const;
  void _internal_set_keep_text_aligned(bool value);
  public:

  // .kiapi.board.types.DimensionTextPosition text_position = 22;
  void clear_text_position();
  ::kiapi::board::types::DimensionTextPosition text_position() const;
  void set_text_position(::kiapi::board::types::DimensionTextPosition value);
  private:
  ::kiapi::board::types::DimensionTextPosition _internal_text_position() const;
  void _internal_set_text_position(::kiapi::board::types::DimensionTextPosition value);
  public:

  // .kiapi.board.types.AlignedDimensionAttributes aligned = 5;
  bool has_aligned() const;
  private:
  bool _internal_has_aligned() const;
  public:
  void clear_aligned();
  const ::kiapi::board::types::AlignedDimensionAttributes& aligned() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::AlignedDimensionAttributes* release_aligned();
  ::kiapi::board::types::AlignedDimensionAttributes* mutable_aligned();
  void set_allocated_aligned(::kiapi::board::types::AlignedDimensionAttributes* aligned);
  private:
  const ::kiapi::board::types::AlignedDimensionAttributes& _internal_aligned() const;
  ::kiapi::board::types::AlignedDimensionAttributes* _internal_mutable_aligned();
  public:
  void unsafe_arena_set_allocated_aligned(
      ::kiapi::board::types::AlignedDimensionAttributes* aligned);
  ::kiapi::board::types::AlignedDimensionAttributes* unsafe_arena_release_aligned();

  // .kiapi.board.types.OrthogonalDimensionAttributes orthogonal = 6;
  bool has_orthogonal() const;
  private:
  bool _internal_has_orthogonal() const;
  public:
  void clear_orthogonal();
  const ::kiapi::board::types::OrthogonalDimensionAttributes& orthogonal() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::OrthogonalDimensionAttributes* release_orthogonal();
  ::kiapi::board::types::OrthogonalDimensionAttributes* mutable_orthogonal();
  void set_allocated_orthogonal(::kiapi::board::types::OrthogonalDimensionAttributes* orthogonal);
  private:
  const ::kiapi::board::types::OrthogonalDimensionAttributes& _internal_orthogonal() const;
  ::kiapi::board::types::OrthogonalDimensionAttributes* _internal_mutable_orthogonal();
  public:
  void unsafe_arena_set_allocated_orthogonal(
      ::kiapi::board::types::OrthogonalDimensionAttributes* orthogonal);
  ::kiapi::board::types::OrthogonalDimensionAttributes* unsafe_arena_release_orthogonal();

  // .kiapi.board.types.RadialDimensionAttributes radial = 7;
  bool has_radial() const;
  private:
  bool _internal_has_radial() const;
  public:
  void clear_radial();
  const ::kiapi::board::types::RadialDimensionAttributes& radial() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::RadialDimensionAttributes* release_radial();
  ::kiapi::board::types::RadialDimensionAttributes* mutable_radial();
  void set_allocated_radial(::kiapi::board::types::RadialDimensionAttributes* radial);
  private:
  const ::kiapi::board::types::RadialDimensionAttributes& _internal_radial() const;
  ::kiapi::board::types::RadialDimensionAttributes* _internal_mutable_radial();
  public:
  void unsafe_arena_set_allocated_radial(
      ::kiapi::board::types::RadialDimensionAttributes* radial);
  ::kiapi::board::types::RadialDimensionAttributes* unsafe_arena_release_radial();

  // .kiapi.board.types.LeaderDimensionAttributes leader = 8;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const ::kiapi::board::types::LeaderDimensionAttributes& leader() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::LeaderDimensionAttributes* release_leader();
  ::kiapi::board::types::LeaderDimensionAttributes* mutable_leader();
  void set_allocated_leader(::kiapi::board::types::LeaderDimensionAttributes* leader);
  private:
  const ::kiapi::board::types::LeaderDimensionAttributes& _internal_leader() const;
  ::kiapi::board::types::LeaderDimensionAttributes* _internal_mutable_leader();
  public:
  void unsafe_arena_set_allocated_leader(
      ::kiapi::board::types::LeaderDimensionAttributes* leader);
  ::kiapi::board::types::LeaderDimensionAttributes* unsafe_arena_release_leader();

  // .kiapi.board.types.CenterDimensionAttributes center = 9;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::kiapi::board::types::CenterDimensionAttributes& center() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::CenterDimensionAttributes* release_center();
  ::kiapi::board::types::CenterDimensionAttributes* mutable_center();
  void set_allocated_center(::kiapi::board::types::CenterDimensionAttributes* center);
  private:
  const ::kiapi::board::types::CenterDimensionAttributes& _internal_center() const;
  ::kiapi::board::types::CenterDimensionAttributes* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::kiapi::board::types::CenterDimensionAttributes* center);
  ::kiapi::board::types::CenterDimensionAttributes* unsafe_arena_release_center();

  void clear_dimension_style();
  DimensionStyleCase dimension_style_case() const;
  // @@protoc_insertion_point(class_scope:kiapi.board.types.Dimension)
 private:
  class _Internal;
  void set_has_aligned();
  void set_has_orthogonal();
  void set_has_radial();
  void set_has_leader();
  void set_has_center();

  inline bool has_dimension_style() const;
  inline void clear_has_dimension_style();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr override_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Text* text_;
  ::kiapi::common::types::Distance* line_thickness_;
  ::kiapi::common::types::Distance* arrow_length_;
  ::kiapi::common::types::Distance* extension_offset_;
  int locked_;
  int layer_;
  int unit_;
  int unit_format_;
  int arrow_direction_;
  int precision_;
  bool override_text_enabled_;
  bool suppress_trailing_zeroes_;
  bool keep_text_aligned_;
  int text_position_;
  union DimensionStyleUnion {
    constexpr DimensionStyleUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::kiapi::board::types::AlignedDimensionAttributes* aligned_;
    ::kiapi::board::types::OrthogonalDimensionAttributes* orthogonal_;
    ::kiapi::board::types::RadialDimensionAttributes* radial_;
    ::kiapi::board::types::LeaderDimensionAttributes* leader_;
    ::kiapi::board::types::CenterDimensionAttributes* center_;
  } dimension_style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT ReferenceImage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kiapi.board.types.ReferenceImage) */ {
 public:
  inline ReferenceImage() : ReferenceImage(nullptr) {}
  explicit constexpr ReferenceImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceImage(const ReferenceImage& from);
  ReferenceImage(ReferenceImage&& from) noexcept
    : ReferenceImage() {
    *this = ::std::move(from);
  }

  inline ReferenceImage& operator=(const ReferenceImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceImage& operator=(ReferenceImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceImage* internal_default_instance() {
    return reinterpret_cast<const ReferenceImage*>(
               &_ReferenceImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ReferenceImage& a, ReferenceImage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReferenceImage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReferenceImage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.ReferenceImage";
  }
  protected:
  explicit ReferenceImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kiapi.board.types.ReferenceImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Group final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kiapi.board.types.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  explicit constexpr Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Group& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Group& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT FieldId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.FieldId) */ {
 public:
  inline FieldId() : FieldId(nullptr) {}
  ~FieldId() override;
  explicit constexpr FieldId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldId(const FieldId& from);
  FieldId(FieldId&& from) noexcept
    : FieldId() {
    *this = ::std::move(from);
  }

  inline FieldId& operator=(const FieldId& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldId& operator=(FieldId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldId& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldId* internal_default_instance() {
    return reinterpret_cast<const FieldId*>(
               &_FieldId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FieldId& a, FieldId& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.FieldId";
  }
  protected:
  explicit FieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.FieldId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Field final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Field) */ {
 public:
  inline Field() : Field(nullptr) {}
  ~Field() override;
  explicit constexpr Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Field& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Field& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Field";
  }
  protected:
  explicit Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kTextFieldNumber = 3,
    kVisibleFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .kiapi.board.types.FieldId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::board::types::FieldId& id() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::FieldId* release_id();
  ::kiapi::board::types::FieldId* mutable_id();
  void set_allocated_id(::kiapi::board::types::FieldId* id);
  private:
  const ::kiapi::board::types::FieldId& _internal_id() const;
  ::kiapi::board::types::FieldId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::board::types::FieldId* id);
  ::kiapi::board::types::FieldId* unsafe_arena_release_id();

  // .kiapi.board.types.BoardText text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::board::types::BoardText& text() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::BoardText* release_text();
  ::kiapi::board::types::BoardText* mutable_text();
  void set_allocated_text(::kiapi::board::types::BoardText* text);
  private:
  const ::kiapi::board::types::BoardText& _internal_text() const;
  ::kiapi::board::types::BoardText* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::board::types::BoardText* text);
  ::kiapi::board::types::BoardText* unsafe_arena_release_text();

  // bool visible = 4;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Field)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::kiapi::board::types::FieldId* id_;
  ::kiapi::board::types::BoardText* text_;
  bool visible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT FootprintAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.FootprintAttributes) */ {
 public:
  inline FootprintAttributes() : FootprintAttributes(nullptr) {}
  ~FootprintAttributes() override;
  explicit constexpr FootprintAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FootprintAttributes(const FootprintAttributes& from);
  FootprintAttributes(FootprintAttributes&& from) noexcept
    : FootprintAttributes() {
    *this = ::std::move(from);
  }

  inline FootprintAttributes& operator=(const FootprintAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FootprintAttributes& operator=(FootprintAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FootprintAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const FootprintAttributes* internal_default_instance() {
    return reinterpret_cast<const FootprintAttributes*>(
               &_FootprintAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(FootprintAttributes& a, FootprintAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(FootprintAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FootprintAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FootprintAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FootprintAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FootprintAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FootprintAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FootprintAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.FootprintAttributes";
  }
  protected:
  explicit FootprintAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kKeywordsFieldNumber = 2,
    kNotInSchematicFieldNumber = 3,
    kExcludeFromPositionFilesFieldNumber = 4,
    kExcludeFromBillOfMaterialsFieldNumber = 5,
    kExemptFromCourtyardRequirementFieldNumber = 6,
    kDoNotPopulateFieldNumber = 7,
    kMountingStyleFieldNumber = 8,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string keywords = 2;
  void clear_keywords();
  const std::string& keywords() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keywords(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keywords();
  PROTOBUF_NODISCARD std::string* release_keywords();
  void set_allocated_keywords(std::string* keywords);
  private:
  const std::string& _internal_keywords() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keywords(const std::string& value);
  std::string* _internal_mutable_keywords();
  public:

  // bool not_in_schematic = 3;
  void clear_not_in_schematic();
  bool not_in_schematic() const;
  void set_not_in_schematic(bool value);
  private:
  bool _internal_not_in_schematic() const;
  void _internal_set_not_in_schematic(bool value);
  public:

  // bool exclude_from_position_files = 4;
  void clear_exclude_from_position_files();
  bool exclude_from_position_files() const;
  void set_exclude_from_position_files(bool value);
  private:
  bool _internal_exclude_from_position_files() const;
  void _internal_set_exclude_from_position_files(bool value);
  public:

  // bool exclude_from_bill_of_materials = 5;
  void clear_exclude_from_bill_of_materials();
  bool exclude_from_bill_of_materials() const;
  void set_exclude_from_bill_of_materials(bool value);
  private:
  bool _internal_exclude_from_bill_of_materials() const;
  void _internal_set_exclude_from_bill_of_materials(bool value);
  public:

  // bool exempt_from_courtyard_requirement = 6;
  void clear_exempt_from_courtyard_requirement();
  bool exempt_from_courtyard_requirement() const;
  void set_exempt_from_courtyard_requirement(bool value);
  private:
  bool _internal_exempt_from_courtyard_requirement() const;
  void _internal_set_exempt_from_courtyard_requirement(bool value);
  public:

  // bool do_not_populate = 7;
  void clear_do_not_populate();
  bool do_not_populate() const;
  void set_do_not_populate(bool value);
  private:
  bool _internal_do_not_populate() const;
  void _internal_set_do_not_populate(bool value);
  public:

  // .kiapi.board.types.FootprintMountingStyle mounting_style = 8;
  void clear_mounting_style();
  ::kiapi::board::types::FootprintMountingStyle mounting_style() const;
  void set_mounting_style(::kiapi::board::types::FootprintMountingStyle value);
  private:
  ::kiapi::board::types::FootprintMountingStyle _internal_mounting_style() const;
  void _internal_set_mounting_style(::kiapi::board::types::FootprintMountingStyle value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.FootprintAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keywords_;
  bool not_in_schematic_;
  bool exclude_from_position_files_;
  bool exclude_from_bill_of_materials_;
  bool exempt_from_courtyard_requirement_;
  bool do_not_populate_;
  int mounting_style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT NetTieDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.NetTieDefinition) */ {
 public:
  inline NetTieDefinition() : NetTieDefinition(nullptr) {}
  ~NetTieDefinition() override;
  explicit constexpr NetTieDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetTieDefinition(const NetTieDefinition& from);
  NetTieDefinition(NetTieDefinition&& from) noexcept
    : NetTieDefinition() {
    *this = ::std::move(from);
  }

  inline NetTieDefinition& operator=(const NetTieDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetTieDefinition& operator=(NetTieDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetTieDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetTieDefinition* internal_default_instance() {
    return reinterpret_cast<const NetTieDefinition*>(
               &_NetTieDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(NetTieDefinition& a, NetTieDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(NetTieDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetTieDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetTieDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetTieDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetTieDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetTieDefinition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetTieDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.NetTieDefinition";
  }
  protected:
  explicit NetTieDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadNumberFieldNumber = 1,
  };
  // repeated string pad_number = 1;
  int pad_number_size() const;
  private:
  int _internal_pad_number_size() const;
  public:
  void clear_pad_number();
  const std::string& pad_number(int index) const;
  std::string* mutable_pad_number(int index);
  void set_pad_number(int index, const std::string& value);
  void set_pad_number(int index, std::string&& value);
  void set_pad_number(int index, const char* value);
  void set_pad_number(int index, const char* value, size_t size);
  std::string* add_pad_number();
  void add_pad_number(const std::string& value);
  void add_pad_number(std::string&& value);
  void add_pad_number(const char* value);
  void add_pad_number(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pad_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pad_number();
  private:
  const std::string& _internal_pad_number(int index) const;
  std::string* _internal_add_pad_number();
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.NetTieDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pad_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT FootprintDesignRuleOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.FootprintDesignRuleOverrides) */ {
 public:
  inline FootprintDesignRuleOverrides() : FootprintDesignRuleOverrides(nullptr) {}
  ~FootprintDesignRuleOverrides() override;
  explicit constexpr FootprintDesignRuleOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FootprintDesignRuleOverrides(const FootprintDesignRuleOverrides& from);
  FootprintDesignRuleOverrides(FootprintDesignRuleOverrides&& from) noexcept
    : FootprintDesignRuleOverrides() {
    *this = ::std::move(from);
  }

  inline FootprintDesignRuleOverrides& operator=(const FootprintDesignRuleOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline FootprintDesignRuleOverrides& operator=(FootprintDesignRuleOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FootprintDesignRuleOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const FootprintDesignRuleOverrides* internal_default_instance() {
    return reinterpret_cast<const FootprintDesignRuleOverrides*>(
               &_FootprintDesignRuleOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(FootprintDesignRuleOverrides& a, FootprintDesignRuleOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(FootprintDesignRuleOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FootprintDesignRuleOverrides* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FootprintDesignRuleOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FootprintDesignRuleOverrides>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FootprintDesignRuleOverrides& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FootprintDesignRuleOverrides& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FootprintDesignRuleOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.FootprintDesignRuleOverrides";
  }
  protected:
  explicit FootprintDesignRuleOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolderMaskFieldNumber = 1,
    kSolderPasteFieldNumber = 2,
    kCopperClearanceFieldNumber = 3,
    kZoneConnectionFieldNumber = 4,
  };
  // .kiapi.board.types.SolderMaskOverrides solder_mask = 1;
  bool has_solder_mask() const;
  private:
  bool _internal_has_solder_mask() const;
  public:
  void clear_solder_mask();
  const ::kiapi::board::types::SolderMaskOverrides& solder_mask() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::SolderMaskOverrides* release_solder_mask();
  ::kiapi::board::types::SolderMaskOverrides* mutable_solder_mask();
  void set_allocated_solder_mask(::kiapi::board::types::SolderMaskOverrides* solder_mask);
  private:
  const ::kiapi::board::types::SolderMaskOverrides& _internal_solder_mask() const;
  ::kiapi::board::types::SolderMaskOverrides* _internal_mutable_solder_mask();
  public:
  void unsafe_arena_set_allocated_solder_mask(
      ::kiapi::board::types::SolderMaskOverrides* solder_mask);
  ::kiapi::board::types::SolderMaskOverrides* unsafe_arena_release_solder_mask();

  // .kiapi.board.types.SolderPasteOverrides solder_paste = 2;
  bool has_solder_paste() const;
  private:
  bool _internal_has_solder_paste() const;
  public:
  void clear_solder_paste();
  const ::kiapi::board::types::SolderPasteOverrides& solder_paste() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::SolderPasteOverrides* release_solder_paste();
  ::kiapi::board::types::SolderPasteOverrides* mutable_solder_paste();
  void set_allocated_solder_paste(::kiapi::board::types::SolderPasteOverrides* solder_paste);
  private:
  const ::kiapi::board::types::SolderPasteOverrides& _internal_solder_paste() const;
  ::kiapi::board::types::SolderPasteOverrides* _internal_mutable_solder_paste();
  public:
  void unsafe_arena_set_allocated_solder_paste(
      ::kiapi::board::types::SolderPasteOverrides* solder_paste);
  ::kiapi::board::types::SolderPasteOverrides* unsafe_arena_release_solder_paste();

  // .kiapi.common.types.Distance copper_clearance = 3;
  bool has_copper_clearance() const;
  private:
  bool _internal_has_copper_clearance() const;
  public:
  void clear_copper_clearance();
  const ::kiapi::common::types::Distance& copper_clearance() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_copper_clearance();
  ::kiapi::common::types::Distance* mutable_copper_clearance();
  void set_allocated_copper_clearance(::kiapi::common::types::Distance* copper_clearance);
  private:
  const ::kiapi::common::types::Distance& _internal_copper_clearance() const;
  ::kiapi::common::types::Distance* _internal_mutable_copper_clearance();
  public:
  void unsafe_arena_set_allocated_copper_clearance(
      ::kiapi::common::types::Distance* copper_clearance);
  ::kiapi::common::types::Distance* unsafe_arena_release_copper_clearance();

  // .kiapi.board.types.ZoneConnectionStyle zone_connection = 4;
  void clear_zone_connection();
  ::kiapi::board::types::ZoneConnectionStyle zone_connection() const;
  void set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value);
  private:
  ::kiapi::board::types::ZoneConnectionStyle _internal_zone_connection() const;
  void _internal_set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.FootprintDesignRuleOverrides)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::types::SolderMaskOverrides* solder_mask_;
  ::kiapi::board::types::SolderPasteOverrides* solder_paste_;
  ::kiapi::common::types::Distance* copper_clearance_;
  int zone_connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Footprint3DModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Footprint3DModel) */ {
 public:
  inline Footprint3DModel() : Footprint3DModel(nullptr) {}
  ~Footprint3DModel() override;
  explicit constexpr Footprint3DModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Footprint3DModel(const Footprint3DModel& from);
  Footprint3DModel(Footprint3DModel&& from) noexcept
    : Footprint3DModel() {
    *this = ::std::move(from);
  }

  inline Footprint3DModel& operator=(const Footprint3DModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Footprint3DModel& operator=(Footprint3DModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Footprint3DModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Footprint3DModel* internal_default_instance() {
    return reinterpret_cast<const Footprint3DModel*>(
               &_Footprint3DModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Footprint3DModel& a, Footprint3DModel& b) {
    a.Swap(&b);
  }
  inline void Swap(Footprint3DModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Footprint3DModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Footprint3DModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Footprint3DModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Footprint3DModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Footprint3DModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Footprint3DModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Footprint3DModel";
  }
  protected:
  explicit Footprint3DModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kScaleFieldNumber = 2,
    kRotationFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kOpacityFieldNumber = 6,
    kVisibleFieldNumber = 5,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .kiapi.common.types.Vector3D scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::kiapi::common::types::Vector3D& scale() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector3D* release_scale();
  ::kiapi::common::types::Vector3D* mutable_scale();
  void set_allocated_scale(::kiapi::common::types::Vector3D* scale);
  private:
  const ::kiapi::common::types::Vector3D& _internal_scale() const;
  ::kiapi::common::types::Vector3D* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::kiapi::common::types::Vector3D* scale);
  ::kiapi::common::types::Vector3D* unsafe_arena_release_scale();

  // .kiapi.common.types.Vector3D rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::kiapi::common::types::Vector3D& rotation() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector3D* release_rotation();
  ::kiapi::common::types::Vector3D* mutable_rotation();
  void set_allocated_rotation(::kiapi::common::types::Vector3D* rotation);
  private:
  const ::kiapi::common::types::Vector3D& _internal_rotation() const;
  ::kiapi::common::types::Vector3D* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::kiapi::common::types::Vector3D* rotation);
  ::kiapi::common::types::Vector3D* unsafe_arena_release_rotation();

  // .kiapi.common.types.Vector3D offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::kiapi::common::types::Vector3D& offset() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector3D* release_offset();
  ::kiapi::common::types::Vector3D* mutable_offset();
  void set_allocated_offset(::kiapi::common::types::Vector3D* offset);
  private:
  const ::kiapi::common::types::Vector3D& _internal_offset() const;
  ::kiapi::common::types::Vector3D* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::kiapi::common::types::Vector3D* offset);
  ::kiapi::common::types::Vector3D* unsafe_arena_release_offset();

  // double opacity = 6;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // bool visible = 5;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Footprint3DModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::kiapi::common::types::Vector3D* scale_;
  ::kiapi::common::types::Vector3D* rotation_;
  ::kiapi::common::types::Vector3D* offset_;
  double opacity_;
  bool visible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT JumperGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.JumperGroup) */ {
 public:
  inline JumperGroup() : JumperGroup(nullptr) {}
  ~JumperGroup() override;
  explicit constexpr JumperGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JumperGroup(const JumperGroup& from);
  JumperGroup(JumperGroup&& from) noexcept
    : JumperGroup() {
    *this = ::std::move(from);
  }

  inline JumperGroup& operator=(const JumperGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumperGroup& operator=(JumperGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JumperGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const JumperGroup* internal_default_instance() {
    return reinterpret_cast<const JumperGroup*>(
               &_JumperGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(JumperGroup& a, JumperGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(JumperGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JumperGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JumperGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JumperGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JumperGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JumperGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumperGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.JumperGroup";
  }
  protected:
  explicit JumperGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadNamesFieldNumber = 1,
  };
  // repeated string pad_names = 1;
  int pad_names_size() const;
  private:
  int _internal_pad_names_size() const;
  public:
  void clear_pad_names();
  const std::string& pad_names(int index) const;
  std::string* mutable_pad_names(int index);
  void set_pad_names(int index, const std::string& value);
  void set_pad_names(int index, std::string&& value);
  void set_pad_names(int index, const char* value);
  void set_pad_names(int index, const char* value, size_t size);
  std::string* add_pad_names();
  void add_pad_names(const std::string& value);
  void add_pad_names(std::string&& value);
  void add_pad_names(const char* value);
  void add_pad_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pad_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pad_names();
  private:
  const std::string& _internal_pad_names(int index) const;
  std::string* _internal_add_pad_names();
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.JumperGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pad_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT JumperSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.JumperSettings) */ {
 public:
  inline JumperSettings() : JumperSettings(nullptr) {}
  ~JumperSettings() override;
  explicit constexpr JumperSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JumperSettings(const JumperSettings& from);
  JumperSettings(JumperSettings&& from) noexcept
    : JumperSettings() {
    *this = ::std::move(from);
  }

  inline JumperSettings& operator=(const JumperSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumperSettings& operator=(JumperSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JumperSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const JumperSettings* internal_default_instance() {
    return reinterpret_cast<const JumperSettings*>(
               &_JumperSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(JumperSettings& a, JumperSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(JumperSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JumperSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JumperSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JumperSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JumperSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JumperSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumperSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.JumperSettings";
  }
  protected:
  explicit JumperSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 2,
    kDuplicateNamesAreJumperedFieldNumber = 1,
  };
  // repeated .kiapi.board.types.JumperGroup groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::kiapi::board::types::JumperGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::JumperGroup >*
      mutable_groups();
  private:
  const ::kiapi::board::types::JumperGroup& _internal_groups(int index) const;
  ::kiapi::board::types::JumperGroup* _internal_add_groups();
  public:
  const ::kiapi::board::types::JumperGroup& groups(int index) const;
  ::kiapi::board::types::JumperGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::JumperGroup >&
      groups() const;

  // bool duplicate_names_are_jumpered = 1;
  void clear_duplicate_names_are_jumpered();
  bool duplicate_names_are_jumpered() const;
  void set_duplicate_names_are_jumpered(bool value);
  private:
  bool _internal_duplicate_names_are_jumpered() const;
  void _internal_set_duplicate_names_are_jumpered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.JumperSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::JumperGroup > groups_;
  bool duplicate_names_are_jumpered_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Footprint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.Footprint) */ {
 public:
  inline Footprint() : Footprint(nullptr) {}
  ~Footprint() override;
  explicit constexpr Footprint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Footprint(const Footprint& from);
  Footprint(Footprint&& from) noexcept
    : Footprint() {
    *this = ::std::move(from);
  }

  inline Footprint& operator=(const Footprint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Footprint& operator=(Footprint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Footprint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Footprint* internal_default_instance() {
    return reinterpret_cast<const Footprint*>(
               &_Footprint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Footprint& a, Footprint& b) {
    a.Swap(&b);
  }
  inline void Swap(Footprint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Footprint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Footprint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Footprint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Footprint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Footprint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Footprint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.Footprint";
  }
  protected:
  explicit Footprint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetTiesFieldNumber = 5,
    kPrivateLayersFieldNumber = 6,
    kItemsFieldNumber = 11,
    kIdFieldNumber = 1,
    kAnchorFieldNumber = 2,
    kAttributesFieldNumber = 3,
    kOverridesFieldNumber = 4,
    kReferenceFieldFieldNumber = 7,
    kValueFieldFieldNumber = 8,
    kDatasheetFieldFieldNumber = 9,
    kDescriptionFieldFieldNumber = 10,
    kJumpersFieldNumber = 12,
  };
  // repeated .kiapi.board.types.NetTieDefinition net_ties = 5;
  int net_ties_size() const;
  private:
  int _internal_net_ties_size() const;
  public:
  void clear_net_ties();
  ::kiapi::board::types::NetTieDefinition* mutable_net_ties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetTieDefinition >*
      mutable_net_ties();
  private:
  const ::kiapi::board::types::NetTieDefinition& _internal_net_ties(int index) const;
  ::kiapi::board::types::NetTieDefinition* _internal_add_net_ties();
  public:
  const ::kiapi::board::types::NetTieDefinition& net_ties(int index) const;
  ::kiapi::board::types::NetTieDefinition* add_net_ties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetTieDefinition >&
      net_ties() const;

  // repeated .kiapi.board.types.BoardLayer private_layers = 6;
  int private_layers_size() const;
  private:
  int _internal_private_layers_size() const;
  public:
  void clear_private_layers();
  private:
  ::kiapi::board::types::BoardLayer _internal_private_layers(int index) const;
  void _internal_add_private_layers(::kiapi::board::types::BoardLayer value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_private_layers();
  public:
  ::kiapi::board::types::BoardLayer private_layers(int index) const;
  void set_private_layers(int index, ::kiapi::board::types::BoardLayer value);
  void add_private_layers(::kiapi::board::types::BoardLayer value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& private_layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_private_layers();

  // repeated .google.protobuf.Any items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_items(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& items(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      items() const;

  // .kiapi.common.types.LibraryIdentifier id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::LibraryIdentifier& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::LibraryIdentifier* release_id();
  ::kiapi::common::types::LibraryIdentifier* mutable_id();
  void set_allocated_id(::kiapi::common::types::LibraryIdentifier* id);
  private:
  const ::kiapi::common::types::LibraryIdentifier& _internal_id() const;
  ::kiapi::common::types::LibraryIdentifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::LibraryIdentifier* id);
  ::kiapi::common::types::LibraryIdentifier* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 anchor = 2;
  bool has_anchor() const;
  private:
  bool _internal_has_anchor() const;
  public:
  void clear_anchor();
  const ::kiapi::common::types::Vector2& anchor() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_anchor();
  ::kiapi::common::types::Vector2* mutable_anchor();
  void set_allocated_anchor(::kiapi::common::types::Vector2* anchor);
  private:
  const ::kiapi::common::types::Vector2& _internal_anchor() const;
  ::kiapi::common::types::Vector2* _internal_mutable_anchor();
  public:
  void unsafe_arena_set_allocated_anchor(
      ::kiapi::common::types::Vector2* anchor);
  ::kiapi::common::types::Vector2* unsafe_arena_release_anchor();

  // .kiapi.board.types.FootprintAttributes attributes = 3;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::kiapi::board::types::FootprintAttributes& attributes() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::FootprintAttributes* release_attributes();
  ::kiapi::board::types::FootprintAttributes* mutable_attributes();
  void set_allocated_attributes(::kiapi::board::types::FootprintAttributes* attributes);
  private:
  const ::kiapi::board::types::FootprintAttributes& _internal_attributes() const;
  ::kiapi::board::types::FootprintAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::kiapi::board::types::FootprintAttributes* attributes);
  ::kiapi::board::types::FootprintAttributes* unsafe_arena_release_attributes();

  // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 4;
  bool has_overrides() const;
  private:
  bool _internal_has_overrides() const;
  public:
  void clear_overrides();
  const ::kiapi::board::types::FootprintDesignRuleOverrides& overrides() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::FootprintDesignRuleOverrides* release_overrides();
  ::kiapi::board::types::FootprintDesignRuleOverrides* mutable_overrides();
  void set_allocated_overrides(::kiapi::board::types::FootprintDesignRuleOverrides* overrides);
  private:
  const ::kiapi::board::types::FootprintDesignRuleOverrides& _internal_overrides() const;
  ::kiapi::board::types::FootprintDesignRuleOverrides* _internal_mutable_overrides();
  public:
  void unsafe_arena_set_allocated_overrides(
      ::kiapi::board::types::FootprintDesignRuleOverrides* overrides);
  ::kiapi::board::types::FootprintDesignRuleOverrides* unsafe_arena_release_overrides();

  // .kiapi.board.types.Field reference_field = 7;
  bool has_reference_field() const;
  private:
  bool _internal_has_reference_field() const;
  public:
  void clear_reference_field();
  const ::kiapi::board::types::Field& reference_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_reference_field();
  ::kiapi::board::types::Field* mutable_reference_field();
  void set_allocated_reference_field(::kiapi::board::types::Field* reference_field);
  private:
  const ::kiapi::board::types::Field& _internal_reference_field() const;
  ::kiapi::board::types::Field* _internal_mutable_reference_field();
  public:
  void unsafe_arena_set_allocated_reference_field(
      ::kiapi::board::types::Field* reference_field);
  ::kiapi::board::types::Field* unsafe_arena_release_reference_field();

  // .kiapi.board.types.Field value_field = 8;
  bool has_value_field() const;
  private:
  bool _internal_has_value_field() const;
  public:
  void clear_value_field();
  const ::kiapi::board::types::Field& value_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_value_field();
  ::kiapi::board::types::Field* mutable_value_field();
  void set_allocated_value_field(::kiapi::board::types::Field* value_field);
  private:
  const ::kiapi::board::types::Field& _internal_value_field() const;
  ::kiapi::board::types::Field* _internal_mutable_value_field();
  public:
  void unsafe_arena_set_allocated_value_field(
      ::kiapi::board::types::Field* value_field);
  ::kiapi::board::types::Field* unsafe_arena_release_value_field();

  // .kiapi.board.types.Field datasheet_field = 9;
  bool has_datasheet_field() const;
  private:
  bool _internal_has_datasheet_field() const;
  public:
  void clear_datasheet_field();
  const ::kiapi::board::types::Field& datasheet_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_datasheet_field();
  ::kiapi::board::types::Field* mutable_datasheet_field();
  void set_allocated_datasheet_field(::kiapi::board::types::Field* datasheet_field);
  private:
  const ::kiapi::board::types::Field& _internal_datasheet_field() const;
  ::kiapi::board::types::Field* _internal_mutable_datasheet_field();
  public:
  void unsafe_arena_set_allocated_datasheet_field(
      ::kiapi::board::types::Field* datasheet_field);
  ::kiapi::board::types::Field* unsafe_arena_release_datasheet_field();

  // .kiapi.board.types.Field description_field = 10;
  bool has_description_field() const;
  private:
  bool _internal_has_description_field() const;
  public:
  void clear_description_field();
  const ::kiapi::board::types::Field& description_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_description_field();
  ::kiapi::board::types::Field* mutable_description_field();
  void set_allocated_description_field(::kiapi::board::types::Field* description_field);
  private:
  const ::kiapi::board::types::Field& _internal_description_field() const;
  ::kiapi::board::types::Field* _internal_mutable_description_field();
  public:
  void unsafe_arena_set_allocated_description_field(
      ::kiapi::board::types::Field* description_field);
  ::kiapi::board::types::Field* unsafe_arena_release_description_field();

  // .kiapi.board.types.JumperSettings jumpers = 12;
  bool has_jumpers() const;
  private:
  bool _internal_has_jumpers() const;
  public:
  void clear_jumpers();
  const ::kiapi::board::types::JumperSettings& jumpers() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::JumperSettings* release_jumpers();
  ::kiapi::board::types::JumperSettings* mutable_jumpers();
  void set_allocated_jumpers(::kiapi::board::types::JumperSettings* jumpers);
  private:
  const ::kiapi::board::types::JumperSettings& _internal_jumpers() const;
  ::kiapi::board::types::JumperSettings* _internal_mutable_jumpers();
  public:
  void unsafe_arena_set_allocated_jumpers(
      ::kiapi::board::types::JumperSettings* jumpers);
  ::kiapi::board::types::JumperSettings* unsafe_arena_release_jumpers();

  // @@protoc_insertion_point(class_scope:kiapi.board.types.Footprint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetTieDefinition > net_ties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> private_layers_;
  mutable std::atomic<int> _private_layers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > items_;
  ::kiapi::common::types::LibraryIdentifier* id_;
  ::kiapi::common::types::Vector2* anchor_;
  ::kiapi::board::types::FootprintAttributes* attributes_;
  ::kiapi::board::types::FootprintDesignRuleOverrides* overrides_;
  ::kiapi::board::types::Field* reference_field_;
  ::kiapi::board::types::Field* value_field_;
  ::kiapi::board::types::Field* datasheet_field_;
  ::kiapi::board::types::Field* description_field_;
  ::kiapi::board::types::JumperSettings* jumpers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT FootprintInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.types.FootprintInstance) */ {
 public:
  inline FootprintInstance() : FootprintInstance(nullptr) {}
  ~FootprintInstance() override;
  explicit constexpr FootprintInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FootprintInstance(const FootprintInstance& from);
  FootprintInstance(FootprintInstance&& from) noexcept
    : FootprintInstance() {
    *this = ::std::move(from);
  }

  inline FootprintInstance& operator=(const FootprintInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline FootprintInstance& operator=(FootprintInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FootprintInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const FootprintInstance* internal_default_instance() {
    return reinterpret_cast<const FootprintInstance*>(
               &_FootprintInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FootprintInstance& a, FootprintInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(FootprintInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FootprintInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FootprintInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FootprintInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FootprintInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FootprintInstance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FootprintInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.types.FootprintInstance";
  }
  protected:
  explicit FootprintInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kDefinitionFieldNumber = 6,
    kReferenceFieldFieldNumber = 7,
    kValueFieldFieldNumber = 8,
    kDatasheetFieldFieldNumber = 9,
    kDescriptionFieldFieldNumber = 10,
    kAttributesFieldNumber = 11,
    kOverridesFieldNumber = 12,
    kLayerFieldNumber = 4,
    kLockedFieldNumber = 5,
  };
  // .kiapi.common.types.KIID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::kiapi::common::types::KIID& id() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::KIID* release_id();
  ::kiapi::common::types::KIID* mutable_id();
  void set_allocated_id(::kiapi::common::types::KIID* id);
  private:
  const ::kiapi::common::types::KIID& _internal_id() const;
  ::kiapi::common::types::KIID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::kiapi::common::types::KIID* id);
  ::kiapi::common::types::KIID* unsafe_arena_release_id();

  // .kiapi.common.types.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::kiapi::common::types::Vector2& position() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_position();
  ::kiapi::common::types::Vector2* mutable_position();
  void set_allocated_position(::kiapi::common::types::Vector2* position);
  private:
  const ::kiapi::common::types::Vector2& _internal_position() const;
  ::kiapi::common::types::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::kiapi::common::types::Vector2* position);
  ::kiapi::common::types::Vector2* unsafe_arena_release_position();

  // .kiapi.common.types.Angle orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::kiapi::common::types::Angle& orientation() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Angle* release_orientation();
  ::kiapi::common::types::Angle* mutable_orientation();
  void set_allocated_orientation(::kiapi::common::types::Angle* orientation);
  private:
  const ::kiapi::common::types::Angle& _internal_orientation() const;
  ::kiapi::common::types::Angle* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::kiapi::common::types::Angle* orientation);
  ::kiapi::common::types::Angle* unsafe_arena_release_orientation();

  // .kiapi.board.types.Footprint definition = 6;
  bool has_definition() const;
  private:
  bool _internal_has_definition() const;
  public:
  void clear_definition();
  const ::kiapi::board::types::Footprint& definition() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Footprint* release_definition();
  ::kiapi::board::types::Footprint* mutable_definition();
  void set_allocated_definition(::kiapi::board::types::Footprint* definition);
  private:
  const ::kiapi::board::types::Footprint& _internal_definition() const;
  ::kiapi::board::types::Footprint* _internal_mutable_definition();
  public:
  void unsafe_arena_set_allocated_definition(
      ::kiapi::board::types::Footprint* definition);
  ::kiapi::board::types::Footprint* unsafe_arena_release_definition();

  // .kiapi.board.types.Field reference_field = 7;
  bool has_reference_field() const;
  private:
  bool _internal_has_reference_field() const;
  public:
  void clear_reference_field();
  const ::kiapi::board::types::Field& reference_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_reference_field();
  ::kiapi::board::types::Field* mutable_reference_field();
  void set_allocated_reference_field(::kiapi::board::types::Field* reference_field);
  private:
  const ::kiapi::board::types::Field& _internal_reference_field() const;
  ::kiapi::board::types::Field* _internal_mutable_reference_field();
  public:
  void unsafe_arena_set_allocated_reference_field(
      ::kiapi::board::types::Field* reference_field);
  ::kiapi::board::types::Field* unsafe_arena_release_reference_field();

  // .kiapi.board.types.Field value_field = 8;
  bool has_value_field() const;
  private:
  bool _internal_has_value_field() const;
  public:
  void clear_value_field();
  const ::kiapi::board::types::Field& value_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_value_field();
  ::kiapi::board::types::Field* mutable_value_field();
  void set_allocated_value_field(::kiapi::board::types::Field* value_field);
  private:
  const ::kiapi::board::types::Field& _internal_value_field() const;
  ::kiapi::board::types::Field* _internal_mutable_value_field();
  public:
  void unsafe_arena_set_allocated_value_field(
      ::kiapi::board::types::Field* value_field);
  ::kiapi::board::types::Field* unsafe_arena_release_value_field();

  // .kiapi.board.types.Field datasheet_field = 9;
  bool has_datasheet_field() const;
  private:
  bool _internal_has_datasheet_field() const;
  public:
  void clear_datasheet_field();
  const ::kiapi::board::types::Field& datasheet_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_datasheet_field();
  ::kiapi::board::types::Field* mutable_datasheet_field();
  void set_allocated_datasheet_field(::kiapi::board::types::Field* datasheet_field);
  private:
  const ::kiapi::board::types::Field& _internal_datasheet_field() const;
  ::kiapi::board::types::Field* _internal_mutable_datasheet_field();
  public:
  void unsafe_arena_set_allocated_datasheet_field(
      ::kiapi::board::types::Field* datasheet_field);
  ::kiapi::board::types::Field* unsafe_arena_release_datasheet_field();

  // .kiapi.board.types.Field description_field = 10;
  bool has_description_field() const;
  private:
  bool _internal_has_description_field() const;
  public:
  void clear_description_field();
  const ::kiapi::board::types::Field& description_field() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::Field* release_description_field();
  ::kiapi::board::types::Field* mutable_description_field();
  void set_allocated_description_field(::kiapi::board::types::Field* description_field);
  private:
  const ::kiapi::board::types::Field& _internal_description_field() const;
  ::kiapi::board::types::Field* _internal_mutable_description_field();
  public:
  void unsafe_arena_set_allocated_description_field(
      ::kiapi::board::types::Field* description_field);
  ::kiapi::board::types::Field* unsafe_arena_release_description_field();

  // .kiapi.board.types.FootprintAttributes attributes = 11;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::kiapi::board::types::FootprintAttributes& attributes() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::FootprintAttributes* release_attributes();
  ::kiapi::board::types::FootprintAttributes* mutable_attributes();
  void set_allocated_attributes(::kiapi::board::types::FootprintAttributes* attributes);
  private:
  const ::kiapi::board::types::FootprintAttributes& _internal_attributes() const;
  ::kiapi::board::types::FootprintAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::kiapi::board::types::FootprintAttributes* attributes);
  ::kiapi::board::types::FootprintAttributes* unsafe_arena_release_attributes();

  // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 12;
  bool has_overrides() const;
  private:
  bool _internal_has_overrides() const;
  public:
  void clear_overrides();
  const ::kiapi::board::types::FootprintDesignRuleOverrides& overrides() const;
  PROTOBUF_NODISCARD ::kiapi::board::types::FootprintDesignRuleOverrides* release_overrides();
  ::kiapi::board::types::FootprintDesignRuleOverrides* mutable_overrides();
  void set_allocated_overrides(::kiapi::board::types::FootprintDesignRuleOverrides* overrides);
  private:
  const ::kiapi::board::types::FootprintDesignRuleOverrides& _internal_overrides() const;
  ::kiapi::board::types::FootprintDesignRuleOverrides* _internal_mutable_overrides();
  public:
  void unsafe_arena_set_allocated_overrides(
      ::kiapi::board::types::FootprintDesignRuleOverrides* overrides);
  ::kiapi::board::types::FootprintDesignRuleOverrides* unsafe_arena_release_overrides();

  // .kiapi.board.types.BoardLayer layer = 4;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // .kiapi.common.types.LockedState locked = 5;
  void clear_locked();
  ::kiapi::common::types::LockedState locked() const;
  void set_locked(::kiapi::common::types::LockedState value);
  private:
  ::kiapi::common::types::LockedState _internal_locked() const;
  void _internal_set_locked(::kiapi::common::types::LockedState value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.types.FootprintInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::KIID* id_;
  ::kiapi::common::types::Vector2* position_;
  ::kiapi::common::types::Angle* orientation_;
  ::kiapi::board::types::Footprint* definition_;
  ::kiapi::board::types::Field* reference_field_;
  ::kiapi::board::types::Field* value_field_;
  ::kiapi::board::types::Field* datasheet_field_;
  ::kiapi::board::types::Field* description_field_;
  ::kiapi::board::types::FootprintAttributes* attributes_;
  ::kiapi::board::types::FootprintDesignRuleOverrides* overrides_;
  int layer_;
  int locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetCode

// int32 value = 1;
inline void NetCode::clear_value() {
  value_ = 0;
}
inline int32_t NetCode::_internal_value() const {
  return value_;
}
inline int32_t NetCode::value() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.NetCode.value)
  return _internal_value();
}
inline void NetCode::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void NetCode::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.NetCode.value)
}

// -------------------------------------------------------------------

// Net

// .kiapi.board.types.NetCode code = 1;
inline bool Net::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool Net::has_code() const {
  return _internal_has_code();
}
inline void Net::clear_code() {
  if (GetArenaForAllocation() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::kiapi::board::types::NetCode& Net::_internal_code() const {
  const ::kiapi::board::types::NetCode* p = code_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::NetCode&>(
      ::kiapi::board::types::_NetCode_default_instance_);
}
inline const ::kiapi::board::types::NetCode& Net::code() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Net.code)
  return _internal_code();
}
inline void Net::unsafe_arena_set_allocated_code(
    ::kiapi::board::types::NetCode* code) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  code_ = code;
  if (code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Net.code)
}
inline ::kiapi::board::types::NetCode* Net::release_code() {
  
  ::kiapi::board::types::NetCode* temp = code_;
  code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::NetCode* Net::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Net.code)
  
  ::kiapi::board::types::NetCode* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::NetCode* Net::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::NetCode>(GetArenaForAllocation());
    code_ = p;
  }
  return code_;
}
inline ::kiapi::board::types::NetCode* Net::mutable_code() {
  ::kiapi::board::types::NetCode* _msg = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Net.code)
  return _msg;
}
inline void Net::set_allocated_code(::kiapi::board::types::NetCode* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::NetCode>::GetOwningArena(code);
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Net.code)
}

// string name = 2;
inline void Net::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Net::name() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Net.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Net::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Net.name)
}
inline std::string* Net::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Net.name)
  return _s;
}
inline const std::string& Net::_internal_name() const {
  return name_.Get();
}
inline void Net::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Net::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Net::release_name() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Net.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Net::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Net.name)
}

// -------------------------------------------------------------------

// Track

// .kiapi.common.types.KIID id = 1;
inline bool Track::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Track::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& Track::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& Track::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Track.id)
  return _internal_id();
}
inline void Track::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Track.id)
}
inline ::kiapi::common::types::KIID* Track::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* Track::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Track.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* Track::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* Track::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Track.id)
  return _msg;
}
inline void Track::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Track.id)
}

// .kiapi.common.types.Vector2 start = 2;
inline bool Track::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool Track::has_start() const {
  return _internal_has_start();
}
inline const ::kiapi::common::types::Vector2& Track::_internal_start() const {
  const ::kiapi::common::types::Vector2* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Track::start() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Track.start)
  return _internal_start();
}
inline void Track::unsafe_arena_set_allocated_start(
    ::kiapi::common::types::Vector2* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Track.start)
}
inline ::kiapi::common::types::Vector2* Track::release_start() {
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Track::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Track.start)
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Track::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::kiapi::common::types::Vector2* Track::mutable_start() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Track.start)
  return _msg;
}
inline void Track::set_allocated_start(::kiapi::common::types::Vector2* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Track.start)
}

// .kiapi.common.types.Vector2 end = 3;
inline bool Track::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool Track::has_end() const {
  return _internal_has_end();
}
inline const ::kiapi::common::types::Vector2& Track::_internal_end() const {
  const ::kiapi::common::types::Vector2* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Track::end() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Track.end)
  return _internal_end();
}
inline void Track::unsafe_arena_set_allocated_end(
    ::kiapi::common::types::Vector2* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Track.end)
}
inline ::kiapi::common::types::Vector2* Track::release_end() {
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Track::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Track.end)
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Track::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::kiapi::common::types::Vector2* Track::mutable_end() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Track.end)
  return _msg;
}
inline void Track::set_allocated_end(::kiapi::common::types::Vector2* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Track.end)
}

// .kiapi.common.types.Distance width = 4;
inline bool Track::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool Track::has_width() const {
  return _internal_has_width();
}
inline const ::kiapi::common::types::Distance& Track::_internal_width() const {
  const ::kiapi::common::types::Distance* p = width_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& Track::width() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Track.width)
  return _internal_width();
}
inline void Track::unsafe_arena_set_allocated_width(
    ::kiapi::common::types::Distance* width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width_);
  }
  width_ = width;
  if (width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Track.width)
}
inline ::kiapi::common::types::Distance* Track::release_width() {
  
  ::kiapi::common::types::Distance* temp = width_;
  width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* Track::unsafe_arena_release_width() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Track.width)
  
  ::kiapi::common::types::Distance* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* Track::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    width_ = p;
  }
  return width_;
}
inline ::kiapi::common::types::Distance* Track::mutable_width() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_width();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Track.width)
  return _msg;
}
inline void Track::set_allocated_width(::kiapi::common::types::Distance* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(width_);
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width));
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Track.width)
}

// .kiapi.common.types.LockedState locked = 5;
inline void Track::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState Track::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState Track::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Track.locked)
  return _internal_locked();
}
inline void Track::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void Track::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Track.locked)
}

// .kiapi.board.types.BoardLayer layer = 6;
inline void Track::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer Track::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer Track::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Track.layer)
  return _internal_layer();
}
inline void Track::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void Track::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Track.layer)
}

// .kiapi.board.types.Net net = 7;
inline bool Track::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool Track::has_net() const {
  return _internal_has_net();
}
inline void Track::clear_net() {
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::kiapi::board::types::Net& Track::_internal_net() const {
  const ::kiapi::board::types::Net* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Net&>(
      ::kiapi::board::types::_Net_default_instance_);
}
inline const ::kiapi::board::types::Net& Track::net() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Track.net)
  return _internal_net();
}
inline void Track::unsafe_arena_set_allocated_net(
    ::kiapi::board::types::Net* net) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Track.net)
}
inline ::kiapi::board::types::Net* Track::release_net() {
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Net* Track::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Track.net)
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Net* Track::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Net>(GetArenaForAllocation());
    net_ = p;
  }
  return net_;
}
inline ::kiapi::board::types::Net* Track::mutable_net() {
  ::kiapi::board::types::Net* _msg = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Track.net)
  return _msg;
}
inline void Track::set_allocated_net(::kiapi::board::types::Net* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Net>::GetOwningArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Track.net)
}

// -------------------------------------------------------------------

// Arc

// .kiapi.common.types.KIID id = 1;
inline bool Arc::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Arc::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& Arc::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& Arc::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.id)
  return _internal_id();
}
inline void Arc::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Arc.id)
}
inline ::kiapi::common::types::KIID* Arc::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* Arc::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Arc.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* Arc::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* Arc::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Arc.id)
  return _msg;
}
inline void Arc::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Arc.id)
}

// .kiapi.common.types.Vector2 start = 2;
inline bool Arc::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool Arc::has_start() const {
  return _internal_has_start();
}
inline const ::kiapi::common::types::Vector2& Arc::_internal_start() const {
  const ::kiapi::common::types::Vector2* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Arc::start() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.start)
  return _internal_start();
}
inline void Arc::unsafe_arena_set_allocated_start(
    ::kiapi::common::types::Vector2* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Arc.start)
}
inline ::kiapi::common::types::Vector2* Arc::release_start() {
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Arc::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Arc.start)
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Arc::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::kiapi::common::types::Vector2* Arc::mutable_start() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Arc.start)
  return _msg;
}
inline void Arc::set_allocated_start(::kiapi::common::types::Vector2* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Arc.start)
}

// .kiapi.common.types.Vector2 mid = 3;
inline bool Arc::_internal_has_mid() const {
  return this != internal_default_instance() && mid_ != nullptr;
}
inline bool Arc::has_mid() const {
  return _internal_has_mid();
}
inline const ::kiapi::common::types::Vector2& Arc::_internal_mid() const {
  const ::kiapi::common::types::Vector2* p = mid_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Arc::mid() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.mid)
  return _internal_mid();
}
inline void Arc::unsafe_arena_set_allocated_mid(
    ::kiapi::common::types::Vector2* mid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mid_);
  }
  mid_ = mid;
  if (mid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Arc.mid)
}
inline ::kiapi::common::types::Vector2* Arc::release_mid() {
  
  ::kiapi::common::types::Vector2* temp = mid_;
  mid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Arc::unsafe_arena_release_mid() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Arc.mid)
  
  ::kiapi::common::types::Vector2* temp = mid_;
  mid_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Arc::_internal_mutable_mid() {
  
  if (mid_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    mid_ = p;
  }
  return mid_;
}
inline ::kiapi::common::types::Vector2* Arc::mutable_mid() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Arc.mid)
  return _msg;
}
inline void Arc::set_allocated_mid(::kiapi::common::types::Vector2* mid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mid_);
  }
  if (mid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mid));
    if (message_arena != submessage_arena) {
      mid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mid, submessage_arena);
    }
    
  } else {
    
  }
  mid_ = mid;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Arc.mid)
}

// .kiapi.common.types.Vector2 end = 4;
inline bool Arc::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool Arc::has_end() const {
  return _internal_has_end();
}
inline const ::kiapi::common::types::Vector2& Arc::_internal_end() const {
  const ::kiapi::common::types::Vector2* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Arc::end() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.end)
  return _internal_end();
}
inline void Arc::unsafe_arena_set_allocated_end(
    ::kiapi::common::types::Vector2* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Arc.end)
}
inline ::kiapi::common::types::Vector2* Arc::release_end() {
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Arc::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Arc.end)
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Arc::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::kiapi::common::types::Vector2* Arc::mutable_end() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Arc.end)
  return _msg;
}
inline void Arc::set_allocated_end(::kiapi::common::types::Vector2* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Arc.end)
}

// .kiapi.common.types.Distance width = 5;
inline bool Arc::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool Arc::has_width() const {
  return _internal_has_width();
}
inline const ::kiapi::common::types::Distance& Arc::_internal_width() const {
  const ::kiapi::common::types::Distance* p = width_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& Arc::width() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.width)
  return _internal_width();
}
inline void Arc::unsafe_arena_set_allocated_width(
    ::kiapi::common::types::Distance* width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width_);
  }
  width_ = width;
  if (width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Arc.width)
}
inline ::kiapi::common::types::Distance* Arc::release_width() {
  
  ::kiapi::common::types::Distance* temp = width_;
  width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* Arc::unsafe_arena_release_width() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Arc.width)
  
  ::kiapi::common::types::Distance* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* Arc::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    width_ = p;
  }
  return width_;
}
inline ::kiapi::common::types::Distance* Arc::mutable_width() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_width();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Arc.width)
  return _msg;
}
inline void Arc::set_allocated_width(::kiapi::common::types::Distance* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(width_);
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width));
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Arc.width)
}

// .kiapi.common.types.LockedState locked = 6;
inline void Arc::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState Arc::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState Arc::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.locked)
  return _internal_locked();
}
inline void Arc::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void Arc::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Arc.locked)
}

// .kiapi.board.types.BoardLayer layer = 7;
inline void Arc::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer Arc::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer Arc::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.layer)
  return _internal_layer();
}
inline void Arc::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void Arc::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Arc.layer)
}

// .kiapi.board.types.Net net = 8;
inline bool Arc::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool Arc::has_net() const {
  return _internal_has_net();
}
inline void Arc::clear_net() {
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::kiapi::board::types::Net& Arc::_internal_net() const {
  const ::kiapi::board::types::Net* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Net&>(
      ::kiapi::board::types::_Net_default_instance_);
}
inline const ::kiapi::board::types::Net& Arc::net() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Arc.net)
  return _internal_net();
}
inline void Arc::unsafe_arena_set_allocated_net(
    ::kiapi::board::types::Net* net) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Arc.net)
}
inline ::kiapi::board::types::Net* Arc::release_net() {
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Net* Arc::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Arc.net)
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Net* Arc::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Net>(GetArenaForAllocation());
    net_ = p;
  }
  return net_;
}
inline ::kiapi::board::types::Net* Arc::mutable_net() {
  ::kiapi::board::types::Net* _msg = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Arc.net)
  return _msg;
}
inline void Arc::set_allocated_net(::kiapi::board::types::Net* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Net>::GetOwningArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Arc.net)
}

// -------------------------------------------------------------------

// ChamferedRectCorners

// bool top_left = 1;
inline void ChamferedRectCorners::clear_top_left() {
  top_left_ = false;
}
inline bool ChamferedRectCorners::_internal_top_left() const {
  return top_left_;
}
inline bool ChamferedRectCorners::top_left() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ChamferedRectCorners.top_left)
  return _internal_top_left();
}
inline void ChamferedRectCorners::_internal_set_top_left(bool value) {
  
  top_left_ = value;
}
inline void ChamferedRectCorners::set_top_left(bool value) {
  _internal_set_top_left(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ChamferedRectCorners.top_left)
}

// bool top_right = 2;
inline void ChamferedRectCorners::clear_top_right() {
  top_right_ = false;
}
inline bool ChamferedRectCorners::_internal_top_right() const {
  return top_right_;
}
inline bool ChamferedRectCorners::top_right() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ChamferedRectCorners.top_right)
  return _internal_top_right();
}
inline void ChamferedRectCorners::_internal_set_top_right(bool value) {
  
  top_right_ = value;
}
inline void ChamferedRectCorners::set_top_right(bool value) {
  _internal_set_top_right(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ChamferedRectCorners.top_right)
}

// bool bottom_left = 3;
inline void ChamferedRectCorners::clear_bottom_left() {
  bottom_left_ = false;
}
inline bool ChamferedRectCorners::_internal_bottom_left() const {
  return bottom_left_;
}
inline bool ChamferedRectCorners::bottom_left() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ChamferedRectCorners.bottom_left)
  return _internal_bottom_left();
}
inline void ChamferedRectCorners::_internal_set_bottom_left(bool value) {
  
  bottom_left_ = value;
}
inline void ChamferedRectCorners::set_bottom_left(bool value) {
  _internal_set_bottom_left(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ChamferedRectCorners.bottom_left)
}

// bool bottom_right = 4;
inline void ChamferedRectCorners::clear_bottom_right() {
  bottom_right_ = false;
}
inline bool ChamferedRectCorners::_internal_bottom_right() const {
  return bottom_right_;
}
inline bool ChamferedRectCorners::bottom_right() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ChamferedRectCorners.bottom_right)
  return _internal_bottom_right();
}
inline void ChamferedRectCorners::_internal_set_bottom_right(bool value) {
  
  bottom_right_ = value;
}
inline void ChamferedRectCorners::set_bottom_right(bool value) {
  _internal_set_bottom_right(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ChamferedRectCorners.bottom_right)
}

// -------------------------------------------------------------------

// ZoneConnectionSettings

// .kiapi.board.types.ZoneConnectionStyle zone_connection = 1;
inline void ZoneConnectionSettings::clear_zone_connection() {
  zone_connection_ = 0;
}
inline ::kiapi::board::types::ZoneConnectionStyle ZoneConnectionSettings::_internal_zone_connection() const {
  return static_cast< ::kiapi::board::types::ZoneConnectionStyle >(zone_connection_);
}
inline ::kiapi::board::types::ZoneConnectionStyle ZoneConnectionSettings::zone_connection() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneConnectionSettings.zone_connection)
  return _internal_zone_connection();
}
inline void ZoneConnectionSettings::_internal_set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value) {
  
  zone_connection_ = value;
}
inline void ZoneConnectionSettings::set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value) {
  _internal_set_zone_connection(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ZoneConnectionSettings.zone_connection)
}

// .kiapi.board.types.ThermalSpokeSettings thermal_spokes = 2;
inline bool ZoneConnectionSettings::_internal_has_thermal_spokes() const {
  return this != internal_default_instance() && thermal_spokes_ != nullptr;
}
inline bool ZoneConnectionSettings::has_thermal_spokes() const {
  return _internal_has_thermal_spokes();
}
inline void ZoneConnectionSettings::clear_thermal_spokes() {
  if (GetArenaForAllocation() == nullptr && thermal_spokes_ != nullptr) {
    delete thermal_spokes_;
  }
  thermal_spokes_ = nullptr;
}
inline const ::kiapi::board::types::ThermalSpokeSettings& ZoneConnectionSettings::_internal_thermal_spokes() const {
  const ::kiapi::board::types::ThermalSpokeSettings* p = thermal_spokes_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::ThermalSpokeSettings&>(
      ::kiapi::board::types::_ThermalSpokeSettings_default_instance_);
}
inline const ::kiapi::board::types::ThermalSpokeSettings& ZoneConnectionSettings::thermal_spokes() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneConnectionSettings.thermal_spokes)
  return _internal_thermal_spokes();
}
inline void ZoneConnectionSettings::unsafe_arena_set_allocated_thermal_spokes(
    ::kiapi::board::types::ThermalSpokeSettings* thermal_spokes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thermal_spokes_);
  }
  thermal_spokes_ = thermal_spokes;
  if (thermal_spokes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.ZoneConnectionSettings.thermal_spokes)
}
inline ::kiapi::board::types::ThermalSpokeSettings* ZoneConnectionSettings::release_thermal_spokes() {
  
  ::kiapi::board::types::ThermalSpokeSettings* temp = thermal_spokes_;
  thermal_spokes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::ThermalSpokeSettings* ZoneConnectionSettings::unsafe_arena_release_thermal_spokes() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.ZoneConnectionSettings.thermal_spokes)
  
  ::kiapi::board::types::ThermalSpokeSettings* temp = thermal_spokes_;
  thermal_spokes_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::ThermalSpokeSettings* ZoneConnectionSettings::_internal_mutable_thermal_spokes() {
  
  if (thermal_spokes_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::ThermalSpokeSettings>(GetArenaForAllocation());
    thermal_spokes_ = p;
  }
  return thermal_spokes_;
}
inline ::kiapi::board::types::ThermalSpokeSettings* ZoneConnectionSettings::mutable_thermal_spokes() {
  ::kiapi::board::types::ThermalSpokeSettings* _msg = _internal_mutable_thermal_spokes();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.ZoneConnectionSettings.thermal_spokes)
  return _msg;
}
inline void ZoneConnectionSettings::set_allocated_thermal_spokes(::kiapi::board::types::ThermalSpokeSettings* thermal_spokes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete thermal_spokes_;
  }
  if (thermal_spokes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::ThermalSpokeSettings>::GetOwningArena(thermal_spokes);
    if (message_arena != submessage_arena) {
      thermal_spokes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thermal_spokes, submessage_arena);
    }
    
  } else {
    
  }
  thermal_spokes_ = thermal_spokes;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.ZoneConnectionSettings.thermal_spokes)
}

// -------------------------------------------------------------------

// SolderMaskOverrides

// .kiapi.common.types.Distance solder_mask_margin = 1;
inline bool SolderMaskOverrides::_internal_has_solder_mask_margin() const {
  return this != internal_default_instance() && solder_mask_margin_ != nullptr;
}
inline bool SolderMaskOverrides::has_solder_mask_margin() const {
  return _internal_has_solder_mask_margin();
}
inline const ::kiapi::common::types::Distance& SolderMaskOverrides::_internal_solder_mask_margin() const {
  const ::kiapi::common::types::Distance* p = solder_mask_margin_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& SolderMaskOverrides::solder_mask_margin() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.SolderMaskOverrides.solder_mask_margin)
  return _internal_solder_mask_margin();
}
inline void SolderMaskOverrides::unsafe_arena_set_allocated_solder_mask_margin(
    ::kiapi::common::types::Distance* solder_mask_margin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_mask_margin_);
  }
  solder_mask_margin_ = solder_mask_margin;
  if (solder_mask_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.SolderMaskOverrides.solder_mask_margin)
}
inline ::kiapi::common::types::Distance* SolderMaskOverrides::release_solder_mask_margin() {
  
  ::kiapi::common::types::Distance* temp = solder_mask_margin_;
  solder_mask_margin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* SolderMaskOverrides::unsafe_arena_release_solder_mask_margin() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.SolderMaskOverrides.solder_mask_margin)
  
  ::kiapi::common::types::Distance* temp = solder_mask_margin_;
  solder_mask_margin_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* SolderMaskOverrides::_internal_mutable_solder_mask_margin() {
  
  if (solder_mask_margin_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    solder_mask_margin_ = p;
  }
  return solder_mask_margin_;
}
inline ::kiapi::common::types::Distance* SolderMaskOverrides::mutable_solder_mask_margin() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_solder_mask_margin();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.SolderMaskOverrides.solder_mask_margin)
  return _msg;
}
inline void SolderMaskOverrides::set_allocated_solder_mask_margin(::kiapi::common::types::Distance* solder_mask_margin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_mask_margin_);
  }
  if (solder_mask_margin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_mask_margin));
    if (message_arena != submessage_arena) {
      solder_mask_margin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solder_mask_margin, submessage_arena);
    }
    
  } else {
    
  }
  solder_mask_margin_ = solder_mask_margin;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.SolderMaskOverrides.solder_mask_margin)
}

// -------------------------------------------------------------------

// SolderPasteOverrides

// .kiapi.common.types.Distance solder_paste_margin = 1;
inline bool SolderPasteOverrides::_internal_has_solder_paste_margin() const {
  return this != internal_default_instance() && solder_paste_margin_ != nullptr;
}
inline bool SolderPasteOverrides::has_solder_paste_margin() const {
  return _internal_has_solder_paste_margin();
}
inline const ::kiapi::common::types::Distance& SolderPasteOverrides::_internal_solder_paste_margin() const {
  const ::kiapi::common::types::Distance* p = solder_paste_margin_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& SolderPasteOverrides::solder_paste_margin() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.SolderPasteOverrides.solder_paste_margin)
  return _internal_solder_paste_margin();
}
inline void SolderPasteOverrides::unsafe_arena_set_allocated_solder_paste_margin(
    ::kiapi::common::types::Distance* solder_paste_margin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_margin_);
  }
  solder_paste_margin_ = solder_paste_margin;
  if (solder_paste_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.SolderPasteOverrides.solder_paste_margin)
}
inline ::kiapi::common::types::Distance* SolderPasteOverrides::release_solder_paste_margin() {
  
  ::kiapi::common::types::Distance* temp = solder_paste_margin_;
  solder_paste_margin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* SolderPasteOverrides::unsafe_arena_release_solder_paste_margin() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.SolderPasteOverrides.solder_paste_margin)
  
  ::kiapi::common::types::Distance* temp = solder_paste_margin_;
  solder_paste_margin_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* SolderPasteOverrides::_internal_mutable_solder_paste_margin() {
  
  if (solder_paste_margin_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    solder_paste_margin_ = p;
  }
  return solder_paste_margin_;
}
inline ::kiapi::common::types::Distance* SolderPasteOverrides::mutable_solder_paste_margin() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_solder_paste_margin();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.SolderPasteOverrides.solder_paste_margin)
  return _msg;
}
inline void SolderPasteOverrides::set_allocated_solder_paste_margin(::kiapi::common::types::Distance* solder_paste_margin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_margin_);
  }
  if (solder_paste_margin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_margin));
    if (message_arena != submessage_arena) {
      solder_paste_margin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solder_paste_margin, submessage_arena);
    }
    
  } else {
    
  }
  solder_paste_margin_ = solder_paste_margin;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.SolderPasteOverrides.solder_paste_margin)
}

// .kiapi.common.types.Ratio solder_paste_margin_ratio = 2;
inline bool SolderPasteOverrides::_internal_has_solder_paste_margin_ratio() const {
  return this != internal_default_instance() && solder_paste_margin_ratio_ != nullptr;
}
inline bool SolderPasteOverrides::has_solder_paste_margin_ratio() const {
  return _internal_has_solder_paste_margin_ratio();
}
inline const ::kiapi::common::types::Ratio& SolderPasteOverrides::_internal_solder_paste_margin_ratio() const {
  const ::kiapi::common::types::Ratio* p = solder_paste_margin_ratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Ratio&>(
      ::kiapi::common::types::_Ratio_default_instance_);
}
inline const ::kiapi::common::types::Ratio& SolderPasteOverrides::solder_paste_margin_ratio() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.SolderPasteOverrides.solder_paste_margin_ratio)
  return _internal_solder_paste_margin_ratio();
}
inline void SolderPasteOverrides::unsafe_arena_set_allocated_solder_paste_margin_ratio(
    ::kiapi::common::types::Ratio* solder_paste_margin_ratio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_margin_ratio_);
  }
  solder_paste_margin_ratio_ = solder_paste_margin_ratio;
  if (solder_paste_margin_ratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.SolderPasteOverrides.solder_paste_margin_ratio)
}
inline ::kiapi::common::types::Ratio* SolderPasteOverrides::release_solder_paste_margin_ratio() {
  
  ::kiapi::common::types::Ratio* temp = solder_paste_margin_ratio_;
  solder_paste_margin_ratio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Ratio* SolderPasteOverrides::unsafe_arena_release_solder_paste_margin_ratio() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.SolderPasteOverrides.solder_paste_margin_ratio)
  
  ::kiapi::common::types::Ratio* temp = solder_paste_margin_ratio_;
  solder_paste_margin_ratio_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Ratio* SolderPasteOverrides::_internal_mutable_solder_paste_margin_ratio() {
  
  if (solder_paste_margin_ratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Ratio>(GetArenaForAllocation());
    solder_paste_margin_ratio_ = p;
  }
  return solder_paste_margin_ratio_;
}
inline ::kiapi::common::types::Ratio* SolderPasteOverrides::mutable_solder_paste_margin_ratio() {
  ::kiapi::common::types::Ratio* _msg = _internal_mutable_solder_paste_margin_ratio();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.SolderPasteOverrides.solder_paste_margin_ratio)
  return _msg;
}
inline void SolderPasteOverrides::set_allocated_solder_paste_margin_ratio(::kiapi::common::types::Ratio* solder_paste_margin_ratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_margin_ratio_);
  }
  if (solder_paste_margin_ratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_margin_ratio));
    if (message_arena != submessage_arena) {
      solder_paste_margin_ratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solder_paste_margin_ratio, submessage_arena);
    }
    
  } else {
    
  }
  solder_paste_margin_ratio_ = solder_paste_margin_ratio;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.SolderPasteOverrides.solder_paste_margin_ratio)
}

// -------------------------------------------------------------------

// PadStackLayer

// .kiapi.board.types.BoardLayer layer = 1;
inline void PadStackLayer::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer PadStackLayer::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer PadStackLayer::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.layer)
  return _internal_layer();
}
inline void PadStackLayer::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void PadStackLayer::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackLayer.layer)
}

// .kiapi.board.types.PadStackShape shape = 2;
inline void PadStackLayer::clear_shape() {
  shape_ = 0;
}
inline ::kiapi::board::types::PadStackShape PadStackLayer::_internal_shape() const {
  return static_cast< ::kiapi::board::types::PadStackShape >(shape_);
}
inline ::kiapi::board::types::PadStackShape PadStackLayer::shape() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.shape)
  return _internal_shape();
}
inline void PadStackLayer::_internal_set_shape(::kiapi::board::types::PadStackShape value) {
  
  shape_ = value;
}
inline void PadStackLayer::set_shape(::kiapi::board::types::PadStackShape value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackLayer.shape)
}

// .kiapi.common.types.Vector2 size = 3;
inline bool PadStackLayer::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool PadStackLayer::has_size() const {
  return _internal_has_size();
}
inline const ::kiapi::common::types::Vector2& PadStackLayer::_internal_size() const {
  const ::kiapi::common::types::Vector2* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& PadStackLayer::size() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.size)
  return _internal_size();
}
inline void PadStackLayer::unsafe_arena_set_allocated_size(
    ::kiapi::common::types::Vector2* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStackLayer.size)
}
inline ::kiapi::common::types::Vector2* PadStackLayer::release_size() {
  
  ::kiapi::common::types::Vector2* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStackLayer.size)
  
  ::kiapi::common::types::Vector2* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::mutable_size() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackLayer.size)
  return _msg;
}
inline void PadStackLayer::set_allocated_size(::kiapi::common::types::Vector2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStackLayer.size)
}

// double corner_rounding_ratio = 4;
inline void PadStackLayer::clear_corner_rounding_ratio() {
  corner_rounding_ratio_ = 0;
}
inline double PadStackLayer::_internal_corner_rounding_ratio() const {
  return corner_rounding_ratio_;
}
inline double PadStackLayer::corner_rounding_ratio() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.corner_rounding_ratio)
  return _internal_corner_rounding_ratio();
}
inline void PadStackLayer::_internal_set_corner_rounding_ratio(double value) {
  
  corner_rounding_ratio_ = value;
}
inline void PadStackLayer::set_corner_rounding_ratio(double value) {
  _internal_set_corner_rounding_ratio(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackLayer.corner_rounding_ratio)
}

// double chamfer_ratio = 5;
inline void PadStackLayer::clear_chamfer_ratio() {
  chamfer_ratio_ = 0;
}
inline double PadStackLayer::_internal_chamfer_ratio() const {
  return chamfer_ratio_;
}
inline double PadStackLayer::chamfer_ratio() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.chamfer_ratio)
  return _internal_chamfer_ratio();
}
inline void PadStackLayer::_internal_set_chamfer_ratio(double value) {
  
  chamfer_ratio_ = value;
}
inline void PadStackLayer::set_chamfer_ratio(double value) {
  _internal_set_chamfer_ratio(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackLayer.chamfer_ratio)
}

// .kiapi.board.types.ChamferedRectCorners chamfered_corners = 6;
inline bool PadStackLayer::_internal_has_chamfered_corners() const {
  return this != internal_default_instance() && chamfered_corners_ != nullptr;
}
inline bool PadStackLayer::has_chamfered_corners() const {
  return _internal_has_chamfered_corners();
}
inline void PadStackLayer::clear_chamfered_corners() {
  if (GetArenaForAllocation() == nullptr && chamfered_corners_ != nullptr) {
    delete chamfered_corners_;
  }
  chamfered_corners_ = nullptr;
}
inline const ::kiapi::board::types::ChamferedRectCorners& PadStackLayer::_internal_chamfered_corners() const {
  const ::kiapi::board::types::ChamferedRectCorners* p = chamfered_corners_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::ChamferedRectCorners&>(
      ::kiapi::board::types::_ChamferedRectCorners_default_instance_);
}
inline const ::kiapi::board::types::ChamferedRectCorners& PadStackLayer::chamfered_corners() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.chamfered_corners)
  return _internal_chamfered_corners();
}
inline void PadStackLayer::unsafe_arena_set_allocated_chamfered_corners(
    ::kiapi::board::types::ChamferedRectCorners* chamfered_corners) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chamfered_corners_);
  }
  chamfered_corners_ = chamfered_corners;
  if (chamfered_corners) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStackLayer.chamfered_corners)
}
inline ::kiapi::board::types::ChamferedRectCorners* PadStackLayer::release_chamfered_corners() {
  
  ::kiapi::board::types::ChamferedRectCorners* temp = chamfered_corners_;
  chamfered_corners_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::ChamferedRectCorners* PadStackLayer::unsafe_arena_release_chamfered_corners() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStackLayer.chamfered_corners)
  
  ::kiapi::board::types::ChamferedRectCorners* temp = chamfered_corners_;
  chamfered_corners_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::ChamferedRectCorners* PadStackLayer::_internal_mutable_chamfered_corners() {
  
  if (chamfered_corners_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::ChamferedRectCorners>(GetArenaForAllocation());
    chamfered_corners_ = p;
  }
  return chamfered_corners_;
}
inline ::kiapi::board::types::ChamferedRectCorners* PadStackLayer::mutable_chamfered_corners() {
  ::kiapi::board::types::ChamferedRectCorners* _msg = _internal_mutable_chamfered_corners();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackLayer.chamfered_corners)
  return _msg;
}
inline void PadStackLayer::set_allocated_chamfered_corners(::kiapi::board::types::ChamferedRectCorners* chamfered_corners) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete chamfered_corners_;
  }
  if (chamfered_corners) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::ChamferedRectCorners>::GetOwningArena(chamfered_corners);
    if (message_arena != submessage_arena) {
      chamfered_corners = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chamfered_corners, submessage_arena);
    }
    
  } else {
    
  }
  chamfered_corners_ = chamfered_corners;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStackLayer.chamfered_corners)
}

// repeated .kiapi.board.types.BoardGraphicShape custom_shapes = 7;
inline int PadStackLayer::_internal_custom_shapes_size() const {
  return custom_shapes_.size();
}
inline int PadStackLayer::custom_shapes_size() const {
  return _internal_custom_shapes_size();
}
inline void PadStackLayer::clear_custom_shapes() {
  custom_shapes_.Clear();
}
inline ::kiapi::board::types::BoardGraphicShape* PadStackLayer::mutable_custom_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackLayer.custom_shapes)
  return custom_shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::BoardGraphicShape >*
PadStackLayer::mutable_custom_shapes() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.PadStackLayer.custom_shapes)
  return &custom_shapes_;
}
inline const ::kiapi::board::types::BoardGraphicShape& PadStackLayer::_internal_custom_shapes(int index) const {
  return custom_shapes_.Get(index);
}
inline const ::kiapi::board::types::BoardGraphicShape& PadStackLayer::custom_shapes(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.custom_shapes)
  return _internal_custom_shapes(index);
}
inline ::kiapi::board::types::BoardGraphicShape* PadStackLayer::_internal_add_custom_shapes() {
  return custom_shapes_.Add();
}
inline ::kiapi::board::types::BoardGraphicShape* PadStackLayer::add_custom_shapes() {
  ::kiapi::board::types::BoardGraphicShape* _add = _internal_add_custom_shapes();
  // @@protoc_insertion_point(field_add:kiapi.board.types.PadStackLayer.custom_shapes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::BoardGraphicShape >&
PadStackLayer::custom_shapes() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.PadStackLayer.custom_shapes)
  return custom_shapes_;
}

// .kiapi.board.types.PadStackShape custom_anchor_shape = 8;
inline void PadStackLayer::clear_custom_anchor_shape() {
  custom_anchor_shape_ = 0;
}
inline ::kiapi::board::types::PadStackShape PadStackLayer::_internal_custom_anchor_shape() const {
  return static_cast< ::kiapi::board::types::PadStackShape >(custom_anchor_shape_);
}
inline ::kiapi::board::types::PadStackShape PadStackLayer::custom_anchor_shape() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.custom_anchor_shape)
  return _internal_custom_anchor_shape();
}
inline void PadStackLayer::_internal_set_custom_anchor_shape(::kiapi::board::types::PadStackShape value) {
  
  custom_anchor_shape_ = value;
}
inline void PadStackLayer::set_custom_anchor_shape(::kiapi::board::types::PadStackShape value) {
  _internal_set_custom_anchor_shape(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackLayer.custom_anchor_shape)
}

// .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
inline bool PadStackLayer::_internal_has_zone_settings() const {
  return this != internal_default_instance() && zone_settings_ != nullptr;
}
inline bool PadStackLayer::has_zone_settings() const {
  return _internal_has_zone_settings();
}
inline void PadStackLayer::clear_zone_settings() {
  if (GetArenaForAllocation() == nullptr && zone_settings_ != nullptr) {
    delete zone_settings_;
  }
  zone_settings_ = nullptr;
}
inline const ::kiapi::board::types::ZoneConnectionSettings& PadStackLayer::_internal_zone_settings() const {
  const ::kiapi::board::types::ZoneConnectionSettings* p = zone_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::ZoneConnectionSettings&>(
      ::kiapi::board::types::_ZoneConnectionSettings_default_instance_);
}
inline const ::kiapi::board::types::ZoneConnectionSettings& PadStackLayer::zone_settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.zone_settings)
  return _internal_zone_settings();
}
inline void PadStackLayer::unsafe_arena_set_allocated_zone_settings(
    ::kiapi::board::types::ZoneConnectionSettings* zone_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zone_settings_);
  }
  zone_settings_ = zone_settings;
  if (zone_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStackLayer.zone_settings)
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStackLayer::release_zone_settings() {
  
  ::kiapi::board::types::ZoneConnectionSettings* temp = zone_settings_;
  zone_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStackLayer::unsafe_arena_release_zone_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStackLayer.zone_settings)
  
  ::kiapi::board::types::ZoneConnectionSettings* temp = zone_settings_;
  zone_settings_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStackLayer::_internal_mutable_zone_settings() {
  
  if (zone_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::ZoneConnectionSettings>(GetArenaForAllocation());
    zone_settings_ = p;
  }
  return zone_settings_;
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStackLayer::mutable_zone_settings() {
  ::kiapi::board::types::ZoneConnectionSettings* _msg = _internal_mutable_zone_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackLayer.zone_settings)
  return _msg;
}
inline void PadStackLayer::set_allocated_zone_settings(::kiapi::board::types::ZoneConnectionSettings* zone_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete zone_settings_;
  }
  if (zone_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::ZoneConnectionSettings>::GetOwningArena(zone_settings);
    if (message_arena != submessage_arena) {
      zone_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zone_settings, submessage_arena);
    }
    
  } else {
    
  }
  zone_settings_ = zone_settings;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStackLayer.zone_settings)
}

// .kiapi.common.types.Vector2 trapezoid_delta = 10;
inline bool PadStackLayer::_internal_has_trapezoid_delta() const {
  return this != internal_default_instance() && trapezoid_delta_ != nullptr;
}
inline bool PadStackLayer::has_trapezoid_delta() const {
  return _internal_has_trapezoid_delta();
}
inline const ::kiapi::common::types::Vector2& PadStackLayer::_internal_trapezoid_delta() const {
  const ::kiapi::common::types::Vector2* p = trapezoid_delta_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& PadStackLayer::trapezoid_delta() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.trapezoid_delta)
  return _internal_trapezoid_delta();
}
inline void PadStackLayer::unsafe_arena_set_allocated_trapezoid_delta(
    ::kiapi::common::types::Vector2* trapezoid_delta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trapezoid_delta_);
  }
  trapezoid_delta_ = trapezoid_delta;
  if (trapezoid_delta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStackLayer.trapezoid_delta)
}
inline ::kiapi::common::types::Vector2* PadStackLayer::release_trapezoid_delta() {
  
  ::kiapi::common::types::Vector2* temp = trapezoid_delta_;
  trapezoid_delta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::unsafe_arena_release_trapezoid_delta() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStackLayer.trapezoid_delta)
  
  ::kiapi::common::types::Vector2* temp = trapezoid_delta_;
  trapezoid_delta_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::_internal_mutable_trapezoid_delta() {
  
  if (trapezoid_delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    trapezoid_delta_ = p;
  }
  return trapezoid_delta_;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::mutable_trapezoid_delta() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_trapezoid_delta();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackLayer.trapezoid_delta)
  return _msg;
}
inline void PadStackLayer::set_allocated_trapezoid_delta(::kiapi::common::types::Vector2* trapezoid_delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trapezoid_delta_);
  }
  if (trapezoid_delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trapezoid_delta));
    if (message_arena != submessage_arena) {
      trapezoid_delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trapezoid_delta, submessage_arena);
    }
    
  } else {
    
  }
  trapezoid_delta_ = trapezoid_delta;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStackLayer.trapezoid_delta)
}

// .kiapi.common.types.Vector2 offset = 11;
inline bool PadStackLayer::_internal_has_offset() const {
  return this != internal_default_instance() && offset_ != nullptr;
}
inline bool PadStackLayer::has_offset() const {
  return _internal_has_offset();
}
inline const ::kiapi::common::types::Vector2& PadStackLayer::_internal_offset() const {
  const ::kiapi::common::types::Vector2* p = offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& PadStackLayer::offset() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackLayer.offset)
  return _internal_offset();
}
inline void PadStackLayer::unsafe_arena_set_allocated_offset(
    ::kiapi::common::types::Vector2* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStackLayer.offset)
}
inline ::kiapi::common::types::Vector2* PadStackLayer::release_offset() {
  
  ::kiapi::common::types::Vector2* temp = offset_;
  offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStackLayer.offset)
  
  ::kiapi::common::types::Vector2* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::_internal_mutable_offset() {
  
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    offset_ = p;
  }
  return offset_;
}
inline ::kiapi::common::types::Vector2* PadStackLayer::mutable_offset() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackLayer.offset)
  return _msg;
}
inline void PadStackLayer::set_allocated_offset(::kiapi::common::types::Vector2* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStackLayer.offset)
}

// -------------------------------------------------------------------

// PadStackOuterLayer

// .kiapi.board.types.SolderMaskMode solder_mask_mode = 1;
inline void PadStackOuterLayer::clear_solder_mask_mode() {
  solder_mask_mode_ = 0;
}
inline ::kiapi::board::types::SolderMaskMode PadStackOuterLayer::_internal_solder_mask_mode() const {
  return static_cast< ::kiapi::board::types::SolderMaskMode >(solder_mask_mode_);
}
inline ::kiapi::board::types::SolderMaskMode PadStackOuterLayer::solder_mask_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackOuterLayer.solder_mask_mode)
  return _internal_solder_mask_mode();
}
inline void PadStackOuterLayer::_internal_set_solder_mask_mode(::kiapi::board::types::SolderMaskMode value) {
  
  solder_mask_mode_ = value;
}
inline void PadStackOuterLayer::set_solder_mask_mode(::kiapi::board::types::SolderMaskMode value) {
  _internal_set_solder_mask_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackOuterLayer.solder_mask_mode)
}

// .kiapi.board.types.SolderPasteMode solder_paste_mode = 2;
inline void PadStackOuterLayer::clear_solder_paste_mode() {
  solder_paste_mode_ = 0;
}
inline ::kiapi::board::types::SolderPasteMode PadStackOuterLayer::_internal_solder_paste_mode() const {
  return static_cast< ::kiapi::board::types::SolderPasteMode >(solder_paste_mode_);
}
inline ::kiapi::board::types::SolderPasteMode PadStackOuterLayer::solder_paste_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackOuterLayer.solder_paste_mode)
  return _internal_solder_paste_mode();
}
inline void PadStackOuterLayer::_internal_set_solder_paste_mode(::kiapi::board::types::SolderPasteMode value) {
  
  solder_paste_mode_ = value;
}
inline void PadStackOuterLayer::set_solder_paste_mode(::kiapi::board::types::SolderPasteMode value) {
  _internal_set_solder_paste_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackOuterLayer.solder_paste_mode)
}

// .kiapi.board.types.SolderMaskOverrides solder_mask_settings = 3;
inline bool PadStackOuterLayer::_internal_has_solder_mask_settings() const {
  return this != internal_default_instance() && solder_mask_settings_ != nullptr;
}
inline bool PadStackOuterLayer::has_solder_mask_settings() const {
  return _internal_has_solder_mask_settings();
}
inline void PadStackOuterLayer::clear_solder_mask_settings() {
  if (GetArenaForAllocation() == nullptr && solder_mask_settings_ != nullptr) {
    delete solder_mask_settings_;
  }
  solder_mask_settings_ = nullptr;
}
inline const ::kiapi::board::types::SolderMaskOverrides& PadStackOuterLayer::_internal_solder_mask_settings() const {
  const ::kiapi::board::types::SolderMaskOverrides* p = solder_mask_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::SolderMaskOverrides&>(
      ::kiapi::board::types::_SolderMaskOverrides_default_instance_);
}
inline const ::kiapi::board::types::SolderMaskOverrides& PadStackOuterLayer::solder_mask_settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackOuterLayer.solder_mask_settings)
  return _internal_solder_mask_settings();
}
inline void PadStackOuterLayer::unsafe_arena_set_allocated_solder_mask_settings(
    ::kiapi::board::types::SolderMaskOverrides* solder_mask_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_mask_settings_);
  }
  solder_mask_settings_ = solder_mask_settings;
  if (solder_mask_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStackOuterLayer.solder_mask_settings)
}
inline ::kiapi::board::types::SolderMaskOverrides* PadStackOuterLayer::release_solder_mask_settings() {
  
  ::kiapi::board::types::SolderMaskOverrides* temp = solder_mask_settings_;
  solder_mask_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::SolderMaskOverrides* PadStackOuterLayer::unsafe_arena_release_solder_mask_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStackOuterLayer.solder_mask_settings)
  
  ::kiapi::board::types::SolderMaskOverrides* temp = solder_mask_settings_;
  solder_mask_settings_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::SolderMaskOverrides* PadStackOuterLayer::_internal_mutable_solder_mask_settings() {
  
  if (solder_mask_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::SolderMaskOverrides>(GetArenaForAllocation());
    solder_mask_settings_ = p;
  }
  return solder_mask_settings_;
}
inline ::kiapi::board::types::SolderMaskOverrides* PadStackOuterLayer::mutable_solder_mask_settings() {
  ::kiapi::board::types::SolderMaskOverrides* _msg = _internal_mutable_solder_mask_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackOuterLayer.solder_mask_settings)
  return _msg;
}
inline void PadStackOuterLayer::set_allocated_solder_mask_settings(::kiapi::board::types::SolderMaskOverrides* solder_mask_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete solder_mask_settings_;
  }
  if (solder_mask_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::SolderMaskOverrides>::GetOwningArena(solder_mask_settings);
    if (message_arena != submessage_arena) {
      solder_mask_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solder_mask_settings, submessage_arena);
    }
    
  } else {
    
  }
  solder_mask_settings_ = solder_mask_settings;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStackOuterLayer.solder_mask_settings)
}

// .kiapi.board.types.SolderPasteOverrides solder_paste_settings = 4;
inline bool PadStackOuterLayer::_internal_has_solder_paste_settings() const {
  return this != internal_default_instance() && solder_paste_settings_ != nullptr;
}
inline bool PadStackOuterLayer::has_solder_paste_settings() const {
  return _internal_has_solder_paste_settings();
}
inline void PadStackOuterLayer::clear_solder_paste_settings() {
  if (GetArenaForAllocation() == nullptr && solder_paste_settings_ != nullptr) {
    delete solder_paste_settings_;
  }
  solder_paste_settings_ = nullptr;
}
inline const ::kiapi::board::types::SolderPasteOverrides& PadStackOuterLayer::_internal_solder_paste_settings() const {
  const ::kiapi::board::types::SolderPasteOverrides* p = solder_paste_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::SolderPasteOverrides&>(
      ::kiapi::board::types::_SolderPasteOverrides_default_instance_);
}
inline const ::kiapi::board::types::SolderPasteOverrides& PadStackOuterLayer::solder_paste_settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackOuterLayer.solder_paste_settings)
  return _internal_solder_paste_settings();
}
inline void PadStackOuterLayer::unsafe_arena_set_allocated_solder_paste_settings(
    ::kiapi::board::types::SolderPasteOverrides* solder_paste_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_settings_);
  }
  solder_paste_settings_ = solder_paste_settings;
  if (solder_paste_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStackOuterLayer.solder_paste_settings)
}
inline ::kiapi::board::types::SolderPasteOverrides* PadStackOuterLayer::release_solder_paste_settings() {
  
  ::kiapi::board::types::SolderPasteOverrides* temp = solder_paste_settings_;
  solder_paste_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::SolderPasteOverrides* PadStackOuterLayer::unsafe_arena_release_solder_paste_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStackOuterLayer.solder_paste_settings)
  
  ::kiapi::board::types::SolderPasteOverrides* temp = solder_paste_settings_;
  solder_paste_settings_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::SolderPasteOverrides* PadStackOuterLayer::_internal_mutable_solder_paste_settings() {
  
  if (solder_paste_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::SolderPasteOverrides>(GetArenaForAllocation());
    solder_paste_settings_ = p;
  }
  return solder_paste_settings_;
}
inline ::kiapi::board::types::SolderPasteOverrides* PadStackOuterLayer::mutable_solder_paste_settings() {
  ::kiapi::board::types::SolderPasteOverrides* _msg = _internal_mutable_solder_paste_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStackOuterLayer.solder_paste_settings)
  return _msg;
}
inline void PadStackOuterLayer::set_allocated_solder_paste_settings(::kiapi::board::types::SolderPasteOverrides* solder_paste_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete solder_paste_settings_;
  }
  if (solder_paste_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::SolderPasteOverrides>::GetOwningArena(solder_paste_settings);
    if (message_arena != submessage_arena) {
      solder_paste_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solder_paste_settings, submessage_arena);
    }
    
  } else {
    
  }
  solder_paste_settings_ = solder_paste_settings;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStackOuterLayer.solder_paste_settings)
}

// .kiapi.board.types.ViaPluggingMode plugging_mode = 5;
inline void PadStackOuterLayer::clear_plugging_mode() {
  plugging_mode_ = 0;
}
inline ::kiapi::board::types::ViaPluggingMode PadStackOuterLayer::_internal_plugging_mode() const {
  return static_cast< ::kiapi::board::types::ViaPluggingMode >(plugging_mode_);
}
inline ::kiapi::board::types::ViaPluggingMode PadStackOuterLayer::plugging_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackOuterLayer.plugging_mode)
  return _internal_plugging_mode();
}
inline void PadStackOuterLayer::_internal_set_plugging_mode(::kiapi::board::types::ViaPluggingMode value) {
  
  plugging_mode_ = value;
}
inline void PadStackOuterLayer::set_plugging_mode(::kiapi::board::types::ViaPluggingMode value) {
  _internal_set_plugging_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackOuterLayer.plugging_mode)
}

// .kiapi.board.types.ViaCoveringMode covering_mode = 6;
inline void PadStackOuterLayer::clear_covering_mode() {
  covering_mode_ = 0;
}
inline ::kiapi::board::types::ViaCoveringMode PadStackOuterLayer::_internal_covering_mode() const {
  return static_cast< ::kiapi::board::types::ViaCoveringMode >(covering_mode_);
}
inline ::kiapi::board::types::ViaCoveringMode PadStackOuterLayer::covering_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStackOuterLayer.covering_mode)
  return _internal_covering_mode();
}
inline void PadStackOuterLayer::_internal_set_covering_mode(::kiapi::board::types::ViaCoveringMode value) {
  
  covering_mode_ = value;
}
inline void PadStackOuterLayer::set_covering_mode(::kiapi::board::types::ViaCoveringMode value) {
  _internal_set_covering_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStackOuterLayer.covering_mode)
}

// -------------------------------------------------------------------

// DrillProperties

// .kiapi.board.types.BoardLayer start_layer = 1;
inline void DrillProperties::clear_start_layer() {
  start_layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer DrillProperties::_internal_start_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(start_layer_);
}
inline ::kiapi::board::types::BoardLayer DrillProperties::start_layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.DrillProperties.start_layer)
  return _internal_start_layer();
}
inline void DrillProperties::_internal_set_start_layer(::kiapi::board::types::BoardLayer value) {
  
  start_layer_ = value;
}
inline void DrillProperties::set_start_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_start_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.DrillProperties.start_layer)
}

// .kiapi.board.types.BoardLayer end_layer = 2;
inline void DrillProperties::clear_end_layer() {
  end_layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer DrillProperties::_internal_end_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(end_layer_);
}
inline ::kiapi::board::types::BoardLayer DrillProperties::end_layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.DrillProperties.end_layer)
  return _internal_end_layer();
}
inline void DrillProperties::_internal_set_end_layer(::kiapi::board::types::BoardLayer value) {
  
  end_layer_ = value;
}
inline void DrillProperties::set_end_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_end_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.DrillProperties.end_layer)
}

// .kiapi.common.types.Vector2 diameter = 3;
inline bool DrillProperties::_internal_has_diameter() const {
  return this != internal_default_instance() && diameter_ != nullptr;
}
inline bool DrillProperties::has_diameter() const {
  return _internal_has_diameter();
}
inline const ::kiapi::common::types::Vector2& DrillProperties::_internal_diameter() const {
  const ::kiapi::common::types::Vector2* p = diameter_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& DrillProperties::diameter() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.DrillProperties.diameter)
  return _internal_diameter();
}
inline void DrillProperties::unsafe_arena_set_allocated_diameter(
    ::kiapi::common::types::Vector2* diameter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diameter_);
  }
  diameter_ = diameter;
  if (diameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.DrillProperties.diameter)
}
inline ::kiapi::common::types::Vector2* DrillProperties::release_diameter() {
  
  ::kiapi::common::types::Vector2* temp = diameter_;
  diameter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* DrillProperties::unsafe_arena_release_diameter() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.DrillProperties.diameter)
  
  ::kiapi::common::types::Vector2* temp = diameter_;
  diameter_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* DrillProperties::_internal_mutable_diameter() {
  
  if (diameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    diameter_ = p;
  }
  return diameter_;
}
inline ::kiapi::common::types::Vector2* DrillProperties::mutable_diameter() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_diameter();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.DrillProperties.diameter)
  return _msg;
}
inline void DrillProperties::set_allocated_diameter(::kiapi::common::types::Vector2* diameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diameter_);
  }
  if (diameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diameter));
    if (message_arena != submessage_arena) {
      diameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diameter, submessage_arena);
    }
    
  } else {
    
  }
  diameter_ = diameter;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.DrillProperties.diameter)
}

// .kiapi.board.types.DrillShape shape = 4;
inline void DrillProperties::clear_shape() {
  shape_ = 0;
}
inline ::kiapi::board::types::DrillShape DrillProperties::_internal_shape() const {
  return static_cast< ::kiapi::board::types::DrillShape >(shape_);
}
inline ::kiapi::board::types::DrillShape DrillProperties::shape() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.DrillProperties.shape)
  return _internal_shape();
}
inline void DrillProperties::_internal_set_shape(::kiapi::board::types::DrillShape value) {
  
  shape_ = value;
}
inline void DrillProperties::set_shape(::kiapi::board::types::DrillShape value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.DrillProperties.shape)
}

// .kiapi.board.types.ViaDrillCappingMode capped = 5;
inline void DrillProperties::clear_capped() {
  capped_ = 0;
}
inline ::kiapi::board::types::ViaDrillCappingMode DrillProperties::_internal_capped() const {
  return static_cast< ::kiapi::board::types::ViaDrillCappingMode >(capped_);
}
inline ::kiapi::board::types::ViaDrillCappingMode DrillProperties::capped() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.DrillProperties.capped)
  return _internal_capped();
}
inline void DrillProperties::_internal_set_capped(::kiapi::board::types::ViaDrillCappingMode value) {
  
  capped_ = value;
}
inline void DrillProperties::set_capped(::kiapi::board::types::ViaDrillCappingMode value) {
  _internal_set_capped(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.DrillProperties.capped)
}

// .kiapi.board.types.ViaDrillFillingMode filled = 6;
inline void DrillProperties::clear_filled() {
  filled_ = 0;
}
inline ::kiapi::board::types::ViaDrillFillingMode DrillProperties::_internal_filled() const {
  return static_cast< ::kiapi::board::types::ViaDrillFillingMode >(filled_);
}
inline ::kiapi::board::types::ViaDrillFillingMode DrillProperties::filled() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.DrillProperties.filled)
  return _internal_filled();
}
inline void DrillProperties::_internal_set_filled(::kiapi::board::types::ViaDrillFillingMode value) {
  
  filled_ = value;
}
inline void DrillProperties::set_filled(::kiapi::board::types::ViaDrillFillingMode value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.DrillProperties.filled)
}

// -------------------------------------------------------------------

// PadStack

// .kiapi.board.types.PadStackType type = 1;
inline void PadStack::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::types::PadStackType PadStack::_internal_type() const {
  return static_cast< ::kiapi::board::types::PadStackType >(type_);
}
inline ::kiapi::board::types::PadStackType PadStack::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.type)
  return _internal_type();
}
inline void PadStack::_internal_set_type(::kiapi::board::types::PadStackType value) {
  
  type_ = value;
}
inline void PadStack::set_type(::kiapi::board::types::PadStackType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStack.type)
}

// repeated .kiapi.board.types.BoardLayer layers = 2;
inline int PadStack::_internal_layers_size() const {
  return layers_.size();
}
inline int PadStack::layers_size() const {
  return _internal_layers_size();
}
inline void PadStack::clear_layers() {
  layers_.Clear();
}
inline ::kiapi::board::types::BoardLayer PadStack::_internal_layers(int index) const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layers_.Get(index));
}
inline ::kiapi::board::types::BoardLayer PadStack::layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.layers)
  return _internal_layers(index);
}
inline void PadStack::set_layers(int index, ::kiapi::board::types::BoardLayer value) {
  layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStack.layers)
}
inline void PadStack::_internal_add_layers(::kiapi::board::types::BoardLayer value) {
  layers_.Add(value);
}
inline void PadStack::add_layers(::kiapi::board::types::BoardLayer value) {
  _internal_add_layers(value);
  // @@protoc_insertion_point(field_add:kiapi.board.types.PadStack.layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PadStack::layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.PadStack.layers)
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PadStack::_internal_mutable_layers() {
  return &layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PadStack::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.PadStack.layers)
  return _internal_mutable_layers();
}

// .kiapi.board.types.DrillProperties drill = 3;
inline bool PadStack::_internal_has_drill() const {
  return this != internal_default_instance() && drill_ != nullptr;
}
inline bool PadStack::has_drill() const {
  return _internal_has_drill();
}
inline void PadStack::clear_drill() {
  if (GetArenaForAllocation() == nullptr && drill_ != nullptr) {
    delete drill_;
  }
  drill_ = nullptr;
}
inline const ::kiapi::board::types::DrillProperties& PadStack::_internal_drill() const {
  const ::kiapi::board::types::DrillProperties* p = drill_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::DrillProperties&>(
      ::kiapi::board::types::_DrillProperties_default_instance_);
}
inline const ::kiapi::board::types::DrillProperties& PadStack::drill() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.drill)
  return _internal_drill();
}
inline void PadStack::unsafe_arena_set_allocated_drill(
    ::kiapi::board::types::DrillProperties* drill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drill_);
  }
  drill_ = drill;
  if (drill) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStack.drill)
}
inline ::kiapi::board::types::DrillProperties* PadStack::release_drill() {
  
  ::kiapi::board::types::DrillProperties* temp = drill_;
  drill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::DrillProperties* PadStack::unsafe_arena_release_drill() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStack.drill)
  
  ::kiapi::board::types::DrillProperties* temp = drill_;
  drill_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::DrillProperties* PadStack::_internal_mutable_drill() {
  
  if (drill_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::DrillProperties>(GetArenaForAllocation());
    drill_ = p;
  }
  return drill_;
}
inline ::kiapi::board::types::DrillProperties* PadStack::mutable_drill() {
  ::kiapi::board::types::DrillProperties* _msg = _internal_mutable_drill();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStack.drill)
  return _msg;
}
inline void PadStack::set_allocated_drill(::kiapi::board::types::DrillProperties* drill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete drill_;
  }
  if (drill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::DrillProperties>::GetOwningArena(drill);
    if (message_arena != submessage_arena) {
      drill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drill, submessage_arena);
    }
    
  } else {
    
  }
  drill_ = drill;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStack.drill)
}

// .kiapi.board.types.UnconnectedLayerRemoval unconnected_layer_removal = 4;
inline void PadStack::clear_unconnected_layer_removal() {
  unconnected_layer_removal_ = 0;
}
inline ::kiapi::board::types::UnconnectedLayerRemoval PadStack::_internal_unconnected_layer_removal() const {
  return static_cast< ::kiapi::board::types::UnconnectedLayerRemoval >(unconnected_layer_removal_);
}
inline ::kiapi::board::types::UnconnectedLayerRemoval PadStack::unconnected_layer_removal() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.unconnected_layer_removal)
  return _internal_unconnected_layer_removal();
}
inline void PadStack::_internal_set_unconnected_layer_removal(::kiapi::board::types::UnconnectedLayerRemoval value) {
  
  unconnected_layer_removal_ = value;
}
inline void PadStack::set_unconnected_layer_removal(::kiapi::board::types::UnconnectedLayerRemoval value) {
  _internal_set_unconnected_layer_removal(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.PadStack.unconnected_layer_removal)
}

// repeated .kiapi.board.types.PadStackLayer copper_layers = 5;
inline int PadStack::_internal_copper_layers_size() const {
  return copper_layers_.size();
}
inline int PadStack::copper_layers_size() const {
  return _internal_copper_layers_size();
}
inline void PadStack::clear_copper_layers() {
  copper_layers_.Clear();
}
inline ::kiapi::board::types::PadStackLayer* PadStack::mutable_copper_layers(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStack.copper_layers)
  return copper_layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::PadStackLayer >*
PadStack::mutable_copper_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.PadStack.copper_layers)
  return &copper_layers_;
}
inline const ::kiapi::board::types::PadStackLayer& PadStack::_internal_copper_layers(int index) const {
  return copper_layers_.Get(index);
}
inline const ::kiapi::board::types::PadStackLayer& PadStack::copper_layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.copper_layers)
  return _internal_copper_layers(index);
}
inline ::kiapi::board::types::PadStackLayer* PadStack::_internal_add_copper_layers() {
  return copper_layers_.Add();
}
inline ::kiapi::board::types::PadStackLayer* PadStack::add_copper_layers() {
  ::kiapi::board::types::PadStackLayer* _add = _internal_add_copper_layers();
  // @@protoc_insertion_point(field_add:kiapi.board.types.PadStack.copper_layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::PadStackLayer >&
PadStack::copper_layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.PadStack.copper_layers)
  return copper_layers_;
}

// .kiapi.common.types.Angle angle = 6;
inline bool PadStack::_internal_has_angle() const {
  return this != internal_default_instance() && angle_ != nullptr;
}
inline bool PadStack::has_angle() const {
  return _internal_has_angle();
}
inline const ::kiapi::common::types::Angle& PadStack::_internal_angle() const {
  const ::kiapi::common::types::Angle* p = angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Angle&>(
      ::kiapi::common::types::_Angle_default_instance_);
}
inline const ::kiapi::common::types::Angle& PadStack::angle() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.angle)
  return _internal_angle();
}
inline void PadStack::unsafe_arena_set_allocated_angle(
    ::kiapi::common::types::Angle* angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  angle_ = angle;
  if (angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStack.angle)
}
inline ::kiapi::common::types::Angle* PadStack::release_angle() {
  
  ::kiapi::common::types::Angle* temp = angle_;
  angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Angle* PadStack::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStack.angle)
  
  ::kiapi::common::types::Angle* temp = angle_;
  angle_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Angle* PadStack::_internal_mutable_angle() {
  
  if (angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Angle>(GetArenaForAllocation());
    angle_ = p;
  }
  return angle_;
}
inline ::kiapi::common::types::Angle* PadStack::mutable_angle() {
  ::kiapi::common::types::Angle* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStack.angle)
  return _msg;
}
inline void PadStack::set_allocated_angle(::kiapi::common::types::Angle* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle));
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    
  } else {
    
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStack.angle)
}

// .kiapi.board.types.PadStackOuterLayer front_outer_layers = 7;
inline bool PadStack::_internal_has_front_outer_layers() const {
  return this != internal_default_instance() && front_outer_layers_ != nullptr;
}
inline bool PadStack::has_front_outer_layers() const {
  return _internal_has_front_outer_layers();
}
inline void PadStack::clear_front_outer_layers() {
  if (GetArenaForAllocation() == nullptr && front_outer_layers_ != nullptr) {
    delete front_outer_layers_;
  }
  front_outer_layers_ = nullptr;
}
inline const ::kiapi::board::types::PadStackOuterLayer& PadStack::_internal_front_outer_layers() const {
  const ::kiapi::board::types::PadStackOuterLayer* p = front_outer_layers_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::PadStackOuterLayer&>(
      ::kiapi::board::types::_PadStackOuterLayer_default_instance_);
}
inline const ::kiapi::board::types::PadStackOuterLayer& PadStack::front_outer_layers() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.front_outer_layers)
  return _internal_front_outer_layers();
}
inline void PadStack::unsafe_arena_set_allocated_front_outer_layers(
    ::kiapi::board::types::PadStackOuterLayer* front_outer_layers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_outer_layers_);
  }
  front_outer_layers_ = front_outer_layers;
  if (front_outer_layers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStack.front_outer_layers)
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::release_front_outer_layers() {
  
  ::kiapi::board::types::PadStackOuterLayer* temp = front_outer_layers_;
  front_outer_layers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::unsafe_arena_release_front_outer_layers() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStack.front_outer_layers)
  
  ::kiapi::board::types::PadStackOuterLayer* temp = front_outer_layers_;
  front_outer_layers_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::_internal_mutable_front_outer_layers() {
  
  if (front_outer_layers_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::PadStackOuterLayer>(GetArenaForAllocation());
    front_outer_layers_ = p;
  }
  return front_outer_layers_;
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::mutable_front_outer_layers() {
  ::kiapi::board::types::PadStackOuterLayer* _msg = _internal_mutable_front_outer_layers();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStack.front_outer_layers)
  return _msg;
}
inline void PadStack::set_allocated_front_outer_layers(::kiapi::board::types::PadStackOuterLayer* front_outer_layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete front_outer_layers_;
  }
  if (front_outer_layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::PadStackOuterLayer>::GetOwningArena(front_outer_layers);
    if (message_arena != submessage_arena) {
      front_outer_layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_outer_layers, submessage_arena);
    }
    
  } else {
    
  }
  front_outer_layers_ = front_outer_layers;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStack.front_outer_layers)
}

// .kiapi.board.types.PadStackOuterLayer back_outer_layers = 8;
inline bool PadStack::_internal_has_back_outer_layers() const {
  return this != internal_default_instance() && back_outer_layers_ != nullptr;
}
inline bool PadStack::has_back_outer_layers() const {
  return _internal_has_back_outer_layers();
}
inline void PadStack::clear_back_outer_layers() {
  if (GetArenaForAllocation() == nullptr && back_outer_layers_ != nullptr) {
    delete back_outer_layers_;
  }
  back_outer_layers_ = nullptr;
}
inline const ::kiapi::board::types::PadStackOuterLayer& PadStack::_internal_back_outer_layers() const {
  const ::kiapi::board::types::PadStackOuterLayer* p = back_outer_layers_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::PadStackOuterLayer&>(
      ::kiapi::board::types::_PadStackOuterLayer_default_instance_);
}
inline const ::kiapi::board::types::PadStackOuterLayer& PadStack::back_outer_layers() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.back_outer_layers)
  return _internal_back_outer_layers();
}
inline void PadStack::unsafe_arena_set_allocated_back_outer_layers(
    ::kiapi::board::types::PadStackOuterLayer* back_outer_layers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(back_outer_layers_);
  }
  back_outer_layers_ = back_outer_layers;
  if (back_outer_layers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStack.back_outer_layers)
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::release_back_outer_layers() {
  
  ::kiapi::board::types::PadStackOuterLayer* temp = back_outer_layers_;
  back_outer_layers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::unsafe_arena_release_back_outer_layers() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStack.back_outer_layers)
  
  ::kiapi::board::types::PadStackOuterLayer* temp = back_outer_layers_;
  back_outer_layers_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::_internal_mutable_back_outer_layers() {
  
  if (back_outer_layers_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::PadStackOuterLayer>(GetArenaForAllocation());
    back_outer_layers_ = p;
  }
  return back_outer_layers_;
}
inline ::kiapi::board::types::PadStackOuterLayer* PadStack::mutable_back_outer_layers() {
  ::kiapi::board::types::PadStackOuterLayer* _msg = _internal_mutable_back_outer_layers();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStack.back_outer_layers)
  return _msg;
}
inline void PadStack::set_allocated_back_outer_layers(::kiapi::board::types::PadStackOuterLayer* back_outer_layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete back_outer_layers_;
  }
  if (back_outer_layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::PadStackOuterLayer>::GetOwningArena(back_outer_layers);
    if (message_arena != submessage_arena) {
      back_outer_layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, back_outer_layers, submessage_arena);
    }
    
  } else {
    
  }
  back_outer_layers_ = back_outer_layers;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStack.back_outer_layers)
}

// .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
inline bool PadStack::_internal_has_zone_settings() const {
  return this != internal_default_instance() && zone_settings_ != nullptr;
}
inline bool PadStack::has_zone_settings() const {
  return _internal_has_zone_settings();
}
inline void PadStack::clear_zone_settings() {
  if (GetArenaForAllocation() == nullptr && zone_settings_ != nullptr) {
    delete zone_settings_;
  }
  zone_settings_ = nullptr;
}
inline const ::kiapi::board::types::ZoneConnectionSettings& PadStack::_internal_zone_settings() const {
  const ::kiapi::board::types::ZoneConnectionSettings* p = zone_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::ZoneConnectionSettings&>(
      ::kiapi::board::types::_ZoneConnectionSettings_default_instance_);
}
inline const ::kiapi::board::types::ZoneConnectionSettings& PadStack::zone_settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.PadStack.zone_settings)
  return _internal_zone_settings();
}
inline void PadStack::unsafe_arena_set_allocated_zone_settings(
    ::kiapi::board::types::ZoneConnectionSettings* zone_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zone_settings_);
  }
  zone_settings_ = zone_settings;
  if (zone_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.PadStack.zone_settings)
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStack::release_zone_settings() {
  
  ::kiapi::board::types::ZoneConnectionSettings* temp = zone_settings_;
  zone_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStack::unsafe_arena_release_zone_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.PadStack.zone_settings)
  
  ::kiapi::board::types::ZoneConnectionSettings* temp = zone_settings_;
  zone_settings_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStack::_internal_mutable_zone_settings() {
  
  if (zone_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::ZoneConnectionSettings>(GetArenaForAllocation());
    zone_settings_ = p;
  }
  return zone_settings_;
}
inline ::kiapi::board::types::ZoneConnectionSettings* PadStack::mutable_zone_settings() {
  ::kiapi::board::types::ZoneConnectionSettings* _msg = _internal_mutable_zone_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.PadStack.zone_settings)
  return _msg;
}
inline void PadStack::set_allocated_zone_settings(::kiapi::board::types::ZoneConnectionSettings* zone_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete zone_settings_;
  }
  if (zone_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::ZoneConnectionSettings>::GetOwningArena(zone_settings);
    if (message_arena != submessage_arena) {
      zone_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zone_settings, submessage_arena);
    }
    
  } else {
    
  }
  zone_settings_ = zone_settings;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.PadStack.zone_settings)
}

// -------------------------------------------------------------------

// Via

// .kiapi.common.types.KIID id = 1;
inline bool Via::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Via::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& Via::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& Via::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Via.id)
  return _internal_id();
}
inline void Via::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Via.id)
}
inline ::kiapi::common::types::KIID* Via::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* Via::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Via.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* Via::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* Via::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Via.id)
  return _msg;
}
inline void Via::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Via.id)
}

// .kiapi.common.types.Vector2 position = 2;
inline bool Via::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Via::has_position() const {
  return _internal_has_position();
}
inline const ::kiapi::common::types::Vector2& Via::_internal_position() const {
  const ::kiapi::common::types::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Via::position() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Via.position)
  return _internal_position();
}
inline void Via::unsafe_arena_set_allocated_position(
    ::kiapi::common::types::Vector2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Via.position)
}
inline ::kiapi::common::types::Vector2* Via::release_position() {
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Via::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Via.position)
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Via::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::kiapi::common::types::Vector2* Via::mutable_position() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Via.position)
  return _msg;
}
inline void Via::set_allocated_position(::kiapi::common::types::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Via.position)
}

// .kiapi.board.types.PadStack pad_stack = 3;
inline bool Via::_internal_has_pad_stack() const {
  return this != internal_default_instance() && pad_stack_ != nullptr;
}
inline bool Via::has_pad_stack() const {
  return _internal_has_pad_stack();
}
inline void Via::clear_pad_stack() {
  if (GetArenaForAllocation() == nullptr && pad_stack_ != nullptr) {
    delete pad_stack_;
  }
  pad_stack_ = nullptr;
}
inline const ::kiapi::board::types::PadStack& Via::_internal_pad_stack() const {
  const ::kiapi::board::types::PadStack* p = pad_stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::PadStack&>(
      ::kiapi::board::types::_PadStack_default_instance_);
}
inline const ::kiapi::board::types::PadStack& Via::pad_stack() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Via.pad_stack)
  return _internal_pad_stack();
}
inline void Via::unsafe_arena_set_allocated_pad_stack(
    ::kiapi::board::types::PadStack* pad_stack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_stack_);
  }
  pad_stack_ = pad_stack;
  if (pad_stack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Via.pad_stack)
}
inline ::kiapi::board::types::PadStack* Via::release_pad_stack() {
  
  ::kiapi::board::types::PadStack* temp = pad_stack_;
  pad_stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::PadStack* Via::unsafe_arena_release_pad_stack() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Via.pad_stack)
  
  ::kiapi::board::types::PadStack* temp = pad_stack_;
  pad_stack_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::PadStack* Via::_internal_mutable_pad_stack() {
  
  if (pad_stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::PadStack>(GetArenaForAllocation());
    pad_stack_ = p;
  }
  return pad_stack_;
}
inline ::kiapi::board::types::PadStack* Via::mutable_pad_stack() {
  ::kiapi::board::types::PadStack* _msg = _internal_mutable_pad_stack();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Via.pad_stack)
  return _msg;
}
inline void Via::set_allocated_pad_stack(::kiapi::board::types::PadStack* pad_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pad_stack_;
  }
  if (pad_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::PadStack>::GetOwningArena(pad_stack);
    if (message_arena != submessage_arena) {
      pad_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pad_stack, submessage_arena);
    }
    
  } else {
    
  }
  pad_stack_ = pad_stack;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Via.pad_stack)
}

// .kiapi.common.types.LockedState locked = 4;
inline void Via::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState Via::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState Via::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Via.locked)
  return _internal_locked();
}
inline void Via::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void Via::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Via.locked)
}

// .kiapi.board.types.Net net = 5;
inline bool Via::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool Via::has_net() const {
  return _internal_has_net();
}
inline void Via::clear_net() {
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::kiapi::board::types::Net& Via::_internal_net() const {
  const ::kiapi::board::types::Net* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Net&>(
      ::kiapi::board::types::_Net_default_instance_);
}
inline const ::kiapi::board::types::Net& Via::net() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Via.net)
  return _internal_net();
}
inline void Via::unsafe_arena_set_allocated_net(
    ::kiapi::board::types::Net* net) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Via.net)
}
inline ::kiapi::board::types::Net* Via::release_net() {
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Net* Via::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Via.net)
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Net* Via::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Net>(GetArenaForAllocation());
    net_ = p;
  }
  return net_;
}
inline ::kiapi::board::types::Net* Via::mutable_net() {
  ::kiapi::board::types::Net* _msg = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Via.net)
  return _msg;
}
inline void Via::set_allocated_net(::kiapi::board::types::Net* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Net>::GetOwningArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Via.net)
}

// .kiapi.board.types.ViaType type = 6;
inline void Via::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::types::ViaType Via::_internal_type() const {
  return static_cast< ::kiapi::board::types::ViaType >(type_);
}
inline ::kiapi::board::types::ViaType Via::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Via.type)
  return _internal_type();
}
inline void Via::_internal_set_type(::kiapi::board::types::ViaType value) {
  
  type_ = value;
}
inline void Via::set_type(::kiapi::board::types::ViaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Via.type)
}

// -------------------------------------------------------------------

// BoardGraphicShape

// .kiapi.common.types.GraphicShape shape = 1;
inline bool BoardGraphicShape::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool BoardGraphicShape::has_shape() const {
  return _internal_has_shape();
}
inline const ::kiapi::common::types::GraphicShape& BoardGraphicShape::_internal_shape() const {
  const ::kiapi::common::types::GraphicShape* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::GraphicShape&>(
      ::kiapi::common::types::_GraphicShape_default_instance_);
}
inline const ::kiapi::common::types::GraphicShape& BoardGraphicShape::shape() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardGraphicShape.shape)
  return _internal_shape();
}
inline void BoardGraphicShape::unsafe_arena_set_allocated_shape(
    ::kiapi::common::types::GraphicShape* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.BoardGraphicShape.shape)
}
inline ::kiapi::common::types::GraphicShape* BoardGraphicShape::release_shape() {
  
  ::kiapi::common::types::GraphicShape* temp = shape_;
  shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::GraphicShape* BoardGraphicShape::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.BoardGraphicShape.shape)
  
  ::kiapi::common::types::GraphicShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::GraphicShape* BoardGraphicShape::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::GraphicShape>(GetArenaForAllocation());
    shape_ = p;
  }
  return shape_;
}
inline ::kiapi::common::types::GraphicShape* BoardGraphicShape::mutable_shape() {
  ::kiapi::common::types::GraphicShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.BoardGraphicShape.shape)
  return _msg;
}
inline void BoardGraphicShape::set_allocated_shape(::kiapi::common::types::GraphicShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape));
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.BoardGraphicShape.shape)
}

// .kiapi.board.types.BoardLayer layer = 2;
inline void BoardGraphicShape::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer BoardGraphicShape::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer BoardGraphicShape::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardGraphicShape.layer)
  return _internal_layer();
}
inline void BoardGraphicShape::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void BoardGraphicShape::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.BoardGraphicShape.layer)
}

// .kiapi.board.types.Net net = 3;
inline bool BoardGraphicShape::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool BoardGraphicShape::has_net() const {
  return _internal_has_net();
}
inline void BoardGraphicShape::clear_net() {
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::kiapi::board::types::Net& BoardGraphicShape::_internal_net() const {
  const ::kiapi::board::types::Net* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Net&>(
      ::kiapi::board::types::_Net_default_instance_);
}
inline const ::kiapi::board::types::Net& BoardGraphicShape::net() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardGraphicShape.net)
  return _internal_net();
}
inline void BoardGraphicShape::unsafe_arena_set_allocated_net(
    ::kiapi::board::types::Net* net) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.BoardGraphicShape.net)
}
inline ::kiapi::board::types::Net* BoardGraphicShape::release_net() {
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Net* BoardGraphicShape::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.BoardGraphicShape.net)
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Net* BoardGraphicShape::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Net>(GetArenaForAllocation());
    net_ = p;
  }
  return net_;
}
inline ::kiapi::board::types::Net* BoardGraphicShape::mutable_net() {
  ::kiapi::board::types::Net* _msg = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.BoardGraphicShape.net)
  return _msg;
}
inline void BoardGraphicShape::set_allocated_net(::kiapi::board::types::Net* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Net>::GetOwningArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.BoardGraphicShape.net)
}

// .kiapi.common.types.KIID id = 4;
inline bool BoardGraphicShape::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BoardGraphicShape::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& BoardGraphicShape::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& BoardGraphicShape::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardGraphicShape.id)
  return _internal_id();
}
inline void BoardGraphicShape::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.BoardGraphicShape.id)
}
inline ::kiapi::common::types::KIID* BoardGraphicShape::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* BoardGraphicShape::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.BoardGraphicShape.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* BoardGraphicShape::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* BoardGraphicShape::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.BoardGraphicShape.id)
  return _msg;
}
inline void BoardGraphicShape::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.BoardGraphicShape.id)
}

// .kiapi.common.types.LockedState locked = 5;
inline void BoardGraphicShape::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState BoardGraphicShape::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState BoardGraphicShape::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardGraphicShape.locked)
  return _internal_locked();
}
inline void BoardGraphicShape::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void BoardGraphicShape::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.BoardGraphicShape.locked)
}

// -------------------------------------------------------------------

// BoardText

// .kiapi.common.types.KIID id = 1;
inline bool BoardText::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BoardText::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& BoardText::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& BoardText::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardText.id)
  return _internal_id();
}
inline void BoardText::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.BoardText.id)
}
inline ::kiapi::common::types::KIID* BoardText::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* BoardText::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.BoardText.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* BoardText::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* BoardText::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.BoardText.id)
  return _msg;
}
inline void BoardText::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.BoardText.id)
}

// .kiapi.common.types.Text text = 2;
inline bool BoardText::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool BoardText::has_text() const {
  return _internal_has_text();
}
inline const ::kiapi::common::types::Text& BoardText::_internal_text() const {
  const ::kiapi::common::types::Text* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Text&>(
      ::kiapi::common::types::_Text_default_instance_);
}
inline const ::kiapi::common::types::Text& BoardText::text() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardText.text)
  return _internal_text();
}
inline void BoardText::unsafe_arena_set_allocated_text(
    ::kiapi::common::types::Text* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.BoardText.text)
}
inline ::kiapi::common::types::Text* BoardText::release_text() {
  
  ::kiapi::common::types::Text* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Text* BoardText::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.BoardText.text)
  
  ::kiapi::common::types::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Text* BoardText::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Text>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::common::types::Text* BoardText::mutable_text() {
  ::kiapi::common::types::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.BoardText.text)
  return _msg;
}
inline void BoardText::set_allocated_text(::kiapi::common::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text));
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.BoardText.text)
}

// .kiapi.board.types.BoardLayer layer = 3;
inline void BoardText::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer BoardText::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer BoardText::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardText.layer)
  return _internal_layer();
}
inline void BoardText::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void BoardText::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.BoardText.layer)
}

// bool knockout = 4;
inline void BoardText::clear_knockout() {
  knockout_ = false;
}
inline bool BoardText::_internal_knockout() const {
  return knockout_;
}
inline bool BoardText::knockout() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardText.knockout)
  return _internal_knockout();
}
inline void BoardText::_internal_set_knockout(bool value) {
  
  knockout_ = value;
}
inline void BoardText::set_knockout(bool value) {
  _internal_set_knockout(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.BoardText.knockout)
}

// .kiapi.common.types.LockedState locked = 5;
inline void BoardText::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState BoardText::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState BoardText::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardText.locked)
  return _internal_locked();
}
inline void BoardText::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void BoardText::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.BoardText.locked)
}

// -------------------------------------------------------------------

// BoardTextBox

// .kiapi.common.types.KIID id = 1;
inline bool BoardTextBox::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BoardTextBox::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& BoardTextBox::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& BoardTextBox::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardTextBox.id)
  return _internal_id();
}
inline void BoardTextBox::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.BoardTextBox.id)
}
inline ::kiapi::common::types::KIID* BoardTextBox::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* BoardTextBox::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.BoardTextBox.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* BoardTextBox::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* BoardTextBox::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.BoardTextBox.id)
  return _msg;
}
inline void BoardTextBox::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.BoardTextBox.id)
}

// .kiapi.common.types.TextBox textbox = 2;
inline bool BoardTextBox::_internal_has_textbox() const {
  return this != internal_default_instance() && textbox_ != nullptr;
}
inline bool BoardTextBox::has_textbox() const {
  return _internal_has_textbox();
}
inline const ::kiapi::common::types::TextBox& BoardTextBox::_internal_textbox() const {
  const ::kiapi::common::types::TextBox* p = textbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::TextBox&>(
      ::kiapi::common::types::_TextBox_default_instance_);
}
inline const ::kiapi::common::types::TextBox& BoardTextBox::textbox() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardTextBox.textbox)
  return _internal_textbox();
}
inline void BoardTextBox::unsafe_arena_set_allocated_textbox(
    ::kiapi::common::types::TextBox* textbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(textbox_);
  }
  textbox_ = textbox;
  if (textbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.BoardTextBox.textbox)
}
inline ::kiapi::common::types::TextBox* BoardTextBox::release_textbox() {
  
  ::kiapi::common::types::TextBox* temp = textbox_;
  textbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::TextBox* BoardTextBox::unsafe_arena_release_textbox() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.BoardTextBox.textbox)
  
  ::kiapi::common::types::TextBox* temp = textbox_;
  textbox_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::TextBox* BoardTextBox::_internal_mutable_textbox() {
  
  if (textbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::TextBox>(GetArenaForAllocation());
    textbox_ = p;
  }
  return textbox_;
}
inline ::kiapi::common::types::TextBox* BoardTextBox::mutable_textbox() {
  ::kiapi::common::types::TextBox* _msg = _internal_mutable_textbox();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.BoardTextBox.textbox)
  return _msg;
}
inline void BoardTextBox::set_allocated_textbox(::kiapi::common::types::TextBox* textbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(textbox_);
  }
  if (textbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(textbox));
    if (message_arena != submessage_arena) {
      textbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textbox, submessage_arena);
    }
    
  } else {
    
  }
  textbox_ = textbox;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.BoardTextBox.textbox)
}

// .kiapi.board.types.BoardLayer layer = 3;
inline void BoardTextBox::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer BoardTextBox::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer BoardTextBox::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardTextBox.layer)
  return _internal_layer();
}
inline void BoardTextBox::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void BoardTextBox::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.BoardTextBox.layer)
}

// .kiapi.common.types.LockedState locked = 4;
inline void BoardTextBox::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState BoardTextBox::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState BoardTextBox::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.BoardTextBox.locked)
  return _internal_locked();
}
inline void BoardTextBox::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void BoardTextBox::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.BoardTextBox.locked)
}

// -------------------------------------------------------------------

// ThermalSpokeSettings

// .kiapi.common.types.Distance width = 1;
inline bool ThermalSpokeSettings::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool ThermalSpokeSettings::has_width() const {
  return _internal_has_width();
}
inline const ::kiapi::common::types::Distance& ThermalSpokeSettings::_internal_width() const {
  const ::kiapi::common::types::Distance* p = width_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& ThermalSpokeSettings::width() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ThermalSpokeSettings.width)
  return _internal_width();
}
inline void ThermalSpokeSettings::unsafe_arena_set_allocated_width(
    ::kiapi::common::types::Distance* width) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width_);
  }
  width_ = width;
  if (width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.ThermalSpokeSettings.width)
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::release_width() {
  
  ::kiapi::common::types::Distance* temp = width_;
  width_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::unsafe_arena_release_width() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.ThermalSpokeSettings.width)
  
  ::kiapi::common::types::Distance* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    width_ = p;
  }
  return width_;
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::mutable_width() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_width();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.ThermalSpokeSettings.width)
  return _msg;
}
inline void ThermalSpokeSettings::set_allocated_width(::kiapi::common::types::Distance* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(width_);
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width));
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.ThermalSpokeSettings.width)
}

// .kiapi.common.types.Angle angle = 2;
inline bool ThermalSpokeSettings::_internal_has_angle() const {
  return this != internal_default_instance() && angle_ != nullptr;
}
inline bool ThermalSpokeSettings::has_angle() const {
  return _internal_has_angle();
}
inline const ::kiapi::common::types::Angle& ThermalSpokeSettings::_internal_angle() const {
  const ::kiapi::common::types::Angle* p = angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Angle&>(
      ::kiapi::common::types::_Angle_default_instance_);
}
inline const ::kiapi::common::types::Angle& ThermalSpokeSettings::angle() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ThermalSpokeSettings.angle)
  return _internal_angle();
}
inline void ThermalSpokeSettings::unsafe_arena_set_allocated_angle(
    ::kiapi::common::types::Angle* angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  angle_ = angle;
  if (angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.ThermalSpokeSettings.angle)
}
inline ::kiapi::common::types::Angle* ThermalSpokeSettings::release_angle() {
  
  ::kiapi::common::types::Angle* temp = angle_;
  angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Angle* ThermalSpokeSettings::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.ThermalSpokeSettings.angle)
  
  ::kiapi::common::types::Angle* temp = angle_;
  angle_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Angle* ThermalSpokeSettings::_internal_mutable_angle() {
  
  if (angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Angle>(GetArenaForAllocation());
    angle_ = p;
  }
  return angle_;
}
inline ::kiapi::common::types::Angle* ThermalSpokeSettings::mutable_angle() {
  ::kiapi::common::types::Angle* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.ThermalSpokeSettings.angle)
  return _msg;
}
inline void ThermalSpokeSettings::set_allocated_angle(::kiapi::common::types::Angle* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle));
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    
  } else {
    
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.ThermalSpokeSettings.angle)
}

// .kiapi.common.types.Distance gap = 3;
inline bool ThermalSpokeSettings::_internal_has_gap() const {
  return this != internal_default_instance() && gap_ != nullptr;
}
inline bool ThermalSpokeSettings::has_gap() const {
  return _internal_has_gap();
}
inline const ::kiapi::common::types::Distance& ThermalSpokeSettings::_internal_gap() const {
  const ::kiapi::common::types::Distance* p = gap_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& ThermalSpokeSettings::gap() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ThermalSpokeSettings.gap)
  return _internal_gap();
}
inline void ThermalSpokeSettings::unsafe_arena_set_allocated_gap(
    ::kiapi::common::types::Distance* gap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gap_);
  }
  gap_ = gap;
  if (gap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.ThermalSpokeSettings.gap)
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::release_gap() {
  
  ::kiapi::common::types::Distance* temp = gap_;
  gap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::unsafe_arena_release_gap() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.ThermalSpokeSettings.gap)
  
  ::kiapi::common::types::Distance* temp = gap_;
  gap_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::_internal_mutable_gap() {
  
  if (gap_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    gap_ = p;
  }
  return gap_;
}
inline ::kiapi::common::types::Distance* ThermalSpokeSettings::mutable_gap() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_gap();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.ThermalSpokeSettings.gap)
  return _msg;
}
inline void ThermalSpokeSettings::set_allocated_gap(::kiapi::common::types::Distance* gap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gap_);
  }
  if (gap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gap));
    if (message_arena != submessage_arena) {
      gap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gap, submessage_arena);
    }
    
  } else {
    
  }
  gap_ = gap;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.ThermalSpokeSettings.gap)
}

// -------------------------------------------------------------------

// Pad

// .kiapi.common.types.KIID id = 1;
inline bool Pad::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Pad::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& Pad::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& Pad::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.id)
  return _internal_id();
}
inline void Pad::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Pad.id)
}
inline ::kiapi::common::types::KIID* Pad::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* Pad::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Pad.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* Pad::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* Pad::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Pad.id)
  return _msg;
}
inline void Pad::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Pad.id)
}

// .kiapi.common.types.LockedState locked = 2;
inline void Pad::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState Pad::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState Pad::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.locked)
  return _internal_locked();
}
inline void Pad::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void Pad::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Pad.locked)
}

// string number = 3;
inline void Pad::clear_number() {
  number_.ClearToEmpty();
}
inline const std::string& Pad::number() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pad::set_number(ArgT0&& arg0, ArgT... args) {
 
 number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Pad.number)
}
inline std::string* Pad::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Pad.number)
  return _s;
}
inline const std::string& Pad::_internal_number() const {
  return number_.Get();
}
inline void Pad::_internal_set_number(const std::string& value) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pad::_internal_mutable_number() {
  
  return number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pad::release_number() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Pad.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pad::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Pad.number)
}

// .kiapi.board.types.Net net = 4;
inline bool Pad::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool Pad::has_net() const {
  return _internal_has_net();
}
inline void Pad::clear_net() {
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::kiapi::board::types::Net& Pad::_internal_net() const {
  const ::kiapi::board::types::Net* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Net&>(
      ::kiapi::board::types::_Net_default_instance_);
}
inline const ::kiapi::board::types::Net& Pad::net() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.net)
  return _internal_net();
}
inline void Pad::unsafe_arena_set_allocated_net(
    ::kiapi::board::types::Net* net) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Pad.net)
}
inline ::kiapi::board::types::Net* Pad::release_net() {
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Net* Pad::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Pad.net)
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Net* Pad::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Net>(GetArenaForAllocation());
    net_ = p;
  }
  return net_;
}
inline ::kiapi::board::types::Net* Pad::mutable_net() {
  ::kiapi::board::types::Net* _msg = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Pad.net)
  return _msg;
}
inline void Pad::set_allocated_net(::kiapi::board::types::Net* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Net>::GetOwningArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Pad.net)
}

// .kiapi.board.types.PadType type = 5;
inline void Pad::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::types::PadType Pad::_internal_type() const {
  return static_cast< ::kiapi::board::types::PadType >(type_);
}
inline ::kiapi::board::types::PadType Pad::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.type)
  return _internal_type();
}
inline void Pad::_internal_set_type(::kiapi::board::types::PadType value) {
  
  type_ = value;
}
inline void Pad::set_type(::kiapi::board::types::PadType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Pad.type)
}

// .kiapi.board.types.PadStack pad_stack = 6;
inline bool Pad::_internal_has_pad_stack() const {
  return this != internal_default_instance() && pad_stack_ != nullptr;
}
inline bool Pad::has_pad_stack() const {
  return _internal_has_pad_stack();
}
inline void Pad::clear_pad_stack() {
  if (GetArenaForAllocation() == nullptr && pad_stack_ != nullptr) {
    delete pad_stack_;
  }
  pad_stack_ = nullptr;
}
inline const ::kiapi::board::types::PadStack& Pad::_internal_pad_stack() const {
  const ::kiapi::board::types::PadStack* p = pad_stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::PadStack&>(
      ::kiapi::board::types::_PadStack_default_instance_);
}
inline const ::kiapi::board::types::PadStack& Pad::pad_stack() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.pad_stack)
  return _internal_pad_stack();
}
inline void Pad::unsafe_arena_set_allocated_pad_stack(
    ::kiapi::board::types::PadStack* pad_stack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_stack_);
  }
  pad_stack_ = pad_stack;
  if (pad_stack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Pad.pad_stack)
}
inline ::kiapi::board::types::PadStack* Pad::release_pad_stack() {
  
  ::kiapi::board::types::PadStack* temp = pad_stack_;
  pad_stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::PadStack* Pad::unsafe_arena_release_pad_stack() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Pad.pad_stack)
  
  ::kiapi::board::types::PadStack* temp = pad_stack_;
  pad_stack_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::PadStack* Pad::_internal_mutable_pad_stack() {
  
  if (pad_stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::PadStack>(GetArenaForAllocation());
    pad_stack_ = p;
  }
  return pad_stack_;
}
inline ::kiapi::board::types::PadStack* Pad::mutable_pad_stack() {
  ::kiapi::board::types::PadStack* _msg = _internal_mutable_pad_stack();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Pad.pad_stack)
  return _msg;
}
inline void Pad::set_allocated_pad_stack(::kiapi::board::types::PadStack* pad_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pad_stack_;
  }
  if (pad_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::PadStack>::GetOwningArena(pad_stack);
    if (message_arena != submessage_arena) {
      pad_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pad_stack, submessage_arena);
    }
    
  } else {
    
  }
  pad_stack_ = pad_stack;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Pad.pad_stack)
}

// .kiapi.common.types.Vector2 position = 7;
inline bool Pad::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pad::has_position() const {
  return _internal_has_position();
}
inline const ::kiapi::common::types::Vector2& Pad::_internal_position() const {
  const ::kiapi::common::types::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Pad::position() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.position)
  return _internal_position();
}
inline void Pad::unsafe_arena_set_allocated_position(
    ::kiapi::common::types::Vector2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Pad.position)
}
inline ::kiapi::common::types::Vector2* Pad::release_position() {
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Pad::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Pad.position)
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Pad::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::kiapi::common::types::Vector2* Pad::mutable_position() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Pad.position)
  return _msg;
}
inline void Pad::set_allocated_position(::kiapi::common::types::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Pad.position)
}

// .kiapi.common.types.Distance copper_clearance_override = 8;
inline bool Pad::_internal_has_copper_clearance_override() const {
  return this != internal_default_instance() && copper_clearance_override_ != nullptr;
}
inline bool Pad::has_copper_clearance_override() const {
  return _internal_has_copper_clearance_override();
}
inline const ::kiapi::common::types::Distance& Pad::_internal_copper_clearance_override() const {
  const ::kiapi::common::types::Distance* p = copper_clearance_override_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& Pad::copper_clearance_override() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Pad.copper_clearance_override)
  return _internal_copper_clearance_override();
}
inline void Pad::unsafe_arena_set_allocated_copper_clearance_override(
    ::kiapi::common::types::Distance* copper_clearance_override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copper_clearance_override_);
  }
  copper_clearance_override_ = copper_clearance_override;
  if (copper_clearance_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Pad.copper_clearance_override)
}
inline ::kiapi::common::types::Distance* Pad::release_copper_clearance_override() {
  
  ::kiapi::common::types::Distance* temp = copper_clearance_override_;
  copper_clearance_override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* Pad::unsafe_arena_release_copper_clearance_override() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Pad.copper_clearance_override)
  
  ::kiapi::common::types::Distance* temp = copper_clearance_override_;
  copper_clearance_override_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* Pad::_internal_mutable_copper_clearance_override() {
  
  if (copper_clearance_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    copper_clearance_override_ = p;
  }
  return copper_clearance_override_;
}
inline ::kiapi::common::types::Distance* Pad::mutable_copper_clearance_override() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_copper_clearance_override();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Pad.copper_clearance_override)
  return _msg;
}
inline void Pad::set_allocated_copper_clearance_override(::kiapi::common::types::Distance* copper_clearance_override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(copper_clearance_override_);
  }
  if (copper_clearance_override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copper_clearance_override));
    if (message_arena != submessage_arena) {
      copper_clearance_override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copper_clearance_override, submessage_arena);
    }
    
  } else {
    
  }
  copper_clearance_override_ = copper_clearance_override;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Pad.copper_clearance_override)
}

// -------------------------------------------------------------------

// HatchFillSettings

// .kiapi.common.types.Distance thickness = 1;
inline bool HatchFillSettings::_internal_has_thickness() const {
  return this != internal_default_instance() && thickness_ != nullptr;
}
inline bool HatchFillSettings::has_thickness() const {
  return _internal_has_thickness();
}
inline const ::kiapi::common::types::Distance& HatchFillSettings::_internal_thickness() const {
  const ::kiapi::common::types::Distance* p = thickness_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& HatchFillSettings::thickness() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.HatchFillSettings.thickness)
  return _internal_thickness();
}
inline void HatchFillSettings::unsafe_arena_set_allocated_thickness(
    ::kiapi::common::types::Distance* thickness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness_);
  }
  thickness_ = thickness;
  if (thickness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.HatchFillSettings.thickness)
}
inline ::kiapi::common::types::Distance* HatchFillSettings::release_thickness() {
  
  ::kiapi::common::types::Distance* temp = thickness_;
  thickness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* HatchFillSettings::unsafe_arena_release_thickness() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.HatchFillSettings.thickness)
  
  ::kiapi::common::types::Distance* temp = thickness_;
  thickness_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* HatchFillSettings::_internal_mutable_thickness() {
  
  if (thickness_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    thickness_ = p;
  }
  return thickness_;
}
inline ::kiapi::common::types::Distance* HatchFillSettings::mutable_thickness() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_thickness();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.HatchFillSettings.thickness)
  return _msg;
}
inline void HatchFillSettings::set_allocated_thickness(::kiapi::common::types::Distance* thickness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness_);
  }
  if (thickness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness));
    if (message_arena != submessage_arena) {
      thickness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thickness, submessage_arena);
    }
    
  } else {
    
  }
  thickness_ = thickness;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.HatchFillSettings.thickness)
}

// .kiapi.common.types.Distance gap = 2;
inline bool HatchFillSettings::_internal_has_gap() const {
  return this != internal_default_instance() && gap_ != nullptr;
}
inline bool HatchFillSettings::has_gap() const {
  return _internal_has_gap();
}
inline const ::kiapi::common::types::Distance& HatchFillSettings::_internal_gap() const {
  const ::kiapi::common::types::Distance* p = gap_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& HatchFillSettings::gap() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.HatchFillSettings.gap)
  return _internal_gap();
}
inline void HatchFillSettings::unsafe_arena_set_allocated_gap(
    ::kiapi::common::types::Distance* gap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gap_);
  }
  gap_ = gap;
  if (gap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.HatchFillSettings.gap)
}
inline ::kiapi::common::types::Distance* HatchFillSettings::release_gap() {
  
  ::kiapi::common::types::Distance* temp = gap_;
  gap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* HatchFillSettings::unsafe_arena_release_gap() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.HatchFillSettings.gap)
  
  ::kiapi::common::types::Distance* temp = gap_;
  gap_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* HatchFillSettings::_internal_mutable_gap() {
  
  if (gap_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    gap_ = p;
  }
  return gap_;
}
inline ::kiapi::common::types::Distance* HatchFillSettings::mutable_gap() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_gap();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.HatchFillSettings.gap)
  return _msg;
}
inline void HatchFillSettings::set_allocated_gap(::kiapi::common::types::Distance* gap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gap_);
  }
  if (gap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gap));
    if (message_arena != submessage_arena) {
      gap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gap, submessage_arena);
    }
    
  } else {
    
  }
  gap_ = gap;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.HatchFillSettings.gap)
}

// .kiapi.common.types.Angle orientation = 3;
inline bool HatchFillSettings::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool HatchFillSettings::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::kiapi::common::types::Angle& HatchFillSettings::_internal_orientation() const {
  const ::kiapi::common::types::Angle* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Angle&>(
      ::kiapi::common::types::_Angle_default_instance_);
}
inline const ::kiapi::common::types::Angle& HatchFillSettings::orientation() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.HatchFillSettings.orientation)
  return _internal_orientation();
}
inline void HatchFillSettings::unsafe_arena_set_allocated_orientation(
    ::kiapi::common::types::Angle* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.HatchFillSettings.orientation)
}
inline ::kiapi::common::types::Angle* HatchFillSettings::release_orientation() {
  
  ::kiapi::common::types::Angle* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Angle* HatchFillSettings::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.HatchFillSettings.orientation)
  
  ::kiapi::common::types::Angle* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Angle* HatchFillSettings::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Angle>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::kiapi::common::types::Angle* HatchFillSettings::mutable_orientation() {
  ::kiapi::common::types::Angle* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.HatchFillSettings.orientation)
  return _msg;
}
inline void HatchFillSettings::set_allocated_orientation(::kiapi::common::types::Angle* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.HatchFillSettings.orientation)
}

// double hatch_smoothing_ratio = 4;
inline void HatchFillSettings::clear_hatch_smoothing_ratio() {
  hatch_smoothing_ratio_ = 0;
}
inline double HatchFillSettings::_internal_hatch_smoothing_ratio() const {
  return hatch_smoothing_ratio_;
}
inline double HatchFillSettings::hatch_smoothing_ratio() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.HatchFillSettings.hatch_smoothing_ratio)
  return _internal_hatch_smoothing_ratio();
}
inline void HatchFillSettings::_internal_set_hatch_smoothing_ratio(double value) {
  
  hatch_smoothing_ratio_ = value;
}
inline void HatchFillSettings::set_hatch_smoothing_ratio(double value) {
  _internal_set_hatch_smoothing_ratio(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.HatchFillSettings.hatch_smoothing_ratio)
}

// double hatch_hole_min_area_ratio = 5;
inline void HatchFillSettings::clear_hatch_hole_min_area_ratio() {
  hatch_hole_min_area_ratio_ = 0;
}
inline double HatchFillSettings::_internal_hatch_hole_min_area_ratio() const {
  return hatch_hole_min_area_ratio_;
}
inline double HatchFillSettings::hatch_hole_min_area_ratio() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.HatchFillSettings.hatch_hole_min_area_ratio)
  return _internal_hatch_hole_min_area_ratio();
}
inline void HatchFillSettings::_internal_set_hatch_hole_min_area_ratio(double value) {
  
  hatch_hole_min_area_ratio_ = value;
}
inline void HatchFillSettings::set_hatch_hole_min_area_ratio(double value) {
  _internal_set_hatch_hole_min_area_ratio(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.HatchFillSettings.hatch_hole_min_area_ratio)
}

// .kiapi.board.types.ZoneHatchFillBorderMode border_mode = 6;
inline void HatchFillSettings::clear_border_mode() {
  border_mode_ = 0;
}
inline ::kiapi::board::types::ZoneHatchFillBorderMode HatchFillSettings::_internal_border_mode() const {
  return static_cast< ::kiapi::board::types::ZoneHatchFillBorderMode >(border_mode_);
}
inline ::kiapi::board::types::ZoneHatchFillBorderMode HatchFillSettings::border_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.HatchFillSettings.border_mode)
  return _internal_border_mode();
}
inline void HatchFillSettings::_internal_set_border_mode(::kiapi::board::types::ZoneHatchFillBorderMode value) {
  
  border_mode_ = value;
}
inline void HatchFillSettings::set_border_mode(::kiapi::board::types::ZoneHatchFillBorderMode value) {
  _internal_set_border_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.HatchFillSettings.border_mode)
}

// -------------------------------------------------------------------

// TeardropSettings

// .kiapi.board.types.TeardropType type = 1;
inline void TeardropSettings::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::types::TeardropType TeardropSettings::_internal_type() const {
  return static_cast< ::kiapi::board::types::TeardropType >(type_);
}
inline ::kiapi::board::types::TeardropType TeardropSettings::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.TeardropSettings.type)
  return _internal_type();
}
inline void TeardropSettings::_internal_set_type(::kiapi::board::types::TeardropType value) {
  
  type_ = value;
}
inline void TeardropSettings::set_type(::kiapi::board::types::TeardropType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.TeardropSettings.type)
}

// -------------------------------------------------------------------

// CopperZoneSettings

// .kiapi.board.types.ZoneConnectionSettings connection = 1;
inline bool CopperZoneSettings::_internal_has_connection() const {
  return this != internal_default_instance() && connection_ != nullptr;
}
inline bool CopperZoneSettings::has_connection() const {
  return _internal_has_connection();
}
inline void CopperZoneSettings::clear_connection() {
  if (GetArenaForAllocation() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
}
inline const ::kiapi::board::types::ZoneConnectionSettings& CopperZoneSettings::_internal_connection() const {
  const ::kiapi::board::types::ZoneConnectionSettings* p = connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::ZoneConnectionSettings&>(
      ::kiapi::board::types::_ZoneConnectionSettings_default_instance_);
}
inline const ::kiapi::board::types::ZoneConnectionSettings& CopperZoneSettings::connection() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.connection)
  return _internal_connection();
}
inline void CopperZoneSettings::unsafe_arena_set_allocated_connection(
    ::kiapi::board::types::ZoneConnectionSettings* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CopperZoneSettings.connection)
}
inline ::kiapi::board::types::ZoneConnectionSettings* CopperZoneSettings::release_connection() {
  
  ::kiapi::board::types::ZoneConnectionSettings* temp = connection_;
  connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::ZoneConnectionSettings* CopperZoneSettings::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CopperZoneSettings.connection)
  
  ::kiapi::board::types::ZoneConnectionSettings* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::ZoneConnectionSettings* CopperZoneSettings::_internal_mutable_connection() {
  
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::ZoneConnectionSettings>(GetArenaForAllocation());
    connection_ = p;
  }
  return connection_;
}
inline ::kiapi::board::types::ZoneConnectionSettings* CopperZoneSettings::mutable_connection() {
  ::kiapi::board::types::ZoneConnectionSettings* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CopperZoneSettings.connection)
  return _msg;
}
inline void CopperZoneSettings::set_allocated_connection(::kiapi::board::types::ZoneConnectionSettings* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::ZoneConnectionSettings>::GetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CopperZoneSettings.connection)
}

// .kiapi.common.types.Distance clearance = 2;
inline bool CopperZoneSettings::_internal_has_clearance() const {
  return this != internal_default_instance() && clearance_ != nullptr;
}
inline bool CopperZoneSettings::has_clearance() const {
  return _internal_has_clearance();
}
inline const ::kiapi::common::types::Distance& CopperZoneSettings::_internal_clearance() const {
  const ::kiapi::common::types::Distance* p = clearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& CopperZoneSettings::clearance() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.clearance)
  return _internal_clearance();
}
inline void CopperZoneSettings::unsafe_arena_set_allocated_clearance(
    ::kiapi::common::types::Distance* clearance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance_);
  }
  clearance_ = clearance;
  if (clearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CopperZoneSettings.clearance)
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::release_clearance() {
  
  ::kiapi::common::types::Distance* temp = clearance_;
  clearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::unsafe_arena_release_clearance() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CopperZoneSettings.clearance)
  
  ::kiapi::common::types::Distance* temp = clearance_;
  clearance_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::_internal_mutable_clearance() {
  
  if (clearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    clearance_ = p;
  }
  return clearance_;
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::mutable_clearance() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_clearance();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CopperZoneSettings.clearance)
  return _msg;
}
inline void CopperZoneSettings::set_allocated_clearance(::kiapi::common::types::Distance* clearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance_);
  }
  if (clearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance));
    if (message_arena != submessage_arena) {
      clearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearance, submessage_arena);
    }
    
  } else {
    
  }
  clearance_ = clearance;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CopperZoneSettings.clearance)
}

// .kiapi.common.types.Distance min_thickness = 3;
inline bool CopperZoneSettings::_internal_has_min_thickness() const {
  return this != internal_default_instance() && min_thickness_ != nullptr;
}
inline bool CopperZoneSettings::has_min_thickness() const {
  return _internal_has_min_thickness();
}
inline const ::kiapi::common::types::Distance& CopperZoneSettings::_internal_min_thickness() const {
  const ::kiapi::common::types::Distance* p = min_thickness_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& CopperZoneSettings::min_thickness() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.min_thickness)
  return _internal_min_thickness();
}
inline void CopperZoneSettings::unsafe_arena_set_allocated_min_thickness(
    ::kiapi::common::types::Distance* min_thickness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_thickness_);
  }
  min_thickness_ = min_thickness;
  if (min_thickness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CopperZoneSettings.min_thickness)
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::release_min_thickness() {
  
  ::kiapi::common::types::Distance* temp = min_thickness_;
  min_thickness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::unsafe_arena_release_min_thickness() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CopperZoneSettings.min_thickness)
  
  ::kiapi::common::types::Distance* temp = min_thickness_;
  min_thickness_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::_internal_mutable_min_thickness() {
  
  if (min_thickness_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    min_thickness_ = p;
  }
  return min_thickness_;
}
inline ::kiapi::common::types::Distance* CopperZoneSettings::mutable_min_thickness() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_min_thickness();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CopperZoneSettings.min_thickness)
  return _msg;
}
inline void CopperZoneSettings::set_allocated_min_thickness(::kiapi::common::types::Distance* min_thickness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_thickness_);
  }
  if (min_thickness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_thickness));
    if (message_arena != submessage_arena) {
      min_thickness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_thickness, submessage_arena);
    }
    
  } else {
    
  }
  min_thickness_ = min_thickness;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CopperZoneSettings.min_thickness)
}

// .kiapi.board.types.IslandRemovalMode island_mode = 4;
inline void CopperZoneSettings::clear_island_mode() {
  island_mode_ = 0;
}
inline ::kiapi::board::types::IslandRemovalMode CopperZoneSettings::_internal_island_mode() const {
  return static_cast< ::kiapi::board::types::IslandRemovalMode >(island_mode_);
}
inline ::kiapi::board::types::IslandRemovalMode CopperZoneSettings::island_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.island_mode)
  return _internal_island_mode();
}
inline void CopperZoneSettings::_internal_set_island_mode(::kiapi::board::types::IslandRemovalMode value) {
  
  island_mode_ = value;
}
inline void CopperZoneSettings::set_island_mode(::kiapi::board::types::IslandRemovalMode value) {
  _internal_set_island_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.CopperZoneSettings.island_mode)
}

// uint64 min_island_area = 5;
inline void CopperZoneSettings::clear_min_island_area() {
  min_island_area_ = uint64_t{0u};
}
inline uint64_t CopperZoneSettings::_internal_min_island_area() const {
  return min_island_area_;
}
inline uint64_t CopperZoneSettings::min_island_area() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.min_island_area)
  return _internal_min_island_area();
}
inline void CopperZoneSettings::_internal_set_min_island_area(uint64_t value) {
  
  min_island_area_ = value;
}
inline void CopperZoneSettings::set_min_island_area(uint64_t value) {
  _internal_set_min_island_area(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.CopperZoneSettings.min_island_area)
}

// .kiapi.board.types.ZoneFillMode fill_mode = 6;
inline void CopperZoneSettings::clear_fill_mode() {
  fill_mode_ = 0;
}
inline ::kiapi::board::types::ZoneFillMode CopperZoneSettings::_internal_fill_mode() const {
  return static_cast< ::kiapi::board::types::ZoneFillMode >(fill_mode_);
}
inline ::kiapi::board::types::ZoneFillMode CopperZoneSettings::fill_mode() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.fill_mode)
  return _internal_fill_mode();
}
inline void CopperZoneSettings::_internal_set_fill_mode(::kiapi::board::types::ZoneFillMode value) {
  
  fill_mode_ = value;
}
inline void CopperZoneSettings::set_fill_mode(::kiapi::board::types::ZoneFillMode value) {
  _internal_set_fill_mode(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.CopperZoneSettings.fill_mode)
}

// .kiapi.board.types.HatchFillSettings hatch_settings = 7;
inline bool CopperZoneSettings::_internal_has_hatch_settings() const {
  return this != internal_default_instance() && hatch_settings_ != nullptr;
}
inline bool CopperZoneSettings::has_hatch_settings() const {
  return _internal_has_hatch_settings();
}
inline void CopperZoneSettings::clear_hatch_settings() {
  if (GetArenaForAllocation() == nullptr && hatch_settings_ != nullptr) {
    delete hatch_settings_;
  }
  hatch_settings_ = nullptr;
}
inline const ::kiapi::board::types::HatchFillSettings& CopperZoneSettings::_internal_hatch_settings() const {
  const ::kiapi::board::types::HatchFillSettings* p = hatch_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::HatchFillSettings&>(
      ::kiapi::board::types::_HatchFillSettings_default_instance_);
}
inline const ::kiapi::board::types::HatchFillSettings& CopperZoneSettings::hatch_settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.hatch_settings)
  return _internal_hatch_settings();
}
inline void CopperZoneSettings::unsafe_arena_set_allocated_hatch_settings(
    ::kiapi::board::types::HatchFillSettings* hatch_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hatch_settings_);
  }
  hatch_settings_ = hatch_settings;
  if (hatch_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CopperZoneSettings.hatch_settings)
}
inline ::kiapi::board::types::HatchFillSettings* CopperZoneSettings::release_hatch_settings() {
  
  ::kiapi::board::types::HatchFillSettings* temp = hatch_settings_;
  hatch_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::HatchFillSettings* CopperZoneSettings::unsafe_arena_release_hatch_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CopperZoneSettings.hatch_settings)
  
  ::kiapi::board::types::HatchFillSettings* temp = hatch_settings_;
  hatch_settings_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::HatchFillSettings* CopperZoneSettings::_internal_mutable_hatch_settings() {
  
  if (hatch_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::HatchFillSettings>(GetArenaForAllocation());
    hatch_settings_ = p;
  }
  return hatch_settings_;
}
inline ::kiapi::board::types::HatchFillSettings* CopperZoneSettings::mutable_hatch_settings() {
  ::kiapi::board::types::HatchFillSettings* _msg = _internal_mutable_hatch_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CopperZoneSettings.hatch_settings)
  return _msg;
}
inline void CopperZoneSettings::set_allocated_hatch_settings(::kiapi::board::types::HatchFillSettings* hatch_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hatch_settings_;
  }
  if (hatch_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::HatchFillSettings>::GetOwningArena(hatch_settings);
    if (message_arena != submessage_arena) {
      hatch_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hatch_settings, submessage_arena);
    }
    
  } else {
    
  }
  hatch_settings_ = hatch_settings;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CopperZoneSettings.hatch_settings)
}

// .kiapi.board.types.Net net = 8;
inline bool CopperZoneSettings::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool CopperZoneSettings::has_net() const {
  return _internal_has_net();
}
inline void CopperZoneSettings::clear_net() {
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::kiapi::board::types::Net& CopperZoneSettings::_internal_net() const {
  const ::kiapi::board::types::Net* p = net_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Net&>(
      ::kiapi::board::types::_Net_default_instance_);
}
inline const ::kiapi::board::types::Net& CopperZoneSettings::net() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.net)
  return _internal_net();
}
inline void CopperZoneSettings::unsafe_arena_set_allocated_net(
    ::kiapi::board::types::Net* net) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_);
  }
  net_ = net;
  if (net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CopperZoneSettings.net)
}
inline ::kiapi::board::types::Net* CopperZoneSettings::release_net() {
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Net* CopperZoneSettings::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CopperZoneSettings.net)
  
  ::kiapi::board::types::Net* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Net* CopperZoneSettings::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Net>(GetArenaForAllocation());
    net_ = p;
  }
  return net_;
}
inline ::kiapi::board::types::Net* CopperZoneSettings::mutable_net() {
  ::kiapi::board::types::Net* _msg = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CopperZoneSettings.net)
  return _msg;
}
inline void CopperZoneSettings::set_allocated_net(::kiapi::board::types::Net* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Net>::GetOwningArena(net);
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CopperZoneSettings.net)
}

// .kiapi.board.types.TeardropSettings teardrop = 9;
inline bool CopperZoneSettings::_internal_has_teardrop() const {
  return this != internal_default_instance() && teardrop_ != nullptr;
}
inline bool CopperZoneSettings::has_teardrop() const {
  return _internal_has_teardrop();
}
inline void CopperZoneSettings::clear_teardrop() {
  if (GetArenaForAllocation() == nullptr && teardrop_ != nullptr) {
    delete teardrop_;
  }
  teardrop_ = nullptr;
}
inline const ::kiapi::board::types::TeardropSettings& CopperZoneSettings::_internal_teardrop() const {
  const ::kiapi::board::types::TeardropSettings* p = teardrop_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::TeardropSettings&>(
      ::kiapi::board::types::_TeardropSettings_default_instance_);
}
inline const ::kiapi::board::types::TeardropSettings& CopperZoneSettings::teardrop() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CopperZoneSettings.teardrop)
  return _internal_teardrop();
}
inline void CopperZoneSettings::unsafe_arena_set_allocated_teardrop(
    ::kiapi::board::types::TeardropSettings* teardrop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teardrop_);
  }
  teardrop_ = teardrop;
  if (teardrop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CopperZoneSettings.teardrop)
}
inline ::kiapi::board::types::TeardropSettings* CopperZoneSettings::release_teardrop() {
  
  ::kiapi::board::types::TeardropSettings* temp = teardrop_;
  teardrop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::TeardropSettings* CopperZoneSettings::unsafe_arena_release_teardrop() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CopperZoneSettings.teardrop)
  
  ::kiapi::board::types::TeardropSettings* temp = teardrop_;
  teardrop_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::TeardropSettings* CopperZoneSettings::_internal_mutable_teardrop() {
  
  if (teardrop_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::TeardropSettings>(GetArenaForAllocation());
    teardrop_ = p;
  }
  return teardrop_;
}
inline ::kiapi::board::types::TeardropSettings* CopperZoneSettings::mutable_teardrop() {
  ::kiapi::board::types::TeardropSettings* _msg = _internal_mutable_teardrop();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CopperZoneSettings.teardrop)
  return _msg;
}
inline void CopperZoneSettings::set_allocated_teardrop(::kiapi::board::types::TeardropSettings* teardrop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete teardrop_;
  }
  if (teardrop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::TeardropSettings>::GetOwningArena(teardrop);
    if (message_arena != submessage_arena) {
      teardrop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teardrop, submessage_arena);
    }
    
  } else {
    
  }
  teardrop_ = teardrop;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CopperZoneSettings.teardrop)
}

// -------------------------------------------------------------------

// RuleAreaSettings

// bool keepout_copper = 1;
inline void RuleAreaSettings::clear_keepout_copper() {
  keepout_copper_ = false;
}
inline bool RuleAreaSettings::_internal_keepout_copper() const {
  return keepout_copper_;
}
inline bool RuleAreaSettings::keepout_copper() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.keepout_copper)
  return _internal_keepout_copper();
}
inline void RuleAreaSettings::_internal_set_keepout_copper(bool value) {
  
  keepout_copper_ = value;
}
inline void RuleAreaSettings::set_keepout_copper(bool value) {
  _internal_set_keepout_copper(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.keepout_copper)
}

// bool keepout_vias = 2;
inline void RuleAreaSettings::clear_keepout_vias() {
  keepout_vias_ = false;
}
inline bool RuleAreaSettings::_internal_keepout_vias() const {
  return keepout_vias_;
}
inline bool RuleAreaSettings::keepout_vias() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.keepout_vias)
  return _internal_keepout_vias();
}
inline void RuleAreaSettings::_internal_set_keepout_vias(bool value) {
  
  keepout_vias_ = value;
}
inline void RuleAreaSettings::set_keepout_vias(bool value) {
  _internal_set_keepout_vias(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.keepout_vias)
}

// bool keepout_tracks = 3;
inline void RuleAreaSettings::clear_keepout_tracks() {
  keepout_tracks_ = false;
}
inline bool RuleAreaSettings::_internal_keepout_tracks() const {
  return keepout_tracks_;
}
inline bool RuleAreaSettings::keepout_tracks() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.keepout_tracks)
  return _internal_keepout_tracks();
}
inline void RuleAreaSettings::_internal_set_keepout_tracks(bool value) {
  
  keepout_tracks_ = value;
}
inline void RuleAreaSettings::set_keepout_tracks(bool value) {
  _internal_set_keepout_tracks(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.keepout_tracks)
}

// bool keepout_pads = 4;
inline void RuleAreaSettings::clear_keepout_pads() {
  keepout_pads_ = false;
}
inline bool RuleAreaSettings::_internal_keepout_pads() const {
  return keepout_pads_;
}
inline bool RuleAreaSettings::keepout_pads() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.keepout_pads)
  return _internal_keepout_pads();
}
inline void RuleAreaSettings::_internal_set_keepout_pads(bool value) {
  
  keepout_pads_ = value;
}
inline void RuleAreaSettings::set_keepout_pads(bool value) {
  _internal_set_keepout_pads(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.keepout_pads)
}

// bool keepout_footprints = 5;
inline void RuleAreaSettings::clear_keepout_footprints() {
  keepout_footprints_ = false;
}
inline bool RuleAreaSettings::_internal_keepout_footprints() const {
  return keepout_footprints_;
}
inline bool RuleAreaSettings::keepout_footprints() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.keepout_footprints)
  return _internal_keepout_footprints();
}
inline void RuleAreaSettings::_internal_set_keepout_footprints(bool value) {
  
  keepout_footprints_ = value;
}
inline void RuleAreaSettings::set_keepout_footprints(bool value) {
  _internal_set_keepout_footprints(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.keepout_footprints)
}

// bool placement_enabled = 6;
inline void RuleAreaSettings::clear_placement_enabled() {
  placement_enabled_ = false;
}
inline bool RuleAreaSettings::_internal_placement_enabled() const {
  return placement_enabled_;
}
inline bool RuleAreaSettings::placement_enabled() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.placement_enabled)
  return _internal_placement_enabled();
}
inline void RuleAreaSettings::_internal_set_placement_enabled(bool value) {
  
  placement_enabled_ = value;
}
inline void RuleAreaSettings::set_placement_enabled(bool value) {
  _internal_set_placement_enabled(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.placement_enabled)
}

// .kiapi.board.types.PlacementRuleSourceType placement_source_type = 7;
inline void RuleAreaSettings::clear_placement_source_type() {
  placement_source_type_ = 0;
}
inline ::kiapi::board::types::PlacementRuleSourceType RuleAreaSettings::_internal_placement_source_type() const {
  return static_cast< ::kiapi::board::types::PlacementRuleSourceType >(placement_source_type_);
}
inline ::kiapi::board::types::PlacementRuleSourceType RuleAreaSettings::placement_source_type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.placement_source_type)
  return _internal_placement_source_type();
}
inline void RuleAreaSettings::_internal_set_placement_source_type(::kiapi::board::types::PlacementRuleSourceType value) {
  
  placement_source_type_ = value;
}
inline void RuleAreaSettings::set_placement_source_type(::kiapi::board::types::PlacementRuleSourceType value) {
  _internal_set_placement_source_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.placement_source_type)
}

// string placement_source = 8;
inline void RuleAreaSettings::clear_placement_source() {
  placement_source_.ClearToEmpty();
}
inline const std::string& RuleAreaSettings::placement_source() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RuleAreaSettings.placement_source)
  return _internal_placement_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuleAreaSettings::set_placement_source(ArgT0&& arg0, ArgT... args) {
 
 placement_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.RuleAreaSettings.placement_source)
}
inline std::string* RuleAreaSettings::mutable_placement_source() {
  std::string* _s = _internal_mutable_placement_source();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.RuleAreaSettings.placement_source)
  return _s;
}
inline const std::string& RuleAreaSettings::_internal_placement_source() const {
  return placement_source_.Get();
}
inline void RuleAreaSettings::_internal_set_placement_source(const std::string& value) {
  
  placement_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RuleAreaSettings::_internal_mutable_placement_source() {
  
  return placement_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RuleAreaSettings::release_placement_source() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.RuleAreaSettings.placement_source)
  return placement_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RuleAreaSettings::set_allocated_placement_source(std::string* placement_source) {
  if (placement_source != nullptr) {
    
  } else {
    
  }
  placement_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placement_source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (placement_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    placement_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.RuleAreaSettings.placement_source)
}

// -------------------------------------------------------------------

// ZoneBorderSettings

// .kiapi.board.types.ZoneBorderStyle style = 1;
inline void ZoneBorderSettings::clear_style() {
  style_ = 0;
}
inline ::kiapi::board::types::ZoneBorderStyle ZoneBorderSettings::_internal_style() const {
  return static_cast< ::kiapi::board::types::ZoneBorderStyle >(style_);
}
inline ::kiapi::board::types::ZoneBorderStyle ZoneBorderSettings::style() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneBorderSettings.style)
  return _internal_style();
}
inline void ZoneBorderSettings::_internal_set_style(::kiapi::board::types::ZoneBorderStyle value) {
  
  style_ = value;
}
inline void ZoneBorderSettings::set_style(::kiapi::board::types::ZoneBorderStyle value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ZoneBorderSettings.style)
}

// .kiapi.common.types.Distance pitch = 2;
inline bool ZoneBorderSettings::_internal_has_pitch() const {
  return this != internal_default_instance() && pitch_ != nullptr;
}
inline bool ZoneBorderSettings::has_pitch() const {
  return _internal_has_pitch();
}
inline const ::kiapi::common::types::Distance& ZoneBorderSettings::_internal_pitch() const {
  const ::kiapi::common::types::Distance* p = pitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& ZoneBorderSettings::pitch() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneBorderSettings.pitch)
  return _internal_pitch();
}
inline void ZoneBorderSettings::unsafe_arena_set_allocated_pitch(
    ::kiapi::common::types::Distance* pitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_);
  }
  pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.ZoneBorderSettings.pitch)
}
inline ::kiapi::common::types::Distance* ZoneBorderSettings::release_pitch() {
  
  ::kiapi::common::types::Distance* temp = pitch_;
  pitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* ZoneBorderSettings::unsafe_arena_release_pitch() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.ZoneBorderSettings.pitch)
  
  ::kiapi::common::types::Distance* temp = pitch_;
  pitch_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* ZoneBorderSettings::_internal_mutable_pitch() {
  
  if (pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    pitch_ = p;
  }
  return pitch_;
}
inline ::kiapi::common::types::Distance* ZoneBorderSettings::mutable_pitch() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_pitch();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.ZoneBorderSettings.pitch)
  return _msg;
}
inline void ZoneBorderSettings::set_allocated_pitch(::kiapi::common::types::Distance* pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_);
  }
  if (pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch));
    if (message_arena != submessage_arena) {
      pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch, submessage_arena);
    }
    
  } else {
    
  }
  pitch_ = pitch;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.ZoneBorderSettings.pitch)
}

// -------------------------------------------------------------------

// ZoneFilledPolygons

// .kiapi.board.types.BoardLayer layer = 1;
inline void ZoneFilledPolygons::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer ZoneFilledPolygons::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer ZoneFilledPolygons::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneFilledPolygons.layer)
  return _internal_layer();
}
inline void ZoneFilledPolygons::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void ZoneFilledPolygons::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ZoneFilledPolygons.layer)
}

// .kiapi.common.types.PolySet shapes = 2;
inline bool ZoneFilledPolygons::_internal_has_shapes() const {
  return this != internal_default_instance() && shapes_ != nullptr;
}
inline bool ZoneFilledPolygons::has_shapes() const {
  return _internal_has_shapes();
}
inline const ::kiapi::common::types::PolySet& ZoneFilledPolygons::_internal_shapes() const {
  const ::kiapi::common::types::PolySet* p = shapes_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::PolySet&>(
      ::kiapi::common::types::_PolySet_default_instance_);
}
inline const ::kiapi::common::types::PolySet& ZoneFilledPolygons::shapes() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneFilledPolygons.shapes)
  return _internal_shapes();
}
inline void ZoneFilledPolygons::unsafe_arena_set_allocated_shapes(
    ::kiapi::common::types::PolySet* shapes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapes_);
  }
  shapes_ = shapes;
  if (shapes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.ZoneFilledPolygons.shapes)
}
inline ::kiapi::common::types::PolySet* ZoneFilledPolygons::release_shapes() {
  
  ::kiapi::common::types::PolySet* temp = shapes_;
  shapes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::PolySet* ZoneFilledPolygons::unsafe_arena_release_shapes() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.ZoneFilledPolygons.shapes)
  
  ::kiapi::common::types::PolySet* temp = shapes_;
  shapes_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::PolySet* ZoneFilledPolygons::_internal_mutable_shapes() {
  
  if (shapes_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::PolySet>(GetArenaForAllocation());
    shapes_ = p;
  }
  return shapes_;
}
inline ::kiapi::common::types::PolySet* ZoneFilledPolygons::mutable_shapes() {
  ::kiapi::common::types::PolySet* _msg = _internal_mutable_shapes();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.ZoneFilledPolygons.shapes)
  return _msg;
}
inline void ZoneFilledPolygons::set_allocated_shapes(::kiapi::common::types::PolySet* shapes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapes_);
  }
  if (shapes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapes));
    if (message_arena != submessage_arena) {
      shapes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shapes, submessage_arena);
    }
    
  } else {
    
  }
  shapes_ = shapes;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.ZoneFilledPolygons.shapes)
}

// -------------------------------------------------------------------

// ZoneLayerProperties

// .kiapi.board.types.BoardLayer layer = 1;
inline void ZoneLayerProperties::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer ZoneLayerProperties::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer ZoneLayerProperties::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneLayerProperties.layer)
  return _internal_layer();
}
inline void ZoneLayerProperties::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void ZoneLayerProperties::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.ZoneLayerProperties.layer)
}

// .kiapi.common.types.Vector2 hatching_offset = 2;
inline bool ZoneLayerProperties::_internal_has_hatching_offset() const {
  return this != internal_default_instance() && hatching_offset_ != nullptr;
}
inline bool ZoneLayerProperties::has_hatching_offset() const {
  return _internal_has_hatching_offset();
}
inline const ::kiapi::common::types::Vector2& ZoneLayerProperties::_internal_hatching_offset() const {
  const ::kiapi::common::types::Vector2* p = hatching_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& ZoneLayerProperties::hatching_offset() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.ZoneLayerProperties.hatching_offset)
  return _internal_hatching_offset();
}
inline void ZoneLayerProperties::unsafe_arena_set_allocated_hatching_offset(
    ::kiapi::common::types::Vector2* hatching_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hatching_offset_);
  }
  hatching_offset_ = hatching_offset;
  if (hatching_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.ZoneLayerProperties.hatching_offset)
}
inline ::kiapi::common::types::Vector2* ZoneLayerProperties::release_hatching_offset() {
  
  ::kiapi::common::types::Vector2* temp = hatching_offset_;
  hatching_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* ZoneLayerProperties::unsafe_arena_release_hatching_offset() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.ZoneLayerProperties.hatching_offset)
  
  ::kiapi::common::types::Vector2* temp = hatching_offset_;
  hatching_offset_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* ZoneLayerProperties::_internal_mutable_hatching_offset() {
  
  if (hatching_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    hatching_offset_ = p;
  }
  return hatching_offset_;
}
inline ::kiapi::common::types::Vector2* ZoneLayerProperties::mutable_hatching_offset() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_hatching_offset();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.ZoneLayerProperties.hatching_offset)
  return _msg;
}
inline void ZoneLayerProperties::set_allocated_hatching_offset(::kiapi::common::types::Vector2* hatching_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hatching_offset_);
  }
  if (hatching_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hatching_offset));
    if (message_arena != submessage_arena) {
      hatching_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hatching_offset, submessage_arena);
    }
    
  } else {
    
  }
  hatching_offset_ = hatching_offset;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.ZoneLayerProperties.hatching_offset)
}

// -------------------------------------------------------------------

// Zone

// .kiapi.common.types.KIID id = 1;
inline bool Zone::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Zone::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& Zone::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& Zone::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.id)
  return _internal_id();
}
inline void Zone::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Zone.id)
}
inline ::kiapi::common::types::KIID* Zone::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* Zone::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Zone.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* Zone::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* Zone::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.id)
  return _msg;
}
inline void Zone::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Zone.id)
}

// .kiapi.board.types.ZoneType type = 2;
inline void Zone::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::types::ZoneType Zone::_internal_type() const {
  return static_cast< ::kiapi::board::types::ZoneType >(type_);
}
inline ::kiapi::board::types::ZoneType Zone::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.type)
  return _internal_type();
}
inline void Zone::_internal_set_type(::kiapi::board::types::ZoneType value) {
  
  type_ = value;
}
inline void Zone::set_type(::kiapi::board::types::ZoneType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Zone.type)
}

// repeated .kiapi.board.types.BoardLayer layers = 3;
inline int Zone::_internal_layers_size() const {
  return layers_.size();
}
inline int Zone::layers_size() const {
  return _internal_layers_size();
}
inline void Zone::clear_layers() {
  layers_.Clear();
}
inline ::kiapi::board::types::BoardLayer Zone::_internal_layers(int index) const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layers_.Get(index));
}
inline ::kiapi::board::types::BoardLayer Zone::layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.layers)
  return _internal_layers(index);
}
inline void Zone::set_layers(int index, ::kiapi::board::types::BoardLayer value) {
  layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Zone.layers)
}
inline void Zone::_internal_add_layers(::kiapi::board::types::BoardLayer value) {
  layers_.Add(value);
}
inline void Zone::add_layers(::kiapi::board::types::BoardLayer value) {
  _internal_add_layers(value);
  // @@protoc_insertion_point(field_add:kiapi.board.types.Zone.layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Zone::layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.Zone.layers)
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Zone::_internal_mutable_layers() {
  return &layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Zone::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.Zone.layers)
  return _internal_mutable_layers();
}

// .kiapi.common.types.PolySet outline = 4;
inline bool Zone::_internal_has_outline() const {
  return this != internal_default_instance() && outline_ != nullptr;
}
inline bool Zone::has_outline() const {
  return _internal_has_outline();
}
inline const ::kiapi::common::types::PolySet& Zone::_internal_outline() const {
  const ::kiapi::common::types::PolySet* p = outline_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::PolySet&>(
      ::kiapi::common::types::_PolySet_default_instance_);
}
inline const ::kiapi::common::types::PolySet& Zone::outline() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.outline)
  return _internal_outline();
}
inline void Zone::unsafe_arena_set_allocated_outline(
    ::kiapi::common::types::PolySet* outline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_);
  }
  outline_ = outline;
  if (outline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Zone.outline)
}
inline ::kiapi::common::types::PolySet* Zone::release_outline() {
  
  ::kiapi::common::types::PolySet* temp = outline_;
  outline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::PolySet* Zone::unsafe_arena_release_outline() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Zone.outline)
  
  ::kiapi::common::types::PolySet* temp = outline_;
  outline_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::PolySet* Zone::_internal_mutable_outline() {
  
  if (outline_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::PolySet>(GetArenaForAllocation());
    outline_ = p;
  }
  return outline_;
}
inline ::kiapi::common::types::PolySet* Zone::mutable_outline() {
  ::kiapi::common::types::PolySet* _msg = _internal_mutable_outline();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.outline)
  return _msg;
}
inline void Zone::set_allocated_outline(::kiapi::common::types::PolySet* outline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_);
  }
  if (outline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline));
    if (message_arena != submessage_arena) {
      outline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outline, submessage_arena);
    }
    
  } else {
    
  }
  outline_ = outline;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Zone.outline)
}

// string name = 5;
inline void Zone::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Zone::name() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Zone::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Zone.name)
}
inline std::string* Zone::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.name)
  return _s;
}
inline const std::string& Zone::_internal_name() const {
  return name_.Get();
}
inline void Zone::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Zone::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Zone::release_name() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Zone.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Zone::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Zone.name)
}

// .kiapi.board.types.CopperZoneSettings copper_settings = 6;
inline bool Zone::_internal_has_copper_settings() const {
  return settings_case() == kCopperSettings;
}
inline bool Zone::has_copper_settings() const {
  return _internal_has_copper_settings();
}
inline void Zone::set_has_copper_settings() {
  _oneof_case_[0] = kCopperSettings;
}
inline void Zone::clear_copper_settings() {
  if (_internal_has_copper_settings()) {
    if (GetArenaForAllocation() == nullptr) {
      delete settings_.copper_settings_;
    }
    clear_has_settings();
  }
}
inline ::kiapi::board::types::CopperZoneSettings* Zone::release_copper_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Zone.copper_settings)
  if (_internal_has_copper_settings()) {
    clear_has_settings();
      ::kiapi::board::types::CopperZoneSettings* temp = settings_.copper_settings_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    settings_.copper_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kiapi::board::types::CopperZoneSettings& Zone::_internal_copper_settings() const {
  return _internal_has_copper_settings()
      ? *settings_.copper_settings_
      : reinterpret_cast< ::kiapi::board::types::CopperZoneSettings&>(::kiapi::board::types::_CopperZoneSettings_default_instance_);
}
inline const ::kiapi::board::types::CopperZoneSettings& Zone::copper_settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.copper_settings)
  return _internal_copper_settings();
}
inline ::kiapi::board::types::CopperZoneSettings* Zone::unsafe_arena_release_copper_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kiapi.board.types.Zone.copper_settings)
  if (_internal_has_copper_settings()) {
    clear_has_settings();
    ::kiapi::board::types::CopperZoneSettings* temp = settings_.copper_settings_;
    settings_.copper_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zone::unsafe_arena_set_allocated_copper_settings(::kiapi::board::types::CopperZoneSettings* copper_settings) {
  clear_settings();
  if (copper_settings) {
    set_has_copper_settings();
    settings_.copper_settings_ = copper_settings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Zone.copper_settings)
}
inline ::kiapi::board::types::CopperZoneSettings* Zone::_internal_mutable_copper_settings() {
  if (!_internal_has_copper_settings()) {
    clear_settings();
    set_has_copper_settings();
    settings_.copper_settings_ = CreateMaybeMessage< ::kiapi::board::types::CopperZoneSettings >(GetArenaForAllocation());
  }
  return settings_.copper_settings_;
}
inline ::kiapi::board::types::CopperZoneSettings* Zone::mutable_copper_settings() {
  ::kiapi::board::types::CopperZoneSettings* _msg = _internal_mutable_copper_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.copper_settings)
  return _msg;
}

// .kiapi.board.types.RuleAreaSettings rule_area_settings = 7;
inline bool Zone::_internal_has_rule_area_settings() const {
  return settings_case() == kRuleAreaSettings;
}
inline bool Zone::has_rule_area_settings() const {
  return _internal_has_rule_area_settings();
}
inline void Zone::set_has_rule_area_settings() {
  _oneof_case_[0] = kRuleAreaSettings;
}
inline void Zone::clear_rule_area_settings() {
  if (_internal_has_rule_area_settings()) {
    if (GetArenaForAllocation() == nullptr) {
      delete settings_.rule_area_settings_;
    }
    clear_has_settings();
  }
}
inline ::kiapi::board::types::RuleAreaSettings* Zone::release_rule_area_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Zone.rule_area_settings)
  if (_internal_has_rule_area_settings()) {
    clear_has_settings();
      ::kiapi::board::types::RuleAreaSettings* temp = settings_.rule_area_settings_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    settings_.rule_area_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kiapi::board::types::RuleAreaSettings& Zone::_internal_rule_area_settings() const {
  return _internal_has_rule_area_settings()
      ? *settings_.rule_area_settings_
      : reinterpret_cast< ::kiapi::board::types::RuleAreaSettings&>(::kiapi::board::types::_RuleAreaSettings_default_instance_);
}
inline const ::kiapi::board::types::RuleAreaSettings& Zone::rule_area_settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.rule_area_settings)
  return _internal_rule_area_settings();
}
inline ::kiapi::board::types::RuleAreaSettings* Zone::unsafe_arena_release_rule_area_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kiapi.board.types.Zone.rule_area_settings)
  if (_internal_has_rule_area_settings()) {
    clear_has_settings();
    ::kiapi::board::types::RuleAreaSettings* temp = settings_.rule_area_settings_;
    settings_.rule_area_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zone::unsafe_arena_set_allocated_rule_area_settings(::kiapi::board::types::RuleAreaSettings* rule_area_settings) {
  clear_settings();
  if (rule_area_settings) {
    set_has_rule_area_settings();
    settings_.rule_area_settings_ = rule_area_settings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Zone.rule_area_settings)
}
inline ::kiapi::board::types::RuleAreaSettings* Zone::_internal_mutable_rule_area_settings() {
  if (!_internal_has_rule_area_settings()) {
    clear_settings();
    set_has_rule_area_settings();
    settings_.rule_area_settings_ = CreateMaybeMessage< ::kiapi::board::types::RuleAreaSettings >(GetArenaForAllocation());
  }
  return settings_.rule_area_settings_;
}
inline ::kiapi::board::types::RuleAreaSettings* Zone::mutable_rule_area_settings() {
  ::kiapi::board::types::RuleAreaSettings* _msg = _internal_mutable_rule_area_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.rule_area_settings)
  return _msg;
}

// uint32 priority = 8;
inline void Zone::clear_priority() {
  priority_ = 0u;
}
inline uint32_t Zone::_internal_priority() const {
  return priority_;
}
inline uint32_t Zone::priority() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.priority)
  return _internal_priority();
}
inline void Zone::_internal_set_priority(uint32_t value) {
  
  priority_ = value;
}
inline void Zone::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Zone.priority)
}

// bool filled = 9;
inline void Zone::clear_filled() {
  filled_ = false;
}
inline bool Zone::_internal_filled() const {
  return filled_;
}
inline bool Zone::filled() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.filled)
  return _internal_filled();
}
inline void Zone::_internal_set_filled(bool value) {
  
  filled_ = value;
}
inline void Zone::set_filled(bool value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Zone.filled)
}

// repeated .kiapi.board.types.ZoneFilledPolygons filled_polygons = 10;
inline int Zone::_internal_filled_polygons_size() const {
  return filled_polygons_.size();
}
inline int Zone::filled_polygons_size() const {
  return _internal_filled_polygons_size();
}
inline void Zone::clear_filled_polygons() {
  filled_polygons_.Clear();
}
inline ::kiapi::board::types::ZoneFilledPolygons* Zone::mutable_filled_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.filled_polygons)
  return filled_polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneFilledPolygons >*
Zone::mutable_filled_polygons() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.Zone.filled_polygons)
  return &filled_polygons_;
}
inline const ::kiapi::board::types::ZoneFilledPolygons& Zone::_internal_filled_polygons(int index) const {
  return filled_polygons_.Get(index);
}
inline const ::kiapi::board::types::ZoneFilledPolygons& Zone::filled_polygons(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.filled_polygons)
  return _internal_filled_polygons(index);
}
inline ::kiapi::board::types::ZoneFilledPolygons* Zone::_internal_add_filled_polygons() {
  return filled_polygons_.Add();
}
inline ::kiapi::board::types::ZoneFilledPolygons* Zone::add_filled_polygons() {
  ::kiapi::board::types::ZoneFilledPolygons* _add = _internal_add_filled_polygons();
  // @@protoc_insertion_point(field_add:kiapi.board.types.Zone.filled_polygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneFilledPolygons >&
Zone::filled_polygons() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.Zone.filled_polygons)
  return filled_polygons_;
}

// .kiapi.board.types.ZoneBorderSettings border = 11;
inline bool Zone::_internal_has_border() const {
  return this != internal_default_instance() && border_ != nullptr;
}
inline bool Zone::has_border() const {
  return _internal_has_border();
}
inline void Zone::clear_border() {
  if (GetArenaForAllocation() == nullptr && border_ != nullptr) {
    delete border_;
  }
  border_ = nullptr;
}
inline const ::kiapi::board::types::ZoneBorderSettings& Zone::_internal_border() const {
  const ::kiapi::board::types::ZoneBorderSettings* p = border_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::ZoneBorderSettings&>(
      ::kiapi::board::types::_ZoneBorderSettings_default_instance_);
}
inline const ::kiapi::board::types::ZoneBorderSettings& Zone::border() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.border)
  return _internal_border();
}
inline void Zone::unsafe_arena_set_allocated_border(
    ::kiapi::board::types::ZoneBorderSettings* border) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(border_);
  }
  border_ = border;
  if (border) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Zone.border)
}
inline ::kiapi::board::types::ZoneBorderSettings* Zone::release_border() {
  
  ::kiapi::board::types::ZoneBorderSettings* temp = border_;
  border_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::ZoneBorderSettings* Zone::unsafe_arena_release_border() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Zone.border)
  
  ::kiapi::board::types::ZoneBorderSettings* temp = border_;
  border_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::ZoneBorderSettings* Zone::_internal_mutable_border() {
  
  if (border_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::ZoneBorderSettings>(GetArenaForAllocation());
    border_ = p;
  }
  return border_;
}
inline ::kiapi::board::types::ZoneBorderSettings* Zone::mutable_border() {
  ::kiapi::board::types::ZoneBorderSettings* _msg = _internal_mutable_border();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.border)
  return _msg;
}
inline void Zone::set_allocated_border(::kiapi::board::types::ZoneBorderSettings* border) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete border_;
  }
  if (border) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::ZoneBorderSettings>::GetOwningArena(border);
    if (message_arena != submessage_arena) {
      border = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, border, submessage_arena);
    }
    
  } else {
    
  }
  border_ = border;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Zone.border)
}

// .kiapi.common.types.LockedState locked = 12;
inline void Zone::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState Zone::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState Zone::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.locked)
  return _internal_locked();
}
inline void Zone::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void Zone::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Zone.locked)
}

// repeated .kiapi.board.types.ZoneLayerProperties layer_properties = 13;
inline int Zone::_internal_layer_properties_size() const {
  return layer_properties_.size();
}
inline int Zone::layer_properties_size() const {
  return _internal_layer_properties_size();
}
inline void Zone::clear_layer_properties() {
  layer_properties_.Clear();
}
inline ::kiapi::board::types::ZoneLayerProperties* Zone::mutable_layer_properties(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Zone.layer_properties)
  return layer_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneLayerProperties >*
Zone::mutable_layer_properties() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.Zone.layer_properties)
  return &layer_properties_;
}
inline const ::kiapi::board::types::ZoneLayerProperties& Zone::_internal_layer_properties(int index) const {
  return layer_properties_.Get(index);
}
inline const ::kiapi::board::types::ZoneLayerProperties& Zone::layer_properties(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Zone.layer_properties)
  return _internal_layer_properties(index);
}
inline ::kiapi::board::types::ZoneLayerProperties* Zone::_internal_add_layer_properties() {
  return layer_properties_.Add();
}
inline ::kiapi::board::types::ZoneLayerProperties* Zone::add_layer_properties() {
  ::kiapi::board::types::ZoneLayerProperties* _add = _internal_add_layer_properties();
  // @@protoc_insertion_point(field_add:kiapi.board.types.Zone.layer_properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::ZoneLayerProperties >&
Zone::layer_properties() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.Zone.layer_properties)
  return layer_properties_;
}

inline bool Zone::has_settings() const {
  return settings_case() != SETTINGS_NOT_SET;
}
inline void Zone::clear_has_settings() {
  _oneof_case_[0] = SETTINGS_NOT_SET;
}
inline Zone::SettingsCase Zone::settings_case() const {
  return Zone::SettingsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AlignedDimensionAttributes

// .kiapi.common.types.Vector2 start = 1;
inline bool AlignedDimensionAttributes::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool AlignedDimensionAttributes::has_start() const {
  return _internal_has_start();
}
inline const ::kiapi::common::types::Vector2& AlignedDimensionAttributes::_internal_start() const {
  const ::kiapi::common::types::Vector2* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& AlignedDimensionAttributes::start() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.AlignedDimensionAttributes.start)
  return _internal_start();
}
inline void AlignedDimensionAttributes::unsafe_arena_set_allocated_start(
    ::kiapi::common::types::Vector2* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.AlignedDimensionAttributes.start)
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::release_start() {
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.AlignedDimensionAttributes.start)
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::mutable_start() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.AlignedDimensionAttributes.start)
  return _msg;
}
inline void AlignedDimensionAttributes::set_allocated_start(::kiapi::common::types::Vector2* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.AlignedDimensionAttributes.start)
}

// .kiapi.common.types.Vector2 end = 2;
inline bool AlignedDimensionAttributes::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool AlignedDimensionAttributes::has_end() const {
  return _internal_has_end();
}
inline const ::kiapi::common::types::Vector2& AlignedDimensionAttributes::_internal_end() const {
  const ::kiapi::common::types::Vector2* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& AlignedDimensionAttributes::end() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.AlignedDimensionAttributes.end)
  return _internal_end();
}
inline void AlignedDimensionAttributes::unsafe_arena_set_allocated_end(
    ::kiapi::common::types::Vector2* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.AlignedDimensionAttributes.end)
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::release_end() {
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.AlignedDimensionAttributes.end)
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::kiapi::common::types::Vector2* AlignedDimensionAttributes::mutable_end() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.AlignedDimensionAttributes.end)
  return _msg;
}
inline void AlignedDimensionAttributes::set_allocated_end(::kiapi::common::types::Vector2* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.AlignedDimensionAttributes.end)
}

// .kiapi.common.types.Distance height = 3;
inline bool AlignedDimensionAttributes::_internal_has_height() const {
  return this != internal_default_instance() && height_ != nullptr;
}
inline bool AlignedDimensionAttributes::has_height() const {
  return _internal_has_height();
}
inline const ::kiapi::common::types::Distance& AlignedDimensionAttributes::_internal_height() const {
  const ::kiapi::common::types::Distance* p = height_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& AlignedDimensionAttributes::height() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.AlignedDimensionAttributes.height)
  return _internal_height();
}
inline void AlignedDimensionAttributes::unsafe_arena_set_allocated_height(
    ::kiapi::common::types::Distance* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_);
  }
  height_ = height;
  if (height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.AlignedDimensionAttributes.height)
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::release_height() {
  
  ::kiapi::common::types::Distance* temp = height_;
  height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.AlignedDimensionAttributes.height)
  
  ::kiapi::common::types::Distance* temp = height_;
  height_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::_internal_mutable_height() {
  
  if (height_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    height_ = p;
  }
  return height_;
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::mutable_height() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.AlignedDimensionAttributes.height)
  return _msg;
}
inline void AlignedDimensionAttributes::set_allocated_height(::kiapi::common::types::Distance* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    
  } else {
    
  }
  height_ = height;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.AlignedDimensionAttributes.height)
}

// .kiapi.common.types.Distance extension_height = 4;
inline bool AlignedDimensionAttributes::_internal_has_extension_height() const {
  return this != internal_default_instance() && extension_height_ != nullptr;
}
inline bool AlignedDimensionAttributes::has_extension_height() const {
  return _internal_has_extension_height();
}
inline const ::kiapi::common::types::Distance& AlignedDimensionAttributes::_internal_extension_height() const {
  const ::kiapi::common::types::Distance* p = extension_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& AlignedDimensionAttributes::extension_height() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.AlignedDimensionAttributes.extension_height)
  return _internal_extension_height();
}
inline void AlignedDimensionAttributes::unsafe_arena_set_allocated_extension_height(
    ::kiapi::common::types::Distance* extension_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_height_);
  }
  extension_height_ = extension_height;
  if (extension_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.AlignedDimensionAttributes.extension_height)
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::release_extension_height() {
  
  ::kiapi::common::types::Distance* temp = extension_height_;
  extension_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::unsafe_arena_release_extension_height() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.AlignedDimensionAttributes.extension_height)
  
  ::kiapi::common::types::Distance* temp = extension_height_;
  extension_height_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::_internal_mutable_extension_height() {
  
  if (extension_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    extension_height_ = p;
  }
  return extension_height_;
}
inline ::kiapi::common::types::Distance* AlignedDimensionAttributes::mutable_extension_height() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_extension_height();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.AlignedDimensionAttributes.extension_height)
  return _msg;
}
inline void AlignedDimensionAttributes::set_allocated_extension_height(::kiapi::common::types::Distance* extension_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_height_);
  }
  if (extension_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_height));
    if (message_arena != submessage_arena) {
      extension_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_height, submessage_arena);
    }
    
  } else {
    
  }
  extension_height_ = extension_height;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.AlignedDimensionAttributes.extension_height)
}

// -------------------------------------------------------------------

// OrthogonalDimensionAttributes

// .kiapi.common.types.Vector2 start = 1;
inline bool OrthogonalDimensionAttributes::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool OrthogonalDimensionAttributes::has_start() const {
  return _internal_has_start();
}
inline const ::kiapi::common::types::Vector2& OrthogonalDimensionAttributes::_internal_start() const {
  const ::kiapi::common::types::Vector2* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& OrthogonalDimensionAttributes::start() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.OrthogonalDimensionAttributes.start)
  return _internal_start();
}
inline void OrthogonalDimensionAttributes::unsafe_arena_set_allocated_start(
    ::kiapi::common::types::Vector2* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.start)
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::release_start() {
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.OrthogonalDimensionAttributes.start)
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::mutable_start() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.OrthogonalDimensionAttributes.start)
  return _msg;
}
inline void OrthogonalDimensionAttributes::set_allocated_start(::kiapi::common::types::Vector2* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.start)
}

// .kiapi.common.types.Vector2 end = 2;
inline bool OrthogonalDimensionAttributes::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool OrthogonalDimensionAttributes::has_end() const {
  return _internal_has_end();
}
inline const ::kiapi::common::types::Vector2& OrthogonalDimensionAttributes::_internal_end() const {
  const ::kiapi::common::types::Vector2* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& OrthogonalDimensionAttributes::end() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.OrthogonalDimensionAttributes.end)
  return _internal_end();
}
inline void OrthogonalDimensionAttributes::unsafe_arena_set_allocated_end(
    ::kiapi::common::types::Vector2* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.end)
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::release_end() {
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.OrthogonalDimensionAttributes.end)
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::kiapi::common::types::Vector2* OrthogonalDimensionAttributes::mutable_end() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.OrthogonalDimensionAttributes.end)
  return _msg;
}
inline void OrthogonalDimensionAttributes::set_allocated_end(::kiapi::common::types::Vector2* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.end)
}

// .kiapi.common.types.Distance height = 3;
inline bool OrthogonalDimensionAttributes::_internal_has_height() const {
  return this != internal_default_instance() && height_ != nullptr;
}
inline bool OrthogonalDimensionAttributes::has_height() const {
  return _internal_has_height();
}
inline const ::kiapi::common::types::Distance& OrthogonalDimensionAttributes::_internal_height() const {
  const ::kiapi::common::types::Distance* p = height_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& OrthogonalDimensionAttributes::height() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.OrthogonalDimensionAttributes.height)
  return _internal_height();
}
inline void OrthogonalDimensionAttributes::unsafe_arena_set_allocated_height(
    ::kiapi::common::types::Distance* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_);
  }
  height_ = height;
  if (height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.height)
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::release_height() {
  
  ::kiapi::common::types::Distance* temp = height_;
  height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.OrthogonalDimensionAttributes.height)
  
  ::kiapi::common::types::Distance* temp = height_;
  height_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::_internal_mutable_height() {
  
  if (height_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    height_ = p;
  }
  return height_;
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::mutable_height() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.OrthogonalDimensionAttributes.height)
  return _msg;
}
inline void OrthogonalDimensionAttributes::set_allocated_height(::kiapi::common::types::Distance* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    
  } else {
    
  }
  height_ = height;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.height)
}

// .kiapi.common.types.Distance extension_height = 4;
inline bool OrthogonalDimensionAttributes::_internal_has_extension_height() const {
  return this != internal_default_instance() && extension_height_ != nullptr;
}
inline bool OrthogonalDimensionAttributes::has_extension_height() const {
  return _internal_has_extension_height();
}
inline const ::kiapi::common::types::Distance& OrthogonalDimensionAttributes::_internal_extension_height() const {
  const ::kiapi::common::types::Distance* p = extension_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& OrthogonalDimensionAttributes::extension_height() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.OrthogonalDimensionAttributes.extension_height)
  return _internal_extension_height();
}
inline void OrthogonalDimensionAttributes::unsafe_arena_set_allocated_extension_height(
    ::kiapi::common::types::Distance* extension_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_height_);
  }
  extension_height_ = extension_height;
  if (extension_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.extension_height)
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::release_extension_height() {
  
  ::kiapi::common::types::Distance* temp = extension_height_;
  extension_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::unsafe_arena_release_extension_height() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.OrthogonalDimensionAttributes.extension_height)
  
  ::kiapi::common::types::Distance* temp = extension_height_;
  extension_height_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::_internal_mutable_extension_height() {
  
  if (extension_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    extension_height_ = p;
  }
  return extension_height_;
}
inline ::kiapi::common::types::Distance* OrthogonalDimensionAttributes::mutable_extension_height() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_extension_height();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.OrthogonalDimensionAttributes.extension_height)
  return _msg;
}
inline void OrthogonalDimensionAttributes::set_allocated_extension_height(::kiapi::common::types::Distance* extension_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_height_);
  }
  if (extension_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_height));
    if (message_arena != submessage_arena) {
      extension_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_height, submessage_arena);
    }
    
  } else {
    
  }
  extension_height_ = extension_height;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.OrthogonalDimensionAttributes.extension_height)
}

// .kiapi.common.types.AxisAlignment alignment = 5;
inline void OrthogonalDimensionAttributes::clear_alignment() {
  alignment_ = 0;
}
inline ::kiapi::common::types::AxisAlignment OrthogonalDimensionAttributes::_internal_alignment() const {
  return static_cast< ::kiapi::common::types::AxisAlignment >(alignment_);
}
inline ::kiapi::common::types::AxisAlignment OrthogonalDimensionAttributes::alignment() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.OrthogonalDimensionAttributes.alignment)
  return _internal_alignment();
}
inline void OrthogonalDimensionAttributes::_internal_set_alignment(::kiapi::common::types::AxisAlignment value) {
  
  alignment_ = value;
}
inline void OrthogonalDimensionAttributes::set_alignment(::kiapi::common::types::AxisAlignment value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.OrthogonalDimensionAttributes.alignment)
}

// -------------------------------------------------------------------

// RadialDimensionAttributes

// .kiapi.common.types.Vector2 center = 1;
inline bool RadialDimensionAttributes::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool RadialDimensionAttributes::has_center() const {
  return _internal_has_center();
}
inline const ::kiapi::common::types::Vector2& RadialDimensionAttributes::_internal_center() const {
  const ::kiapi::common::types::Vector2* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& RadialDimensionAttributes::center() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RadialDimensionAttributes.center)
  return _internal_center();
}
inline void RadialDimensionAttributes::unsafe_arena_set_allocated_center(
    ::kiapi::common::types::Vector2* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.RadialDimensionAttributes.center)
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::release_center() {
  
  ::kiapi::common::types::Vector2* temp = center_;
  center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.RadialDimensionAttributes.center)
  
  ::kiapi::common::types::Vector2* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::mutable_center() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.RadialDimensionAttributes.center)
  return _msg;
}
inline void RadialDimensionAttributes::set_allocated_center(::kiapi::common::types::Vector2* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.RadialDimensionAttributes.center)
}

// .kiapi.common.types.Vector2 radius_point = 2;
inline bool RadialDimensionAttributes::_internal_has_radius_point() const {
  return this != internal_default_instance() && radius_point_ != nullptr;
}
inline bool RadialDimensionAttributes::has_radius_point() const {
  return _internal_has_radius_point();
}
inline const ::kiapi::common::types::Vector2& RadialDimensionAttributes::_internal_radius_point() const {
  const ::kiapi::common::types::Vector2* p = radius_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& RadialDimensionAttributes::radius_point() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RadialDimensionAttributes.radius_point)
  return _internal_radius_point();
}
inline void RadialDimensionAttributes::unsafe_arena_set_allocated_radius_point(
    ::kiapi::common::types::Vector2* radius_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius_point_);
  }
  radius_point_ = radius_point;
  if (radius_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.RadialDimensionAttributes.radius_point)
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::release_radius_point() {
  
  ::kiapi::common::types::Vector2* temp = radius_point_;
  radius_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::unsafe_arena_release_radius_point() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.RadialDimensionAttributes.radius_point)
  
  ::kiapi::common::types::Vector2* temp = radius_point_;
  radius_point_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::_internal_mutable_radius_point() {
  
  if (radius_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    radius_point_ = p;
  }
  return radius_point_;
}
inline ::kiapi::common::types::Vector2* RadialDimensionAttributes::mutable_radius_point() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_radius_point();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.RadialDimensionAttributes.radius_point)
  return _msg;
}
inline void RadialDimensionAttributes::set_allocated_radius_point(::kiapi::common::types::Vector2* radius_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius_point_);
  }
  if (radius_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius_point));
    if (message_arena != submessage_arena) {
      radius_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radius_point, submessage_arena);
    }
    
  } else {
    
  }
  radius_point_ = radius_point;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.RadialDimensionAttributes.radius_point)
}

// .kiapi.common.types.Distance leader_length = 3;
inline bool RadialDimensionAttributes::_internal_has_leader_length() const {
  return this != internal_default_instance() && leader_length_ != nullptr;
}
inline bool RadialDimensionAttributes::has_leader_length() const {
  return _internal_has_leader_length();
}
inline const ::kiapi::common::types::Distance& RadialDimensionAttributes::_internal_leader_length() const {
  const ::kiapi::common::types::Distance* p = leader_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& RadialDimensionAttributes::leader_length() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.RadialDimensionAttributes.leader_length)
  return _internal_leader_length();
}
inline void RadialDimensionAttributes::unsafe_arena_set_allocated_leader_length(
    ::kiapi::common::types::Distance* leader_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_length_);
  }
  leader_length_ = leader_length;
  if (leader_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.RadialDimensionAttributes.leader_length)
}
inline ::kiapi::common::types::Distance* RadialDimensionAttributes::release_leader_length() {
  
  ::kiapi::common::types::Distance* temp = leader_length_;
  leader_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* RadialDimensionAttributes::unsafe_arena_release_leader_length() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.RadialDimensionAttributes.leader_length)
  
  ::kiapi::common::types::Distance* temp = leader_length_;
  leader_length_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* RadialDimensionAttributes::_internal_mutable_leader_length() {
  
  if (leader_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    leader_length_ = p;
  }
  return leader_length_;
}
inline ::kiapi::common::types::Distance* RadialDimensionAttributes::mutable_leader_length() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_leader_length();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.RadialDimensionAttributes.leader_length)
  return _msg;
}
inline void RadialDimensionAttributes::set_allocated_leader_length(::kiapi::common::types::Distance* leader_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_length_);
  }
  if (leader_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_length));
    if (message_arena != submessage_arena) {
      leader_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_length, submessage_arena);
    }
    
  } else {
    
  }
  leader_length_ = leader_length;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.RadialDimensionAttributes.leader_length)
}

// -------------------------------------------------------------------

// LeaderDimensionAttributes

// .kiapi.common.types.Vector2 start = 1;
inline bool LeaderDimensionAttributes::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool LeaderDimensionAttributes::has_start() const {
  return _internal_has_start();
}
inline const ::kiapi::common::types::Vector2& LeaderDimensionAttributes::_internal_start() const {
  const ::kiapi::common::types::Vector2* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& LeaderDimensionAttributes::start() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.LeaderDimensionAttributes.start)
  return _internal_start();
}
inline void LeaderDimensionAttributes::unsafe_arena_set_allocated_start(
    ::kiapi::common::types::Vector2* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.LeaderDimensionAttributes.start)
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::release_start() {
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.LeaderDimensionAttributes.start)
  
  ::kiapi::common::types::Vector2* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::mutable_start() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.LeaderDimensionAttributes.start)
  return _msg;
}
inline void LeaderDimensionAttributes::set_allocated_start(::kiapi::common::types::Vector2* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.LeaderDimensionAttributes.start)
}

// .kiapi.common.types.Vector2 end = 2;
inline bool LeaderDimensionAttributes::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool LeaderDimensionAttributes::has_end() const {
  return _internal_has_end();
}
inline const ::kiapi::common::types::Vector2& LeaderDimensionAttributes::_internal_end() const {
  const ::kiapi::common::types::Vector2* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& LeaderDimensionAttributes::end() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.LeaderDimensionAttributes.end)
  return _internal_end();
}
inline void LeaderDimensionAttributes::unsafe_arena_set_allocated_end(
    ::kiapi::common::types::Vector2* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.LeaderDimensionAttributes.end)
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::release_end() {
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.LeaderDimensionAttributes.end)
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::kiapi::common::types::Vector2* LeaderDimensionAttributes::mutable_end() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.LeaderDimensionAttributes.end)
  return _msg;
}
inline void LeaderDimensionAttributes::set_allocated_end(::kiapi::common::types::Vector2* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.LeaderDimensionAttributes.end)
}

// .kiapi.board.types.DimensionTextBorderStyle border_style = 3;
inline void LeaderDimensionAttributes::clear_border_style() {
  border_style_ = 0;
}
inline ::kiapi::board::types::DimensionTextBorderStyle LeaderDimensionAttributes::_internal_border_style() const {
  return static_cast< ::kiapi::board::types::DimensionTextBorderStyle >(border_style_);
}
inline ::kiapi::board::types::DimensionTextBorderStyle LeaderDimensionAttributes::border_style() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.LeaderDimensionAttributes.border_style)
  return _internal_border_style();
}
inline void LeaderDimensionAttributes::_internal_set_border_style(::kiapi::board::types::DimensionTextBorderStyle value) {
  
  border_style_ = value;
}
inline void LeaderDimensionAttributes::set_border_style(::kiapi::board::types::DimensionTextBorderStyle value) {
  _internal_set_border_style(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.LeaderDimensionAttributes.border_style)
}

// -------------------------------------------------------------------

// CenterDimensionAttributes

// .kiapi.common.types.Vector2 center = 1;
inline bool CenterDimensionAttributes::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool CenterDimensionAttributes::has_center() const {
  return _internal_has_center();
}
inline const ::kiapi::common::types::Vector2& CenterDimensionAttributes::_internal_center() const {
  const ::kiapi::common::types::Vector2* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& CenterDimensionAttributes::center() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CenterDimensionAttributes.center)
  return _internal_center();
}
inline void CenterDimensionAttributes::unsafe_arena_set_allocated_center(
    ::kiapi::common::types::Vector2* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CenterDimensionAttributes.center)
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::release_center() {
  
  ::kiapi::common::types::Vector2* temp = center_;
  center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CenterDimensionAttributes.center)
  
  ::kiapi::common::types::Vector2* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::mutable_center() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CenterDimensionAttributes.center)
  return _msg;
}
inline void CenterDimensionAttributes::set_allocated_center(::kiapi::common::types::Vector2* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CenterDimensionAttributes.center)
}

// .kiapi.common.types.Vector2 end = 2;
inline bool CenterDimensionAttributes::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool CenterDimensionAttributes::has_end() const {
  return _internal_has_end();
}
inline const ::kiapi::common::types::Vector2& CenterDimensionAttributes::_internal_end() const {
  const ::kiapi::common::types::Vector2* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& CenterDimensionAttributes::end() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.CenterDimensionAttributes.end)
  return _internal_end();
}
inline void CenterDimensionAttributes::unsafe_arena_set_allocated_end(
    ::kiapi::common::types::Vector2* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.CenterDimensionAttributes.end)
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::release_end() {
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.CenterDimensionAttributes.end)
  
  ::kiapi::common::types::Vector2* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::kiapi::common::types::Vector2* CenterDimensionAttributes::mutable_end() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.CenterDimensionAttributes.end)
  return _msg;
}
inline void CenterDimensionAttributes::set_allocated_end(::kiapi::common::types::Vector2* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.CenterDimensionAttributes.end)
}

// -------------------------------------------------------------------

// Dimension

// .kiapi.common.types.KIID id = 1;
inline bool Dimension::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Dimension::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& Dimension::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& Dimension::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.id)
  return _internal_id();
}
inline void Dimension::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.id)
}
inline ::kiapi::common::types::KIID* Dimension::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* Dimension::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* Dimension::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* Dimension::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.id)
  return _msg;
}
inline void Dimension::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.id)
}

// .kiapi.common.types.LockedState locked = 2;
inline void Dimension::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState Dimension::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState Dimension::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.locked)
  return _internal_locked();
}
inline void Dimension::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void Dimension::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.locked)
}

// .kiapi.board.types.BoardLayer layer = 3;
inline void Dimension::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer Dimension::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer Dimension::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.layer)
  return _internal_layer();
}
inline void Dimension::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void Dimension::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.layer)
}

// .kiapi.common.types.Text text = 4;
inline bool Dimension::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool Dimension::has_text() const {
  return _internal_has_text();
}
inline const ::kiapi::common::types::Text& Dimension::_internal_text() const {
  const ::kiapi::common::types::Text* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Text&>(
      ::kiapi::common::types::_Text_default_instance_);
}
inline const ::kiapi::common::types::Text& Dimension::text() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.text)
  return _internal_text();
}
inline void Dimension::unsafe_arena_set_allocated_text(
    ::kiapi::common::types::Text* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.text)
}
inline ::kiapi::common::types::Text* Dimension::release_text() {
  
  ::kiapi::common::types::Text* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Text* Dimension::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.text)
  
  ::kiapi::common::types::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Text* Dimension::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Text>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::common::types::Text* Dimension::mutable_text() {
  ::kiapi::common::types::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.text)
  return _msg;
}
inline void Dimension::set_allocated_text(::kiapi::common::types::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text));
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.text)
}

// .kiapi.board.types.AlignedDimensionAttributes aligned = 5;
inline bool Dimension::_internal_has_aligned() const {
  return dimension_style_case() == kAligned;
}
inline bool Dimension::has_aligned() const {
  return _internal_has_aligned();
}
inline void Dimension::set_has_aligned() {
  _oneof_case_[0] = kAligned;
}
inline void Dimension::clear_aligned() {
  if (_internal_has_aligned()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dimension_style_.aligned_;
    }
    clear_has_dimension_style();
  }
}
inline ::kiapi::board::types::AlignedDimensionAttributes* Dimension::release_aligned() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.aligned)
  if (_internal_has_aligned()) {
    clear_has_dimension_style();
      ::kiapi::board::types::AlignedDimensionAttributes* temp = dimension_style_.aligned_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dimension_style_.aligned_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kiapi::board::types::AlignedDimensionAttributes& Dimension::_internal_aligned() const {
  return _internal_has_aligned()
      ? *dimension_style_.aligned_
      : reinterpret_cast< ::kiapi::board::types::AlignedDimensionAttributes&>(::kiapi::board::types::_AlignedDimensionAttributes_default_instance_);
}
inline const ::kiapi::board::types::AlignedDimensionAttributes& Dimension::aligned() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.aligned)
  return _internal_aligned();
}
inline ::kiapi::board::types::AlignedDimensionAttributes* Dimension::unsafe_arena_release_aligned() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kiapi.board.types.Dimension.aligned)
  if (_internal_has_aligned()) {
    clear_has_dimension_style();
    ::kiapi::board::types::AlignedDimensionAttributes* temp = dimension_style_.aligned_;
    dimension_style_.aligned_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dimension::unsafe_arena_set_allocated_aligned(::kiapi::board::types::AlignedDimensionAttributes* aligned) {
  clear_dimension_style();
  if (aligned) {
    set_has_aligned();
    dimension_style_.aligned_ = aligned;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.aligned)
}
inline ::kiapi::board::types::AlignedDimensionAttributes* Dimension::_internal_mutable_aligned() {
  if (!_internal_has_aligned()) {
    clear_dimension_style();
    set_has_aligned();
    dimension_style_.aligned_ = CreateMaybeMessage< ::kiapi::board::types::AlignedDimensionAttributes >(GetArenaForAllocation());
  }
  return dimension_style_.aligned_;
}
inline ::kiapi::board::types::AlignedDimensionAttributes* Dimension::mutable_aligned() {
  ::kiapi::board::types::AlignedDimensionAttributes* _msg = _internal_mutable_aligned();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.aligned)
  return _msg;
}

// .kiapi.board.types.OrthogonalDimensionAttributes orthogonal = 6;
inline bool Dimension::_internal_has_orthogonal() const {
  return dimension_style_case() == kOrthogonal;
}
inline bool Dimension::has_orthogonal() const {
  return _internal_has_orthogonal();
}
inline void Dimension::set_has_orthogonal() {
  _oneof_case_[0] = kOrthogonal;
}
inline void Dimension::clear_orthogonal() {
  if (_internal_has_orthogonal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dimension_style_.orthogonal_;
    }
    clear_has_dimension_style();
  }
}
inline ::kiapi::board::types::OrthogonalDimensionAttributes* Dimension::release_orthogonal() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.orthogonal)
  if (_internal_has_orthogonal()) {
    clear_has_dimension_style();
      ::kiapi::board::types::OrthogonalDimensionAttributes* temp = dimension_style_.orthogonal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dimension_style_.orthogonal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kiapi::board::types::OrthogonalDimensionAttributes& Dimension::_internal_orthogonal() const {
  return _internal_has_orthogonal()
      ? *dimension_style_.orthogonal_
      : reinterpret_cast< ::kiapi::board::types::OrthogonalDimensionAttributes&>(::kiapi::board::types::_OrthogonalDimensionAttributes_default_instance_);
}
inline const ::kiapi::board::types::OrthogonalDimensionAttributes& Dimension::orthogonal() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.orthogonal)
  return _internal_orthogonal();
}
inline ::kiapi::board::types::OrthogonalDimensionAttributes* Dimension::unsafe_arena_release_orthogonal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kiapi.board.types.Dimension.orthogonal)
  if (_internal_has_orthogonal()) {
    clear_has_dimension_style();
    ::kiapi::board::types::OrthogonalDimensionAttributes* temp = dimension_style_.orthogonal_;
    dimension_style_.orthogonal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dimension::unsafe_arena_set_allocated_orthogonal(::kiapi::board::types::OrthogonalDimensionAttributes* orthogonal) {
  clear_dimension_style();
  if (orthogonal) {
    set_has_orthogonal();
    dimension_style_.orthogonal_ = orthogonal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.orthogonal)
}
inline ::kiapi::board::types::OrthogonalDimensionAttributes* Dimension::_internal_mutable_orthogonal() {
  if (!_internal_has_orthogonal()) {
    clear_dimension_style();
    set_has_orthogonal();
    dimension_style_.orthogonal_ = CreateMaybeMessage< ::kiapi::board::types::OrthogonalDimensionAttributes >(GetArenaForAllocation());
  }
  return dimension_style_.orthogonal_;
}
inline ::kiapi::board::types::OrthogonalDimensionAttributes* Dimension::mutable_orthogonal() {
  ::kiapi::board::types::OrthogonalDimensionAttributes* _msg = _internal_mutable_orthogonal();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.orthogonal)
  return _msg;
}

// .kiapi.board.types.RadialDimensionAttributes radial = 7;
inline bool Dimension::_internal_has_radial() const {
  return dimension_style_case() == kRadial;
}
inline bool Dimension::has_radial() const {
  return _internal_has_radial();
}
inline void Dimension::set_has_radial() {
  _oneof_case_[0] = kRadial;
}
inline void Dimension::clear_radial() {
  if (_internal_has_radial()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dimension_style_.radial_;
    }
    clear_has_dimension_style();
  }
}
inline ::kiapi::board::types::RadialDimensionAttributes* Dimension::release_radial() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.radial)
  if (_internal_has_radial()) {
    clear_has_dimension_style();
      ::kiapi::board::types::RadialDimensionAttributes* temp = dimension_style_.radial_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dimension_style_.radial_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kiapi::board::types::RadialDimensionAttributes& Dimension::_internal_radial() const {
  return _internal_has_radial()
      ? *dimension_style_.radial_
      : reinterpret_cast< ::kiapi::board::types::RadialDimensionAttributes&>(::kiapi::board::types::_RadialDimensionAttributes_default_instance_);
}
inline const ::kiapi::board::types::RadialDimensionAttributes& Dimension::radial() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.radial)
  return _internal_radial();
}
inline ::kiapi::board::types::RadialDimensionAttributes* Dimension::unsafe_arena_release_radial() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kiapi.board.types.Dimension.radial)
  if (_internal_has_radial()) {
    clear_has_dimension_style();
    ::kiapi::board::types::RadialDimensionAttributes* temp = dimension_style_.radial_;
    dimension_style_.radial_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dimension::unsafe_arena_set_allocated_radial(::kiapi::board::types::RadialDimensionAttributes* radial) {
  clear_dimension_style();
  if (radial) {
    set_has_radial();
    dimension_style_.radial_ = radial;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.radial)
}
inline ::kiapi::board::types::RadialDimensionAttributes* Dimension::_internal_mutable_radial() {
  if (!_internal_has_radial()) {
    clear_dimension_style();
    set_has_radial();
    dimension_style_.radial_ = CreateMaybeMessage< ::kiapi::board::types::RadialDimensionAttributes >(GetArenaForAllocation());
  }
  return dimension_style_.radial_;
}
inline ::kiapi::board::types::RadialDimensionAttributes* Dimension::mutable_radial() {
  ::kiapi::board::types::RadialDimensionAttributes* _msg = _internal_mutable_radial();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.radial)
  return _msg;
}

// .kiapi.board.types.LeaderDimensionAttributes leader = 8;
inline bool Dimension::_internal_has_leader() const {
  return dimension_style_case() == kLeader;
}
inline bool Dimension::has_leader() const {
  return _internal_has_leader();
}
inline void Dimension::set_has_leader() {
  _oneof_case_[0] = kLeader;
}
inline void Dimension::clear_leader() {
  if (_internal_has_leader()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dimension_style_.leader_;
    }
    clear_has_dimension_style();
  }
}
inline ::kiapi::board::types::LeaderDimensionAttributes* Dimension::release_leader() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.leader)
  if (_internal_has_leader()) {
    clear_has_dimension_style();
      ::kiapi::board::types::LeaderDimensionAttributes* temp = dimension_style_.leader_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dimension_style_.leader_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kiapi::board::types::LeaderDimensionAttributes& Dimension::_internal_leader() const {
  return _internal_has_leader()
      ? *dimension_style_.leader_
      : reinterpret_cast< ::kiapi::board::types::LeaderDimensionAttributes&>(::kiapi::board::types::_LeaderDimensionAttributes_default_instance_);
}
inline const ::kiapi::board::types::LeaderDimensionAttributes& Dimension::leader() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.leader)
  return _internal_leader();
}
inline ::kiapi::board::types::LeaderDimensionAttributes* Dimension::unsafe_arena_release_leader() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kiapi.board.types.Dimension.leader)
  if (_internal_has_leader()) {
    clear_has_dimension_style();
    ::kiapi::board::types::LeaderDimensionAttributes* temp = dimension_style_.leader_;
    dimension_style_.leader_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dimension::unsafe_arena_set_allocated_leader(::kiapi::board::types::LeaderDimensionAttributes* leader) {
  clear_dimension_style();
  if (leader) {
    set_has_leader();
    dimension_style_.leader_ = leader;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.leader)
}
inline ::kiapi::board::types::LeaderDimensionAttributes* Dimension::_internal_mutable_leader() {
  if (!_internal_has_leader()) {
    clear_dimension_style();
    set_has_leader();
    dimension_style_.leader_ = CreateMaybeMessage< ::kiapi::board::types::LeaderDimensionAttributes >(GetArenaForAllocation());
  }
  return dimension_style_.leader_;
}
inline ::kiapi::board::types::LeaderDimensionAttributes* Dimension::mutable_leader() {
  ::kiapi::board::types::LeaderDimensionAttributes* _msg = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.leader)
  return _msg;
}

// .kiapi.board.types.CenterDimensionAttributes center = 9;
inline bool Dimension::_internal_has_center() const {
  return dimension_style_case() == kCenter;
}
inline bool Dimension::has_center() const {
  return _internal_has_center();
}
inline void Dimension::set_has_center() {
  _oneof_case_[0] = kCenter;
}
inline void Dimension::clear_center() {
  if (_internal_has_center()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dimension_style_.center_;
    }
    clear_has_dimension_style();
  }
}
inline ::kiapi::board::types::CenterDimensionAttributes* Dimension::release_center() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.center)
  if (_internal_has_center()) {
    clear_has_dimension_style();
      ::kiapi::board::types::CenterDimensionAttributes* temp = dimension_style_.center_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dimension_style_.center_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kiapi::board::types::CenterDimensionAttributes& Dimension::_internal_center() const {
  return _internal_has_center()
      ? *dimension_style_.center_
      : reinterpret_cast< ::kiapi::board::types::CenterDimensionAttributes&>(::kiapi::board::types::_CenterDimensionAttributes_default_instance_);
}
inline const ::kiapi::board::types::CenterDimensionAttributes& Dimension::center() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.center)
  return _internal_center();
}
inline ::kiapi::board::types::CenterDimensionAttributes* Dimension::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kiapi.board.types.Dimension.center)
  if (_internal_has_center()) {
    clear_has_dimension_style();
    ::kiapi::board::types::CenterDimensionAttributes* temp = dimension_style_.center_;
    dimension_style_.center_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dimension::unsafe_arena_set_allocated_center(::kiapi::board::types::CenterDimensionAttributes* center) {
  clear_dimension_style();
  if (center) {
    set_has_center();
    dimension_style_.center_ = center;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.center)
}
inline ::kiapi::board::types::CenterDimensionAttributes* Dimension::_internal_mutable_center() {
  if (!_internal_has_center()) {
    clear_dimension_style();
    set_has_center();
    dimension_style_.center_ = CreateMaybeMessage< ::kiapi::board::types::CenterDimensionAttributes >(GetArenaForAllocation());
  }
  return dimension_style_.center_;
}
inline ::kiapi::board::types::CenterDimensionAttributes* Dimension::mutable_center() {
  ::kiapi::board::types::CenterDimensionAttributes* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.center)
  return _msg;
}

// bool override_text_enabled = 10;
inline void Dimension::clear_override_text_enabled() {
  override_text_enabled_ = false;
}
inline bool Dimension::_internal_override_text_enabled() const {
  return override_text_enabled_;
}
inline bool Dimension::override_text_enabled() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.override_text_enabled)
  return _internal_override_text_enabled();
}
inline void Dimension::_internal_set_override_text_enabled(bool value) {
  
  override_text_enabled_ = value;
}
inline void Dimension::set_override_text_enabled(bool value) {
  _internal_set_override_text_enabled(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.override_text_enabled)
}

// string override_text = 11;
inline void Dimension::clear_override_text() {
  override_text_.ClearToEmpty();
}
inline const std::string& Dimension::override_text() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.override_text)
  return _internal_override_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dimension::set_override_text(ArgT0&& arg0, ArgT... args) {
 
 override_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.override_text)
}
inline std::string* Dimension::mutable_override_text() {
  std::string* _s = _internal_mutable_override_text();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.override_text)
  return _s;
}
inline const std::string& Dimension::_internal_override_text() const {
  return override_text_.Get();
}
inline void Dimension::_internal_set_override_text(const std::string& value) {
  
  override_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_override_text() {
  
  return override_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Dimension::release_override_text() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.override_text)
  return override_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Dimension::set_allocated_override_text(std::string* override_text) {
  if (override_text != nullptr) {
    
  } else {
    
  }
  override_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), override_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (override_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    override_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.override_text)
}

// string prefix = 12;
inline void Dimension::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& Dimension::prefix() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dimension::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.prefix)
}
inline std::string* Dimension::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.prefix)
  return _s;
}
inline const std::string& Dimension::_internal_prefix() const {
  return prefix_.Get();
}
inline void Dimension::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Dimension::release_prefix() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Dimension::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.prefix)
}

// string suffix = 13;
inline void Dimension::clear_suffix() {
  suffix_.ClearToEmpty();
}
inline const std::string& Dimension::suffix() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.suffix)
  return _internal_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dimension::set_suffix(ArgT0&& arg0, ArgT... args) {
 
 suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.suffix)
}
inline std::string* Dimension::mutable_suffix() {
  std::string* _s = _internal_mutable_suffix();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.suffix)
  return _s;
}
inline const std::string& Dimension::_internal_suffix() const {
  return suffix_.Get();
}
inline void Dimension::_internal_set_suffix(const std::string& value) {
  
  suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_suffix() {
  
  return suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Dimension::release_suffix() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.suffix)
  return suffix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Dimension::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suffix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.suffix)
}

// .kiapi.board.types.DimensionUnit unit = 14;
inline void Dimension::clear_unit() {
  unit_ = 0;
}
inline ::kiapi::board::types::DimensionUnit Dimension::_internal_unit() const {
  return static_cast< ::kiapi::board::types::DimensionUnit >(unit_);
}
inline ::kiapi::board::types::DimensionUnit Dimension::unit() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.unit)
  return _internal_unit();
}
inline void Dimension::_internal_set_unit(::kiapi::board::types::DimensionUnit value) {
  
  unit_ = value;
}
inline void Dimension::set_unit(::kiapi::board::types::DimensionUnit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.unit)
}

// .kiapi.board.types.DimensionUnitFormat unit_format = 15;
inline void Dimension::clear_unit_format() {
  unit_format_ = 0;
}
inline ::kiapi::board::types::DimensionUnitFormat Dimension::_internal_unit_format() const {
  return static_cast< ::kiapi::board::types::DimensionUnitFormat >(unit_format_);
}
inline ::kiapi::board::types::DimensionUnitFormat Dimension::unit_format() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.unit_format)
  return _internal_unit_format();
}
inline void Dimension::_internal_set_unit_format(::kiapi::board::types::DimensionUnitFormat value) {
  
  unit_format_ = value;
}
inline void Dimension::set_unit_format(::kiapi::board::types::DimensionUnitFormat value) {
  _internal_set_unit_format(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.unit_format)
}

// .kiapi.board.types.DimensionArrowDirection arrow_direction = 16;
inline void Dimension::clear_arrow_direction() {
  arrow_direction_ = 0;
}
inline ::kiapi::board::types::DimensionArrowDirection Dimension::_internal_arrow_direction() const {
  return static_cast< ::kiapi::board::types::DimensionArrowDirection >(arrow_direction_);
}
inline ::kiapi::board::types::DimensionArrowDirection Dimension::arrow_direction() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.arrow_direction)
  return _internal_arrow_direction();
}
inline void Dimension::_internal_set_arrow_direction(::kiapi::board::types::DimensionArrowDirection value) {
  
  arrow_direction_ = value;
}
inline void Dimension::set_arrow_direction(::kiapi::board::types::DimensionArrowDirection value) {
  _internal_set_arrow_direction(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.arrow_direction)
}

// .kiapi.board.types.DimensionPrecision precision = 17;
inline void Dimension::clear_precision() {
  precision_ = 0;
}
inline ::kiapi::board::types::DimensionPrecision Dimension::_internal_precision() const {
  return static_cast< ::kiapi::board::types::DimensionPrecision >(precision_);
}
inline ::kiapi::board::types::DimensionPrecision Dimension::precision() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.precision)
  return _internal_precision();
}
inline void Dimension::_internal_set_precision(::kiapi::board::types::DimensionPrecision value) {
  
  precision_ = value;
}
inline void Dimension::set_precision(::kiapi::board::types::DimensionPrecision value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.precision)
}

// bool suppress_trailing_zeroes = 18;
inline void Dimension::clear_suppress_trailing_zeroes() {
  suppress_trailing_zeroes_ = false;
}
inline bool Dimension::_internal_suppress_trailing_zeroes() const {
  return suppress_trailing_zeroes_;
}
inline bool Dimension::suppress_trailing_zeroes() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.suppress_trailing_zeroes)
  return _internal_suppress_trailing_zeroes();
}
inline void Dimension::_internal_set_suppress_trailing_zeroes(bool value) {
  
  suppress_trailing_zeroes_ = value;
}
inline void Dimension::set_suppress_trailing_zeroes(bool value) {
  _internal_set_suppress_trailing_zeroes(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.suppress_trailing_zeroes)
}

// .kiapi.common.types.Distance line_thickness = 19;
inline bool Dimension::_internal_has_line_thickness() const {
  return this != internal_default_instance() && line_thickness_ != nullptr;
}
inline bool Dimension::has_line_thickness() const {
  return _internal_has_line_thickness();
}
inline const ::kiapi::common::types::Distance& Dimension::_internal_line_thickness() const {
  const ::kiapi::common::types::Distance* p = line_thickness_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& Dimension::line_thickness() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.line_thickness)
  return _internal_line_thickness();
}
inline void Dimension::unsafe_arena_set_allocated_line_thickness(
    ::kiapi::common::types::Distance* line_thickness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_thickness_);
  }
  line_thickness_ = line_thickness;
  if (line_thickness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.line_thickness)
}
inline ::kiapi::common::types::Distance* Dimension::release_line_thickness() {
  
  ::kiapi::common::types::Distance* temp = line_thickness_;
  line_thickness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* Dimension::unsafe_arena_release_line_thickness() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.line_thickness)
  
  ::kiapi::common::types::Distance* temp = line_thickness_;
  line_thickness_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* Dimension::_internal_mutable_line_thickness() {
  
  if (line_thickness_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    line_thickness_ = p;
  }
  return line_thickness_;
}
inline ::kiapi::common::types::Distance* Dimension::mutable_line_thickness() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_line_thickness();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.line_thickness)
  return _msg;
}
inline void Dimension::set_allocated_line_thickness(::kiapi::common::types::Distance* line_thickness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_thickness_);
  }
  if (line_thickness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_thickness));
    if (message_arena != submessage_arena) {
      line_thickness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_thickness, submessage_arena);
    }
    
  } else {
    
  }
  line_thickness_ = line_thickness;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.line_thickness)
}

// .kiapi.common.types.Distance arrow_length = 20;
inline bool Dimension::_internal_has_arrow_length() const {
  return this != internal_default_instance() && arrow_length_ != nullptr;
}
inline bool Dimension::has_arrow_length() const {
  return _internal_has_arrow_length();
}
inline const ::kiapi::common::types::Distance& Dimension::_internal_arrow_length() const {
  const ::kiapi::common::types::Distance* p = arrow_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& Dimension::arrow_length() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.arrow_length)
  return _internal_arrow_length();
}
inline void Dimension::unsafe_arena_set_allocated_arrow_length(
    ::kiapi::common::types::Distance* arrow_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrow_length_);
  }
  arrow_length_ = arrow_length;
  if (arrow_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.arrow_length)
}
inline ::kiapi::common::types::Distance* Dimension::release_arrow_length() {
  
  ::kiapi::common::types::Distance* temp = arrow_length_;
  arrow_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* Dimension::unsafe_arena_release_arrow_length() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.arrow_length)
  
  ::kiapi::common::types::Distance* temp = arrow_length_;
  arrow_length_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* Dimension::_internal_mutable_arrow_length() {
  
  if (arrow_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    arrow_length_ = p;
  }
  return arrow_length_;
}
inline ::kiapi::common::types::Distance* Dimension::mutable_arrow_length() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_arrow_length();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.arrow_length)
  return _msg;
}
inline void Dimension::set_allocated_arrow_length(::kiapi::common::types::Distance* arrow_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrow_length_);
  }
  if (arrow_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrow_length));
    if (message_arena != submessage_arena) {
      arrow_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrow_length, submessage_arena);
    }
    
  } else {
    
  }
  arrow_length_ = arrow_length;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.arrow_length)
}

// .kiapi.common.types.Distance extension_offset = 21;
inline bool Dimension::_internal_has_extension_offset() const {
  return this != internal_default_instance() && extension_offset_ != nullptr;
}
inline bool Dimension::has_extension_offset() const {
  return _internal_has_extension_offset();
}
inline const ::kiapi::common::types::Distance& Dimension::_internal_extension_offset() const {
  const ::kiapi::common::types::Distance* p = extension_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& Dimension::extension_offset() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.extension_offset)
  return _internal_extension_offset();
}
inline void Dimension::unsafe_arena_set_allocated_extension_offset(
    ::kiapi::common::types::Distance* extension_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_offset_);
  }
  extension_offset_ = extension_offset;
  if (extension_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Dimension.extension_offset)
}
inline ::kiapi::common::types::Distance* Dimension::release_extension_offset() {
  
  ::kiapi::common::types::Distance* temp = extension_offset_;
  extension_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* Dimension::unsafe_arena_release_extension_offset() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Dimension.extension_offset)
  
  ::kiapi::common::types::Distance* temp = extension_offset_;
  extension_offset_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* Dimension::_internal_mutable_extension_offset() {
  
  if (extension_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    extension_offset_ = p;
  }
  return extension_offset_;
}
inline ::kiapi::common::types::Distance* Dimension::mutable_extension_offset() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_extension_offset();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Dimension.extension_offset)
  return _msg;
}
inline void Dimension::set_allocated_extension_offset(::kiapi::common::types::Distance* extension_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_offset_);
  }
  if (extension_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_offset));
    if (message_arena != submessage_arena) {
      extension_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_offset, submessage_arena);
    }
    
  } else {
    
  }
  extension_offset_ = extension_offset;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.extension_offset)
}

// .kiapi.board.types.DimensionTextPosition text_position = 22;
inline void Dimension::clear_text_position() {
  text_position_ = 0;
}
inline ::kiapi::board::types::DimensionTextPosition Dimension::_internal_text_position() const {
  return static_cast< ::kiapi::board::types::DimensionTextPosition >(text_position_);
}
inline ::kiapi::board::types::DimensionTextPosition Dimension::text_position() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.text_position)
  return _internal_text_position();
}
inline void Dimension::_internal_set_text_position(::kiapi::board::types::DimensionTextPosition value) {
  
  text_position_ = value;
}
inline void Dimension::set_text_position(::kiapi::board::types::DimensionTextPosition value) {
  _internal_set_text_position(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.text_position)
}

// bool keep_text_aligned = 23;
inline void Dimension::clear_keep_text_aligned() {
  keep_text_aligned_ = false;
}
inline bool Dimension::_internal_keep_text_aligned() const {
  return keep_text_aligned_;
}
inline bool Dimension::keep_text_aligned() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Dimension.keep_text_aligned)
  return _internal_keep_text_aligned();
}
inline void Dimension::_internal_set_keep_text_aligned(bool value) {
  
  keep_text_aligned_ = value;
}
inline void Dimension::set_keep_text_aligned(bool value) {
  _internal_set_keep_text_aligned(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Dimension.keep_text_aligned)
}

inline bool Dimension::has_dimension_style() const {
  return dimension_style_case() != DIMENSION_STYLE_NOT_SET;
}
inline void Dimension::clear_has_dimension_style() {
  _oneof_case_[0] = DIMENSION_STYLE_NOT_SET;
}
inline Dimension::DimensionStyleCase Dimension::dimension_style_case() const {
  return Dimension::DimensionStyleCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReferenceImage

// -------------------------------------------------------------------

// Group

// -------------------------------------------------------------------

// FieldId

// int32 id = 1;
inline void FieldId::clear_id() {
  id_ = 0;
}
inline int32_t FieldId::_internal_id() const {
  return id_;
}
inline int32_t FieldId::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FieldId.id)
  return _internal_id();
}
inline void FieldId::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void FieldId::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FieldId.id)
}

// -------------------------------------------------------------------

// Field

// .kiapi.board.types.FieldId id = 1;
inline bool Field::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Field::has_id() const {
  return _internal_has_id();
}
inline void Field::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::kiapi::board::types::FieldId& Field::_internal_id() const {
  const ::kiapi::board::types::FieldId* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::FieldId&>(
      ::kiapi::board::types::_FieldId_default_instance_);
}
inline const ::kiapi::board::types::FieldId& Field::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Field.id)
  return _internal_id();
}
inline void Field::unsafe_arena_set_allocated_id(
    ::kiapi::board::types::FieldId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Field.id)
}
inline ::kiapi::board::types::FieldId* Field::release_id() {
  
  ::kiapi::board::types::FieldId* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::FieldId* Field::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Field.id)
  
  ::kiapi::board::types::FieldId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::FieldId* Field::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::FieldId>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::board::types::FieldId* Field::mutable_id() {
  ::kiapi::board::types::FieldId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Field.id)
  return _msg;
}
inline void Field::set_allocated_id(::kiapi::board::types::FieldId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::FieldId>::GetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Field.id)
}

// string name = 2;
inline void Field::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Field.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Field::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Field.name)
}
inline std::string* Field::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Field.name)
  return _s;
}
inline const std::string& Field::_internal_name() const {
  return name_.Get();
}
inline void Field::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Field::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Field.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Field::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Field.name)
}

// .kiapi.board.types.BoardText text = 3;
inline bool Field::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool Field::has_text() const {
  return _internal_has_text();
}
inline void Field::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::kiapi::board::types::BoardText& Field::_internal_text() const {
  const ::kiapi::board::types::BoardText* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::BoardText&>(
      ::kiapi::board::types::_BoardText_default_instance_);
}
inline const ::kiapi::board::types::BoardText& Field::text() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Field.text)
  return _internal_text();
}
inline void Field::unsafe_arena_set_allocated_text(
    ::kiapi::board::types::BoardText* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Field.text)
}
inline ::kiapi::board::types::BoardText* Field::release_text() {
  
  ::kiapi::board::types::BoardText* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::BoardText* Field::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Field.text)
  
  ::kiapi::board::types::BoardText* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::BoardText* Field::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::BoardText>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::board::types::BoardText* Field::mutable_text() {
  ::kiapi::board::types::BoardText* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Field.text)
  return _msg;
}
inline void Field::set_allocated_text(::kiapi::board::types::BoardText* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::BoardText>::GetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Field.text)
}

// bool visible = 4;
inline void Field::clear_visible() {
  visible_ = false;
}
inline bool Field::_internal_visible() const {
  return visible_;
}
inline bool Field::visible() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Field.visible)
  return _internal_visible();
}
inline void Field::_internal_set_visible(bool value) {
  
  visible_ = value;
}
inline void Field::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Field.visible)
}

// -------------------------------------------------------------------

// FootprintAttributes

// string description = 1;
inline void FootprintAttributes::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& FootprintAttributes::description() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FootprintAttributes::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.description)
}
inline std::string* FootprintAttributes::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintAttributes.description)
  return _s;
}
inline const std::string& FootprintAttributes::_internal_description() const {
  return description_.Get();
}
inline void FootprintAttributes::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FootprintAttributes::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FootprintAttributes::release_description() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintAttributes.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FootprintAttributes::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintAttributes.description)
}

// string keywords = 2;
inline void FootprintAttributes::clear_keywords() {
  keywords_.ClearToEmpty();
}
inline const std::string& FootprintAttributes::keywords() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.keywords)
  return _internal_keywords();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FootprintAttributes::set_keywords(ArgT0&& arg0, ArgT... args) {
 
 keywords_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.keywords)
}
inline std::string* FootprintAttributes::mutable_keywords() {
  std::string* _s = _internal_mutable_keywords();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintAttributes.keywords)
  return _s;
}
inline const std::string& FootprintAttributes::_internal_keywords() const {
  return keywords_.Get();
}
inline void FootprintAttributes::_internal_set_keywords(const std::string& value) {
  
  keywords_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FootprintAttributes::_internal_mutable_keywords() {
  
  return keywords_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FootprintAttributes::release_keywords() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintAttributes.keywords)
  return keywords_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FootprintAttributes::set_allocated_keywords(std::string* keywords) {
  if (keywords != nullptr) {
    
  } else {
    
  }
  keywords_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keywords,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keywords_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    keywords_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintAttributes.keywords)
}

// bool not_in_schematic = 3;
inline void FootprintAttributes::clear_not_in_schematic() {
  not_in_schematic_ = false;
}
inline bool FootprintAttributes::_internal_not_in_schematic() const {
  return not_in_schematic_;
}
inline bool FootprintAttributes::not_in_schematic() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.not_in_schematic)
  return _internal_not_in_schematic();
}
inline void FootprintAttributes::_internal_set_not_in_schematic(bool value) {
  
  not_in_schematic_ = value;
}
inline void FootprintAttributes::set_not_in_schematic(bool value) {
  _internal_set_not_in_schematic(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.not_in_schematic)
}

// bool exclude_from_position_files = 4;
inline void FootprintAttributes::clear_exclude_from_position_files() {
  exclude_from_position_files_ = false;
}
inline bool FootprintAttributes::_internal_exclude_from_position_files() const {
  return exclude_from_position_files_;
}
inline bool FootprintAttributes::exclude_from_position_files() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.exclude_from_position_files)
  return _internal_exclude_from_position_files();
}
inline void FootprintAttributes::_internal_set_exclude_from_position_files(bool value) {
  
  exclude_from_position_files_ = value;
}
inline void FootprintAttributes::set_exclude_from_position_files(bool value) {
  _internal_set_exclude_from_position_files(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.exclude_from_position_files)
}

// bool exclude_from_bill_of_materials = 5;
inline void FootprintAttributes::clear_exclude_from_bill_of_materials() {
  exclude_from_bill_of_materials_ = false;
}
inline bool FootprintAttributes::_internal_exclude_from_bill_of_materials() const {
  return exclude_from_bill_of_materials_;
}
inline bool FootprintAttributes::exclude_from_bill_of_materials() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.exclude_from_bill_of_materials)
  return _internal_exclude_from_bill_of_materials();
}
inline void FootprintAttributes::_internal_set_exclude_from_bill_of_materials(bool value) {
  
  exclude_from_bill_of_materials_ = value;
}
inline void FootprintAttributes::set_exclude_from_bill_of_materials(bool value) {
  _internal_set_exclude_from_bill_of_materials(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.exclude_from_bill_of_materials)
}

// bool exempt_from_courtyard_requirement = 6;
inline void FootprintAttributes::clear_exempt_from_courtyard_requirement() {
  exempt_from_courtyard_requirement_ = false;
}
inline bool FootprintAttributes::_internal_exempt_from_courtyard_requirement() const {
  return exempt_from_courtyard_requirement_;
}
inline bool FootprintAttributes::exempt_from_courtyard_requirement() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.exempt_from_courtyard_requirement)
  return _internal_exempt_from_courtyard_requirement();
}
inline void FootprintAttributes::_internal_set_exempt_from_courtyard_requirement(bool value) {
  
  exempt_from_courtyard_requirement_ = value;
}
inline void FootprintAttributes::set_exempt_from_courtyard_requirement(bool value) {
  _internal_set_exempt_from_courtyard_requirement(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.exempt_from_courtyard_requirement)
}

// bool do_not_populate = 7;
inline void FootprintAttributes::clear_do_not_populate() {
  do_not_populate_ = false;
}
inline bool FootprintAttributes::_internal_do_not_populate() const {
  return do_not_populate_;
}
inline bool FootprintAttributes::do_not_populate() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.do_not_populate)
  return _internal_do_not_populate();
}
inline void FootprintAttributes::_internal_set_do_not_populate(bool value) {
  
  do_not_populate_ = value;
}
inline void FootprintAttributes::set_do_not_populate(bool value) {
  _internal_set_do_not_populate(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.do_not_populate)
}

// .kiapi.board.types.FootprintMountingStyle mounting_style = 8;
inline void FootprintAttributes::clear_mounting_style() {
  mounting_style_ = 0;
}
inline ::kiapi::board::types::FootprintMountingStyle FootprintAttributes::_internal_mounting_style() const {
  return static_cast< ::kiapi::board::types::FootprintMountingStyle >(mounting_style_);
}
inline ::kiapi::board::types::FootprintMountingStyle FootprintAttributes::mounting_style() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintAttributes.mounting_style)
  return _internal_mounting_style();
}
inline void FootprintAttributes::_internal_set_mounting_style(::kiapi::board::types::FootprintMountingStyle value) {
  
  mounting_style_ = value;
}
inline void FootprintAttributes::set_mounting_style(::kiapi::board::types::FootprintMountingStyle value) {
  _internal_set_mounting_style(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintAttributes.mounting_style)
}

// -------------------------------------------------------------------

// NetTieDefinition

// repeated string pad_number = 1;
inline int NetTieDefinition::_internal_pad_number_size() const {
  return pad_number_.size();
}
inline int NetTieDefinition::pad_number_size() const {
  return _internal_pad_number_size();
}
inline void NetTieDefinition::clear_pad_number() {
  pad_number_.Clear();
}
inline std::string* NetTieDefinition::add_pad_number() {
  std::string* _s = _internal_add_pad_number();
  // @@protoc_insertion_point(field_add_mutable:kiapi.board.types.NetTieDefinition.pad_number)
  return _s;
}
inline const std::string& NetTieDefinition::_internal_pad_number(int index) const {
  return pad_number_.Get(index);
}
inline const std::string& NetTieDefinition::pad_number(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.NetTieDefinition.pad_number)
  return _internal_pad_number(index);
}
inline std::string* NetTieDefinition::mutable_pad_number(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.NetTieDefinition.pad_number)
  return pad_number_.Mutable(index);
}
inline void NetTieDefinition::set_pad_number(int index, const std::string& value) {
  pad_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.NetTieDefinition.pad_number)
}
inline void NetTieDefinition::set_pad_number(int index, std::string&& value) {
  pad_number_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kiapi.board.types.NetTieDefinition.pad_number)
}
inline void NetTieDefinition::set_pad_number(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pad_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kiapi.board.types.NetTieDefinition.pad_number)
}
inline void NetTieDefinition::set_pad_number(int index, const char* value, size_t size) {
  pad_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kiapi.board.types.NetTieDefinition.pad_number)
}
inline std::string* NetTieDefinition::_internal_add_pad_number() {
  return pad_number_.Add();
}
inline void NetTieDefinition::add_pad_number(const std::string& value) {
  pad_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kiapi.board.types.NetTieDefinition.pad_number)
}
inline void NetTieDefinition::add_pad_number(std::string&& value) {
  pad_number_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kiapi.board.types.NetTieDefinition.pad_number)
}
inline void NetTieDefinition::add_pad_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pad_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kiapi.board.types.NetTieDefinition.pad_number)
}
inline void NetTieDefinition::add_pad_number(const char* value, size_t size) {
  pad_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kiapi.board.types.NetTieDefinition.pad_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetTieDefinition::pad_number() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.NetTieDefinition.pad_number)
  return pad_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetTieDefinition::mutable_pad_number() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.NetTieDefinition.pad_number)
  return &pad_number_;
}

// -------------------------------------------------------------------

// FootprintDesignRuleOverrides

// .kiapi.board.types.SolderMaskOverrides solder_mask = 1;
inline bool FootprintDesignRuleOverrides::_internal_has_solder_mask() const {
  return this != internal_default_instance() && solder_mask_ != nullptr;
}
inline bool FootprintDesignRuleOverrides::has_solder_mask() const {
  return _internal_has_solder_mask();
}
inline void FootprintDesignRuleOverrides::clear_solder_mask() {
  if (GetArenaForAllocation() == nullptr && solder_mask_ != nullptr) {
    delete solder_mask_;
  }
  solder_mask_ = nullptr;
}
inline const ::kiapi::board::types::SolderMaskOverrides& FootprintDesignRuleOverrides::_internal_solder_mask() const {
  const ::kiapi::board::types::SolderMaskOverrides* p = solder_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::SolderMaskOverrides&>(
      ::kiapi::board::types::_SolderMaskOverrides_default_instance_);
}
inline const ::kiapi::board::types::SolderMaskOverrides& FootprintDesignRuleOverrides::solder_mask() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintDesignRuleOverrides.solder_mask)
  return _internal_solder_mask();
}
inline void FootprintDesignRuleOverrides::unsafe_arena_set_allocated_solder_mask(
    ::kiapi::board::types::SolderMaskOverrides* solder_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_mask_);
  }
  solder_mask_ = solder_mask;
  if (solder_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintDesignRuleOverrides.solder_mask)
}
inline ::kiapi::board::types::SolderMaskOverrides* FootprintDesignRuleOverrides::release_solder_mask() {
  
  ::kiapi::board::types::SolderMaskOverrides* temp = solder_mask_;
  solder_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::SolderMaskOverrides* FootprintDesignRuleOverrides::unsafe_arena_release_solder_mask() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintDesignRuleOverrides.solder_mask)
  
  ::kiapi::board::types::SolderMaskOverrides* temp = solder_mask_;
  solder_mask_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::SolderMaskOverrides* FootprintDesignRuleOverrides::_internal_mutable_solder_mask() {
  
  if (solder_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::SolderMaskOverrides>(GetArenaForAllocation());
    solder_mask_ = p;
  }
  return solder_mask_;
}
inline ::kiapi::board::types::SolderMaskOverrides* FootprintDesignRuleOverrides::mutable_solder_mask() {
  ::kiapi::board::types::SolderMaskOverrides* _msg = _internal_mutable_solder_mask();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintDesignRuleOverrides.solder_mask)
  return _msg;
}
inline void FootprintDesignRuleOverrides::set_allocated_solder_mask(::kiapi::board::types::SolderMaskOverrides* solder_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete solder_mask_;
  }
  if (solder_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::SolderMaskOverrides>::GetOwningArena(solder_mask);
    if (message_arena != submessage_arena) {
      solder_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solder_mask, submessage_arena);
    }
    
  } else {
    
  }
  solder_mask_ = solder_mask;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintDesignRuleOverrides.solder_mask)
}

// .kiapi.board.types.SolderPasteOverrides solder_paste = 2;
inline bool FootprintDesignRuleOverrides::_internal_has_solder_paste() const {
  return this != internal_default_instance() && solder_paste_ != nullptr;
}
inline bool FootprintDesignRuleOverrides::has_solder_paste() const {
  return _internal_has_solder_paste();
}
inline void FootprintDesignRuleOverrides::clear_solder_paste() {
  if (GetArenaForAllocation() == nullptr && solder_paste_ != nullptr) {
    delete solder_paste_;
  }
  solder_paste_ = nullptr;
}
inline const ::kiapi::board::types::SolderPasteOverrides& FootprintDesignRuleOverrides::_internal_solder_paste() const {
  const ::kiapi::board::types::SolderPasteOverrides* p = solder_paste_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::SolderPasteOverrides&>(
      ::kiapi::board::types::_SolderPasteOverrides_default_instance_);
}
inline const ::kiapi::board::types::SolderPasteOverrides& FootprintDesignRuleOverrides::solder_paste() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintDesignRuleOverrides.solder_paste)
  return _internal_solder_paste();
}
inline void FootprintDesignRuleOverrides::unsafe_arena_set_allocated_solder_paste(
    ::kiapi::board::types::SolderPasteOverrides* solder_paste) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solder_paste_);
  }
  solder_paste_ = solder_paste;
  if (solder_paste) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintDesignRuleOverrides.solder_paste)
}
inline ::kiapi::board::types::SolderPasteOverrides* FootprintDesignRuleOverrides::release_solder_paste() {
  
  ::kiapi::board::types::SolderPasteOverrides* temp = solder_paste_;
  solder_paste_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::SolderPasteOverrides* FootprintDesignRuleOverrides::unsafe_arena_release_solder_paste() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintDesignRuleOverrides.solder_paste)
  
  ::kiapi::board::types::SolderPasteOverrides* temp = solder_paste_;
  solder_paste_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::SolderPasteOverrides* FootprintDesignRuleOverrides::_internal_mutable_solder_paste() {
  
  if (solder_paste_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::SolderPasteOverrides>(GetArenaForAllocation());
    solder_paste_ = p;
  }
  return solder_paste_;
}
inline ::kiapi::board::types::SolderPasteOverrides* FootprintDesignRuleOverrides::mutable_solder_paste() {
  ::kiapi::board::types::SolderPasteOverrides* _msg = _internal_mutable_solder_paste();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintDesignRuleOverrides.solder_paste)
  return _msg;
}
inline void FootprintDesignRuleOverrides::set_allocated_solder_paste(::kiapi::board::types::SolderPasteOverrides* solder_paste) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete solder_paste_;
  }
  if (solder_paste) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::SolderPasteOverrides>::GetOwningArena(solder_paste);
    if (message_arena != submessage_arena) {
      solder_paste = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solder_paste, submessage_arena);
    }
    
  } else {
    
  }
  solder_paste_ = solder_paste;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintDesignRuleOverrides.solder_paste)
}

// .kiapi.common.types.Distance copper_clearance = 3;
inline bool FootprintDesignRuleOverrides::_internal_has_copper_clearance() const {
  return this != internal_default_instance() && copper_clearance_ != nullptr;
}
inline bool FootprintDesignRuleOverrides::has_copper_clearance() const {
  return _internal_has_copper_clearance();
}
inline const ::kiapi::common::types::Distance& FootprintDesignRuleOverrides::_internal_copper_clearance() const {
  const ::kiapi::common::types::Distance* p = copper_clearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& FootprintDesignRuleOverrides::copper_clearance() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintDesignRuleOverrides.copper_clearance)
  return _internal_copper_clearance();
}
inline void FootprintDesignRuleOverrides::unsafe_arena_set_allocated_copper_clearance(
    ::kiapi::common::types::Distance* copper_clearance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copper_clearance_);
  }
  copper_clearance_ = copper_clearance;
  if (copper_clearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintDesignRuleOverrides.copper_clearance)
}
inline ::kiapi::common::types::Distance* FootprintDesignRuleOverrides::release_copper_clearance() {
  
  ::kiapi::common::types::Distance* temp = copper_clearance_;
  copper_clearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* FootprintDesignRuleOverrides::unsafe_arena_release_copper_clearance() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintDesignRuleOverrides.copper_clearance)
  
  ::kiapi::common::types::Distance* temp = copper_clearance_;
  copper_clearance_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* FootprintDesignRuleOverrides::_internal_mutable_copper_clearance() {
  
  if (copper_clearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    copper_clearance_ = p;
  }
  return copper_clearance_;
}
inline ::kiapi::common::types::Distance* FootprintDesignRuleOverrides::mutable_copper_clearance() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_copper_clearance();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintDesignRuleOverrides.copper_clearance)
  return _msg;
}
inline void FootprintDesignRuleOverrides::set_allocated_copper_clearance(::kiapi::common::types::Distance* copper_clearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(copper_clearance_);
  }
  if (copper_clearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copper_clearance));
    if (message_arena != submessage_arena) {
      copper_clearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copper_clearance, submessage_arena);
    }
    
  } else {
    
  }
  copper_clearance_ = copper_clearance;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintDesignRuleOverrides.copper_clearance)
}

// .kiapi.board.types.ZoneConnectionStyle zone_connection = 4;
inline void FootprintDesignRuleOverrides::clear_zone_connection() {
  zone_connection_ = 0;
}
inline ::kiapi::board::types::ZoneConnectionStyle FootprintDesignRuleOverrides::_internal_zone_connection() const {
  return static_cast< ::kiapi::board::types::ZoneConnectionStyle >(zone_connection_);
}
inline ::kiapi::board::types::ZoneConnectionStyle FootprintDesignRuleOverrides::zone_connection() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintDesignRuleOverrides.zone_connection)
  return _internal_zone_connection();
}
inline void FootprintDesignRuleOverrides::_internal_set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value) {
  
  zone_connection_ = value;
}
inline void FootprintDesignRuleOverrides::set_zone_connection(::kiapi::board::types::ZoneConnectionStyle value) {
  _internal_set_zone_connection(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintDesignRuleOverrides.zone_connection)
}

// -------------------------------------------------------------------

// Footprint3DModel

// string filename = 1;
inline void Footprint3DModel::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& Footprint3DModel::filename() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint3DModel.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Footprint3DModel::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.types.Footprint3DModel.filename)
}
inline std::string* Footprint3DModel::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint3DModel.filename)
  return _s;
}
inline const std::string& Footprint3DModel::_internal_filename() const {
  return filename_.Get();
}
inline void Footprint3DModel::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Footprint3DModel::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Footprint3DModel::release_filename() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint3DModel.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Footprint3DModel::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint3DModel.filename)
}

// .kiapi.common.types.Vector3D scale = 2;
inline bool Footprint3DModel::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool Footprint3DModel::has_scale() const {
  return _internal_has_scale();
}
inline const ::kiapi::common::types::Vector3D& Footprint3DModel::_internal_scale() const {
  const ::kiapi::common::types::Vector3D* p = scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector3D&>(
      ::kiapi::common::types::_Vector3D_default_instance_);
}
inline const ::kiapi::common::types::Vector3D& Footprint3DModel::scale() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint3DModel.scale)
  return _internal_scale();
}
inline void Footprint3DModel::unsafe_arena_set_allocated_scale(
    ::kiapi::common::types::Vector3D* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint3DModel.scale)
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::release_scale() {
  
  ::kiapi::common::types::Vector3D* temp = scale_;
  scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint3DModel.scale)
  
  ::kiapi::common::types::Vector3D* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector3D>(GetArenaForAllocation());
    scale_ = p;
  }
  return scale_;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::mutable_scale() {
  ::kiapi::common::types::Vector3D* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint3DModel.scale)
  return _msg;
}
inline void Footprint3DModel::set_allocated_scale(::kiapi::common::types::Vector3D* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint3DModel.scale)
}

// .kiapi.common.types.Vector3D rotation = 3;
inline bool Footprint3DModel::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Footprint3DModel::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::kiapi::common::types::Vector3D& Footprint3DModel::_internal_rotation() const {
  const ::kiapi::common::types::Vector3D* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector3D&>(
      ::kiapi::common::types::_Vector3D_default_instance_);
}
inline const ::kiapi::common::types::Vector3D& Footprint3DModel::rotation() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint3DModel.rotation)
  return _internal_rotation();
}
inline void Footprint3DModel::unsafe_arena_set_allocated_rotation(
    ::kiapi::common::types::Vector3D* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint3DModel.rotation)
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::release_rotation() {
  
  ::kiapi::common::types::Vector3D* temp = rotation_;
  rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint3DModel.rotation)
  
  ::kiapi::common::types::Vector3D* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector3D>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::mutable_rotation() {
  ::kiapi::common::types::Vector3D* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint3DModel.rotation)
  return _msg;
}
inline void Footprint3DModel::set_allocated_rotation(::kiapi::common::types::Vector3D* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint3DModel.rotation)
}

// .kiapi.common.types.Vector3D offset = 4;
inline bool Footprint3DModel::_internal_has_offset() const {
  return this != internal_default_instance() && offset_ != nullptr;
}
inline bool Footprint3DModel::has_offset() const {
  return _internal_has_offset();
}
inline const ::kiapi::common::types::Vector3D& Footprint3DModel::_internal_offset() const {
  const ::kiapi::common::types::Vector3D* p = offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector3D&>(
      ::kiapi::common::types::_Vector3D_default_instance_);
}
inline const ::kiapi::common::types::Vector3D& Footprint3DModel::offset() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint3DModel.offset)
  return _internal_offset();
}
inline void Footprint3DModel::unsafe_arena_set_allocated_offset(
    ::kiapi::common::types::Vector3D* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint3DModel.offset)
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::release_offset() {
  
  ::kiapi::common::types::Vector3D* temp = offset_;
  offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint3DModel.offset)
  
  ::kiapi::common::types::Vector3D* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::_internal_mutable_offset() {
  
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector3D>(GetArenaForAllocation());
    offset_ = p;
  }
  return offset_;
}
inline ::kiapi::common::types::Vector3D* Footprint3DModel::mutable_offset() {
  ::kiapi::common::types::Vector3D* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint3DModel.offset)
  return _msg;
}
inline void Footprint3DModel::set_allocated_offset(::kiapi::common::types::Vector3D* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint3DModel.offset)
}

// bool visible = 5;
inline void Footprint3DModel::clear_visible() {
  visible_ = false;
}
inline bool Footprint3DModel::_internal_visible() const {
  return visible_;
}
inline bool Footprint3DModel::visible() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint3DModel.visible)
  return _internal_visible();
}
inline void Footprint3DModel::_internal_set_visible(bool value) {
  
  visible_ = value;
}
inline void Footprint3DModel::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Footprint3DModel.visible)
}

// double opacity = 6;
inline void Footprint3DModel::clear_opacity() {
  opacity_ = 0;
}
inline double Footprint3DModel::_internal_opacity() const {
  return opacity_;
}
inline double Footprint3DModel::opacity() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint3DModel.opacity)
  return _internal_opacity();
}
inline void Footprint3DModel::_internal_set_opacity(double value) {
  
  opacity_ = value;
}
inline void Footprint3DModel::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Footprint3DModel.opacity)
}

// -------------------------------------------------------------------

// JumperGroup

// repeated string pad_names = 1;
inline int JumperGroup::_internal_pad_names_size() const {
  return pad_names_.size();
}
inline int JumperGroup::pad_names_size() const {
  return _internal_pad_names_size();
}
inline void JumperGroup::clear_pad_names() {
  pad_names_.Clear();
}
inline std::string* JumperGroup::add_pad_names() {
  std::string* _s = _internal_add_pad_names();
  // @@protoc_insertion_point(field_add_mutable:kiapi.board.types.JumperGroup.pad_names)
  return _s;
}
inline const std::string& JumperGroup::_internal_pad_names(int index) const {
  return pad_names_.Get(index);
}
inline const std::string& JumperGroup::pad_names(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.JumperGroup.pad_names)
  return _internal_pad_names(index);
}
inline std::string* JumperGroup::mutable_pad_names(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.JumperGroup.pad_names)
  return pad_names_.Mutable(index);
}
inline void JumperGroup::set_pad_names(int index, const std::string& value) {
  pad_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.JumperGroup.pad_names)
}
inline void JumperGroup::set_pad_names(int index, std::string&& value) {
  pad_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kiapi.board.types.JumperGroup.pad_names)
}
inline void JumperGroup::set_pad_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pad_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kiapi.board.types.JumperGroup.pad_names)
}
inline void JumperGroup::set_pad_names(int index, const char* value, size_t size) {
  pad_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kiapi.board.types.JumperGroup.pad_names)
}
inline std::string* JumperGroup::_internal_add_pad_names() {
  return pad_names_.Add();
}
inline void JumperGroup::add_pad_names(const std::string& value) {
  pad_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kiapi.board.types.JumperGroup.pad_names)
}
inline void JumperGroup::add_pad_names(std::string&& value) {
  pad_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kiapi.board.types.JumperGroup.pad_names)
}
inline void JumperGroup::add_pad_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pad_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kiapi.board.types.JumperGroup.pad_names)
}
inline void JumperGroup::add_pad_names(const char* value, size_t size) {
  pad_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kiapi.board.types.JumperGroup.pad_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JumperGroup::pad_names() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.JumperGroup.pad_names)
  return pad_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JumperGroup::mutable_pad_names() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.JumperGroup.pad_names)
  return &pad_names_;
}

// -------------------------------------------------------------------

// JumperSettings

// bool duplicate_names_are_jumpered = 1;
inline void JumperSettings::clear_duplicate_names_are_jumpered() {
  duplicate_names_are_jumpered_ = false;
}
inline bool JumperSettings::_internal_duplicate_names_are_jumpered() const {
  return duplicate_names_are_jumpered_;
}
inline bool JumperSettings::duplicate_names_are_jumpered() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.JumperSettings.duplicate_names_are_jumpered)
  return _internal_duplicate_names_are_jumpered();
}
inline void JumperSettings::_internal_set_duplicate_names_are_jumpered(bool value) {
  
  duplicate_names_are_jumpered_ = value;
}
inline void JumperSettings::set_duplicate_names_are_jumpered(bool value) {
  _internal_set_duplicate_names_are_jumpered(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.JumperSettings.duplicate_names_are_jumpered)
}

// repeated .kiapi.board.types.JumperGroup groups = 2;
inline int JumperSettings::_internal_groups_size() const {
  return groups_.size();
}
inline int JumperSettings::groups_size() const {
  return _internal_groups_size();
}
inline void JumperSettings::clear_groups() {
  groups_.Clear();
}
inline ::kiapi::board::types::JumperGroup* JumperSettings::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.JumperSettings.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::JumperGroup >*
JumperSettings::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.JumperSettings.groups)
  return &groups_;
}
inline const ::kiapi::board::types::JumperGroup& JumperSettings::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::kiapi::board::types::JumperGroup& JumperSettings::groups(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.JumperSettings.groups)
  return _internal_groups(index);
}
inline ::kiapi::board::types::JumperGroup* JumperSettings::_internal_add_groups() {
  return groups_.Add();
}
inline ::kiapi::board::types::JumperGroup* JumperSettings::add_groups() {
  ::kiapi::board::types::JumperGroup* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:kiapi.board.types.JumperSettings.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::JumperGroup >&
JumperSettings::groups() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.JumperSettings.groups)
  return groups_;
}

// -------------------------------------------------------------------

// Footprint

// .kiapi.common.types.LibraryIdentifier id = 1;
inline bool Footprint::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Footprint::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::LibraryIdentifier& Footprint::_internal_id() const {
  const ::kiapi::common::types::LibraryIdentifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::LibraryIdentifier&>(
      ::kiapi::common::types::_LibraryIdentifier_default_instance_);
}
inline const ::kiapi::common::types::LibraryIdentifier& Footprint::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.id)
  return _internal_id();
}
inline void Footprint::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::LibraryIdentifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.id)
}
inline ::kiapi::common::types::LibraryIdentifier* Footprint::release_id() {
  
  ::kiapi::common::types::LibraryIdentifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::LibraryIdentifier* Footprint::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.id)
  
  ::kiapi::common::types::LibraryIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::LibraryIdentifier* Footprint::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::LibraryIdentifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::LibraryIdentifier* Footprint::mutable_id() {
  ::kiapi::common::types::LibraryIdentifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.id)
  return _msg;
}
inline void Footprint::set_allocated_id(::kiapi::common::types::LibraryIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.id)
}

// .kiapi.common.types.Vector2 anchor = 2;
inline bool Footprint::_internal_has_anchor() const {
  return this != internal_default_instance() && anchor_ != nullptr;
}
inline bool Footprint::has_anchor() const {
  return _internal_has_anchor();
}
inline const ::kiapi::common::types::Vector2& Footprint::_internal_anchor() const {
  const ::kiapi::common::types::Vector2* p = anchor_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& Footprint::anchor() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.anchor)
  return _internal_anchor();
}
inline void Footprint::unsafe_arena_set_allocated_anchor(
    ::kiapi::common::types::Vector2* anchor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_);
  }
  anchor_ = anchor;
  if (anchor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.anchor)
}
inline ::kiapi::common::types::Vector2* Footprint::release_anchor() {
  
  ::kiapi::common::types::Vector2* temp = anchor_;
  anchor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* Footprint::unsafe_arena_release_anchor() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.anchor)
  
  ::kiapi::common::types::Vector2* temp = anchor_;
  anchor_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* Footprint::_internal_mutable_anchor() {
  
  if (anchor_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    anchor_ = p;
  }
  return anchor_;
}
inline ::kiapi::common::types::Vector2* Footprint::mutable_anchor() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_anchor();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.anchor)
  return _msg;
}
inline void Footprint::set_allocated_anchor(::kiapi::common::types::Vector2* anchor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_);
  }
  if (anchor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor));
    if (message_arena != submessage_arena) {
      anchor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor, submessage_arena);
    }
    
  } else {
    
  }
  anchor_ = anchor;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.anchor)
}

// .kiapi.board.types.FootprintAttributes attributes = 3;
inline bool Footprint::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool Footprint::has_attributes() const {
  return _internal_has_attributes();
}
inline void Footprint::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::kiapi::board::types::FootprintAttributes& Footprint::_internal_attributes() const {
  const ::kiapi::board::types::FootprintAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::FootprintAttributes&>(
      ::kiapi::board::types::_FootprintAttributes_default_instance_);
}
inline const ::kiapi::board::types::FootprintAttributes& Footprint::attributes() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.attributes)
  return _internal_attributes();
}
inline void Footprint::unsafe_arena_set_allocated_attributes(
    ::kiapi::board::types::FootprintAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.attributes)
}
inline ::kiapi::board::types::FootprintAttributes* Footprint::release_attributes() {
  
  ::kiapi::board::types::FootprintAttributes* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::FootprintAttributes* Footprint::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.attributes)
  
  ::kiapi::board::types::FootprintAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::FootprintAttributes* Footprint::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::FootprintAttributes>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::kiapi::board::types::FootprintAttributes* Footprint::mutable_attributes() {
  ::kiapi::board::types::FootprintAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.attributes)
  return _msg;
}
inline void Footprint::set_allocated_attributes(::kiapi::board::types::FootprintAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::FootprintAttributes>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.attributes)
}

// .kiapi.board.types.FootprintDesignRuleOverrides overrides = 4;
inline bool Footprint::_internal_has_overrides() const {
  return this != internal_default_instance() && overrides_ != nullptr;
}
inline bool Footprint::has_overrides() const {
  return _internal_has_overrides();
}
inline void Footprint::clear_overrides() {
  if (GetArenaForAllocation() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
}
inline const ::kiapi::board::types::FootprintDesignRuleOverrides& Footprint::_internal_overrides() const {
  const ::kiapi::board::types::FootprintDesignRuleOverrides* p = overrides_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::FootprintDesignRuleOverrides&>(
      ::kiapi::board::types::_FootprintDesignRuleOverrides_default_instance_);
}
inline const ::kiapi::board::types::FootprintDesignRuleOverrides& Footprint::overrides() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.overrides)
  return _internal_overrides();
}
inline void Footprint::unsafe_arena_set_allocated_overrides(
    ::kiapi::board::types::FootprintDesignRuleOverrides* overrides) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  overrides_ = overrides;
  if (overrides) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.overrides)
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* Footprint::release_overrides() {
  
  ::kiapi::board::types::FootprintDesignRuleOverrides* temp = overrides_;
  overrides_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* Footprint::unsafe_arena_release_overrides() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.overrides)
  
  ::kiapi::board::types::FootprintDesignRuleOverrides* temp = overrides_;
  overrides_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* Footprint::_internal_mutable_overrides() {
  
  if (overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::FootprintDesignRuleOverrides>(GetArenaForAllocation());
    overrides_ = p;
  }
  return overrides_;
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* Footprint::mutable_overrides() {
  ::kiapi::board::types::FootprintDesignRuleOverrides* _msg = _internal_mutable_overrides();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.overrides)
  return _msg;
}
inline void Footprint::set_allocated_overrides(::kiapi::board::types::FootprintDesignRuleOverrides* overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete overrides_;
  }
  if (overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::FootprintDesignRuleOverrides>::GetOwningArena(overrides);
    if (message_arena != submessage_arena) {
      overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overrides, submessage_arena);
    }
    
  } else {
    
  }
  overrides_ = overrides;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.overrides)
}

// repeated .kiapi.board.types.NetTieDefinition net_ties = 5;
inline int Footprint::_internal_net_ties_size() const {
  return net_ties_.size();
}
inline int Footprint::net_ties_size() const {
  return _internal_net_ties_size();
}
inline void Footprint::clear_net_ties() {
  net_ties_.Clear();
}
inline ::kiapi::board::types::NetTieDefinition* Footprint::mutable_net_ties(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.net_ties)
  return net_ties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetTieDefinition >*
Footprint::mutable_net_ties() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.Footprint.net_ties)
  return &net_ties_;
}
inline const ::kiapi::board::types::NetTieDefinition& Footprint::_internal_net_ties(int index) const {
  return net_ties_.Get(index);
}
inline const ::kiapi::board::types::NetTieDefinition& Footprint::net_ties(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.net_ties)
  return _internal_net_ties(index);
}
inline ::kiapi::board::types::NetTieDefinition* Footprint::_internal_add_net_ties() {
  return net_ties_.Add();
}
inline ::kiapi::board::types::NetTieDefinition* Footprint::add_net_ties() {
  ::kiapi::board::types::NetTieDefinition* _add = _internal_add_net_ties();
  // @@protoc_insertion_point(field_add:kiapi.board.types.Footprint.net_ties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetTieDefinition >&
Footprint::net_ties() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.Footprint.net_ties)
  return net_ties_;
}

// repeated .kiapi.board.types.BoardLayer private_layers = 6;
inline int Footprint::_internal_private_layers_size() const {
  return private_layers_.size();
}
inline int Footprint::private_layers_size() const {
  return _internal_private_layers_size();
}
inline void Footprint::clear_private_layers() {
  private_layers_.Clear();
}
inline ::kiapi::board::types::BoardLayer Footprint::_internal_private_layers(int index) const {
  return static_cast< ::kiapi::board::types::BoardLayer >(private_layers_.Get(index));
}
inline ::kiapi::board::types::BoardLayer Footprint::private_layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.private_layers)
  return _internal_private_layers(index);
}
inline void Footprint::set_private_layers(int index, ::kiapi::board::types::BoardLayer value) {
  private_layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.Footprint.private_layers)
}
inline void Footprint::_internal_add_private_layers(::kiapi::board::types::BoardLayer value) {
  private_layers_.Add(value);
}
inline void Footprint::add_private_layers(::kiapi::board::types::BoardLayer value) {
  _internal_add_private_layers(value);
  // @@protoc_insertion_point(field_add:kiapi.board.types.Footprint.private_layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Footprint::private_layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.Footprint.private_layers)
  return private_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Footprint::_internal_mutable_private_layers() {
  return &private_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Footprint::mutable_private_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.Footprint.private_layers)
  return _internal_mutable_private_layers();
}

// .kiapi.board.types.Field reference_field = 7;
inline bool Footprint::_internal_has_reference_field() const {
  return this != internal_default_instance() && reference_field_ != nullptr;
}
inline bool Footprint::has_reference_field() const {
  return _internal_has_reference_field();
}
inline void Footprint::clear_reference_field() {
  if (GetArenaForAllocation() == nullptr && reference_field_ != nullptr) {
    delete reference_field_;
  }
  reference_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& Footprint::_internal_reference_field() const {
  const ::kiapi::board::types::Field* p = reference_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& Footprint::reference_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.reference_field)
  return _internal_reference_field();
}
inline void Footprint::unsafe_arena_set_allocated_reference_field(
    ::kiapi::board::types::Field* reference_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_field_);
  }
  reference_field_ = reference_field;
  if (reference_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.reference_field)
}
inline ::kiapi::board::types::Field* Footprint::release_reference_field() {
  
  ::kiapi::board::types::Field* temp = reference_field_;
  reference_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::unsafe_arena_release_reference_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.reference_field)
  
  ::kiapi::board::types::Field* temp = reference_field_;
  reference_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::_internal_mutable_reference_field() {
  
  if (reference_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    reference_field_ = p;
  }
  return reference_field_;
}
inline ::kiapi::board::types::Field* Footprint::mutable_reference_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_reference_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.reference_field)
  return _msg;
}
inline void Footprint::set_allocated_reference_field(::kiapi::board::types::Field* reference_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reference_field_;
  }
  if (reference_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(reference_field);
    if (message_arena != submessage_arena) {
      reference_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_field, submessage_arena);
    }
    
  } else {
    
  }
  reference_field_ = reference_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.reference_field)
}

// .kiapi.board.types.Field value_field = 8;
inline bool Footprint::_internal_has_value_field() const {
  return this != internal_default_instance() && value_field_ != nullptr;
}
inline bool Footprint::has_value_field() const {
  return _internal_has_value_field();
}
inline void Footprint::clear_value_field() {
  if (GetArenaForAllocation() == nullptr && value_field_ != nullptr) {
    delete value_field_;
  }
  value_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& Footprint::_internal_value_field() const {
  const ::kiapi::board::types::Field* p = value_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& Footprint::value_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.value_field)
  return _internal_value_field();
}
inline void Footprint::unsafe_arena_set_allocated_value_field(
    ::kiapi::board::types::Field* value_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_field_);
  }
  value_field_ = value_field;
  if (value_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.value_field)
}
inline ::kiapi::board::types::Field* Footprint::release_value_field() {
  
  ::kiapi::board::types::Field* temp = value_field_;
  value_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::unsafe_arena_release_value_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.value_field)
  
  ::kiapi::board::types::Field* temp = value_field_;
  value_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::_internal_mutable_value_field() {
  
  if (value_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    value_field_ = p;
  }
  return value_field_;
}
inline ::kiapi::board::types::Field* Footprint::mutable_value_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_value_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.value_field)
  return _msg;
}
inline void Footprint::set_allocated_value_field(::kiapi::board::types::Field* value_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_field_;
  }
  if (value_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(value_field);
    if (message_arena != submessage_arena) {
      value_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_field, submessage_arena);
    }
    
  } else {
    
  }
  value_field_ = value_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.value_field)
}

// .kiapi.board.types.Field datasheet_field = 9;
inline bool Footprint::_internal_has_datasheet_field() const {
  return this != internal_default_instance() && datasheet_field_ != nullptr;
}
inline bool Footprint::has_datasheet_field() const {
  return _internal_has_datasheet_field();
}
inline void Footprint::clear_datasheet_field() {
  if (GetArenaForAllocation() == nullptr && datasheet_field_ != nullptr) {
    delete datasheet_field_;
  }
  datasheet_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& Footprint::_internal_datasheet_field() const {
  const ::kiapi::board::types::Field* p = datasheet_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& Footprint::datasheet_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.datasheet_field)
  return _internal_datasheet_field();
}
inline void Footprint::unsafe_arena_set_allocated_datasheet_field(
    ::kiapi::board::types::Field* datasheet_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datasheet_field_);
  }
  datasheet_field_ = datasheet_field;
  if (datasheet_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.datasheet_field)
}
inline ::kiapi::board::types::Field* Footprint::release_datasheet_field() {
  
  ::kiapi::board::types::Field* temp = datasheet_field_;
  datasheet_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::unsafe_arena_release_datasheet_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.datasheet_field)
  
  ::kiapi::board::types::Field* temp = datasheet_field_;
  datasheet_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::_internal_mutable_datasheet_field() {
  
  if (datasheet_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    datasheet_field_ = p;
  }
  return datasheet_field_;
}
inline ::kiapi::board::types::Field* Footprint::mutable_datasheet_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_datasheet_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.datasheet_field)
  return _msg;
}
inline void Footprint::set_allocated_datasheet_field(::kiapi::board::types::Field* datasheet_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete datasheet_field_;
  }
  if (datasheet_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(datasheet_field);
    if (message_arena != submessage_arena) {
      datasheet_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datasheet_field, submessage_arena);
    }
    
  } else {
    
  }
  datasheet_field_ = datasheet_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.datasheet_field)
}

// .kiapi.board.types.Field description_field = 10;
inline bool Footprint::_internal_has_description_field() const {
  return this != internal_default_instance() && description_field_ != nullptr;
}
inline bool Footprint::has_description_field() const {
  return _internal_has_description_field();
}
inline void Footprint::clear_description_field() {
  if (GetArenaForAllocation() == nullptr && description_field_ != nullptr) {
    delete description_field_;
  }
  description_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& Footprint::_internal_description_field() const {
  const ::kiapi::board::types::Field* p = description_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& Footprint::description_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.description_field)
  return _internal_description_field();
}
inline void Footprint::unsafe_arena_set_allocated_description_field(
    ::kiapi::board::types::Field* description_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_field_);
  }
  description_field_ = description_field;
  if (description_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.description_field)
}
inline ::kiapi::board::types::Field* Footprint::release_description_field() {
  
  ::kiapi::board::types::Field* temp = description_field_;
  description_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::unsafe_arena_release_description_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.description_field)
  
  ::kiapi::board::types::Field* temp = description_field_;
  description_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* Footprint::_internal_mutable_description_field() {
  
  if (description_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    description_field_ = p;
  }
  return description_field_;
}
inline ::kiapi::board::types::Field* Footprint::mutable_description_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_description_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.description_field)
  return _msg;
}
inline void Footprint::set_allocated_description_field(::kiapi::board::types::Field* description_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete description_field_;
  }
  if (description_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(description_field);
    if (message_arena != submessage_arena) {
      description_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description_field, submessage_arena);
    }
    
  } else {
    
  }
  description_field_ = description_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.description_field)
}

// repeated .google.protobuf.Any items = 11;
inline int Footprint::_internal_items_size() const {
  return items_.size();
}
inline int Footprint::items_size() const {
  return _internal_items_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Footprint::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
Footprint::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.types.Footprint.items)
  return &items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Footprint::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Footprint::items(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.items)
  return _internal_items(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Footprint::_internal_add_items() {
  return items_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Footprint::add_items() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:kiapi.board.types.Footprint.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
Footprint::items() const {
  // @@protoc_insertion_point(field_list:kiapi.board.types.Footprint.items)
  return items_;
}

// .kiapi.board.types.JumperSettings jumpers = 12;
inline bool Footprint::_internal_has_jumpers() const {
  return this != internal_default_instance() && jumpers_ != nullptr;
}
inline bool Footprint::has_jumpers() const {
  return _internal_has_jumpers();
}
inline void Footprint::clear_jumpers() {
  if (GetArenaForAllocation() == nullptr && jumpers_ != nullptr) {
    delete jumpers_;
  }
  jumpers_ = nullptr;
}
inline const ::kiapi::board::types::JumperSettings& Footprint::_internal_jumpers() const {
  const ::kiapi::board::types::JumperSettings* p = jumpers_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::JumperSettings&>(
      ::kiapi::board::types::_JumperSettings_default_instance_);
}
inline const ::kiapi::board::types::JumperSettings& Footprint::jumpers() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.Footprint.jumpers)
  return _internal_jumpers();
}
inline void Footprint::unsafe_arena_set_allocated_jumpers(
    ::kiapi::board::types::JumperSettings* jumpers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jumpers_);
  }
  jumpers_ = jumpers;
  if (jumpers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.Footprint.jumpers)
}
inline ::kiapi::board::types::JumperSettings* Footprint::release_jumpers() {
  
  ::kiapi::board::types::JumperSettings* temp = jumpers_;
  jumpers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::JumperSettings* Footprint::unsafe_arena_release_jumpers() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.Footprint.jumpers)
  
  ::kiapi::board::types::JumperSettings* temp = jumpers_;
  jumpers_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::JumperSettings* Footprint::_internal_mutable_jumpers() {
  
  if (jumpers_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::JumperSettings>(GetArenaForAllocation());
    jumpers_ = p;
  }
  return jumpers_;
}
inline ::kiapi::board::types::JumperSettings* Footprint::mutable_jumpers() {
  ::kiapi::board::types::JumperSettings* _msg = _internal_mutable_jumpers();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.Footprint.jumpers)
  return _msg;
}
inline void Footprint::set_allocated_jumpers(::kiapi::board::types::JumperSettings* jumpers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete jumpers_;
  }
  if (jumpers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::JumperSettings>::GetOwningArena(jumpers);
    if (message_arena != submessage_arena) {
      jumpers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jumpers, submessage_arena);
    }
    
  } else {
    
  }
  jumpers_ = jumpers;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Footprint.jumpers)
}

// -------------------------------------------------------------------

// FootprintInstance

// .kiapi.common.types.KIID id = 1;
inline bool FootprintInstance::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool FootprintInstance::has_id() const {
  return _internal_has_id();
}
inline const ::kiapi::common::types::KIID& FootprintInstance::_internal_id() const {
  const ::kiapi::common::types::KIID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::KIID&>(
      ::kiapi::common::types::_KIID_default_instance_);
}
inline const ::kiapi::common::types::KIID& FootprintInstance::id() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.id)
  return _internal_id();
}
inline void FootprintInstance::unsafe_arena_set_allocated_id(
    ::kiapi::common::types::KIID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.id)
}
inline ::kiapi::common::types::KIID* FootprintInstance::release_id() {
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::KIID* FootprintInstance::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.id)
  
  ::kiapi::common::types::KIID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::KIID* FootprintInstance::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::KIID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::kiapi::common::types::KIID* FootprintInstance::mutable_id() {
  ::kiapi::common::types::KIID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.id)
  return _msg;
}
inline void FootprintInstance::set_allocated_id(::kiapi::common::types::KIID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.id)
}

// .kiapi.common.types.Vector2 position = 2;
inline bool FootprintInstance::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool FootprintInstance::has_position() const {
  return _internal_has_position();
}
inline const ::kiapi::common::types::Vector2& FootprintInstance::_internal_position() const {
  const ::kiapi::common::types::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& FootprintInstance::position() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.position)
  return _internal_position();
}
inline void FootprintInstance::unsafe_arena_set_allocated_position(
    ::kiapi::common::types::Vector2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.position)
}
inline ::kiapi::common::types::Vector2* FootprintInstance::release_position() {
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* FootprintInstance::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.position)
  
  ::kiapi::common::types::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* FootprintInstance::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::kiapi::common::types::Vector2* FootprintInstance::mutable_position() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.position)
  return _msg;
}
inline void FootprintInstance::set_allocated_position(::kiapi::common::types::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.position)
}

// .kiapi.common.types.Angle orientation = 3;
inline bool FootprintInstance::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool FootprintInstance::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::kiapi::common::types::Angle& FootprintInstance::_internal_orientation() const {
  const ::kiapi::common::types::Angle* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Angle&>(
      ::kiapi::common::types::_Angle_default_instance_);
}
inline const ::kiapi::common::types::Angle& FootprintInstance::orientation() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.orientation)
  return _internal_orientation();
}
inline void FootprintInstance::unsafe_arena_set_allocated_orientation(
    ::kiapi::common::types::Angle* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.orientation)
}
inline ::kiapi::common::types::Angle* FootprintInstance::release_orientation() {
  
  ::kiapi::common::types::Angle* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Angle* FootprintInstance::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.orientation)
  
  ::kiapi::common::types::Angle* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Angle* FootprintInstance::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Angle>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::kiapi::common::types::Angle* FootprintInstance::mutable_orientation() {
  ::kiapi::common::types::Angle* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.orientation)
  return _msg;
}
inline void FootprintInstance::set_allocated_orientation(::kiapi::common::types::Angle* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.orientation)
}

// .kiapi.board.types.BoardLayer layer = 4;
inline void FootprintInstance::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer FootprintInstance::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer FootprintInstance::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.layer)
  return _internal_layer();
}
inline void FootprintInstance::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void FootprintInstance::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintInstance.layer)
}

// .kiapi.common.types.LockedState locked = 5;
inline void FootprintInstance::clear_locked() {
  locked_ = 0;
}
inline ::kiapi::common::types::LockedState FootprintInstance::_internal_locked() const {
  return static_cast< ::kiapi::common::types::LockedState >(locked_);
}
inline ::kiapi::common::types::LockedState FootprintInstance::locked() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.locked)
  return _internal_locked();
}
inline void FootprintInstance::_internal_set_locked(::kiapi::common::types::LockedState value) {
  
  locked_ = value;
}
inline void FootprintInstance::set_locked(::kiapi::common::types::LockedState value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:kiapi.board.types.FootprintInstance.locked)
}

// .kiapi.board.types.Footprint definition = 6;
inline bool FootprintInstance::_internal_has_definition() const {
  return this != internal_default_instance() && definition_ != nullptr;
}
inline bool FootprintInstance::has_definition() const {
  return _internal_has_definition();
}
inline void FootprintInstance::clear_definition() {
  if (GetArenaForAllocation() == nullptr && definition_ != nullptr) {
    delete definition_;
  }
  definition_ = nullptr;
}
inline const ::kiapi::board::types::Footprint& FootprintInstance::_internal_definition() const {
  const ::kiapi::board::types::Footprint* p = definition_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Footprint&>(
      ::kiapi::board::types::_Footprint_default_instance_);
}
inline const ::kiapi::board::types::Footprint& FootprintInstance::definition() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.definition)
  return _internal_definition();
}
inline void FootprintInstance::unsafe_arena_set_allocated_definition(
    ::kiapi::board::types::Footprint* definition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(definition_);
  }
  definition_ = definition;
  if (definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.definition)
}
inline ::kiapi::board::types::Footprint* FootprintInstance::release_definition() {
  
  ::kiapi::board::types::Footprint* temp = definition_;
  definition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Footprint* FootprintInstance::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.definition)
  
  ::kiapi::board::types::Footprint* temp = definition_;
  definition_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Footprint* FootprintInstance::_internal_mutable_definition() {
  
  if (definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Footprint>(GetArenaForAllocation());
    definition_ = p;
  }
  return definition_;
}
inline ::kiapi::board::types::Footprint* FootprintInstance::mutable_definition() {
  ::kiapi::board::types::Footprint* _msg = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.definition)
  return _msg;
}
inline void FootprintInstance::set_allocated_definition(::kiapi::board::types::Footprint* definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete definition_;
  }
  if (definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Footprint>::GetOwningArena(definition);
    if (message_arena != submessage_arena) {
      definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, definition, submessage_arena);
    }
    
  } else {
    
  }
  definition_ = definition;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.definition)
}

// .kiapi.board.types.Field reference_field = 7;
inline bool FootprintInstance::_internal_has_reference_field() const {
  return this != internal_default_instance() && reference_field_ != nullptr;
}
inline bool FootprintInstance::has_reference_field() const {
  return _internal_has_reference_field();
}
inline void FootprintInstance::clear_reference_field() {
  if (GetArenaForAllocation() == nullptr && reference_field_ != nullptr) {
    delete reference_field_;
  }
  reference_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& FootprintInstance::_internal_reference_field() const {
  const ::kiapi::board::types::Field* p = reference_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& FootprintInstance::reference_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.reference_field)
  return _internal_reference_field();
}
inline void FootprintInstance::unsafe_arena_set_allocated_reference_field(
    ::kiapi::board::types::Field* reference_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_field_);
  }
  reference_field_ = reference_field;
  if (reference_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.reference_field)
}
inline ::kiapi::board::types::Field* FootprintInstance::release_reference_field() {
  
  ::kiapi::board::types::Field* temp = reference_field_;
  reference_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::unsafe_arena_release_reference_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.reference_field)
  
  ::kiapi::board::types::Field* temp = reference_field_;
  reference_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::_internal_mutable_reference_field() {
  
  if (reference_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    reference_field_ = p;
  }
  return reference_field_;
}
inline ::kiapi::board::types::Field* FootprintInstance::mutable_reference_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_reference_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.reference_field)
  return _msg;
}
inline void FootprintInstance::set_allocated_reference_field(::kiapi::board::types::Field* reference_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reference_field_;
  }
  if (reference_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(reference_field);
    if (message_arena != submessage_arena) {
      reference_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_field, submessage_arena);
    }
    
  } else {
    
  }
  reference_field_ = reference_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.reference_field)
}

// .kiapi.board.types.Field value_field = 8;
inline bool FootprintInstance::_internal_has_value_field() const {
  return this != internal_default_instance() && value_field_ != nullptr;
}
inline bool FootprintInstance::has_value_field() const {
  return _internal_has_value_field();
}
inline void FootprintInstance::clear_value_field() {
  if (GetArenaForAllocation() == nullptr && value_field_ != nullptr) {
    delete value_field_;
  }
  value_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& FootprintInstance::_internal_value_field() const {
  const ::kiapi::board::types::Field* p = value_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& FootprintInstance::value_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.value_field)
  return _internal_value_field();
}
inline void FootprintInstance::unsafe_arena_set_allocated_value_field(
    ::kiapi::board::types::Field* value_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_field_);
  }
  value_field_ = value_field;
  if (value_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.value_field)
}
inline ::kiapi::board::types::Field* FootprintInstance::release_value_field() {
  
  ::kiapi::board::types::Field* temp = value_field_;
  value_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::unsafe_arena_release_value_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.value_field)
  
  ::kiapi::board::types::Field* temp = value_field_;
  value_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::_internal_mutable_value_field() {
  
  if (value_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    value_field_ = p;
  }
  return value_field_;
}
inline ::kiapi::board::types::Field* FootprintInstance::mutable_value_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_value_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.value_field)
  return _msg;
}
inline void FootprintInstance::set_allocated_value_field(::kiapi::board::types::Field* value_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_field_;
  }
  if (value_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(value_field);
    if (message_arena != submessage_arena) {
      value_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_field, submessage_arena);
    }
    
  } else {
    
  }
  value_field_ = value_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.value_field)
}

// .kiapi.board.types.Field datasheet_field = 9;
inline bool FootprintInstance::_internal_has_datasheet_field() const {
  return this != internal_default_instance() && datasheet_field_ != nullptr;
}
inline bool FootprintInstance::has_datasheet_field() const {
  return _internal_has_datasheet_field();
}
inline void FootprintInstance::clear_datasheet_field() {
  if (GetArenaForAllocation() == nullptr && datasheet_field_ != nullptr) {
    delete datasheet_field_;
  }
  datasheet_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& FootprintInstance::_internal_datasheet_field() const {
  const ::kiapi::board::types::Field* p = datasheet_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& FootprintInstance::datasheet_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.datasheet_field)
  return _internal_datasheet_field();
}
inline void FootprintInstance::unsafe_arena_set_allocated_datasheet_field(
    ::kiapi::board::types::Field* datasheet_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datasheet_field_);
  }
  datasheet_field_ = datasheet_field;
  if (datasheet_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.datasheet_field)
}
inline ::kiapi::board::types::Field* FootprintInstance::release_datasheet_field() {
  
  ::kiapi::board::types::Field* temp = datasheet_field_;
  datasheet_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::unsafe_arena_release_datasheet_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.datasheet_field)
  
  ::kiapi::board::types::Field* temp = datasheet_field_;
  datasheet_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::_internal_mutable_datasheet_field() {
  
  if (datasheet_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    datasheet_field_ = p;
  }
  return datasheet_field_;
}
inline ::kiapi::board::types::Field* FootprintInstance::mutable_datasheet_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_datasheet_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.datasheet_field)
  return _msg;
}
inline void FootprintInstance::set_allocated_datasheet_field(::kiapi::board::types::Field* datasheet_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete datasheet_field_;
  }
  if (datasheet_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(datasheet_field);
    if (message_arena != submessage_arena) {
      datasheet_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datasheet_field, submessage_arena);
    }
    
  } else {
    
  }
  datasheet_field_ = datasheet_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.datasheet_field)
}

// .kiapi.board.types.Field description_field = 10;
inline bool FootprintInstance::_internal_has_description_field() const {
  return this != internal_default_instance() && description_field_ != nullptr;
}
inline bool FootprintInstance::has_description_field() const {
  return _internal_has_description_field();
}
inline void FootprintInstance::clear_description_field() {
  if (GetArenaForAllocation() == nullptr && description_field_ != nullptr) {
    delete description_field_;
  }
  description_field_ = nullptr;
}
inline const ::kiapi::board::types::Field& FootprintInstance::_internal_description_field() const {
  const ::kiapi::board::types::Field* p = description_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::Field&>(
      ::kiapi::board::types::_Field_default_instance_);
}
inline const ::kiapi::board::types::Field& FootprintInstance::description_field() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.description_field)
  return _internal_description_field();
}
inline void FootprintInstance::unsafe_arena_set_allocated_description_field(
    ::kiapi::board::types::Field* description_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_field_);
  }
  description_field_ = description_field;
  if (description_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.description_field)
}
inline ::kiapi::board::types::Field* FootprintInstance::release_description_field() {
  
  ::kiapi::board::types::Field* temp = description_field_;
  description_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::unsafe_arena_release_description_field() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.description_field)
  
  ::kiapi::board::types::Field* temp = description_field_;
  description_field_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::Field* FootprintInstance::_internal_mutable_description_field() {
  
  if (description_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::Field>(GetArenaForAllocation());
    description_field_ = p;
  }
  return description_field_;
}
inline ::kiapi::board::types::Field* FootprintInstance::mutable_description_field() {
  ::kiapi::board::types::Field* _msg = _internal_mutable_description_field();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.description_field)
  return _msg;
}
inline void FootprintInstance::set_allocated_description_field(::kiapi::board::types::Field* description_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete description_field_;
  }
  if (description_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::Field>::GetOwningArena(description_field);
    if (message_arena != submessage_arena) {
      description_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description_field, submessage_arena);
    }
    
  } else {
    
  }
  description_field_ = description_field;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.description_field)
}

// .kiapi.board.types.FootprintAttributes attributes = 11;
inline bool FootprintInstance::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool FootprintInstance::has_attributes() const {
  return _internal_has_attributes();
}
inline void FootprintInstance::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::kiapi::board::types::FootprintAttributes& FootprintInstance::_internal_attributes() const {
  const ::kiapi::board::types::FootprintAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::FootprintAttributes&>(
      ::kiapi::board::types::_FootprintAttributes_default_instance_);
}
inline const ::kiapi::board::types::FootprintAttributes& FootprintInstance::attributes() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.attributes)
  return _internal_attributes();
}
inline void FootprintInstance::unsafe_arena_set_allocated_attributes(
    ::kiapi::board::types::FootprintAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.attributes)
}
inline ::kiapi::board::types::FootprintAttributes* FootprintInstance::release_attributes() {
  
  ::kiapi::board::types::FootprintAttributes* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::FootprintAttributes* FootprintInstance::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.attributes)
  
  ::kiapi::board::types::FootprintAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::FootprintAttributes* FootprintInstance::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::FootprintAttributes>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::kiapi::board::types::FootprintAttributes* FootprintInstance::mutable_attributes() {
  ::kiapi::board::types::FootprintAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.attributes)
  return _msg;
}
inline void FootprintInstance::set_allocated_attributes(::kiapi::board::types::FootprintAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::FootprintAttributes>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.attributes)
}

// .kiapi.board.types.FootprintDesignRuleOverrides overrides = 12;
inline bool FootprintInstance::_internal_has_overrides() const {
  return this != internal_default_instance() && overrides_ != nullptr;
}
inline bool FootprintInstance::has_overrides() const {
  return _internal_has_overrides();
}
inline void FootprintInstance::clear_overrides() {
  if (GetArenaForAllocation() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
}
inline const ::kiapi::board::types::FootprintDesignRuleOverrides& FootprintInstance::_internal_overrides() const {
  const ::kiapi::board::types::FootprintDesignRuleOverrides* p = overrides_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::types::FootprintDesignRuleOverrides&>(
      ::kiapi::board::types::_FootprintDesignRuleOverrides_default_instance_);
}
inline const ::kiapi::board::types::FootprintDesignRuleOverrides& FootprintInstance::overrides() const {
  // @@protoc_insertion_point(field_get:kiapi.board.types.FootprintInstance.overrides)
  return _internal_overrides();
}
inline void FootprintInstance::unsafe_arena_set_allocated_overrides(
    ::kiapi::board::types::FootprintDesignRuleOverrides* overrides) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  overrides_ = overrides;
  if (overrides) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.types.FootprintInstance.overrides)
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* FootprintInstance::release_overrides() {
  
  ::kiapi::board::types::FootprintDesignRuleOverrides* temp = overrides_;
  overrides_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* FootprintInstance::unsafe_arena_release_overrides() {
  // @@protoc_insertion_point(field_release:kiapi.board.types.FootprintInstance.overrides)
  
  ::kiapi::board::types::FootprintDesignRuleOverrides* temp = overrides_;
  overrides_ = nullptr;
  return temp;
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* FootprintInstance::_internal_mutable_overrides() {
  
  if (overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::types::FootprintDesignRuleOverrides>(GetArenaForAllocation());
    overrides_ = p;
  }
  return overrides_;
}
inline ::kiapi::board::types::FootprintDesignRuleOverrides* FootprintInstance::mutable_overrides() {
  ::kiapi::board::types::FootprintDesignRuleOverrides* _msg = _internal_mutable_overrides();
  // @@protoc_insertion_point(field_mutable:kiapi.board.types.FootprintInstance.overrides)
  return _msg;
}
inline void FootprintInstance::set_allocated_overrides(::kiapi::board::types::FootprintDesignRuleOverrides* overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete overrides_;
  }
  if (overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::FootprintDesignRuleOverrides>::GetOwningArena(overrides);
    if (message_arena != submessage_arena) {
      overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overrides, submessage_arena);
    }
    
  } else {
    
  }
  overrides_ = overrides;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.FootprintInstance.overrides)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace board
}  // namespace kiapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kiapi::board::types::BoardLayer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::BoardLayer>() {
  return ::kiapi::board::types::BoardLayer_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::PadStackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::PadStackType>() {
  return ::kiapi::board::types::PadStackType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::UnconnectedLayerRemoval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::UnconnectedLayerRemoval>() {
  return ::kiapi::board::types::UnconnectedLayerRemoval_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::PadStackShape> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::PadStackShape>() {
  return ::kiapi::board::types::PadStackShape_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ZoneConnectionStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ZoneConnectionStyle>() {
  return ::kiapi::board::types::ZoneConnectionStyle_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::SolderMaskMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::SolderMaskMode>() {
  return ::kiapi::board::types::SolderMaskMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ViaCoveringMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ViaCoveringMode>() {
  return ::kiapi::board::types::ViaCoveringMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ViaPluggingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ViaPluggingMode>() {
  return ::kiapi::board::types::ViaPluggingMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::SolderPasteMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::SolderPasteMode>() {
  return ::kiapi::board::types::SolderPasteMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::DrillShape> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::DrillShape>() {
  return ::kiapi::board::types::DrillShape_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ViaDrillCappingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ViaDrillCappingMode>() {
  return ::kiapi::board::types::ViaDrillCappingMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ViaDrillFillingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ViaDrillFillingMode>() {
  return ::kiapi::board::types::ViaDrillFillingMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ViaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ViaType>() {
  return ::kiapi::board::types::ViaType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::PadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::PadType>() {
  return ::kiapi::board::types::PadType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::CustomPadShapeZoneFillStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::CustomPadShapeZoneFillStrategy>() {
  return ::kiapi::board::types::CustomPadShapeZoneFillStrategy_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ZoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ZoneType>() {
  return ::kiapi::board::types::ZoneType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::TeardropType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::TeardropType>() {
  return ::kiapi::board::types::TeardropType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::IslandRemovalMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::IslandRemovalMode>() {
  return ::kiapi::board::types::IslandRemovalMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ZoneFillMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ZoneFillMode>() {
  return ::kiapi::board::types::ZoneFillMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ZoneHatchSmoothing> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ZoneHatchSmoothing>() {
  return ::kiapi::board::types::ZoneHatchSmoothing_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ZoneHatchFillBorderMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ZoneHatchFillBorderMode>() {
  return ::kiapi::board::types::ZoneHatchFillBorderMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::PlacementRuleSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::PlacementRuleSourceType>() {
  return ::kiapi::board::types::PlacementRuleSourceType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::ZoneBorderStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::ZoneBorderStyle>() {
  return ::kiapi::board::types::ZoneBorderStyle_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::DimensionTextBorderStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::DimensionTextBorderStyle>() {
  return ::kiapi::board::types::DimensionTextBorderStyle_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::DimensionUnitFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::DimensionUnitFormat>() {
  return ::kiapi::board::types::DimensionUnitFormat_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::DimensionArrowDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::DimensionArrowDirection>() {
  return ::kiapi::board::types::DimensionArrowDirection_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::DimensionPrecision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::DimensionPrecision>() {
  return ::kiapi::board::types::DimensionPrecision_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::DimensionTextPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::DimensionTextPosition>() {
  return ::kiapi::board::types::DimensionTextPosition_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::DimensionUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::DimensionUnit>() {
  return ::kiapi::board::types::DimensionUnit_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::types::FootprintMountingStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::types::FootprintMountingStyle>() {
  return ::kiapi::board::types::FootprintMountingStyle_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_board_2fboard_5ftypes_2eproto
