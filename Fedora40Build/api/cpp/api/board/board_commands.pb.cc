// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board/board_commands.proto

#include "board/board_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace board {
namespace commands {
constexpr GetBoardStackup::GetBoardStackup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr){}
struct GetBoardStackupDefaultTypeInternal {
  constexpr GetBoardStackupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBoardStackupDefaultTypeInternal() {}
  union {
    GetBoardStackup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBoardStackupDefaultTypeInternal _GetBoardStackup_default_instance_;
constexpr BoardStackupResponse::BoardStackupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stackup_(nullptr){}
struct BoardStackupResponseDefaultTypeInternal {
  constexpr BoardStackupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardStackupResponseDefaultTypeInternal() {}
  union {
    BoardStackupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardStackupResponseDefaultTypeInternal _BoardStackupResponse_default_instance_;
constexpr UpdateBoardStackup::UpdateBoardStackup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr)
  , stackup_(nullptr){}
struct UpdateBoardStackupDefaultTypeInternal {
  constexpr UpdateBoardStackupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateBoardStackupDefaultTypeInternal() {}
  union {
    UpdateBoardStackup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateBoardStackupDefaultTypeInternal _UpdateBoardStackup_default_instance_;
constexpr GetGraphicsDefaults::GetGraphicsDefaults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr){}
struct GetGraphicsDefaultsDefaultTypeInternal {
  constexpr GetGraphicsDefaultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetGraphicsDefaultsDefaultTypeInternal() {}
  union {
    GetGraphicsDefaults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetGraphicsDefaultsDefaultTypeInternal _GetGraphicsDefaults_default_instance_;
constexpr GraphicsDefaultsResponse::GraphicsDefaultsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defaults_(nullptr){}
struct GraphicsDefaultsResponseDefaultTypeInternal {
  constexpr GraphicsDefaultsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicsDefaultsResponseDefaultTypeInternal() {}
  union {
    GraphicsDefaultsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicsDefaultsResponseDefaultTypeInternal _GraphicsDefaultsResponse_default_instance_;
constexpr GetBoardOrigin::GetBoardOrigin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr)
  , type_(0)
{}
struct GetBoardOriginDefaultTypeInternal {
  constexpr GetBoardOriginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBoardOriginDefaultTypeInternal() {}
  union {
    GetBoardOrigin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBoardOriginDefaultTypeInternal _GetBoardOrigin_default_instance_;
constexpr SetBoardOrigin::SetBoardOrigin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr)
  , origin_(nullptr)
  , type_(0)
{}
struct SetBoardOriginDefaultTypeInternal {
  constexpr SetBoardOriginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBoardOriginDefaultTypeInternal() {}
  union {
    SetBoardOrigin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBoardOriginDefaultTypeInternal _SetBoardOrigin_default_instance_;
constexpr GetNets::GetNets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : netclass_filter_()
  , board_(nullptr){}
struct GetNetsDefaultTypeInternal {
  constexpr GetNetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetsDefaultTypeInternal() {}
  union {
    GetNets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetsDefaultTypeInternal _GetNets_default_instance_;
constexpr NetsResponse::NetsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nets_(){}
struct NetsResponseDefaultTypeInternal {
  constexpr NetsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetsResponseDefaultTypeInternal() {}
  union {
    NetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetsResponseDefaultTypeInternal _NetsResponse_default_instance_;
constexpr GetItemsByNet::GetItemsByNet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_()
  , _types_cached_byte_size_(0)
  , net_codes_()
  , header_(nullptr){}
struct GetItemsByNetDefaultTypeInternal {
  constexpr GetItemsByNetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetItemsByNetDefaultTypeInternal() {}
  union {
    GetItemsByNet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetItemsByNetDefaultTypeInternal _GetItemsByNet_default_instance_;
constexpr GetItemsByNetClass::GetItemsByNetClass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_()
  , _types_cached_byte_size_(0)
  , net_classes_()
  , header_(nullptr){}
struct GetItemsByNetClassDefaultTypeInternal {
  constexpr GetItemsByNetClassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetItemsByNetClassDefaultTypeInternal() {}
  union {
    GetItemsByNetClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetItemsByNetClassDefaultTypeInternal _GetItemsByNetClass_default_instance_;
constexpr GetNetClassForNets::GetNetClassForNets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_(){}
struct GetNetClassForNetsDefaultTypeInternal {
  constexpr GetNetClassForNetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetClassForNetsDefaultTypeInternal() {}
  union {
    GetNetClassForNets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetClassForNetsDefaultTypeInternal _GetNetClassForNets_default_instance_;
constexpr NetClassForNetsResponse_ClassesEntry_DoNotUse::NetClassForNetsResponse_ClassesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NetClassForNetsResponse_ClassesEntry_DoNotUseDefaultTypeInternal {
  constexpr NetClassForNetsResponse_ClassesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetClassForNetsResponse_ClassesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NetClassForNetsResponse_ClassesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetClassForNetsResponse_ClassesEntry_DoNotUseDefaultTypeInternal _NetClassForNetsResponse_ClassesEntry_DoNotUse_default_instance_;
constexpr NetClassForNetsResponse::NetClassForNetsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classes_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct NetClassForNetsResponseDefaultTypeInternal {
  constexpr NetClassForNetsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetClassForNetsResponseDefaultTypeInternal() {}
  union {
    NetClassForNetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetClassForNetsResponseDefaultTypeInternal _NetClassForNetsResponse_default_instance_;
constexpr RefillZones::RefillZones(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zones_()
  , board_(nullptr){}
struct RefillZonesDefaultTypeInternal {
  constexpr RefillZonesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RefillZonesDefaultTypeInternal() {}
  union {
    RefillZones _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RefillZonesDefaultTypeInternal _RefillZones_default_instance_;
constexpr GetPadShapeAsPolygon::GetPadShapeAsPolygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pads_()
  , board_(nullptr)
  , layer_(0)
{}
struct GetPadShapeAsPolygonDefaultTypeInternal {
  constexpr GetPadShapeAsPolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPadShapeAsPolygonDefaultTypeInternal() {}
  union {
    GetPadShapeAsPolygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPadShapeAsPolygonDefaultTypeInternal _GetPadShapeAsPolygon_default_instance_;
constexpr PadShapeAsPolygonResponse::PadShapeAsPolygonResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pads_()
  , polygons_(){}
struct PadShapeAsPolygonResponseDefaultTypeInternal {
  constexpr PadShapeAsPolygonResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PadShapeAsPolygonResponseDefaultTypeInternal() {}
  union {
    PadShapeAsPolygonResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PadShapeAsPolygonResponseDefaultTypeInternal _PadShapeAsPolygonResponse_default_instance_;
constexpr GetVisibleLayers::GetVisibleLayers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr){}
struct GetVisibleLayersDefaultTypeInternal {
  constexpr GetVisibleLayersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVisibleLayersDefaultTypeInternal() {}
  union {
    GetVisibleLayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVisibleLayersDefaultTypeInternal _GetVisibleLayers_default_instance_;
constexpr BoardLayerResponse::BoardLayerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layer_(0)
{}
struct BoardLayerResponseDefaultTypeInternal {
  constexpr BoardLayerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardLayerResponseDefaultTypeInternal() {}
  union {
    BoardLayerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardLayerResponseDefaultTypeInternal _BoardLayerResponse_default_instance_;
constexpr BoardLayers::BoardLayers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , _layers_cached_byte_size_(0){}
struct BoardLayersDefaultTypeInternal {
  constexpr BoardLayersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardLayersDefaultTypeInternal() {}
  union {
    BoardLayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardLayersDefaultTypeInternal _BoardLayers_default_instance_;
constexpr SetVisibleLayers::SetVisibleLayers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , _layers_cached_byte_size_(0)
  , board_(nullptr){}
struct SetVisibleLayersDefaultTypeInternal {
  constexpr SetVisibleLayersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetVisibleLayersDefaultTypeInternal() {}
  union {
    SetVisibleLayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetVisibleLayersDefaultTypeInternal _SetVisibleLayers_default_instance_;
constexpr GetActiveLayer::GetActiveLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr){}
struct GetActiveLayerDefaultTypeInternal {
  constexpr GetActiveLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetActiveLayerDefaultTypeInternal() {}
  union {
    GetActiveLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetActiveLayerDefaultTypeInternal _GetActiveLayer_default_instance_;
constexpr SetActiveLayer::SetActiveLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(nullptr)
  , layer_(0)
{}
struct SetActiveLayerDefaultTypeInternal {
  constexpr SetActiveLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetActiveLayerDefaultTypeInternal() {}
  union {
    SetActiveLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetActiveLayerDefaultTypeInternal _SetActiveLayer_default_instance_;
constexpr BoardEditorAppearanceSettings::BoardEditorAppearanceSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inactive_layer_display_(0)

  , net_color_display_(0)

  , board_flip_(0)

  , ratsnest_display_(0)
{}
struct BoardEditorAppearanceSettingsDefaultTypeInternal {
  constexpr BoardEditorAppearanceSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardEditorAppearanceSettingsDefaultTypeInternal() {}
  union {
    BoardEditorAppearanceSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardEditorAppearanceSettingsDefaultTypeInternal _BoardEditorAppearanceSettings_default_instance_;
constexpr GetBoardEditorAppearanceSettings::GetBoardEditorAppearanceSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetBoardEditorAppearanceSettingsDefaultTypeInternal {
  constexpr GetBoardEditorAppearanceSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBoardEditorAppearanceSettingsDefaultTypeInternal() {}
  union {
    GetBoardEditorAppearanceSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBoardEditorAppearanceSettingsDefaultTypeInternal _GetBoardEditorAppearanceSettings_default_instance_;
constexpr SetBoardEditorAppearanceSettings::SetBoardEditorAppearanceSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(nullptr){}
struct SetBoardEditorAppearanceSettingsDefaultTypeInternal {
  constexpr SetBoardEditorAppearanceSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBoardEditorAppearanceSettingsDefaultTypeInternal() {}
  union {
    SetBoardEditorAppearanceSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBoardEditorAppearanceSettingsDefaultTypeInternal _SetBoardEditorAppearanceSettings_default_instance_;
constexpr InteractiveMoveItems::InteractiveMoveItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , board_(nullptr){}
struct InteractiveMoveItemsDefaultTypeInternal {
  constexpr InteractiveMoveItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InteractiveMoveItemsDefaultTypeInternal() {}
  union {
    InteractiveMoveItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InteractiveMoveItemsDefaultTypeInternal _InteractiveMoveItems_default_instance_;
}  // namespace commands
}  // namespace board
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_board_2fboard_5fcommands_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_board_2fboard_5fcommands_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_board_2fboard_5fcommands_2eproto = nullptr;

const uint32_t TableStruct_board_2fboard_5fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetBoardStackup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetBoardStackup, board_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardStackupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardStackupResponse, stackup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::UpdateBoardStackup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::UpdateBoardStackup, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::UpdateBoardStackup, stackup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetGraphicsDefaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetGraphicsDefaults, board_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GraphicsDefaultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GraphicsDefaultsResponse, defaults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetBoardOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetBoardOrigin, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetBoardOrigin, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetBoardOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetBoardOrigin, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetBoardOrigin, type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetBoardOrigin, origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetNets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetNets, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetNets, netclass_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetsResponse, nets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNet, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNet, types_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNet, net_codes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNetClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNetClass, header_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNetClass, types_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetItemsByNetClass, net_classes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetNetClassForNets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetNetClassForNets, net_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetClassForNetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::NetClassForNetsResponse, classes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::RefillZones, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::RefillZones, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::RefillZones, zones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetPadShapeAsPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetPadShapeAsPolygon, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetPadShapeAsPolygon, pads_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetPadShapeAsPolygon, layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::PadShapeAsPolygonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::PadShapeAsPolygonResponse, pads_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::PadShapeAsPolygonResponse, polygons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetVisibleLayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetVisibleLayers, board_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardLayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardLayerResponse, layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardLayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardLayers, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetVisibleLayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetVisibleLayers, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetVisibleLayers, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetActiveLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetActiveLayer, board_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetActiveLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetActiveLayer, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetActiveLayer, layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardEditorAppearanceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardEditorAppearanceSettings, inactive_layer_display_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardEditorAppearanceSettings, net_color_display_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardEditorAppearanceSettings, board_flip_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::BoardEditorAppearanceSettings, ratsnest_display_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::GetBoardEditorAppearanceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetBoardEditorAppearanceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::SetBoardEditorAppearanceSettings, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::InteractiveMoveItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::InteractiveMoveItems, board_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::commands::InteractiveMoveItems, items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::board::commands::GetBoardStackup)},
  { 7, -1, -1, sizeof(::kiapi::board::commands::BoardStackupResponse)},
  { 14, -1, -1, sizeof(::kiapi::board::commands::UpdateBoardStackup)},
  { 22, -1, -1, sizeof(::kiapi::board::commands::GetGraphicsDefaults)},
  { 29, -1, -1, sizeof(::kiapi::board::commands::GraphicsDefaultsResponse)},
  { 36, -1, -1, sizeof(::kiapi::board::commands::GetBoardOrigin)},
  { 44, -1, -1, sizeof(::kiapi::board::commands::SetBoardOrigin)},
  { 53, -1, -1, sizeof(::kiapi::board::commands::GetNets)},
  { 61, -1, -1, sizeof(::kiapi::board::commands::NetsResponse)},
  { 68, -1, -1, sizeof(::kiapi::board::commands::GetItemsByNet)},
  { 77, -1, -1, sizeof(::kiapi::board::commands::GetItemsByNetClass)},
  { 86, -1, -1, sizeof(::kiapi::board::commands::GetNetClassForNets)},
  { 93, 101, -1, sizeof(::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse)},
  { 103, -1, -1, sizeof(::kiapi::board::commands::NetClassForNetsResponse)},
  { 110, -1, -1, sizeof(::kiapi::board::commands::RefillZones)},
  { 118, -1, -1, sizeof(::kiapi::board::commands::GetPadShapeAsPolygon)},
  { 127, -1, -1, sizeof(::kiapi::board::commands::PadShapeAsPolygonResponse)},
  { 135, -1, -1, sizeof(::kiapi::board::commands::GetVisibleLayers)},
  { 142, -1, -1, sizeof(::kiapi::board::commands::BoardLayerResponse)},
  { 149, -1, -1, sizeof(::kiapi::board::commands::BoardLayers)},
  { 156, -1, -1, sizeof(::kiapi::board::commands::SetVisibleLayers)},
  { 164, -1, -1, sizeof(::kiapi::board::commands::GetActiveLayer)},
  { 171, -1, -1, sizeof(::kiapi::board::commands::SetActiveLayer)},
  { 179, -1, -1, sizeof(::kiapi::board::commands::BoardEditorAppearanceSettings)},
  { 189, -1, -1, sizeof(::kiapi::board::commands::GetBoardEditorAppearanceSettings)},
  { 195, -1, -1, sizeof(::kiapi::board::commands::SetBoardEditorAppearanceSettings)},
  { 202, -1, -1, sizeof(::kiapi::board::commands::InteractiveMoveItems)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetBoardStackup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_BoardStackupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_UpdateBoardStackup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetGraphicsDefaults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GraphicsDefaultsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetBoardOrigin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_SetBoardOrigin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetNets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_NetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetItemsByNet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetItemsByNetClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetNetClassForNets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_NetClassForNetsResponse_ClassesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_NetClassForNetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_RefillZones_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetPadShapeAsPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_PadShapeAsPolygonResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetVisibleLayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_BoardLayerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_BoardLayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_SetVisibleLayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetActiveLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_SetActiveLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_BoardEditorAppearanceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_GetBoardEditorAppearanceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_SetBoardEditorAppearanceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::commands::_InteractiveMoveItems_default_instance_),
};

const char descriptor_table_protodef_board_2fboard_5fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032board/board_commands.proto\022\024kiapi.boar"
  "d.commands\032\035common/types/base_types.prot"
  "o\032\030common/types/enums.proto\032#common/type"
  "s/project_settings.proto\032\021board/board.pr"
  "oto\032\027board/board_types.proto\"G\n\017GetBoard"
  "Stackup\0224\n\005board\030\001 \001(\0132%.kiapi.common.ty"
  "pes.DocumentSpecifier\"B\n\024BoardStackupRes"
  "ponse\022*\n\007stackup\030\001 \001(\0132\031.kiapi.board.Boa"
  "rdStackup\"v\n\022UpdateBoardStackup\0224\n\005board"
  "\030\001 \001(\0132%.kiapi.common.types.DocumentSpec"
  "ifier\022*\n\007stackup\030\002 \001(\0132\031.kiapi.board.Boa"
  "rdStackup\"K\n\023GetGraphicsDefaults\0224\n\005boar"
  "d\030\001 \001(\0132%.kiapi.common.types.DocumentSpe"
  "cifier\"K\n\030GraphicsDefaultsResponse\022/\n\010de"
  "faults\030\001 \001(\0132\035.kiapi.board.GraphicsDefau"
  "lts\"{\n\016GetBoardOrigin\0224\n\005board\030\001 \001(\0132%.k"
  "iapi.common.types.DocumentSpecifier\0223\n\004t"
  "ype\030\002 \001(\0162%.kiapi.board.commands.BoardOr"
  "iginType\"\250\001\n\016SetBoardOrigin\0224\n\005board\030\001 \001"
  "(\0132%.kiapi.common.types.DocumentSpecifie"
  "r\0223\n\004type\030\002 \001(\0162%.kiapi.board.commands.B"
  "oardOriginType\022+\n\006origin\030\003 \001(\0132\033.kiapi.c"
  "ommon.types.Vector2\"X\n\007GetNets\0224\n\005board\030"
  "\001 \001(\0132%.kiapi.common.types.DocumentSpeci"
  "fier\022\027\n\017netclass_filter\030\002 \003(\t\"4\n\014NetsRes"
  "ponse\022$\n\004nets\030\001 \003(\0132\026.kiapi.board.types."
  "Net\"\242\001\n\rGetItemsByNet\022.\n\006header\030\001 \001(\0132\036."
  "kiapi.common.types.ItemHeader\0222\n\005types\030\002"
  " \003(\0162#.kiapi.common.types.KiCadObjectTyp"
  "e\022-\n\tnet_codes\030\003 \003(\0132\032.kiapi.board.types"
  ".NetCode\"\215\001\n\022GetItemsByNetClass\022.\n\006heade"
  "r\030\001 \001(\0132\036.kiapi.common.types.ItemHeader\022"
  "2\n\005types\030\002 \003(\0162#.kiapi.common.types.KiCa"
  "dObjectType\022\023\n\013net_classes\030\003 \003(\t\"9\n\022GetN"
  "etClassForNets\022#\n\003net\030\001 \003(\0132\026.kiapi.boar"
  "d.types.Net\"\266\001\n\027NetClassForNetsResponse\022"
  "K\n\007classes\030\001 \003(\0132:.kiapi.board.commands."
  "NetClassForNetsResponse.ClassesEntry\032N\n\014"
  "ClassesEntry\022\013\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\013"
  "2\036.kiapi.common.project.NetClass:\0028\001\"l\n\013"
  "RefillZones\0224\n\005board\030\001 \001(\0132%.kiapi.commo"
  "n.types.DocumentSpecifier\022\'\n\005zones\030\002 \003(\013"
  "2\030.kiapi.common.types.KIID\"\242\001\n\024GetPadSha"
  "peAsPolygon\0224\n\005board\030\001 \001(\0132%.kiapi.commo"
  "n.types.DocumentSpecifier\022&\n\004pads\030\002 \003(\0132"
  "\030.kiapi.common.types.KIID\022,\n\005layer\030\003 \001(\016"
  "2\035.kiapi.board.types.BoardLayer\"{\n\031PadSh"
  "apeAsPolygonResponse\022&\n\004pads\030\001 \003(\0132\030.kia"
  "pi.common.types.KIID\0226\n\010polygons\030\002 \003(\0132$"
  ".kiapi.common.types.PolygonWithHoles\"H\n\020"
  "GetVisibleLayers\0224\n\005board\030\001 \001(\0132%.kiapi."
  "common.types.DocumentSpecifier\"B\n\022BoardL"
  "ayerResponse\022,\n\005layer\030\001 \001(\0162\035.kiapi.boar"
  "d.types.BoardLayer\"<\n\013BoardLayers\022-\n\006lay"
  "ers\030\001 \003(\0162\035.kiapi.board.types.BoardLayer"
  "\"w\n\020SetVisibleLayers\0224\n\005board\030\001 \001(\0132%.ki"
  "api.common.types.DocumentSpecifier\022-\n\006la"
  "yers\030\002 \003(\0162\035.kiapi.board.types.BoardLaye"
  "r\"F\n\016GetActiveLayer\0224\n\005board\030\001 \001(\0132%.kia"
  "pi.common.types.DocumentSpecifier\"t\n\016Set"
  "ActiveLayer\0224\n\005board\030\001 \001(\0132%.kiapi.commo"
  "n.types.DocumentSpecifier\022,\n\005layer\030\002 \001(\016"
  "2\035.kiapi.board.types.BoardLayer\"\263\002\n\035Boar"
  "dEditorAppearanceSettings\022N\n\026inactive_la"
  "yer_display\030\001 \001(\0162..kiapi.board.commands"
  ".InactiveLayerDisplayMode\022D\n\021net_color_d"
  "isplay\030\002 \001(\0162).kiapi.board.commands.NetC"
  "olorDisplayMode\0227\n\nboard_flip\030\003 \001(\0162#.ki"
  "api.board.commands.BoardFlipMode\022C\n\020rats"
  "nest_display\030\004 \001(\0162).kiapi.board.command"
  "s.RatsnestDisplayMode\"\"\n GetBoardEditorA"
  "ppearanceSettings\"i\n SetBoardEditorAppea"
  "ranceSettings\022E\n\010settings\030\001 \001(\01323.kiapi."
  "board.commands.BoardEditorAppearanceSett"
  "ings\"u\n\024InteractiveMoveItems\0224\n\005board\030\001 "
  "\001(\0132%.kiapi.common.types.DocumentSpecifi"
  "er\022\'\n\005items\030\002 \003(\0132\030.kiapi.common.types.K"
  "IID*\?\n\017BoardOriginType\022\017\n\013BOT_UNKNOWN\020\000\022"
  "\014\n\010BOT_GRID\020\001\022\r\n\tBOT_DRILL\020\002*_\n\030Inactive"
  "LayerDisplayMode\022\020\n\014ILDM_UNKNOWN\020\000\022\017\n\013IL"
  "DM_NORMAL\020\001\022\017\n\013ILDM_DIMMED\020\002\022\017\n\013ILDM_HID"
  "DEN\020\003*V\n\023NetColorDisplayMode\022\020\n\014NCDM_UNK"
  "NOWN\020\000\022\014\n\010NCDM_ALL\020\001\022\021\n\rNCDM_RATSNEST\020\002\022"
  "\014\n\010NCDM_OFF\020\003*C\n\rBoardFlipMode\022\017\n\013BFM_UN"
  "KNOWN\020\000\022\016\n\nBFM_NORMAL\020\001\022\021\n\rBFM_FLIPPED_X"
  "\020\002*R\n\023RatsnestDisplayMode\022\017\n\013RDM_UNKNOWN"
  "\020\000\022\022\n\016RDM_ALL_LAYERS\020\001\022\026\n\022RDM_VISIBLE_LA"
  "YERS\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_board_2fboard_5fcommands_2eproto_deps[5] = {
  &::descriptor_table_board_2fboard_2eproto,
  &::descriptor_table_board_2fboard_5ftypes_2eproto,
  &::descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto,
  &::descriptor_table_common_2ftypes_2fenums_2eproto,
  &::descriptor_table_common_2ftypes_2fproject_5fsettings_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_board_2fboard_5fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_board_2fboard_5fcommands_2eproto = {
  false, false, 3494, descriptor_table_protodef_board_2fboard_5fcommands_2eproto, "board/board_commands.proto", 
  &descriptor_table_board_2fboard_5fcommands_2eproto_once, descriptor_table_board_2fboard_5fcommands_2eproto_deps, 5, 27,
  schemas, file_default_instances, TableStruct_board_2fboard_5fcommands_2eproto::offsets,
  file_level_metadata_board_2fboard_5fcommands_2eproto, file_level_enum_descriptors_board_2fboard_5fcommands_2eproto, file_level_service_descriptors_board_2fboard_5fcommands_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_board_2fboard_5fcommands_2eproto_getter() {
  return &descriptor_table_board_2fboard_5fcommands_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_board_2fboard_5fcommands_2eproto(&descriptor_table_board_2fboard_5fcommands_2eproto);
namespace kiapi {
namespace board {
namespace commands {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardOriginType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5fcommands_2eproto);
  return file_level_enum_descriptors_board_2fboard_5fcommands_2eproto[0];
}
bool BoardOriginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InactiveLayerDisplayMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5fcommands_2eproto);
  return file_level_enum_descriptors_board_2fboard_5fcommands_2eproto[1];
}
bool InactiveLayerDisplayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetColorDisplayMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5fcommands_2eproto);
  return file_level_enum_descriptors_board_2fboard_5fcommands_2eproto[2];
}
bool NetColorDisplayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardFlipMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5fcommands_2eproto);
  return file_level_enum_descriptors_board_2fboard_5fcommands_2eproto[3];
}
bool BoardFlipMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RatsnestDisplayMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5fcommands_2eproto);
  return file_level_enum_descriptors_board_2fboard_5fcommands_2eproto[4];
}
bool RatsnestDisplayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetBoardStackup::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const GetBoardStackup* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetBoardStackup::_Internal::board(const GetBoardStackup* msg) {
  return *msg->board_;
}
void GetBoardStackup::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
GetBoardStackup::GetBoardStackup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetBoardStackup)
}
GetBoardStackup::GetBoardStackup(const GetBoardStackup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetBoardStackup)
}

inline void GetBoardStackup::SharedCtor() {
board_ = nullptr;
}

GetBoardStackup::~GetBoardStackup() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetBoardStackup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBoardStackup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void GetBoardStackup::ArenaDtor(void* object) {
  GetBoardStackup* _this = reinterpret_cast< GetBoardStackup* >(object);
  (void)_this;
}
void GetBoardStackup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBoardStackup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBoardStackup::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetBoardStackup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBoardStackup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBoardStackup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetBoardStackup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetBoardStackup)
  return target;
}

size_t GetBoardStackup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetBoardStackup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBoardStackup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBoardStackup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBoardStackup::GetClassData() const { return &_class_data_; }

void GetBoardStackup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBoardStackup *>(to)->MergeFrom(
      static_cast<const GetBoardStackup &>(from));
}


void GetBoardStackup::MergeFrom(const GetBoardStackup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetBoardStackup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBoardStackup::CopyFrom(const GetBoardStackup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetBoardStackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBoardStackup::IsInitialized() const {
  return true;
}

void GetBoardStackup::InternalSwap(GetBoardStackup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBoardStackup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[0]);
}

// ===================================================================

class BoardStackupResponse::_Internal {
 public:
  static const ::kiapi::board::BoardStackup& stackup(const BoardStackupResponse* msg);
};

const ::kiapi::board::BoardStackup&
BoardStackupResponse::_Internal::stackup(const BoardStackupResponse* msg) {
  return *msg->stackup_;
}
void BoardStackupResponse::clear_stackup() {
  if (GetArenaForAllocation() == nullptr && stackup_ != nullptr) {
    delete stackup_;
  }
  stackup_ = nullptr;
}
BoardStackupResponse::BoardStackupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.BoardStackupResponse)
}
BoardStackupResponse::BoardStackupResponse(const BoardStackupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stackup()) {
    stackup_ = new ::kiapi::board::BoardStackup(*from.stackup_);
  } else {
    stackup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.BoardStackupResponse)
}

inline void BoardStackupResponse::SharedCtor() {
stackup_ = nullptr;
}

BoardStackupResponse::~BoardStackupResponse() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.BoardStackupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardStackupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stackup_;
}

void BoardStackupResponse::ArenaDtor(void* object) {
  BoardStackupResponse* _this = reinterpret_cast< BoardStackupResponse* >(object);
  (void)_this;
}
void BoardStackupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardStackupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardStackupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.BoardStackupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && stackup_ != nullptr) {
    delete stackup_;
  }
  stackup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardStackupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.BoardStackup stackup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stackup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardStackupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.BoardStackupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.BoardStackup stackup = 1;
  if (this->_internal_has_stackup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stackup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.BoardStackupResponse)
  return target;
}

size_t BoardStackupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.BoardStackupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.BoardStackup stackup = 1;
  if (this->_internal_has_stackup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stackup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStackupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardStackupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStackupResponse::GetClassData() const { return &_class_data_; }

void BoardStackupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardStackupResponse *>(to)->MergeFrom(
      static_cast<const BoardStackupResponse &>(from));
}


void BoardStackupResponse::MergeFrom(const BoardStackupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.BoardStackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stackup()) {
    _internal_mutable_stackup()->::kiapi::board::BoardStackup::MergeFrom(from._internal_stackup());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardStackupResponse::CopyFrom(const BoardStackupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.BoardStackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStackupResponse::IsInitialized() const {
  return true;
}

void BoardStackupResponse::InternalSwap(BoardStackupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stackup_, other->stackup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardStackupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[1]);
}

// ===================================================================

class UpdateBoardStackup::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const UpdateBoardStackup* msg);
  static const ::kiapi::board::BoardStackup& stackup(const UpdateBoardStackup* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
UpdateBoardStackup::_Internal::board(const UpdateBoardStackup* msg) {
  return *msg->board_;
}
const ::kiapi::board::BoardStackup&
UpdateBoardStackup::_Internal::stackup(const UpdateBoardStackup* msg) {
  return *msg->stackup_;
}
void UpdateBoardStackup::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
void UpdateBoardStackup::clear_stackup() {
  if (GetArenaForAllocation() == nullptr && stackup_ != nullptr) {
    delete stackup_;
  }
  stackup_ = nullptr;
}
UpdateBoardStackup::UpdateBoardStackup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.UpdateBoardStackup)
}
UpdateBoardStackup::UpdateBoardStackup(const UpdateBoardStackup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  if (from._internal_has_stackup()) {
    stackup_ = new ::kiapi::board::BoardStackup(*from.stackup_);
  } else {
    stackup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.UpdateBoardStackup)
}

inline void UpdateBoardStackup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stackup_) -
    reinterpret_cast<char*>(&board_)) + sizeof(stackup_));
}

UpdateBoardStackup::~UpdateBoardStackup() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.UpdateBoardStackup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateBoardStackup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
  if (this != internal_default_instance()) delete stackup_;
}

void UpdateBoardStackup::ArenaDtor(void* object) {
  UpdateBoardStackup* _this = reinterpret_cast< UpdateBoardStackup* >(object);
  (void)_this;
}
void UpdateBoardStackup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBoardStackup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateBoardStackup::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.UpdateBoardStackup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stackup_ != nullptr) {
    delete stackup_;
  }
  stackup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBoardStackup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.BoardStackup stackup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stackup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateBoardStackup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.UpdateBoardStackup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // .kiapi.board.BoardStackup stackup = 2;
  if (this->_internal_has_stackup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stackup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.UpdateBoardStackup)
  return target;
}

size_t UpdateBoardStackup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.UpdateBoardStackup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  // .kiapi.board.BoardStackup stackup = 2;
  if (this->_internal_has_stackup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stackup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateBoardStackup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateBoardStackup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateBoardStackup::GetClassData() const { return &_class_data_; }

void UpdateBoardStackup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateBoardStackup *>(to)->MergeFrom(
      static_cast<const UpdateBoardStackup &>(from));
}


void UpdateBoardStackup::MergeFrom(const UpdateBoardStackup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.UpdateBoardStackup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  if (from._internal_has_stackup()) {
    _internal_mutable_stackup()->::kiapi::board::BoardStackup::MergeFrom(from._internal_stackup());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateBoardStackup::CopyFrom(const UpdateBoardStackup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.UpdateBoardStackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBoardStackup::IsInitialized() const {
  return true;
}

void UpdateBoardStackup::InternalSwap(UpdateBoardStackup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBoardStackup, stackup_)
      + sizeof(UpdateBoardStackup::stackup_)
      - PROTOBUF_FIELD_OFFSET(UpdateBoardStackup, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBoardStackup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[2]);
}

// ===================================================================

class GetGraphicsDefaults::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const GetGraphicsDefaults* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetGraphicsDefaults::_Internal::board(const GetGraphicsDefaults* msg) {
  return *msg->board_;
}
void GetGraphicsDefaults::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
GetGraphicsDefaults::GetGraphicsDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetGraphicsDefaults)
}
GetGraphicsDefaults::GetGraphicsDefaults(const GetGraphicsDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetGraphicsDefaults)
}

inline void GetGraphicsDefaults::SharedCtor() {
board_ = nullptr;
}

GetGraphicsDefaults::~GetGraphicsDefaults() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetGraphicsDefaults)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetGraphicsDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void GetGraphicsDefaults::ArenaDtor(void* object) {
  GetGraphicsDefaults* _this = reinterpret_cast< GetGraphicsDefaults* >(object);
  (void)_this;
}
void GetGraphicsDefaults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGraphicsDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetGraphicsDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetGraphicsDefaults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGraphicsDefaults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetGraphicsDefaults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetGraphicsDefaults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetGraphicsDefaults)
  return target;
}

size_t GetGraphicsDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetGraphicsDefaults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetGraphicsDefaults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetGraphicsDefaults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetGraphicsDefaults::GetClassData() const { return &_class_data_; }

void GetGraphicsDefaults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetGraphicsDefaults *>(to)->MergeFrom(
      static_cast<const GetGraphicsDefaults &>(from));
}


void GetGraphicsDefaults::MergeFrom(const GetGraphicsDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetGraphicsDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetGraphicsDefaults::CopyFrom(const GetGraphicsDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetGraphicsDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGraphicsDefaults::IsInitialized() const {
  return true;
}

void GetGraphicsDefaults::InternalSwap(GetGraphicsDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGraphicsDefaults::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[3]);
}

// ===================================================================

class GraphicsDefaultsResponse::_Internal {
 public:
  static const ::kiapi::board::GraphicsDefaults& defaults(const GraphicsDefaultsResponse* msg);
};

const ::kiapi::board::GraphicsDefaults&
GraphicsDefaultsResponse::_Internal::defaults(const GraphicsDefaultsResponse* msg) {
  return *msg->defaults_;
}
void GraphicsDefaultsResponse::clear_defaults() {
  if (GetArenaForAllocation() == nullptr && defaults_ != nullptr) {
    delete defaults_;
  }
  defaults_ = nullptr;
}
GraphicsDefaultsResponse::GraphicsDefaultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GraphicsDefaultsResponse)
}
GraphicsDefaultsResponse::GraphicsDefaultsResponse(const GraphicsDefaultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defaults()) {
    defaults_ = new ::kiapi::board::GraphicsDefaults(*from.defaults_);
  } else {
    defaults_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GraphicsDefaultsResponse)
}

inline void GraphicsDefaultsResponse::SharedCtor() {
defaults_ = nullptr;
}

GraphicsDefaultsResponse::~GraphicsDefaultsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GraphicsDefaultsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicsDefaultsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete defaults_;
}

void GraphicsDefaultsResponse::ArenaDtor(void* object) {
  GraphicsDefaultsResponse* _this = reinterpret_cast< GraphicsDefaultsResponse* >(object);
  (void)_this;
}
void GraphicsDefaultsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicsDefaultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicsDefaultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GraphicsDefaultsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && defaults_ != nullptr) {
    delete defaults_;
  }
  defaults_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicsDefaultsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.GraphicsDefaults defaults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicsDefaultsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GraphicsDefaultsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.GraphicsDefaults defaults = 1;
  if (this->_internal_has_defaults()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::defaults(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GraphicsDefaultsResponse)
  return target;
}

size_t GraphicsDefaultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GraphicsDefaultsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.GraphicsDefaults defaults = 1;
  if (this->_internal_has_defaults()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaults_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicsDefaultsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicsDefaultsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicsDefaultsResponse::GetClassData() const { return &_class_data_; }

void GraphicsDefaultsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicsDefaultsResponse *>(to)->MergeFrom(
      static_cast<const GraphicsDefaultsResponse &>(from));
}


void GraphicsDefaultsResponse::MergeFrom(const GraphicsDefaultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GraphicsDefaultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_defaults()) {
    _internal_mutable_defaults()->::kiapi::board::GraphicsDefaults::MergeFrom(from._internal_defaults());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicsDefaultsResponse::CopyFrom(const GraphicsDefaultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GraphicsDefaultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsDefaultsResponse::IsInitialized() const {
  return true;
}

void GraphicsDefaultsResponse::InternalSwap(GraphicsDefaultsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(defaults_, other->defaults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicsDefaultsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[4]);
}

// ===================================================================

class GetBoardOrigin::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const GetBoardOrigin* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetBoardOrigin::_Internal::board(const GetBoardOrigin* msg) {
  return *msg->board_;
}
void GetBoardOrigin::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
GetBoardOrigin::GetBoardOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetBoardOrigin)
}
GetBoardOrigin::GetBoardOrigin(const GetBoardOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetBoardOrigin)
}

inline void GetBoardOrigin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&board_)) + sizeof(type_));
}

GetBoardOrigin::~GetBoardOrigin() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetBoardOrigin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBoardOrigin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void GetBoardOrigin::ArenaDtor(void* object) {
  GetBoardOrigin* _this = reinterpret_cast< GetBoardOrigin* >(object);
  (void)_this;
}
void GetBoardOrigin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBoardOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBoardOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetBoardOrigin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBoardOrigin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.commands.BoardOriginType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::commands::BoardOriginType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBoardOrigin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetBoardOrigin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // .kiapi.board.commands.BoardOriginType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetBoardOrigin)
  return target;
}

size_t GetBoardOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetBoardOrigin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  // .kiapi.board.commands.BoardOriginType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBoardOrigin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBoardOrigin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBoardOrigin::GetClassData() const { return &_class_data_; }

void GetBoardOrigin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBoardOrigin *>(to)->MergeFrom(
      static_cast<const GetBoardOrigin &>(from));
}


void GetBoardOrigin::MergeFrom(const GetBoardOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetBoardOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBoardOrigin::CopyFrom(const GetBoardOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetBoardOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBoardOrigin::IsInitialized() const {
  return true;
}

void GetBoardOrigin::InternalSwap(GetBoardOrigin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBoardOrigin, type_)
      + sizeof(GetBoardOrigin::type_)
      - PROTOBUF_FIELD_OFFSET(GetBoardOrigin, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBoardOrigin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[5]);
}

// ===================================================================

class SetBoardOrigin::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const SetBoardOrigin* msg);
  static const ::kiapi::common::types::Vector2& origin(const SetBoardOrigin* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
SetBoardOrigin::_Internal::board(const SetBoardOrigin* msg) {
  return *msg->board_;
}
const ::kiapi::common::types::Vector2&
SetBoardOrigin::_Internal::origin(const SetBoardOrigin* msg) {
  return *msg->origin_;
}
void SetBoardOrigin::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
void SetBoardOrigin::clear_origin() {
  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
SetBoardOrigin::SetBoardOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.SetBoardOrigin)
}
SetBoardOrigin::SetBoardOrigin(const SetBoardOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  if (from._internal_has_origin()) {
    origin_ = new ::kiapi::common::types::Vector2(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.SetBoardOrigin)
}

inline void SetBoardOrigin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&board_)) + sizeof(type_));
}

SetBoardOrigin::~SetBoardOrigin() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.SetBoardOrigin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBoardOrigin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
  if (this != internal_default_instance()) delete origin_;
}

void SetBoardOrigin::ArenaDtor(void* object) {
  SetBoardOrigin* _this = reinterpret_cast< SetBoardOrigin* >(object);
  (void)_this;
}
void SetBoardOrigin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBoardOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBoardOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.SetBoardOrigin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBoardOrigin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.commands.BoardOriginType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::commands::BoardOriginType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetBoardOrigin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.SetBoardOrigin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // .kiapi.board.commands.BoardOriginType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .kiapi.common.types.Vector2 origin = 3;
  if (this->_internal_has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::origin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.SetBoardOrigin)
  return target;
}

size_t SetBoardOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.SetBoardOrigin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  // .kiapi.common.types.Vector2 origin = 3;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .kiapi.board.commands.BoardOriginType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBoardOrigin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBoardOrigin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBoardOrigin::GetClassData() const { return &_class_data_; }

void SetBoardOrigin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBoardOrigin *>(to)->MergeFrom(
      static_cast<const SetBoardOrigin &>(from));
}


void SetBoardOrigin::MergeFrom(const SetBoardOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.SetBoardOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  if (from._internal_has_origin()) {
    _internal_mutable_origin()->::kiapi::common::types::Vector2::MergeFrom(from._internal_origin());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBoardOrigin::CopyFrom(const SetBoardOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.SetBoardOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBoardOrigin::IsInitialized() const {
  return true;
}

void SetBoardOrigin::InternalSwap(SetBoardOrigin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetBoardOrigin, type_)
      + sizeof(SetBoardOrigin::type_)
      - PROTOBUF_FIELD_OFFSET(SetBoardOrigin, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBoardOrigin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[6]);
}

// ===================================================================

class GetNets::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const GetNets* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetNets::_Internal::board(const GetNets* msg) {
  return *msg->board_;
}
void GetNets::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
GetNets::GetNets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  netclass_filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetNets)
}
GetNets::GetNets(const GetNets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      netclass_filter_(from.netclass_filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetNets)
}

inline void GetNets::SharedCtor() {
board_ = nullptr;
}

GetNets::~GetNets() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetNets)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetNets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void GetNets::ArenaDtor(void* object) {
  GetNets* _this = reinterpret_cast< GetNets* >(object);
  (void)_this;
}
void GetNets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNets::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetNets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  netclass_filter_.Clear();
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string netclass_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_netclass_filter();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.commands.GetNets.netclass_filter"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetNets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // repeated string netclass_filter = 2;
  for (int i = 0, n = this->_internal_netclass_filter_size(); i < n; i++) {
    const auto& s = this->_internal_netclass_filter(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.commands.GetNets.netclass_filter");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetNets)
  return target;
}

size_t GetNets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetNets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string netclass_filter = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(netclass_filter_.size());
  for (int i = 0, n = netclass_filter_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      netclass_filter_.Get(i));
  }

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNets::GetClassData() const { return &_class_data_; }

void GetNets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetNets *>(to)->MergeFrom(
      static_cast<const GetNets &>(from));
}


void GetNets::MergeFrom(const GetNets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetNets)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  netclass_filter_.MergeFrom(from.netclass_filter_);
  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNets::CopyFrom(const GetNets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetNets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNets::IsInitialized() const {
  return true;
}

void GetNets::InternalSwap(GetNets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  netclass_filter_.InternalSwap(&other->netclass_filter_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNets::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[7]);
}

// ===================================================================

class NetsResponse::_Internal {
 public:
};

void NetsResponse::clear_nets() {
  nets_.Clear();
}
NetsResponse::NetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.NetsResponse)
}
NetsResponse::NetsResponse(const NetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nets_(from.nets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.NetsResponse)
}

inline void NetsResponse::SharedCtor() {
}

NetsResponse::~NetsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.NetsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetsResponse::ArenaDtor(void* object) {
  NetsResponse* _this = reinterpret_cast< NetsResponse* >(object);
  (void)_this;
}
void NetsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.NetsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.board.types.Net nets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.NetsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.board.types.Net nets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.NetsResponse)
  return target;
}

size_t NetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.NetsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.Net nets = 1;
  total_size += 1UL * this->_internal_nets_size();
  for (const auto& msg : this->nets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetsResponse::GetClassData() const { return &_class_data_; }

void NetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetsResponse *>(to)->MergeFrom(
      static_cast<const NetsResponse &>(from));
}


void NetsResponse::MergeFrom(const NetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.NetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nets_.MergeFrom(from.nets_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetsResponse::CopyFrom(const NetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.NetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetsResponse::IsInitialized() const {
  return true;
}

void NetsResponse::InternalSwap(NetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nets_.InternalSwap(&other->nets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[8]);
}

// ===================================================================

class GetItemsByNet::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const GetItemsByNet* msg);
};

const ::kiapi::common::types::ItemHeader&
GetItemsByNet::_Internal::header(const GetItemsByNet* msg) {
  return *msg->header_;
}
void GetItemsByNet::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GetItemsByNet::clear_net_codes() {
  net_codes_.Clear();
}
GetItemsByNet::GetItemsByNet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  types_(arena),
  net_codes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetItemsByNet)
}
GetItemsByNet::GetItemsByNet(const GetItemsByNet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_),
      net_codes_(from.net_codes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetItemsByNet)
}

inline void GetItemsByNet::SharedCtor() {
header_ = nullptr;
}

GetItemsByNet::~GetItemsByNet() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetItemsByNet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetItemsByNet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetItemsByNet::ArenaDtor(void* object) {
  GetItemsByNet* _this = reinterpret_cast< GetItemsByNet* >(object);
  (void)_this;
}
void GetItemsByNet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItemsByNet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetItemsByNet::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetItemsByNet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  net_codes_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemsByNet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KiCadObjectType types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::kiapi::common::types::KiCadObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.NetCode net_codes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_net_codes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetItemsByNet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetItemsByNet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, types_, byte_size, target);
    }
  }

  // repeated .kiapi.board.types.NetCode net_codes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_net_codes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_net_codes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetItemsByNet)
  return target;
}

size_t GetItemsByNet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetItemsByNet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kiapi.board.types.NetCode net_codes = 3;
  total_size += 1UL * this->_internal_net_codes_size();
  for (const auto& msg : this->net_codes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetItemsByNet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetItemsByNet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetItemsByNet::GetClassData() const { return &_class_data_; }

void GetItemsByNet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetItemsByNet *>(to)->MergeFrom(
      static_cast<const GetItemsByNet &>(from));
}


void GetItemsByNet::MergeFrom(const GetItemsByNet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetItemsByNet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  net_codes_.MergeFrom(from.net_codes_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetItemsByNet::CopyFrom(const GetItemsByNet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetItemsByNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsByNet::IsInitialized() const {
  return true;
}

void GetItemsByNet::InternalSwap(GetItemsByNet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  net_codes_.InternalSwap(&other->net_codes_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemsByNet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[9]);
}

// ===================================================================

class GetItemsByNetClass::_Internal {
 public:
  static const ::kiapi::common::types::ItemHeader& header(const GetItemsByNetClass* msg);
};

const ::kiapi::common::types::ItemHeader&
GetItemsByNetClass::_Internal::header(const GetItemsByNetClass* msg) {
  return *msg->header_;
}
void GetItemsByNetClass::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetItemsByNetClass::GetItemsByNetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  types_(arena),
  net_classes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetItemsByNetClass)
}
GetItemsByNetClass::GetItemsByNetClass(const GetItemsByNetClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_),
      net_classes_(from.net_classes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kiapi::common::types::ItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetItemsByNetClass)
}

inline void GetItemsByNetClass::SharedCtor() {
header_ = nullptr;
}

GetItemsByNetClass::~GetItemsByNetClass() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetItemsByNetClass)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetItemsByNetClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetItemsByNetClass::ArenaDtor(void* object) {
  GetItemsByNetClass* _this = reinterpret_cast< GetItemsByNetClass* >(object);
  (void)_this;
}
void GetItemsByNetClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetItemsByNetClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetItemsByNetClass::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetItemsByNetClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  net_classes_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemsByNetClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.ItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KiCadObjectType types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::kiapi::common::types::KiCadObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string net_classes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_net_classes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.commands.GetItemsByNetClass.net_classes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetItemsByNetClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetItemsByNetClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, types_, byte_size, target);
    }
  }

  // repeated string net_classes = 3;
  for (int i = 0, n = this->_internal_net_classes_size(); i < n; i++) {
    const auto& s = this->_internal_net_classes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.commands.GetItemsByNetClass.net_classes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetItemsByNetClass)
  return target;
}

size_t GetItemsByNetClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetItemsByNetClass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string net_classes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(net_classes_.size());
  for (int i = 0, n = net_classes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      net_classes_.Get(i));
  }

  // .kiapi.common.types.ItemHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetItemsByNetClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetItemsByNetClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetItemsByNetClass::GetClassData() const { return &_class_data_; }

void GetItemsByNetClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetItemsByNetClass *>(to)->MergeFrom(
      static_cast<const GetItemsByNetClass &>(from));
}


void GetItemsByNetClass::MergeFrom(const GetItemsByNetClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetItemsByNetClass)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  net_classes_.MergeFrom(from.net_classes_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kiapi::common::types::ItemHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetItemsByNetClass::CopyFrom(const GetItemsByNetClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetItemsByNetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsByNetClass::IsInitialized() const {
  return true;
}

void GetItemsByNetClass::InternalSwap(GetItemsByNetClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  net_classes_.InternalSwap(&other->net_classes_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemsByNetClass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[10]);
}

// ===================================================================

class GetNetClassForNets::_Internal {
 public:
};

void GetNetClassForNets::clear_net() {
  net_.Clear();
}
GetNetClassForNets::GetNetClassForNets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  net_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetNetClassForNets)
}
GetNetClassForNets::GetNetClassForNets(const GetNetClassForNets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      net_(from.net_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetNetClassForNets)
}

inline void GetNetClassForNets::SharedCtor() {
}

GetNetClassForNets::~GetNetClassForNets() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetNetClassForNets)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetNetClassForNets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetNetClassForNets::ArenaDtor(void* object) {
  GetNetClassForNets* _this = reinterpret_cast< GetNetClassForNets* >(object);
  (void)_this;
}
void GetNetClassForNets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetClassForNets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNetClassForNets::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetNetClassForNets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetClassForNets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.board.types.Net net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_net(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNetClassForNets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetNetClassForNets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.board.types.Net net = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_net_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_net(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetNetClassForNets)
  return target;
}

size_t GetNetClassForNets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetNetClassForNets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.Net net = 1;
  total_size += 1UL * this->_internal_net_size();
  for (const auto& msg : this->net_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNetClassForNets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNetClassForNets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNetClassForNets::GetClassData() const { return &_class_data_; }

void GetNetClassForNets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetNetClassForNets *>(to)->MergeFrom(
      static_cast<const GetNetClassForNets &>(from));
}


void GetNetClassForNets::MergeFrom(const GetNetClassForNets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetNetClassForNets)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  net_.MergeFrom(from.net_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNetClassForNets::CopyFrom(const GetNetClassForNets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetNetClassForNets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetClassForNets::IsInitialized() const {
  return true;
}

void GetNetClassForNets::InternalSwap(GetNetClassForNets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  net_.InternalSwap(&other->net_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetClassForNets::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[11]);
}

// ===================================================================

NetClassForNetsResponse_ClassesEntry_DoNotUse::NetClassForNetsResponse_ClassesEntry_DoNotUse() {}
NetClassForNetsResponse_ClassesEntry_DoNotUse::NetClassForNetsResponse_ClassesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NetClassForNetsResponse_ClassesEntry_DoNotUse::MergeFrom(const NetClassForNetsResponse_ClassesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NetClassForNetsResponse_ClassesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[12]);
}

// ===================================================================

class NetClassForNetsResponse::_Internal {
 public:
};

void NetClassForNetsResponse::clear_classes() {
  classes_.Clear();
}
NetClassForNetsResponse::NetClassForNetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.NetClassForNetsResponse)
}
NetClassForNetsResponse::NetClassForNetsResponse(const NetClassForNetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  classes_.MergeFrom(from.classes_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.NetClassForNetsResponse)
}

inline void NetClassForNetsResponse::SharedCtor() {
}

NetClassForNetsResponse::~NetClassForNetsResponse() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.NetClassForNetsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetClassForNetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetClassForNetsResponse::ArenaDtor(void* object) {
  NetClassForNetsResponse* _this = reinterpret_cast< NetClassForNetsResponse* >(object);
  (void)_this;
  _this->classes_. ~MapField();
}
inline void NetClassForNetsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &NetClassForNetsResponse::ArenaDtor);
  }
}
void NetClassForNetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetClassForNetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.NetClassForNetsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetClassForNetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .kiapi.common.project.NetClass> classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&classes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetClassForNetsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.NetClassForNetsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .kiapi.common.project.NetClass> classes = 1;
  if (!this->_internal_classes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kiapi.board.commands.NetClassForNetsResponse.ClassesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_classes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_classes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >::const_iterator
          it = this->_internal_classes().begin();
          it != this->_internal_classes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NetClassForNetsResponse_ClassesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >::const_iterator
          it = this->_internal_classes().begin();
          it != this->_internal_classes().end(); ++it) {
        target = NetClassForNetsResponse_ClassesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.NetClassForNetsResponse)
  return target;
}

size_t NetClassForNetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.NetClassForNetsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .kiapi.common.project.NetClass> classes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_classes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >::const_iterator
      it = this->_internal_classes().begin();
      it != this->_internal_classes().end(); ++it) {
    total_size += NetClassForNetsResponse_ClassesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetClassForNetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetClassForNetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetClassForNetsResponse::GetClassData() const { return &_class_data_; }

void NetClassForNetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetClassForNetsResponse *>(to)->MergeFrom(
      static_cast<const NetClassForNetsResponse &>(from));
}


void NetClassForNetsResponse::MergeFrom(const NetClassForNetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.NetClassForNetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetClassForNetsResponse::CopyFrom(const NetClassForNetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.NetClassForNetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetClassForNetsResponse::IsInitialized() const {
  return true;
}

void NetClassForNetsResponse::InternalSwap(NetClassForNetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classes_.InternalSwap(&other->classes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetClassForNetsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[13]);
}

// ===================================================================

class RefillZones::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const RefillZones* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
RefillZones::_Internal::board(const RefillZones* msg) {
  return *msg->board_;
}
void RefillZones::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
void RefillZones::clear_zones() {
  zones_.Clear();
}
RefillZones::RefillZones(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  zones_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.RefillZones)
}
RefillZones::RefillZones(const RefillZones& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      zones_(from.zones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.RefillZones)
}

inline void RefillZones::SharedCtor() {
board_ = nullptr;
}

RefillZones::~RefillZones() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.RefillZones)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RefillZones::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void RefillZones::ArenaDtor(void* object) {
  RefillZones* _this = reinterpret_cast< RefillZones* >(object);
  (void)_this;
}
void RefillZones::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefillZones::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RefillZones::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.RefillZones)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zones_.Clear();
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefillZones::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KIID zones = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefillZones::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.RefillZones)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // repeated .kiapi.common.types.KIID zones = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_zones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_zones(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.RefillZones)
  return target;
}

size_t RefillZones::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.RefillZones)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID zones = 2;
  total_size += 1UL * this->_internal_zones_size();
  for (const auto& msg : this->zones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefillZones::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RefillZones::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefillZones::GetClassData() const { return &_class_data_; }

void RefillZones::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RefillZones *>(to)->MergeFrom(
      static_cast<const RefillZones &>(from));
}


void RefillZones::MergeFrom(const RefillZones& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.RefillZones)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  zones_.MergeFrom(from.zones_);
  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefillZones::CopyFrom(const RefillZones& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.RefillZones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefillZones::IsInitialized() const {
  return true;
}

void RefillZones::InternalSwap(RefillZones* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  zones_.InternalSwap(&other->zones_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefillZones::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[14]);
}

// ===================================================================

class GetPadShapeAsPolygon::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const GetPadShapeAsPolygon* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetPadShapeAsPolygon::_Internal::board(const GetPadShapeAsPolygon* msg) {
  return *msg->board_;
}
void GetPadShapeAsPolygon::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
void GetPadShapeAsPolygon::clear_pads() {
  pads_.Clear();
}
GetPadShapeAsPolygon::GetPadShapeAsPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pads_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetPadShapeAsPolygon)
}
GetPadShapeAsPolygon::GetPadShapeAsPolygon(const GetPadShapeAsPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pads_(from.pads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetPadShapeAsPolygon)
}

inline void GetPadShapeAsPolygon::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&board_)) + sizeof(layer_));
}

GetPadShapeAsPolygon::~GetPadShapeAsPolygon() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetPadShapeAsPolygon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPadShapeAsPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void GetPadShapeAsPolygon::ArenaDtor(void* object) {
  GetPadShapeAsPolygon* _this = reinterpret_cast< GetPadShapeAsPolygon* >(object);
  (void)_this;
}
void GetPadShapeAsPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPadShapeAsPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPadShapeAsPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetPadShapeAsPolygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pads_.Clear();
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPadShapeAsPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KIID pads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPadShapeAsPolygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetPadShapeAsPolygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // repeated .kiapi.common.types.KIID pads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pads(i), target, stream);
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetPadShapeAsPolygon)
  return target;
}

size_t GetPadShapeAsPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetPadShapeAsPolygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID pads = 2;
  total_size += 1UL * this->_internal_pads_size();
  for (const auto& msg : this->pads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPadShapeAsPolygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPadShapeAsPolygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPadShapeAsPolygon::GetClassData() const { return &_class_data_; }

void GetPadShapeAsPolygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPadShapeAsPolygon *>(to)->MergeFrom(
      static_cast<const GetPadShapeAsPolygon &>(from));
}


void GetPadShapeAsPolygon::MergeFrom(const GetPadShapeAsPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetPadShapeAsPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pads_.MergeFrom(from.pads_);
  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPadShapeAsPolygon::CopyFrom(const GetPadShapeAsPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetPadShapeAsPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPadShapeAsPolygon::IsInitialized() const {
  return true;
}

void GetPadShapeAsPolygon::InternalSwap(GetPadShapeAsPolygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pads_.InternalSwap(&other->pads_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPadShapeAsPolygon, layer_)
      + sizeof(GetPadShapeAsPolygon::layer_)
      - PROTOBUF_FIELD_OFFSET(GetPadShapeAsPolygon, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPadShapeAsPolygon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[15]);
}

// ===================================================================

class PadShapeAsPolygonResponse::_Internal {
 public:
};

void PadShapeAsPolygonResponse::clear_pads() {
  pads_.Clear();
}
void PadShapeAsPolygonResponse::clear_polygons() {
  polygons_.Clear();
}
PadShapeAsPolygonResponse::PadShapeAsPolygonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pads_(arena),
  polygons_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.PadShapeAsPolygonResponse)
}
PadShapeAsPolygonResponse::PadShapeAsPolygonResponse(const PadShapeAsPolygonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pads_(from.pads_),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.PadShapeAsPolygonResponse)
}

inline void PadShapeAsPolygonResponse::SharedCtor() {
}

PadShapeAsPolygonResponse::~PadShapeAsPolygonResponse() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.PadShapeAsPolygonResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PadShapeAsPolygonResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PadShapeAsPolygonResponse::ArenaDtor(void* object) {
  PadShapeAsPolygonResponse* _this = reinterpret_cast< PadShapeAsPolygonResponse* >(object);
  (void)_this;
}
void PadShapeAsPolygonResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PadShapeAsPolygonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PadShapeAsPolygonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.PadShapeAsPolygonResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pads_.Clear();
  polygons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PadShapeAsPolygonResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.common.types.KIID pads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.PolygonWithHoles polygons = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PadShapeAsPolygonResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.PadShapeAsPolygonResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID pads = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pads(i), target, stream);
  }

  // repeated .kiapi.common.types.PolygonWithHoles polygons = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.PadShapeAsPolygonResponse)
  return target;
}

size_t PadShapeAsPolygonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.PadShapeAsPolygonResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID pads = 1;
  total_size += 1UL * this->_internal_pads_size();
  for (const auto& msg : this->pads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kiapi.common.types.PolygonWithHoles polygons = 2;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PadShapeAsPolygonResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PadShapeAsPolygonResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PadShapeAsPolygonResponse::GetClassData() const { return &_class_data_; }

void PadShapeAsPolygonResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PadShapeAsPolygonResponse *>(to)->MergeFrom(
      static_cast<const PadShapeAsPolygonResponse &>(from));
}


void PadShapeAsPolygonResponse::MergeFrom(const PadShapeAsPolygonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.PadShapeAsPolygonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pads_.MergeFrom(from.pads_);
  polygons_.MergeFrom(from.polygons_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PadShapeAsPolygonResponse::CopyFrom(const PadShapeAsPolygonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.PadShapeAsPolygonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadShapeAsPolygonResponse::IsInitialized() const {
  return true;
}

void PadShapeAsPolygonResponse::InternalSwap(PadShapeAsPolygonResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pads_.InternalSwap(&other->pads_);
  polygons_.InternalSwap(&other->polygons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PadShapeAsPolygonResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[16]);
}

// ===================================================================

class GetVisibleLayers::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const GetVisibleLayers* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetVisibleLayers::_Internal::board(const GetVisibleLayers* msg) {
  return *msg->board_;
}
void GetVisibleLayers::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
GetVisibleLayers::GetVisibleLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetVisibleLayers)
}
GetVisibleLayers::GetVisibleLayers(const GetVisibleLayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetVisibleLayers)
}

inline void GetVisibleLayers::SharedCtor() {
board_ = nullptr;
}

GetVisibleLayers::~GetVisibleLayers() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetVisibleLayers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVisibleLayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void GetVisibleLayers::ArenaDtor(void* object) {
  GetVisibleLayers* _this = reinterpret_cast< GetVisibleLayers* >(object);
  (void)_this;
}
void GetVisibleLayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVisibleLayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVisibleLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetVisibleLayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVisibleLayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVisibleLayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetVisibleLayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetVisibleLayers)
  return target;
}

size_t GetVisibleLayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetVisibleLayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVisibleLayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVisibleLayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVisibleLayers::GetClassData() const { return &_class_data_; }

void GetVisibleLayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVisibleLayers *>(to)->MergeFrom(
      static_cast<const GetVisibleLayers &>(from));
}


void GetVisibleLayers::MergeFrom(const GetVisibleLayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetVisibleLayers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVisibleLayers::CopyFrom(const GetVisibleLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetVisibleLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVisibleLayers::IsInitialized() const {
  return true;
}

void GetVisibleLayers::InternalSwap(GetVisibleLayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVisibleLayers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[17]);
}

// ===================================================================

class BoardLayerResponse::_Internal {
 public:
};

BoardLayerResponse::BoardLayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.BoardLayerResponse)
}
BoardLayerResponse::BoardLayerResponse(const BoardLayerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.BoardLayerResponse)
}

inline void BoardLayerResponse::SharedCtor() {
layer_ = 0;
}

BoardLayerResponse::~BoardLayerResponse() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.BoardLayerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardLayerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoardLayerResponse::ArenaDtor(void* object) {
  BoardLayerResponse* _this = reinterpret_cast< BoardLayerResponse* >(object);
  (void)_this;
}
void BoardLayerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardLayerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardLayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.BoardLayerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardLayerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.BoardLayer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardLayerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.BoardLayerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.BoardLayerResponse)
  return target;
}

size_t BoardLayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.BoardLayerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardLayerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardLayerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardLayerResponse::GetClassData() const { return &_class_data_; }

void BoardLayerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardLayerResponse *>(to)->MergeFrom(
      static_cast<const BoardLayerResponse &>(from));
}


void BoardLayerResponse::MergeFrom(const BoardLayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.BoardLayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardLayerResponse::CopyFrom(const BoardLayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.BoardLayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardLayerResponse::IsInitialized() const {
  return true;
}

void BoardLayerResponse::InternalSwap(BoardLayerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(layer_, other->layer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardLayerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[18]);
}

// ===================================================================

class BoardLayers::_Internal {
 public:
};

BoardLayers::BoardLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.BoardLayers)
}
BoardLayers::BoardLayers(const BoardLayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.BoardLayers)
}

inline void BoardLayers::SharedCtor() {
}

BoardLayers::~BoardLayers() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.BoardLayers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardLayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoardLayers::ArenaDtor(void* object) {
  BoardLayers* _this = reinterpret_cast< BoardLayers* >(object);
  (void)_this;
}
void BoardLayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardLayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.BoardLayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardLayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.board.types.BoardLayer layers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_layers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_layers(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardLayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.BoardLayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.board.types.BoardLayer layers = 1;
  {
    int byte_size = _layers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, layers_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.BoardLayers)
  return target;
}

size_t BoardLayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.BoardLayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.BoardLayer layers = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_layers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_layers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardLayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardLayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardLayers::GetClassData() const { return &_class_data_; }

void BoardLayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardLayers *>(to)->MergeFrom(
      static_cast<const BoardLayers &>(from));
}


void BoardLayers::MergeFrom(const BoardLayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.BoardLayers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardLayers::CopyFrom(const BoardLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.BoardLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardLayers::IsInitialized() const {
  return true;
}

void BoardLayers::InternalSwap(BoardLayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardLayers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[19]);
}

// ===================================================================

class SetVisibleLayers::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const SetVisibleLayers* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
SetVisibleLayers::_Internal::board(const SetVisibleLayers* msg) {
  return *msg->board_;
}
void SetVisibleLayers::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
SetVisibleLayers::SetVisibleLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.SetVisibleLayers)
}
SetVisibleLayers::SetVisibleLayers(const SetVisibleLayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.SetVisibleLayers)
}

inline void SetVisibleLayers::SharedCtor() {
board_ = nullptr;
}

SetVisibleLayers::~SetVisibleLayers() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.SetVisibleLayers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetVisibleLayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void SetVisibleLayers::ArenaDtor(void* object) {
  SetVisibleLayers* _this = reinterpret_cast< SetVisibleLayers* >(object);
  (void)_this;
}
void SetVisibleLayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVisibleLayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetVisibleLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.SetVisibleLayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVisibleLayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.BoardLayer layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_layers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_layers(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVisibleLayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.SetVisibleLayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // repeated .kiapi.board.types.BoardLayer layers = 2;
  {
    int byte_size = _layers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, layers_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.SetVisibleLayers)
  return target;
}

size_t SetVisibleLayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.SetVisibleLayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.BoardLayer layers = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_layers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_layers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVisibleLayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetVisibleLayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVisibleLayers::GetClassData() const { return &_class_data_; }

void SetVisibleLayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetVisibleLayers *>(to)->MergeFrom(
      static_cast<const SetVisibleLayers &>(from));
}


void SetVisibleLayers::MergeFrom(const SetVisibleLayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.SetVisibleLayers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVisibleLayers::CopyFrom(const SetVisibleLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.SetVisibleLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVisibleLayers::IsInitialized() const {
  return true;
}

void SetVisibleLayers::InternalSwap(SetVisibleLayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVisibleLayers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[20]);
}

// ===================================================================

class GetActiveLayer::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const GetActiveLayer* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
GetActiveLayer::_Internal::board(const GetActiveLayer* msg) {
  return *msg->board_;
}
void GetActiveLayer::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
GetActiveLayer::GetActiveLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetActiveLayer)
}
GetActiveLayer::GetActiveLayer(const GetActiveLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetActiveLayer)
}

inline void GetActiveLayer::SharedCtor() {
board_ = nullptr;
}

GetActiveLayer::~GetActiveLayer() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.GetActiveLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetActiveLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void GetActiveLayer::ArenaDtor(void* object) {
  GetActiveLayer* _this = reinterpret_cast< GetActiveLayer* >(object);
  (void)_this;
}
void GetActiveLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetActiveLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetActiveLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.GetActiveLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActiveLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetActiveLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.GetActiveLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.GetActiveLayer)
  return target;
}

size_t GetActiveLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.GetActiveLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActiveLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetActiveLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActiveLayer::GetClassData() const { return &_class_data_; }

void GetActiveLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetActiveLayer *>(to)->MergeFrom(
      static_cast<const GetActiveLayer &>(from));
}


void GetActiveLayer::MergeFrom(const GetActiveLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.GetActiveLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActiveLayer::CopyFrom(const GetActiveLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.GetActiveLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveLayer::IsInitialized() const {
  return true;
}

void GetActiveLayer::InternalSwap(GetActiveLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActiveLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[21]);
}

// ===================================================================

class SetActiveLayer::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const SetActiveLayer* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
SetActiveLayer::_Internal::board(const SetActiveLayer* msg) {
  return *msg->board_;
}
void SetActiveLayer::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
SetActiveLayer::SetActiveLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.SetActiveLayer)
}
SetActiveLayer::SetActiveLayer(const SetActiveLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.SetActiveLayer)
}

inline void SetActiveLayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&board_)) + sizeof(layer_));
}

SetActiveLayer::~SetActiveLayer() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.SetActiveLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetActiveLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void SetActiveLayer::ArenaDtor(void* object) {
  SetActiveLayer* _this = reinterpret_cast< SetActiveLayer* >(object);
  (void)_this;
}
void SetActiveLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetActiveLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetActiveLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.SetActiveLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActiveLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetActiveLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.SetActiveLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // .kiapi.board.types.BoardLayer layer = 2;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.SetActiveLayer)
  return target;
}

size_t SetActiveLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.SetActiveLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  // .kiapi.board.types.BoardLayer layer = 2;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetActiveLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetActiveLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetActiveLayer::GetClassData() const { return &_class_data_; }

void SetActiveLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetActiveLayer *>(to)->MergeFrom(
      static_cast<const SetActiveLayer &>(from));
}


void SetActiveLayer::MergeFrom(const SetActiveLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.SetActiveLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetActiveLayer::CopyFrom(const SetActiveLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.SetActiveLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActiveLayer::IsInitialized() const {
  return true;
}

void SetActiveLayer::InternalSwap(SetActiveLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetActiveLayer, layer_)
      + sizeof(SetActiveLayer::layer_)
      - PROTOBUF_FIELD_OFFSET(SetActiveLayer, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActiveLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[22]);
}

// ===================================================================

class BoardEditorAppearanceSettings::_Internal {
 public:
};

BoardEditorAppearanceSettings::BoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.BoardEditorAppearanceSettings)
}
BoardEditorAppearanceSettings::BoardEditorAppearanceSettings(const BoardEditorAppearanceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inactive_layer_display_, &from.inactive_layer_display_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratsnest_display_) -
    reinterpret_cast<char*>(&inactive_layer_display_)) + sizeof(ratsnest_display_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.BoardEditorAppearanceSettings)
}

inline void BoardEditorAppearanceSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inactive_layer_display_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ratsnest_display_) -
    reinterpret_cast<char*>(&inactive_layer_display_)) + sizeof(ratsnest_display_));
}

BoardEditorAppearanceSettings::~BoardEditorAppearanceSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.BoardEditorAppearanceSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardEditorAppearanceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoardEditorAppearanceSettings::ArenaDtor(void* object) {
  BoardEditorAppearanceSettings* _this = reinterpret_cast< BoardEditorAppearanceSettings* >(object);
  (void)_this;
}
void BoardEditorAppearanceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardEditorAppearanceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardEditorAppearanceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.BoardEditorAppearanceSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inactive_layer_display_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratsnest_display_) -
      reinterpret_cast<char*>(&inactive_layer_display_)) + sizeof(ratsnest_display_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardEditorAppearanceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.commands.InactiveLayerDisplayMode inactive_layer_display = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inactive_layer_display(static_cast<::kiapi::board::commands::InactiveLayerDisplayMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.commands.NetColorDisplayMode net_color_display = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_net_color_display(static_cast<::kiapi::board::commands::NetColorDisplayMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.commands.BoardFlipMode board_flip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_board_flip(static_cast<::kiapi::board::commands::BoardFlipMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.commands.RatsnestDisplayMode ratsnest_display = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ratsnest_display(static_cast<::kiapi::board::commands::RatsnestDisplayMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardEditorAppearanceSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.BoardEditorAppearanceSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.commands.InactiveLayerDisplayMode inactive_layer_display = 1;
  if (this->_internal_inactive_layer_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inactive_layer_display(), target);
  }

  // .kiapi.board.commands.NetColorDisplayMode net_color_display = 2;
  if (this->_internal_net_color_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_net_color_display(), target);
  }

  // .kiapi.board.commands.BoardFlipMode board_flip = 3;
  if (this->_internal_board_flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_board_flip(), target);
  }

  // .kiapi.board.commands.RatsnestDisplayMode ratsnest_display = 4;
  if (this->_internal_ratsnest_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_ratsnest_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.BoardEditorAppearanceSettings)
  return target;
}

size_t BoardEditorAppearanceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.BoardEditorAppearanceSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.commands.InactiveLayerDisplayMode inactive_layer_display = 1;
  if (this->_internal_inactive_layer_display() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inactive_layer_display());
  }

  // .kiapi.board.commands.NetColorDisplayMode net_color_display = 2;
  if (this->_internal_net_color_display() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_net_color_display());
  }

  // .kiapi.board.commands.BoardFlipMode board_flip = 3;
  if (this->_internal_board_flip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_board_flip());
  }

  // .kiapi.board.commands.RatsnestDisplayMode ratsnest_display = 4;
  if (this->_internal_ratsnest_display() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ratsnest_display());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardEditorAppearanceSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardEditorAppearanceSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardEditorAppearanceSettings::GetClassData() const { return &_class_data_; }

void BoardEditorAppearanceSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardEditorAppearanceSettings *>(to)->MergeFrom(
      static_cast<const BoardEditorAppearanceSettings &>(from));
}


void BoardEditorAppearanceSettings::MergeFrom(const BoardEditorAppearanceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.BoardEditorAppearanceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inactive_layer_display() != 0) {
    _internal_set_inactive_layer_display(from._internal_inactive_layer_display());
  }
  if (from._internal_net_color_display() != 0) {
    _internal_set_net_color_display(from._internal_net_color_display());
  }
  if (from._internal_board_flip() != 0) {
    _internal_set_board_flip(from._internal_board_flip());
  }
  if (from._internal_ratsnest_display() != 0) {
    _internal_set_ratsnest_display(from._internal_ratsnest_display());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardEditorAppearanceSettings::CopyFrom(const BoardEditorAppearanceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.BoardEditorAppearanceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardEditorAppearanceSettings::IsInitialized() const {
  return true;
}

void BoardEditorAppearanceSettings::InternalSwap(BoardEditorAppearanceSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardEditorAppearanceSettings, ratsnest_display_)
      + sizeof(BoardEditorAppearanceSettings::ratsnest_display_)
      - PROTOBUF_FIELD_OFFSET(BoardEditorAppearanceSettings, inactive_layer_display_)>(
          reinterpret_cast<char*>(&inactive_layer_display_),
          reinterpret_cast<char*>(&other->inactive_layer_display_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardEditorAppearanceSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[23]);
}

// ===================================================================

class GetBoardEditorAppearanceSettings::_Internal {
 public:
};

GetBoardEditorAppearanceSettings::GetBoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.GetBoardEditorAppearanceSettings)
}
GetBoardEditorAppearanceSettings::GetBoardEditorAppearanceSettings(const GetBoardEditorAppearanceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.GetBoardEditorAppearanceSettings)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBoardEditorAppearanceSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBoardEditorAppearanceSettings::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBoardEditorAppearanceSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[24]);
}

// ===================================================================

class SetBoardEditorAppearanceSettings::_Internal {
 public:
  static const ::kiapi::board::commands::BoardEditorAppearanceSettings& settings(const SetBoardEditorAppearanceSettings* msg);
};

const ::kiapi::board::commands::BoardEditorAppearanceSettings&
SetBoardEditorAppearanceSettings::_Internal::settings(const SetBoardEditorAppearanceSettings* msg) {
  return *msg->settings_;
}
SetBoardEditorAppearanceSettings::SetBoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.SetBoardEditorAppearanceSettings)
}
SetBoardEditorAppearanceSettings::SetBoardEditorAppearanceSettings(const SetBoardEditorAppearanceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::kiapi::board::commands::BoardEditorAppearanceSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.SetBoardEditorAppearanceSettings)
}

inline void SetBoardEditorAppearanceSettings::SharedCtor() {
settings_ = nullptr;
}

SetBoardEditorAppearanceSettings::~SetBoardEditorAppearanceSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.SetBoardEditorAppearanceSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBoardEditorAppearanceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void SetBoardEditorAppearanceSettings::ArenaDtor(void* object) {
  SetBoardEditorAppearanceSettings* _this = reinterpret_cast< SetBoardEditorAppearanceSettings* >(object);
  (void)_this;
}
void SetBoardEditorAppearanceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBoardEditorAppearanceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBoardEditorAppearanceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.SetBoardEditorAppearanceSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBoardEditorAppearanceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.commands.BoardEditorAppearanceSettings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetBoardEditorAppearanceSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.SetBoardEditorAppearanceSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.commands.BoardEditorAppearanceSettings settings = 1;
  if (this->_internal_has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.SetBoardEditorAppearanceSettings)
  return target;
}

size_t SetBoardEditorAppearanceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.SetBoardEditorAppearanceSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.commands.BoardEditorAppearanceSettings settings = 1;
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBoardEditorAppearanceSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBoardEditorAppearanceSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBoardEditorAppearanceSettings::GetClassData() const { return &_class_data_; }

void SetBoardEditorAppearanceSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBoardEditorAppearanceSettings *>(to)->MergeFrom(
      static_cast<const SetBoardEditorAppearanceSettings &>(from));
}


void SetBoardEditorAppearanceSettings::MergeFrom(const SetBoardEditorAppearanceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.SetBoardEditorAppearanceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_settings()) {
    _internal_mutable_settings()->::kiapi::board::commands::BoardEditorAppearanceSettings::MergeFrom(from._internal_settings());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBoardEditorAppearanceSettings::CopyFrom(const SetBoardEditorAppearanceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.SetBoardEditorAppearanceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBoardEditorAppearanceSettings::IsInitialized() const {
  return true;
}

void SetBoardEditorAppearanceSettings::InternalSwap(SetBoardEditorAppearanceSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBoardEditorAppearanceSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[25]);
}

// ===================================================================

class InteractiveMoveItems::_Internal {
 public:
  static const ::kiapi::common::types::DocumentSpecifier& board(const InteractiveMoveItems* msg);
};

const ::kiapi::common::types::DocumentSpecifier&
InteractiveMoveItems::_Internal::board(const InteractiveMoveItems* msg) {
  return *msg->board_;
}
void InteractiveMoveItems::clear_board() {
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
}
void InteractiveMoveItems::clear_items() {
  items_.Clear();
}
InteractiveMoveItems::InteractiveMoveItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.commands.InteractiveMoveItems)
}
InteractiveMoveItems::InteractiveMoveItems(const InteractiveMoveItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_board()) {
    board_ = new ::kiapi::common::types::DocumentSpecifier(*from.board_);
  } else {
    board_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.commands.InteractiveMoveItems)
}

inline void InteractiveMoveItems::SharedCtor() {
board_ = nullptr;
}

InteractiveMoveItems::~InteractiveMoveItems() {
  // @@protoc_insertion_point(destructor:kiapi.board.commands.InteractiveMoveItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InteractiveMoveItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete board_;
}

void InteractiveMoveItems::ArenaDtor(void* object) {
  InteractiveMoveItems* _this = reinterpret_cast< InteractiveMoveItems* >(object);
  (void)_this;
}
void InteractiveMoveItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractiveMoveItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InteractiveMoveItems::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.commands.InteractiveMoveItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && board_ != nullptr) {
    delete board_;
  }
  board_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveMoveItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.DocumentSpecifier board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_board(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.common.types.KIID items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InteractiveMoveItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.commands.InteractiveMoveItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::board(this), target, stream);
  }

  // repeated .kiapi.common.types.KIID items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.commands.InteractiveMoveItems)
  return target;
}

size_t InteractiveMoveItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.commands.InteractiveMoveItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.common.types.KIID items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.DocumentSpecifier board = 1;
  if (this->_internal_has_board()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InteractiveMoveItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InteractiveMoveItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InteractiveMoveItems::GetClassData() const { return &_class_data_; }

void InteractiveMoveItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InteractiveMoveItems *>(to)->MergeFrom(
      static_cast<const InteractiveMoveItems &>(from));
}


void InteractiveMoveItems::MergeFrom(const InteractiveMoveItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.commands.InteractiveMoveItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_board()) {
    _internal_mutable_board()->::kiapi::common::types::DocumentSpecifier::MergeFrom(from._internal_board());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InteractiveMoveItems::CopyFrom(const InteractiveMoveItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.commands.InteractiveMoveItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveMoveItems::IsInitialized() const {
  return true;
}

void InteractiveMoveItems::InternalSwap(InteractiveMoveItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(board_, other->board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveMoveItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5fcommands_2eproto_getter, &descriptor_table_board_2fboard_5fcommands_2eproto_once,
      file_level_metadata_board_2fboard_5fcommands_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace board
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetBoardStackup* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetBoardStackup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetBoardStackup >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::BoardStackupResponse* Arena::CreateMaybeMessage< ::kiapi::board::commands::BoardStackupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::BoardStackupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::UpdateBoardStackup* Arena::CreateMaybeMessage< ::kiapi::board::commands::UpdateBoardStackup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::UpdateBoardStackup >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetGraphicsDefaults* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetGraphicsDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetGraphicsDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GraphicsDefaultsResponse* Arena::CreateMaybeMessage< ::kiapi::board::commands::GraphicsDefaultsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GraphicsDefaultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetBoardOrigin* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetBoardOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetBoardOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::SetBoardOrigin* Arena::CreateMaybeMessage< ::kiapi::board::commands::SetBoardOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::SetBoardOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetNets* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetNets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetNets >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::NetsResponse* Arena::CreateMaybeMessage< ::kiapi::board::commands::NetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::NetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetItemsByNet* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetItemsByNet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetItemsByNet >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetItemsByNetClass* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetItemsByNetClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetItemsByNetClass >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetNetClassForNets* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetNetClassForNets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetNetClassForNets >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse* Arena::CreateMaybeMessage< ::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::NetClassForNetsResponse* Arena::CreateMaybeMessage< ::kiapi::board::commands::NetClassForNetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::NetClassForNetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::RefillZones* Arena::CreateMaybeMessage< ::kiapi::board::commands::RefillZones >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::RefillZones >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetPadShapeAsPolygon* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetPadShapeAsPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetPadShapeAsPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::PadShapeAsPolygonResponse* Arena::CreateMaybeMessage< ::kiapi::board::commands::PadShapeAsPolygonResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::PadShapeAsPolygonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetVisibleLayers* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetVisibleLayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetVisibleLayers >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::BoardLayerResponse* Arena::CreateMaybeMessage< ::kiapi::board::commands::BoardLayerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::BoardLayerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::BoardLayers* Arena::CreateMaybeMessage< ::kiapi::board::commands::BoardLayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::BoardLayers >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::SetVisibleLayers* Arena::CreateMaybeMessage< ::kiapi::board::commands::SetVisibleLayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::SetVisibleLayers >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetActiveLayer* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetActiveLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetActiveLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::SetActiveLayer* Arena::CreateMaybeMessage< ::kiapi::board::commands::SetActiveLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::SetActiveLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::BoardEditorAppearanceSettings* Arena::CreateMaybeMessage< ::kiapi::board::commands::BoardEditorAppearanceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::BoardEditorAppearanceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::GetBoardEditorAppearanceSettings* Arena::CreateMaybeMessage< ::kiapi::board::commands::GetBoardEditorAppearanceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::GetBoardEditorAppearanceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::SetBoardEditorAppearanceSettings* Arena::CreateMaybeMessage< ::kiapi::board::commands::SetBoardEditorAppearanceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::SetBoardEditorAppearanceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::commands::InteractiveMoveItems* Arena::CreateMaybeMessage< ::kiapi::board::commands::InteractiveMoveItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::commands::InteractiveMoveItems >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
