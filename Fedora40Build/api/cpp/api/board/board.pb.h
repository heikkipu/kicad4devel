// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board/board.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_board_2fboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_board_2fboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/types/base_types.pb.h"
#include "board/board_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_board_2fboard_2eproto KIAPI_IMPORTEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct KIAPI_IMPORTEXPORT TableStruct_board_2fboard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
KIAPI_IMPORTEXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_board_2fboard_2eproto;
namespace kiapi {
namespace board {
class BoardDesignRules;
struct BoardDesignRulesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardDesignRulesDefaultTypeInternal _BoardDesignRules_default_instance_;
class BoardEdgeConnector;
struct BoardEdgeConnectorDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardEdgeConnectorDefaultTypeInternal _BoardEdgeConnector_default_instance_;
class BoardEdgeSettings;
struct BoardEdgeSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardEdgeSettingsDefaultTypeInternal _BoardEdgeSettings_default_instance_;
class BoardFinish;
struct BoardFinishDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardFinishDefaultTypeInternal _BoardFinish_default_instance_;
class BoardImpedanceControl;
struct BoardImpedanceControlDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardImpedanceControlDefaultTypeInternal _BoardImpedanceControl_default_instance_;
class BoardLayerGraphicsDefaults;
struct BoardLayerGraphicsDefaultsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardLayerGraphicsDefaultsDefaultTypeInternal _BoardLayerGraphicsDefaults_default_instance_;
class BoardSettings;
struct BoardSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardSettingsDefaultTypeInternal _BoardSettings_default_instance_;
class BoardStackup;
struct BoardStackupDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardStackupDefaultTypeInternal _BoardStackup_default_instance_;
class BoardStackupCopperLayer;
struct BoardStackupCopperLayerDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardStackupCopperLayerDefaultTypeInternal _BoardStackupCopperLayer_default_instance_;
class BoardStackupDielectricLayer;
struct BoardStackupDielectricLayerDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardStackupDielectricLayerDefaultTypeInternal _BoardStackupDielectricLayer_default_instance_;
class BoardStackupDielectricProperties;
struct BoardStackupDielectricPropertiesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardStackupDielectricPropertiesDefaultTypeInternal _BoardStackupDielectricProperties_default_instance_;
class BoardStackupLayer;
struct BoardStackupLayerDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardStackupLayerDefaultTypeInternal _BoardStackupLayer_default_instance_;
class Castellation;
struct CastellationDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern CastellationDefaultTypeInternal _Castellation_default_instance_;
class EdgePlating;
struct EdgePlatingDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern EdgePlatingDefaultTypeInternal _EdgePlating_default_instance_;
class GraphicsDefaults;
struct GraphicsDefaultsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GraphicsDefaultsDefaultTypeInternal _GraphicsDefaults_default_instance_;
}  // namespace board
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardDesignRules* Arena::CreateMaybeMessage<::kiapi::board::BoardDesignRules>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardEdgeConnector* Arena::CreateMaybeMessage<::kiapi::board::BoardEdgeConnector>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardEdgeSettings* Arena::CreateMaybeMessage<::kiapi::board::BoardEdgeSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardFinish* Arena::CreateMaybeMessage<::kiapi::board::BoardFinish>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardImpedanceControl* Arena::CreateMaybeMessage<::kiapi::board::BoardImpedanceControl>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardLayerGraphicsDefaults* Arena::CreateMaybeMessage<::kiapi::board::BoardLayerGraphicsDefaults>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardSettings* Arena::CreateMaybeMessage<::kiapi::board::BoardSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardStackup* Arena::CreateMaybeMessage<::kiapi::board::BoardStackup>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardStackupCopperLayer* Arena::CreateMaybeMessage<::kiapi::board::BoardStackupCopperLayer>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardStackupDielectricLayer* Arena::CreateMaybeMessage<::kiapi::board::BoardStackupDielectricLayer>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardStackupDielectricProperties* Arena::CreateMaybeMessage<::kiapi::board::BoardStackupDielectricProperties>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::BoardStackupLayer* Arena::CreateMaybeMessage<::kiapi::board::BoardStackupLayer>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::Castellation* Arena::CreateMaybeMessage<::kiapi::board::Castellation>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::EdgePlating* Arena::CreateMaybeMessage<::kiapi::board::EdgePlating>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::GraphicsDefaults* Arena::CreateMaybeMessage<::kiapi::board::GraphicsDefaults>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kiapi {
namespace board {

enum BoardStackupLayerType : int {
  BSLT_UNKNOWN = 0,
  BSLT_COPPER = 1,
  BSLT_DIELECTRIC = 2,
  BSLT_SILKSCREEN = 3,
  BSLT_SOLDERMASK = 4,
  BSLT_SOLDERPASTE = 5,
  BSLT_UNDEFINED = 7,
  BoardStackupLayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BoardStackupLayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool BoardStackupLayerType_IsValid(int value);
constexpr BoardStackupLayerType BoardStackupLayerType_MIN = BSLT_UNKNOWN;
constexpr BoardStackupLayerType BoardStackupLayerType_MAX = BSLT_UNDEFINED;
constexpr int BoardStackupLayerType_ARRAYSIZE = BoardStackupLayerType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardStackupLayerType_descriptor();
template<typename T>
inline const std::string& BoardStackupLayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoardStackupLayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoardStackupLayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoardStackupLayerType_descriptor(), enum_t_value);
}
inline bool BoardStackupLayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoardStackupLayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoardStackupLayerType>(
    BoardStackupLayerType_descriptor(), name, value);
}
enum BoardLayerClass : int {
  BLC_UNKNOWN = 0,
  BLC_SILKSCREEN = 1,
  BLC_COPPER = 2,
  BLC_EDGES = 3,
  BLC_COURTYARD = 4,
  BLC_FABRICATION = 5,
  BLC_OTHER = 6,
  BoardLayerClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BoardLayerClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool BoardLayerClass_IsValid(int value);
constexpr BoardLayerClass BoardLayerClass_MIN = BLC_UNKNOWN;
constexpr BoardLayerClass BoardLayerClass_MAX = BLC_OTHER;
constexpr int BoardLayerClass_ARRAYSIZE = BoardLayerClass_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardLayerClass_descriptor();
template<typename T>
inline const std::string& BoardLayerClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoardLayerClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoardLayerClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoardLayerClass_descriptor(), enum_t_value);
}
inline bool BoardLayerClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoardLayerClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoardLayerClass>(
    BoardLayerClass_descriptor(), name, value);
}
// ===================================================================

class KIAPI_IMPORTEXPORT BoardFinish final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardFinish) */ {
 public:
  inline BoardFinish() : BoardFinish(nullptr) {}
  ~BoardFinish() override;
  explicit constexpr BoardFinish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardFinish(const BoardFinish& from);
  BoardFinish(BoardFinish&& from) noexcept
    : BoardFinish() {
    *this = ::std::move(from);
  }

  inline BoardFinish& operator=(const BoardFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardFinish& operator=(BoardFinish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardFinish& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardFinish* internal_default_instance() {
    return reinterpret_cast<const BoardFinish*>(
               &_BoardFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoardFinish& a, BoardFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardFinish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardFinish>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardFinish& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardFinish& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardFinish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardFinish";
  }
  protected:
  explicit BoardFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeNameFieldNumber = 1,
  };
  // string type_name = 1;
  void clear_type_name();
  const std::string& type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_name();
  PROTOBUF_NODISCARD std::string* release_type_name();
  void set_allocated_type_name(std::string* type_name);
  private:
  const std::string& _internal_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_name(const std::string& value);
  std::string* _internal_mutable_type_name();
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardImpedanceControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardImpedanceControl) */ {
 public:
  inline BoardImpedanceControl() : BoardImpedanceControl(nullptr) {}
  ~BoardImpedanceControl() override;
  explicit constexpr BoardImpedanceControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardImpedanceControl(const BoardImpedanceControl& from);
  BoardImpedanceControl(BoardImpedanceControl&& from) noexcept
    : BoardImpedanceControl() {
    *this = ::std::move(from);
  }

  inline BoardImpedanceControl& operator=(const BoardImpedanceControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardImpedanceControl& operator=(BoardImpedanceControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardImpedanceControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardImpedanceControl* internal_default_instance() {
    return reinterpret_cast<const BoardImpedanceControl*>(
               &_BoardImpedanceControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoardImpedanceControl& a, BoardImpedanceControl& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardImpedanceControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardImpedanceControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardImpedanceControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardImpedanceControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardImpedanceControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardImpedanceControl& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardImpedanceControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardImpedanceControl";
  }
  protected:
  explicit BoardImpedanceControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsControlledFieldNumber = 1,
  };
  // bool is_controlled = 1;
  void clear_is_controlled();
  bool is_controlled() const;
  void set_is_controlled(bool value);
  private:
  bool _internal_is_controlled() const;
  void _internal_set_is_controlled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardImpedanceControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_controlled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardEdgeConnector final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kiapi.board.BoardEdgeConnector) */ {
 public:
  inline BoardEdgeConnector() : BoardEdgeConnector(nullptr) {}
  explicit constexpr BoardEdgeConnector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardEdgeConnector(const BoardEdgeConnector& from);
  BoardEdgeConnector(BoardEdgeConnector&& from) noexcept
    : BoardEdgeConnector() {
    *this = ::std::move(from);
  }

  inline BoardEdgeConnector& operator=(const BoardEdgeConnector& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardEdgeConnector& operator=(BoardEdgeConnector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardEdgeConnector& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardEdgeConnector* internal_default_instance() {
    return reinterpret_cast<const BoardEdgeConnector*>(
               &_BoardEdgeConnector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BoardEdgeConnector& a, BoardEdgeConnector& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardEdgeConnector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardEdgeConnector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardEdgeConnector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardEdgeConnector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BoardEdgeConnector& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BoardEdgeConnector& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardEdgeConnector";
  }
  protected:
  explicit BoardEdgeConnector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardEdgeConnector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT Castellation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.Castellation) */ {
 public:
  inline Castellation() : Castellation(nullptr) {}
  ~Castellation() override;
  explicit constexpr Castellation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Castellation(const Castellation& from);
  Castellation(Castellation&& from) noexcept
    : Castellation() {
    *this = ::std::move(from);
  }

  inline Castellation& operator=(const Castellation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Castellation& operator=(Castellation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Castellation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Castellation* internal_default_instance() {
    return reinterpret_cast<const Castellation*>(
               &_Castellation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Castellation& a, Castellation& b) {
    a.Swap(&b);
  }
  inline void Swap(Castellation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Castellation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Castellation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Castellation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Castellation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Castellation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Castellation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.Castellation";
  }
  protected:
  explicit Castellation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasCastellatedPadsFieldNumber = 1,
  };
  // bool has_castellated_pads = 1;
  void clear_has_castellated_pads();
  bool has_castellated_pads() const;
  void set_has_castellated_pads(bool value);
  private:
  bool _internal_has_castellated_pads() const;
  void _internal_set_has_castellated_pads(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.Castellation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool has_castellated_pads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT EdgePlating final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.EdgePlating) */ {
 public:
  inline EdgePlating() : EdgePlating(nullptr) {}
  ~EdgePlating() override;
  explicit constexpr EdgePlating(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgePlating(const EdgePlating& from);
  EdgePlating(EdgePlating&& from) noexcept
    : EdgePlating() {
    *this = ::std::move(from);
  }

  inline EdgePlating& operator=(const EdgePlating& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgePlating& operator=(EdgePlating&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgePlating& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgePlating* internal_default_instance() {
    return reinterpret_cast<const EdgePlating*>(
               &_EdgePlating_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EdgePlating& a, EdgePlating& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgePlating* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgePlating* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgePlating* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgePlating>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgePlating& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EdgePlating& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgePlating* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.EdgePlating";
  }
  protected:
  explicit EdgePlating(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasEdgePlatingFieldNumber = 1,
  };
  // bool has_edge_plating = 1;
  void clear_has_edge_plating();
  bool has_edge_plating() const;
  void set_has_edge_plating(bool value);
  private:
  bool _internal_has_edge_plating() const;
  void _internal_set_has_edge_plating(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.EdgePlating)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool has_edge_plating_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardEdgeSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardEdgeSettings) */ {
 public:
  inline BoardEdgeSettings() : BoardEdgeSettings(nullptr) {}
  ~BoardEdgeSettings() override;
  explicit constexpr BoardEdgeSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardEdgeSettings(const BoardEdgeSettings& from);
  BoardEdgeSettings(BoardEdgeSettings&& from) noexcept
    : BoardEdgeSettings() {
    *this = ::std::move(from);
  }

  inline BoardEdgeSettings& operator=(const BoardEdgeSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardEdgeSettings& operator=(BoardEdgeSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardEdgeSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardEdgeSettings* internal_default_instance() {
    return reinterpret_cast<const BoardEdgeSettings*>(
               &_BoardEdgeSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoardEdgeSettings& a, BoardEdgeSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardEdgeSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardEdgeSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardEdgeSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardEdgeSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardEdgeSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardEdgeSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardEdgeSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardEdgeSettings";
  }
  protected:
  explicit BoardEdgeSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectorFieldNumber = 1,
    kCastellationFieldNumber = 2,
    kPlatingFieldNumber = 3,
  };
  // .kiapi.board.BoardEdgeConnector connector = 1;
  bool has_connector() const;
  private:
  bool _internal_has_connector() const;
  public:
  void clear_connector();
  const ::kiapi::board::BoardEdgeConnector& connector() const;
  PROTOBUF_NODISCARD ::kiapi::board::BoardEdgeConnector* release_connector();
  ::kiapi::board::BoardEdgeConnector* mutable_connector();
  void set_allocated_connector(::kiapi::board::BoardEdgeConnector* connector);
  private:
  const ::kiapi::board::BoardEdgeConnector& _internal_connector() const;
  ::kiapi::board::BoardEdgeConnector* _internal_mutable_connector();
  public:
  void unsafe_arena_set_allocated_connector(
      ::kiapi::board::BoardEdgeConnector* connector);
  ::kiapi::board::BoardEdgeConnector* unsafe_arena_release_connector();

  // .kiapi.board.Castellation castellation = 2;
  bool has_castellation() const;
  private:
  bool _internal_has_castellation() const;
  public:
  void clear_castellation();
  const ::kiapi::board::Castellation& castellation() const;
  PROTOBUF_NODISCARD ::kiapi::board::Castellation* release_castellation();
  ::kiapi::board::Castellation* mutable_castellation();
  void set_allocated_castellation(::kiapi::board::Castellation* castellation);
  private:
  const ::kiapi::board::Castellation& _internal_castellation() const;
  ::kiapi::board::Castellation* _internal_mutable_castellation();
  public:
  void unsafe_arena_set_allocated_castellation(
      ::kiapi::board::Castellation* castellation);
  ::kiapi::board::Castellation* unsafe_arena_release_castellation();

  // .kiapi.board.EdgePlating plating = 3;
  bool has_plating() const;
  private:
  bool _internal_has_plating() const;
  public:
  void clear_plating();
  const ::kiapi::board::EdgePlating& plating() const;
  PROTOBUF_NODISCARD ::kiapi::board::EdgePlating* release_plating();
  ::kiapi::board::EdgePlating* mutable_plating();
  void set_allocated_plating(::kiapi::board::EdgePlating* plating);
  private:
  const ::kiapi::board::EdgePlating& _internal_plating() const;
  ::kiapi::board::EdgePlating* _internal_mutable_plating();
  public:
  void unsafe_arena_set_allocated_plating(
      ::kiapi::board::EdgePlating* plating);
  ::kiapi::board::EdgePlating* unsafe_arena_release_plating();

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardEdgeSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::BoardEdgeConnector* connector_;
  ::kiapi::board::Castellation* castellation_;
  ::kiapi::board::EdgePlating* plating_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardStackupCopperLayer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kiapi.board.BoardStackupCopperLayer) */ {
 public:
  inline BoardStackupCopperLayer() : BoardStackupCopperLayer(nullptr) {}
  explicit constexpr BoardStackupCopperLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardStackupCopperLayer(const BoardStackupCopperLayer& from);
  BoardStackupCopperLayer(BoardStackupCopperLayer&& from) noexcept
    : BoardStackupCopperLayer() {
    *this = ::std::move(from);
  }

  inline BoardStackupCopperLayer& operator=(const BoardStackupCopperLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardStackupCopperLayer& operator=(BoardStackupCopperLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardStackupCopperLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardStackupCopperLayer* internal_default_instance() {
    return reinterpret_cast<const BoardStackupCopperLayer*>(
               &_BoardStackupCopperLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BoardStackupCopperLayer& a, BoardStackupCopperLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardStackupCopperLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardStackupCopperLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardStackupCopperLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardStackupCopperLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BoardStackupCopperLayer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BoardStackupCopperLayer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardStackupCopperLayer";
  }
  protected:
  explicit BoardStackupCopperLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardStackupCopperLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardStackupDielectricProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardStackupDielectricProperties) */ {
 public:
  inline BoardStackupDielectricProperties() : BoardStackupDielectricProperties(nullptr) {}
  ~BoardStackupDielectricProperties() override;
  explicit constexpr BoardStackupDielectricProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardStackupDielectricProperties(const BoardStackupDielectricProperties& from);
  BoardStackupDielectricProperties(BoardStackupDielectricProperties&& from) noexcept
    : BoardStackupDielectricProperties() {
    *this = ::std::move(from);
  }

  inline BoardStackupDielectricProperties& operator=(const BoardStackupDielectricProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardStackupDielectricProperties& operator=(BoardStackupDielectricProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardStackupDielectricProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardStackupDielectricProperties* internal_default_instance() {
    return reinterpret_cast<const BoardStackupDielectricProperties*>(
               &_BoardStackupDielectricProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BoardStackupDielectricProperties& a, BoardStackupDielectricProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardStackupDielectricProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardStackupDielectricProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardStackupDielectricProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardStackupDielectricProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardStackupDielectricProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardStackupDielectricProperties& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardStackupDielectricProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardStackupDielectricProperties";
  }
  protected:
  explicit BoardStackupDielectricProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialNameFieldNumber = 3,
    kThicknessFieldNumber = 4,
    kEpsilonRFieldNumber = 1,
    kLossTangentFieldNumber = 2,
  };
  // string material_name = 3;
  void clear_material_name();
  const std::string& material_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_material_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_material_name();
  PROTOBUF_NODISCARD std::string* release_material_name();
  void set_allocated_material_name(std::string* material_name);
  private:
  const std::string& _internal_material_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_material_name(const std::string& value);
  std::string* _internal_mutable_material_name();
  public:

  // .kiapi.common.types.Distance thickness = 4;
  bool has_thickness() const;
  private:
  bool _internal_has_thickness() const;
  public:
  void clear_thickness();
  const ::kiapi::common::types::Distance& thickness() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_thickness();
  ::kiapi::common::types::Distance* mutable_thickness();
  void set_allocated_thickness(::kiapi::common::types::Distance* thickness);
  private:
  const ::kiapi::common::types::Distance& _internal_thickness() const;
  ::kiapi::common::types::Distance* _internal_mutable_thickness();
  public:
  void unsafe_arena_set_allocated_thickness(
      ::kiapi::common::types::Distance* thickness);
  ::kiapi::common::types::Distance* unsafe_arena_release_thickness();

  // double epsilon_r = 1;
  void clear_epsilon_r();
  double epsilon_r() const;
  void set_epsilon_r(double value);
  private:
  double _internal_epsilon_r() const;
  void _internal_set_epsilon_r(double value);
  public:

  // double loss_tangent = 2;
  void clear_loss_tangent();
  double loss_tangent() const;
  void set_loss_tangent(double value);
  private:
  double _internal_loss_tangent() const;
  void _internal_set_loss_tangent(double value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardStackupDielectricProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_name_;
  ::kiapi::common::types::Distance* thickness_;
  double epsilon_r_;
  double loss_tangent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardStackupDielectricLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardStackupDielectricLayer) */ {
 public:
  inline BoardStackupDielectricLayer() : BoardStackupDielectricLayer(nullptr) {}
  ~BoardStackupDielectricLayer() override;
  explicit constexpr BoardStackupDielectricLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardStackupDielectricLayer(const BoardStackupDielectricLayer& from);
  BoardStackupDielectricLayer(BoardStackupDielectricLayer&& from) noexcept
    : BoardStackupDielectricLayer() {
    *this = ::std::move(from);
  }

  inline BoardStackupDielectricLayer& operator=(const BoardStackupDielectricLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardStackupDielectricLayer& operator=(BoardStackupDielectricLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardStackupDielectricLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardStackupDielectricLayer* internal_default_instance() {
    return reinterpret_cast<const BoardStackupDielectricLayer*>(
               &_BoardStackupDielectricLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BoardStackupDielectricLayer& a, BoardStackupDielectricLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardStackupDielectricLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardStackupDielectricLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardStackupDielectricLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardStackupDielectricLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardStackupDielectricLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardStackupDielectricLayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardStackupDielectricLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardStackupDielectricLayer";
  }
  protected:
  explicit BoardStackupDielectricLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 1,
  };
  // repeated .kiapi.board.BoardStackupDielectricProperties layer = 1;
  int layer_size() const;
  private:
  int _internal_layer_size() const;
  public:
  void clear_layer();
  ::kiapi::board::BoardStackupDielectricProperties* mutable_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupDielectricProperties >*
      mutable_layer();
  private:
  const ::kiapi::board::BoardStackupDielectricProperties& _internal_layer(int index) const;
  ::kiapi::board::BoardStackupDielectricProperties* _internal_add_layer();
  public:
  const ::kiapi::board::BoardStackupDielectricProperties& layer(int index) const;
  ::kiapi::board::BoardStackupDielectricProperties* add_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupDielectricProperties >&
      layer() const;

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardStackupDielectricLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupDielectricProperties > layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardStackupLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardStackupLayer) */ {
 public:
  inline BoardStackupLayer() : BoardStackupLayer(nullptr) {}
  ~BoardStackupLayer() override;
  explicit constexpr BoardStackupLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardStackupLayer(const BoardStackupLayer& from);
  BoardStackupLayer(BoardStackupLayer&& from) noexcept
    : BoardStackupLayer() {
    *this = ::std::move(from);
  }

  inline BoardStackupLayer& operator=(const BoardStackupLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardStackupLayer& operator=(BoardStackupLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardStackupLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardStackupLayer* internal_default_instance() {
    return reinterpret_cast<const BoardStackupLayer*>(
               &_BoardStackupLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BoardStackupLayer& a, BoardStackupLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardStackupLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardStackupLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardStackupLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardStackupLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardStackupLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardStackupLayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardStackupLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardStackupLayer";
  }
  protected:
  explicit BoardStackupLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialNameFieldNumber = 7,
    kUserNameFieldNumber = 8,
    kThicknessFieldNumber = 1,
    kDielectricFieldNumber = 5,
    kColorFieldNumber = 6,
    kLayerFieldNumber = 2,
    kEnabledFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string material_name = 7;
  void clear_material_name();
  const std::string& material_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_material_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_material_name();
  PROTOBUF_NODISCARD std::string* release_material_name();
  void set_allocated_material_name(std::string* material_name);
  private:
  const std::string& _internal_material_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_material_name(const std::string& value);
  std::string* _internal_mutable_material_name();
  public:

  // string user_name = 8;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .kiapi.common.types.Distance thickness = 1;
  bool has_thickness() const;
  private:
  bool _internal_has_thickness() const;
  public:
  void clear_thickness();
  const ::kiapi::common::types::Distance& thickness() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_thickness();
  ::kiapi::common::types::Distance* mutable_thickness();
  void set_allocated_thickness(::kiapi::common::types::Distance* thickness);
  private:
  const ::kiapi::common::types::Distance& _internal_thickness() const;
  ::kiapi::common::types::Distance* _internal_mutable_thickness();
  public:
  void unsafe_arena_set_allocated_thickness(
      ::kiapi::common::types::Distance* thickness);
  ::kiapi::common::types::Distance* unsafe_arena_release_thickness();

  // .kiapi.board.BoardStackupDielectricLayer dielectric = 5;
  bool has_dielectric() const;
  private:
  bool _internal_has_dielectric() const;
  public:
  void clear_dielectric();
  const ::kiapi::board::BoardStackupDielectricLayer& dielectric() const;
  PROTOBUF_NODISCARD ::kiapi::board::BoardStackupDielectricLayer* release_dielectric();
  ::kiapi::board::BoardStackupDielectricLayer* mutable_dielectric();
  void set_allocated_dielectric(::kiapi::board::BoardStackupDielectricLayer* dielectric);
  private:
  const ::kiapi::board::BoardStackupDielectricLayer& _internal_dielectric() const;
  ::kiapi::board::BoardStackupDielectricLayer* _internal_mutable_dielectric();
  public:
  void unsafe_arena_set_allocated_dielectric(
      ::kiapi::board::BoardStackupDielectricLayer* dielectric);
  ::kiapi::board::BoardStackupDielectricLayer* unsafe_arena_release_dielectric();

  // .kiapi.common.types.Color color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::kiapi::common::types::Color& color() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Color* release_color();
  ::kiapi::common::types::Color* mutable_color();
  void set_allocated_color(::kiapi::common::types::Color* color);
  private:
  const ::kiapi::common::types::Color& _internal_color() const;
  ::kiapi::common::types::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::kiapi::common::types::Color* color);
  ::kiapi::common::types::Color* unsafe_arena_release_color();

  // .kiapi.board.types.BoardLayer layer = 2;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // bool enabled = 3;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .kiapi.board.BoardStackupLayerType type = 4;
  void clear_type();
  ::kiapi::board::BoardStackupLayerType type() const;
  void set_type(::kiapi::board::BoardStackupLayerType value);
  private:
  ::kiapi::board::BoardStackupLayerType _internal_type() const;
  void _internal_set_type(::kiapi::board::BoardStackupLayerType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardStackupLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::kiapi::common::types::Distance* thickness_;
  ::kiapi::board::BoardStackupDielectricLayer* dielectric_;
  ::kiapi::common::types::Color* color_;
  int layer_;
  bool enabled_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardStackup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardStackup) */ {
 public:
  inline BoardStackup() : BoardStackup(nullptr) {}
  ~BoardStackup() override;
  explicit constexpr BoardStackup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardStackup(const BoardStackup& from);
  BoardStackup(BoardStackup&& from) noexcept
    : BoardStackup() {
    *this = ::std::move(from);
  }

  inline BoardStackup& operator=(const BoardStackup& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardStackup& operator=(BoardStackup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardStackup& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardStackup* internal_default_instance() {
    return reinterpret_cast<const BoardStackup*>(
               &_BoardStackup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BoardStackup& a, BoardStackup& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardStackup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardStackup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardStackup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardStackup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardStackup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardStackup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardStackup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardStackup";
  }
  protected:
  explicit BoardStackup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 4,
    kFinishFieldNumber = 1,
    kImpedanceFieldNumber = 2,
    kEdgeFieldNumber = 3,
  };
  // repeated .kiapi.board.BoardStackupLayer layers = 4;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::kiapi::board::BoardStackupLayer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupLayer >*
      mutable_layers();
  private:
  const ::kiapi::board::BoardStackupLayer& _internal_layers(int index) const;
  ::kiapi::board::BoardStackupLayer* _internal_add_layers();
  public:
  const ::kiapi::board::BoardStackupLayer& layers(int index) const;
  ::kiapi::board::BoardStackupLayer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupLayer >&
      layers() const;

  // .kiapi.board.BoardFinish finish = 1;
  bool has_finish() const;
  private:
  bool _internal_has_finish() const;
  public:
  void clear_finish();
  const ::kiapi::board::BoardFinish& finish() const;
  PROTOBUF_NODISCARD ::kiapi::board::BoardFinish* release_finish();
  ::kiapi::board::BoardFinish* mutable_finish();
  void set_allocated_finish(::kiapi::board::BoardFinish* finish);
  private:
  const ::kiapi::board::BoardFinish& _internal_finish() const;
  ::kiapi::board::BoardFinish* _internal_mutable_finish();
  public:
  void unsafe_arena_set_allocated_finish(
      ::kiapi::board::BoardFinish* finish);
  ::kiapi::board::BoardFinish* unsafe_arena_release_finish();

  // .kiapi.board.BoardImpedanceControl impedance = 2;
  bool has_impedance() const;
  private:
  bool _internal_has_impedance() const;
  public:
  void clear_impedance();
  const ::kiapi::board::BoardImpedanceControl& impedance() const;
  PROTOBUF_NODISCARD ::kiapi::board::BoardImpedanceControl* release_impedance();
  ::kiapi::board::BoardImpedanceControl* mutable_impedance();
  void set_allocated_impedance(::kiapi::board::BoardImpedanceControl* impedance);
  private:
  const ::kiapi::board::BoardImpedanceControl& _internal_impedance() const;
  ::kiapi::board::BoardImpedanceControl* _internal_mutable_impedance();
  public:
  void unsafe_arena_set_allocated_impedance(
      ::kiapi::board::BoardImpedanceControl* impedance);
  ::kiapi::board::BoardImpedanceControl* unsafe_arena_release_impedance();

  // .kiapi.board.BoardEdgeSettings edge = 3;
  bool has_edge() const;
  private:
  bool _internal_has_edge() const;
  public:
  void clear_edge();
  const ::kiapi::board::BoardEdgeSettings& edge() const;
  PROTOBUF_NODISCARD ::kiapi::board::BoardEdgeSettings* release_edge();
  ::kiapi::board::BoardEdgeSettings* mutable_edge();
  void set_allocated_edge(::kiapi::board::BoardEdgeSettings* edge);
  private:
  const ::kiapi::board::BoardEdgeSettings& _internal_edge() const;
  ::kiapi::board::BoardEdgeSettings* _internal_mutable_edge();
  public:
  void unsafe_arena_set_allocated_edge(
      ::kiapi::board::BoardEdgeSettings* edge);
  ::kiapi::board::BoardEdgeSettings* unsafe_arena_release_edge();

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardStackup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupLayer > layers_;
  ::kiapi::board::BoardFinish* finish_;
  ::kiapi::board::BoardImpedanceControl* impedance_;
  ::kiapi::board::BoardEdgeSettings* edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardLayerGraphicsDefaults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardLayerGraphicsDefaults) */ {
 public:
  inline BoardLayerGraphicsDefaults() : BoardLayerGraphicsDefaults(nullptr) {}
  ~BoardLayerGraphicsDefaults() override;
  explicit constexpr BoardLayerGraphicsDefaults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardLayerGraphicsDefaults(const BoardLayerGraphicsDefaults& from);
  BoardLayerGraphicsDefaults(BoardLayerGraphicsDefaults&& from) noexcept
    : BoardLayerGraphicsDefaults() {
    *this = ::std::move(from);
  }

  inline BoardLayerGraphicsDefaults& operator=(const BoardLayerGraphicsDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardLayerGraphicsDefaults& operator=(BoardLayerGraphicsDefaults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardLayerGraphicsDefaults& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardLayerGraphicsDefaults* internal_default_instance() {
    return reinterpret_cast<const BoardLayerGraphicsDefaults*>(
               &_BoardLayerGraphicsDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BoardLayerGraphicsDefaults& a, BoardLayerGraphicsDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardLayerGraphicsDefaults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardLayerGraphicsDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardLayerGraphicsDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardLayerGraphicsDefaults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardLayerGraphicsDefaults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardLayerGraphicsDefaults& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardLayerGraphicsDefaults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardLayerGraphicsDefaults";
  }
  protected:
  explicit BoardLayerGraphicsDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kLineThicknessFieldNumber = 3,
    kLayerFieldNumber = 1,
  };
  // .kiapi.common.types.TextAttributes text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::kiapi::common::types::TextAttributes& text() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::TextAttributes* release_text();
  ::kiapi::common::types::TextAttributes* mutable_text();
  void set_allocated_text(::kiapi::common::types::TextAttributes* text);
  private:
  const ::kiapi::common::types::TextAttributes& _internal_text() const;
  ::kiapi::common::types::TextAttributes* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::kiapi::common::types::TextAttributes* text);
  ::kiapi::common::types::TextAttributes* unsafe_arena_release_text();

  // .kiapi.common.types.Distance line_thickness = 3;
  bool has_line_thickness() const;
  private:
  bool _internal_has_line_thickness() const;
  public:
  void clear_line_thickness();
  const ::kiapi::common::types::Distance& line_thickness() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Distance* release_line_thickness();
  ::kiapi::common::types::Distance* mutable_line_thickness();
  void set_allocated_line_thickness(::kiapi::common::types::Distance* line_thickness);
  private:
  const ::kiapi::common::types::Distance& _internal_line_thickness() const;
  ::kiapi::common::types::Distance* _internal_mutable_line_thickness();
  public:
  void unsafe_arena_set_allocated_line_thickness(
      ::kiapi::common::types::Distance* line_thickness);
  ::kiapi::common::types::Distance* unsafe_arena_release_line_thickness();

  // .kiapi.board.BoardLayerClass layer = 1;
  void clear_layer();
  ::kiapi::board::BoardLayerClass layer() const;
  void set_layer(::kiapi::board::BoardLayerClass value);
  private:
  ::kiapi::board::BoardLayerClass _internal_layer() const;
  void _internal_set_layer(::kiapi::board::BoardLayerClass value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardLayerGraphicsDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::TextAttributes* text_;
  ::kiapi::common::types::Distance* line_thickness_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GraphicsDefaults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.GraphicsDefaults) */ {
 public:
  inline GraphicsDefaults() : GraphicsDefaults(nullptr) {}
  ~GraphicsDefaults() override;
  explicit constexpr GraphicsDefaults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphicsDefaults(const GraphicsDefaults& from);
  GraphicsDefaults(GraphicsDefaults&& from) noexcept
    : GraphicsDefaults() {
    *this = ::std::move(from);
  }

  inline GraphicsDefaults& operator=(const GraphicsDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphicsDefaults& operator=(GraphicsDefaults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphicsDefaults& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphicsDefaults* internal_default_instance() {
    return reinterpret_cast<const GraphicsDefaults*>(
               &_GraphicsDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GraphicsDefaults& a, GraphicsDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphicsDefaults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphicsDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphicsDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphicsDefaults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphicsDefaults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GraphicsDefaults& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphicsDefaults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.GraphicsDefaults";
  }
  protected:
  explicit GraphicsDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .kiapi.board.BoardLayerGraphicsDefaults layers = 1;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::kiapi::board::BoardLayerGraphicsDefaults* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardLayerGraphicsDefaults >*
      mutable_layers();
  private:
  const ::kiapi::board::BoardLayerGraphicsDefaults& _internal_layers(int index) const;
  ::kiapi::board::BoardLayerGraphicsDefaults* _internal_add_layers();
  public:
  const ::kiapi::board::BoardLayerGraphicsDefaults& layers(int index) const;
  ::kiapi::board::BoardLayerGraphicsDefaults* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardLayerGraphicsDefaults >&
      layers() const;

  // @@protoc_insertion_point(class_scope:kiapi.board.GraphicsDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardLayerGraphicsDefaults > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.BoardSettings) */ {
 public:
  inline BoardSettings() : BoardSettings(nullptr) {}
  ~BoardSettings() override;
  explicit constexpr BoardSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardSettings(const BoardSettings& from);
  BoardSettings(BoardSettings&& from) noexcept
    : BoardSettings() {
    *this = ::std::move(from);
  }

  inline BoardSettings& operator=(const BoardSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardSettings& operator=(BoardSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardSettings* internal_default_instance() {
    return reinterpret_cast<const BoardSettings*>(
               &_BoardSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BoardSettings& a, BoardSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardSettings";
  }
  protected:
  explicit BoardSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphicsDefaultsFieldNumber = 1,
  };
  // .kiapi.board.GraphicsDefaults graphics_defaults = 1;
  bool has_graphics_defaults() const;
  private:
  bool _internal_has_graphics_defaults() const;
  public:
  void clear_graphics_defaults();
  const ::kiapi::board::GraphicsDefaults& graphics_defaults() const;
  PROTOBUF_NODISCARD ::kiapi::board::GraphicsDefaults* release_graphics_defaults();
  ::kiapi::board::GraphicsDefaults* mutable_graphics_defaults();
  void set_allocated_graphics_defaults(::kiapi::board::GraphicsDefaults* graphics_defaults);
  private:
  const ::kiapi::board::GraphicsDefaults& _internal_graphics_defaults() const;
  ::kiapi::board::GraphicsDefaults* _internal_mutable_graphics_defaults();
  public:
  void unsafe_arena_set_allocated_graphics_defaults(
      ::kiapi::board::GraphicsDefaults* graphics_defaults);
  ::kiapi::board::GraphicsDefaults* unsafe_arena_release_graphics_defaults();

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::GraphicsDefaults* graphics_defaults_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardDesignRules final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kiapi.board.BoardDesignRules) */ {
 public:
  inline BoardDesignRules() : BoardDesignRules(nullptr) {}
  explicit constexpr BoardDesignRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardDesignRules(const BoardDesignRules& from);
  BoardDesignRules(BoardDesignRules&& from) noexcept
    : BoardDesignRules() {
    *this = ::std::move(from);
  }

  inline BoardDesignRules& operator=(const BoardDesignRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardDesignRules& operator=(BoardDesignRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardDesignRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardDesignRules* internal_default_instance() {
    return reinterpret_cast<const BoardDesignRules*>(
               &_BoardDesignRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BoardDesignRules& a, BoardDesignRules& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardDesignRules* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardDesignRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardDesignRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardDesignRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BoardDesignRules& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BoardDesignRules& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.BoardDesignRules";
  }
  protected:
  explicit BoardDesignRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kiapi.board.BoardDesignRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoardFinish

// string type_name = 1;
inline void BoardFinish::clear_type_name() {
  type_name_.ClearToEmpty();
}
inline const std::string& BoardFinish::type_name() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardFinish.type_name)
  return _internal_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoardFinish::set_type_name(ArgT0&& arg0, ArgT... args) {
 
 type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.BoardFinish.type_name)
}
inline std::string* BoardFinish::mutable_type_name() {
  std::string* _s = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardFinish.type_name)
  return _s;
}
inline const std::string& BoardFinish::_internal_type_name() const {
  return type_name_.Get();
}
inline void BoardFinish::_internal_set_type_name(const std::string& value) {
  
  type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BoardFinish::_internal_mutable_type_name() {
  
  return type_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BoardFinish::release_type_name() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardFinish.type_name)
  return type_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BoardFinish::set_allocated_type_name(std::string* type_name) {
  if (type_name != nullptr) {
    
  } else {
    
  }
  type_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardFinish.type_name)
}

// -------------------------------------------------------------------

// BoardImpedanceControl

// bool is_controlled = 1;
inline void BoardImpedanceControl::clear_is_controlled() {
  is_controlled_ = false;
}
inline bool BoardImpedanceControl::_internal_is_controlled() const {
  return is_controlled_;
}
inline bool BoardImpedanceControl::is_controlled() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardImpedanceControl.is_controlled)
  return _internal_is_controlled();
}
inline void BoardImpedanceControl::_internal_set_is_controlled(bool value) {
  
  is_controlled_ = value;
}
inline void BoardImpedanceControl::set_is_controlled(bool value) {
  _internal_set_is_controlled(value);
  // @@protoc_insertion_point(field_set:kiapi.board.BoardImpedanceControl.is_controlled)
}

// -------------------------------------------------------------------

// BoardEdgeConnector

// -------------------------------------------------------------------

// Castellation

// bool has_castellated_pads = 1;
inline void Castellation::clear_has_castellated_pads() {
  has_castellated_pads_ = false;
}
inline bool Castellation::_internal_has_castellated_pads() const {
  return has_castellated_pads_;
}
inline bool Castellation::has_castellated_pads() const {
  // @@protoc_insertion_point(field_get:kiapi.board.Castellation.has_castellated_pads)
  return _internal_has_castellated_pads();
}
inline void Castellation::_internal_set_has_castellated_pads(bool value) {
  
  has_castellated_pads_ = value;
}
inline void Castellation::set_has_castellated_pads(bool value) {
  _internal_set_has_castellated_pads(value);
  // @@protoc_insertion_point(field_set:kiapi.board.Castellation.has_castellated_pads)
}

// -------------------------------------------------------------------

// EdgePlating

// bool has_edge_plating = 1;
inline void EdgePlating::clear_has_edge_plating() {
  has_edge_plating_ = false;
}
inline bool EdgePlating::_internal_has_edge_plating() const {
  return has_edge_plating_;
}
inline bool EdgePlating::has_edge_plating() const {
  // @@protoc_insertion_point(field_get:kiapi.board.EdgePlating.has_edge_plating)
  return _internal_has_edge_plating();
}
inline void EdgePlating::_internal_set_has_edge_plating(bool value) {
  
  has_edge_plating_ = value;
}
inline void EdgePlating::set_has_edge_plating(bool value) {
  _internal_set_has_edge_plating(value);
  // @@protoc_insertion_point(field_set:kiapi.board.EdgePlating.has_edge_plating)
}

// -------------------------------------------------------------------

// BoardEdgeSettings

// .kiapi.board.BoardEdgeConnector connector = 1;
inline bool BoardEdgeSettings::_internal_has_connector() const {
  return this != internal_default_instance() && connector_ != nullptr;
}
inline bool BoardEdgeSettings::has_connector() const {
  return _internal_has_connector();
}
inline void BoardEdgeSettings::clear_connector() {
  if (GetArenaForAllocation() == nullptr && connector_ != nullptr) {
    delete connector_;
  }
  connector_ = nullptr;
}
inline const ::kiapi::board::BoardEdgeConnector& BoardEdgeSettings::_internal_connector() const {
  const ::kiapi::board::BoardEdgeConnector* p = connector_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::BoardEdgeConnector&>(
      ::kiapi::board::_BoardEdgeConnector_default_instance_);
}
inline const ::kiapi::board::BoardEdgeConnector& BoardEdgeSettings::connector() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardEdgeSettings.connector)
  return _internal_connector();
}
inline void BoardEdgeSettings::unsafe_arena_set_allocated_connector(
    ::kiapi::board::BoardEdgeConnector* connector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connector_);
  }
  connector_ = connector;
  if (connector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardEdgeSettings.connector)
}
inline ::kiapi::board::BoardEdgeConnector* BoardEdgeSettings::release_connector() {
  
  ::kiapi::board::BoardEdgeConnector* temp = connector_;
  connector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::BoardEdgeConnector* BoardEdgeSettings::unsafe_arena_release_connector() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardEdgeSettings.connector)
  
  ::kiapi::board::BoardEdgeConnector* temp = connector_;
  connector_ = nullptr;
  return temp;
}
inline ::kiapi::board::BoardEdgeConnector* BoardEdgeSettings::_internal_mutable_connector() {
  
  if (connector_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::BoardEdgeConnector>(GetArenaForAllocation());
    connector_ = p;
  }
  return connector_;
}
inline ::kiapi::board::BoardEdgeConnector* BoardEdgeSettings::mutable_connector() {
  ::kiapi::board::BoardEdgeConnector* _msg = _internal_mutable_connector();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardEdgeSettings.connector)
  return _msg;
}
inline void BoardEdgeSettings::set_allocated_connector(::kiapi::board::BoardEdgeConnector* connector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connector_;
  }
  if (connector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::BoardEdgeConnector>::GetOwningArena(connector);
    if (message_arena != submessage_arena) {
      connector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connector, submessage_arena);
    }
    
  } else {
    
  }
  connector_ = connector;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardEdgeSettings.connector)
}

// .kiapi.board.Castellation castellation = 2;
inline bool BoardEdgeSettings::_internal_has_castellation() const {
  return this != internal_default_instance() && castellation_ != nullptr;
}
inline bool BoardEdgeSettings::has_castellation() const {
  return _internal_has_castellation();
}
inline void BoardEdgeSettings::clear_castellation() {
  if (GetArenaForAllocation() == nullptr && castellation_ != nullptr) {
    delete castellation_;
  }
  castellation_ = nullptr;
}
inline const ::kiapi::board::Castellation& BoardEdgeSettings::_internal_castellation() const {
  const ::kiapi::board::Castellation* p = castellation_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::Castellation&>(
      ::kiapi::board::_Castellation_default_instance_);
}
inline const ::kiapi::board::Castellation& BoardEdgeSettings::castellation() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardEdgeSettings.castellation)
  return _internal_castellation();
}
inline void BoardEdgeSettings::unsafe_arena_set_allocated_castellation(
    ::kiapi::board::Castellation* castellation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(castellation_);
  }
  castellation_ = castellation;
  if (castellation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardEdgeSettings.castellation)
}
inline ::kiapi::board::Castellation* BoardEdgeSettings::release_castellation() {
  
  ::kiapi::board::Castellation* temp = castellation_;
  castellation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::Castellation* BoardEdgeSettings::unsafe_arena_release_castellation() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardEdgeSettings.castellation)
  
  ::kiapi::board::Castellation* temp = castellation_;
  castellation_ = nullptr;
  return temp;
}
inline ::kiapi::board::Castellation* BoardEdgeSettings::_internal_mutable_castellation() {
  
  if (castellation_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::Castellation>(GetArenaForAllocation());
    castellation_ = p;
  }
  return castellation_;
}
inline ::kiapi::board::Castellation* BoardEdgeSettings::mutable_castellation() {
  ::kiapi::board::Castellation* _msg = _internal_mutable_castellation();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardEdgeSettings.castellation)
  return _msg;
}
inline void BoardEdgeSettings::set_allocated_castellation(::kiapi::board::Castellation* castellation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete castellation_;
  }
  if (castellation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::Castellation>::GetOwningArena(castellation);
    if (message_arena != submessage_arena) {
      castellation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, castellation, submessage_arena);
    }
    
  } else {
    
  }
  castellation_ = castellation;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardEdgeSettings.castellation)
}

// .kiapi.board.EdgePlating plating = 3;
inline bool BoardEdgeSettings::_internal_has_plating() const {
  return this != internal_default_instance() && plating_ != nullptr;
}
inline bool BoardEdgeSettings::has_plating() const {
  return _internal_has_plating();
}
inline void BoardEdgeSettings::clear_plating() {
  if (GetArenaForAllocation() == nullptr && plating_ != nullptr) {
    delete plating_;
  }
  plating_ = nullptr;
}
inline const ::kiapi::board::EdgePlating& BoardEdgeSettings::_internal_plating() const {
  const ::kiapi::board::EdgePlating* p = plating_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::EdgePlating&>(
      ::kiapi::board::_EdgePlating_default_instance_);
}
inline const ::kiapi::board::EdgePlating& BoardEdgeSettings::plating() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardEdgeSettings.plating)
  return _internal_plating();
}
inline void BoardEdgeSettings::unsafe_arena_set_allocated_plating(
    ::kiapi::board::EdgePlating* plating) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plating_);
  }
  plating_ = plating;
  if (plating) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardEdgeSettings.plating)
}
inline ::kiapi::board::EdgePlating* BoardEdgeSettings::release_plating() {
  
  ::kiapi::board::EdgePlating* temp = plating_;
  plating_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::EdgePlating* BoardEdgeSettings::unsafe_arena_release_plating() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardEdgeSettings.plating)
  
  ::kiapi::board::EdgePlating* temp = plating_;
  plating_ = nullptr;
  return temp;
}
inline ::kiapi::board::EdgePlating* BoardEdgeSettings::_internal_mutable_plating() {
  
  if (plating_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::EdgePlating>(GetArenaForAllocation());
    plating_ = p;
  }
  return plating_;
}
inline ::kiapi::board::EdgePlating* BoardEdgeSettings::mutable_plating() {
  ::kiapi::board::EdgePlating* _msg = _internal_mutable_plating();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardEdgeSettings.plating)
  return _msg;
}
inline void BoardEdgeSettings::set_allocated_plating(::kiapi::board::EdgePlating* plating) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete plating_;
  }
  if (plating) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::EdgePlating>::GetOwningArena(plating);
    if (message_arena != submessage_arena) {
      plating = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plating, submessage_arena);
    }
    
  } else {
    
  }
  plating_ = plating;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardEdgeSettings.plating)
}

// -------------------------------------------------------------------

// BoardStackupCopperLayer

// -------------------------------------------------------------------

// BoardStackupDielectricProperties

// double epsilon_r = 1;
inline void BoardStackupDielectricProperties::clear_epsilon_r() {
  epsilon_r_ = 0;
}
inline double BoardStackupDielectricProperties::_internal_epsilon_r() const {
  return epsilon_r_;
}
inline double BoardStackupDielectricProperties::epsilon_r() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupDielectricProperties.epsilon_r)
  return _internal_epsilon_r();
}
inline void BoardStackupDielectricProperties::_internal_set_epsilon_r(double value) {
  
  epsilon_r_ = value;
}
inline void BoardStackupDielectricProperties::set_epsilon_r(double value) {
  _internal_set_epsilon_r(value);
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupDielectricProperties.epsilon_r)
}

// double loss_tangent = 2;
inline void BoardStackupDielectricProperties::clear_loss_tangent() {
  loss_tangent_ = 0;
}
inline double BoardStackupDielectricProperties::_internal_loss_tangent() const {
  return loss_tangent_;
}
inline double BoardStackupDielectricProperties::loss_tangent() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupDielectricProperties.loss_tangent)
  return _internal_loss_tangent();
}
inline void BoardStackupDielectricProperties::_internal_set_loss_tangent(double value) {
  
  loss_tangent_ = value;
}
inline void BoardStackupDielectricProperties::set_loss_tangent(double value) {
  _internal_set_loss_tangent(value);
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupDielectricProperties.loss_tangent)
}

// string material_name = 3;
inline void BoardStackupDielectricProperties::clear_material_name() {
  material_name_.ClearToEmpty();
}
inline const std::string& BoardStackupDielectricProperties::material_name() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupDielectricProperties.material_name)
  return _internal_material_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoardStackupDielectricProperties::set_material_name(ArgT0&& arg0, ArgT... args) {
 
 material_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupDielectricProperties.material_name)
}
inline std::string* BoardStackupDielectricProperties::mutable_material_name() {
  std::string* _s = _internal_mutable_material_name();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupDielectricProperties.material_name)
  return _s;
}
inline const std::string& BoardStackupDielectricProperties::_internal_material_name() const {
  return material_name_.Get();
}
inline void BoardStackupDielectricProperties::_internal_set_material_name(const std::string& value) {
  
  material_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BoardStackupDielectricProperties::_internal_mutable_material_name() {
  
  return material_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BoardStackupDielectricProperties::release_material_name() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackupDielectricProperties.material_name)
  return material_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BoardStackupDielectricProperties::set_allocated_material_name(std::string* material_name) {
  if (material_name != nullptr) {
    
  } else {
    
  }
  material_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (material_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    material_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackupDielectricProperties.material_name)
}

// .kiapi.common.types.Distance thickness = 4;
inline bool BoardStackupDielectricProperties::_internal_has_thickness() const {
  return this != internal_default_instance() && thickness_ != nullptr;
}
inline bool BoardStackupDielectricProperties::has_thickness() const {
  return _internal_has_thickness();
}
inline const ::kiapi::common::types::Distance& BoardStackupDielectricProperties::_internal_thickness() const {
  const ::kiapi::common::types::Distance* p = thickness_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& BoardStackupDielectricProperties::thickness() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupDielectricProperties.thickness)
  return _internal_thickness();
}
inline void BoardStackupDielectricProperties::unsafe_arena_set_allocated_thickness(
    ::kiapi::common::types::Distance* thickness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness_);
  }
  thickness_ = thickness;
  if (thickness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardStackupDielectricProperties.thickness)
}
inline ::kiapi::common::types::Distance* BoardStackupDielectricProperties::release_thickness() {
  
  ::kiapi::common::types::Distance* temp = thickness_;
  thickness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* BoardStackupDielectricProperties::unsafe_arena_release_thickness() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackupDielectricProperties.thickness)
  
  ::kiapi::common::types::Distance* temp = thickness_;
  thickness_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* BoardStackupDielectricProperties::_internal_mutable_thickness() {
  
  if (thickness_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    thickness_ = p;
  }
  return thickness_;
}
inline ::kiapi::common::types::Distance* BoardStackupDielectricProperties::mutable_thickness() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_thickness();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupDielectricProperties.thickness)
  return _msg;
}
inline void BoardStackupDielectricProperties::set_allocated_thickness(::kiapi::common::types::Distance* thickness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness_);
  }
  if (thickness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness));
    if (message_arena != submessage_arena) {
      thickness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thickness, submessage_arena);
    }
    
  } else {
    
  }
  thickness_ = thickness;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackupDielectricProperties.thickness)
}

// -------------------------------------------------------------------

// BoardStackupDielectricLayer

// repeated .kiapi.board.BoardStackupDielectricProperties layer = 1;
inline int BoardStackupDielectricLayer::_internal_layer_size() const {
  return layer_.size();
}
inline int BoardStackupDielectricLayer::layer_size() const {
  return _internal_layer_size();
}
inline void BoardStackupDielectricLayer::clear_layer() {
  layer_.Clear();
}
inline ::kiapi::board::BoardStackupDielectricProperties* BoardStackupDielectricLayer::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupDielectricLayer.layer)
  return layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupDielectricProperties >*
BoardStackupDielectricLayer::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.BoardStackupDielectricLayer.layer)
  return &layer_;
}
inline const ::kiapi::board::BoardStackupDielectricProperties& BoardStackupDielectricLayer::_internal_layer(int index) const {
  return layer_.Get(index);
}
inline const ::kiapi::board::BoardStackupDielectricProperties& BoardStackupDielectricLayer::layer(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupDielectricLayer.layer)
  return _internal_layer(index);
}
inline ::kiapi::board::BoardStackupDielectricProperties* BoardStackupDielectricLayer::_internal_add_layer() {
  return layer_.Add();
}
inline ::kiapi::board::BoardStackupDielectricProperties* BoardStackupDielectricLayer::add_layer() {
  ::kiapi::board::BoardStackupDielectricProperties* _add = _internal_add_layer();
  // @@protoc_insertion_point(field_add:kiapi.board.BoardStackupDielectricLayer.layer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupDielectricProperties >&
BoardStackupDielectricLayer::layer() const {
  // @@protoc_insertion_point(field_list:kiapi.board.BoardStackupDielectricLayer.layer)
  return layer_;
}

// -------------------------------------------------------------------

// BoardStackupLayer

// .kiapi.common.types.Distance thickness = 1;
inline bool BoardStackupLayer::_internal_has_thickness() const {
  return this != internal_default_instance() && thickness_ != nullptr;
}
inline bool BoardStackupLayer::has_thickness() const {
  return _internal_has_thickness();
}
inline const ::kiapi::common::types::Distance& BoardStackupLayer::_internal_thickness() const {
  const ::kiapi::common::types::Distance* p = thickness_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& BoardStackupLayer::thickness() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.thickness)
  return _internal_thickness();
}
inline void BoardStackupLayer::unsafe_arena_set_allocated_thickness(
    ::kiapi::common::types::Distance* thickness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness_);
  }
  thickness_ = thickness;
  if (thickness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardStackupLayer.thickness)
}
inline ::kiapi::common::types::Distance* BoardStackupLayer::release_thickness() {
  
  ::kiapi::common::types::Distance* temp = thickness_;
  thickness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* BoardStackupLayer::unsafe_arena_release_thickness() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackupLayer.thickness)
  
  ::kiapi::common::types::Distance* temp = thickness_;
  thickness_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* BoardStackupLayer::_internal_mutable_thickness() {
  
  if (thickness_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    thickness_ = p;
  }
  return thickness_;
}
inline ::kiapi::common::types::Distance* BoardStackupLayer::mutable_thickness() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_thickness();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupLayer.thickness)
  return _msg;
}
inline void BoardStackupLayer::set_allocated_thickness(::kiapi::common::types::Distance* thickness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness_);
  }
  if (thickness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thickness));
    if (message_arena != submessage_arena) {
      thickness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thickness, submessage_arena);
    }
    
  } else {
    
  }
  thickness_ = thickness;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackupLayer.thickness)
}

// .kiapi.board.types.BoardLayer layer = 2;
inline void BoardStackupLayer::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer BoardStackupLayer::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer BoardStackupLayer::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.layer)
  return _internal_layer();
}
inline void BoardStackupLayer::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void BoardStackupLayer::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupLayer.layer)
}

// bool enabled = 3;
inline void BoardStackupLayer::clear_enabled() {
  enabled_ = false;
}
inline bool BoardStackupLayer::_internal_enabled() const {
  return enabled_;
}
inline bool BoardStackupLayer::enabled() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.enabled)
  return _internal_enabled();
}
inline void BoardStackupLayer::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void BoardStackupLayer::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupLayer.enabled)
}

// .kiapi.board.BoardStackupLayerType type = 4;
inline void BoardStackupLayer::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::BoardStackupLayerType BoardStackupLayer::_internal_type() const {
  return static_cast< ::kiapi::board::BoardStackupLayerType >(type_);
}
inline ::kiapi::board::BoardStackupLayerType BoardStackupLayer::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.type)
  return _internal_type();
}
inline void BoardStackupLayer::_internal_set_type(::kiapi::board::BoardStackupLayerType value) {
  
  type_ = value;
}
inline void BoardStackupLayer::set_type(::kiapi::board::BoardStackupLayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupLayer.type)
}

// .kiapi.board.BoardStackupDielectricLayer dielectric = 5;
inline bool BoardStackupLayer::_internal_has_dielectric() const {
  return this != internal_default_instance() && dielectric_ != nullptr;
}
inline bool BoardStackupLayer::has_dielectric() const {
  return _internal_has_dielectric();
}
inline void BoardStackupLayer::clear_dielectric() {
  if (GetArenaForAllocation() == nullptr && dielectric_ != nullptr) {
    delete dielectric_;
  }
  dielectric_ = nullptr;
}
inline const ::kiapi::board::BoardStackupDielectricLayer& BoardStackupLayer::_internal_dielectric() const {
  const ::kiapi::board::BoardStackupDielectricLayer* p = dielectric_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::BoardStackupDielectricLayer&>(
      ::kiapi::board::_BoardStackupDielectricLayer_default_instance_);
}
inline const ::kiapi::board::BoardStackupDielectricLayer& BoardStackupLayer::dielectric() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.dielectric)
  return _internal_dielectric();
}
inline void BoardStackupLayer::unsafe_arena_set_allocated_dielectric(
    ::kiapi::board::BoardStackupDielectricLayer* dielectric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dielectric_);
  }
  dielectric_ = dielectric;
  if (dielectric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardStackupLayer.dielectric)
}
inline ::kiapi::board::BoardStackupDielectricLayer* BoardStackupLayer::release_dielectric() {
  
  ::kiapi::board::BoardStackupDielectricLayer* temp = dielectric_;
  dielectric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::BoardStackupDielectricLayer* BoardStackupLayer::unsafe_arena_release_dielectric() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackupLayer.dielectric)
  
  ::kiapi::board::BoardStackupDielectricLayer* temp = dielectric_;
  dielectric_ = nullptr;
  return temp;
}
inline ::kiapi::board::BoardStackupDielectricLayer* BoardStackupLayer::_internal_mutable_dielectric() {
  
  if (dielectric_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::BoardStackupDielectricLayer>(GetArenaForAllocation());
    dielectric_ = p;
  }
  return dielectric_;
}
inline ::kiapi::board::BoardStackupDielectricLayer* BoardStackupLayer::mutable_dielectric() {
  ::kiapi::board::BoardStackupDielectricLayer* _msg = _internal_mutable_dielectric();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupLayer.dielectric)
  return _msg;
}
inline void BoardStackupLayer::set_allocated_dielectric(::kiapi::board::BoardStackupDielectricLayer* dielectric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dielectric_;
  }
  if (dielectric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::BoardStackupDielectricLayer>::GetOwningArena(dielectric);
    if (message_arena != submessage_arena) {
      dielectric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dielectric, submessage_arena);
    }
    
  } else {
    
  }
  dielectric_ = dielectric;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackupLayer.dielectric)
}

// .kiapi.common.types.Color color = 6;
inline bool BoardStackupLayer::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool BoardStackupLayer::has_color() const {
  return _internal_has_color();
}
inline const ::kiapi::common::types::Color& BoardStackupLayer::_internal_color() const {
  const ::kiapi::common::types::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Color&>(
      ::kiapi::common::types::_Color_default_instance_);
}
inline const ::kiapi::common::types::Color& BoardStackupLayer::color() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.color)
  return _internal_color();
}
inline void BoardStackupLayer::unsafe_arena_set_allocated_color(
    ::kiapi::common::types::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardStackupLayer.color)
}
inline ::kiapi::common::types::Color* BoardStackupLayer::release_color() {
  
  ::kiapi::common::types::Color* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Color* BoardStackupLayer::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackupLayer.color)
  
  ::kiapi::common::types::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Color* BoardStackupLayer::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Color>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::kiapi::common::types::Color* BoardStackupLayer::mutable_color() {
  ::kiapi::common::types::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupLayer.color)
  return _msg;
}
inline void BoardStackupLayer::set_allocated_color(::kiapi::common::types::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackupLayer.color)
}

// string material_name = 7;
inline void BoardStackupLayer::clear_material_name() {
  material_name_.ClearToEmpty();
}
inline const std::string& BoardStackupLayer::material_name() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.material_name)
  return _internal_material_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoardStackupLayer::set_material_name(ArgT0&& arg0, ArgT... args) {
 
 material_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupLayer.material_name)
}
inline std::string* BoardStackupLayer::mutable_material_name() {
  std::string* _s = _internal_mutable_material_name();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupLayer.material_name)
  return _s;
}
inline const std::string& BoardStackupLayer::_internal_material_name() const {
  return material_name_.Get();
}
inline void BoardStackupLayer::_internal_set_material_name(const std::string& value) {
  
  material_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BoardStackupLayer::_internal_mutable_material_name() {
  
  return material_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BoardStackupLayer::release_material_name() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackupLayer.material_name)
  return material_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BoardStackupLayer::set_allocated_material_name(std::string* material_name) {
  if (material_name != nullptr) {
    
  } else {
    
  }
  material_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (material_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    material_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackupLayer.material_name)
}

// string user_name = 8;
inline void BoardStackupLayer::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& BoardStackupLayer::user_name() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackupLayer.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoardStackupLayer::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kiapi.board.BoardStackupLayer.user_name)
}
inline std::string* BoardStackupLayer::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackupLayer.user_name)
  return _s;
}
inline const std::string& BoardStackupLayer::_internal_user_name() const {
  return user_name_.Get();
}
inline void BoardStackupLayer::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BoardStackupLayer::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BoardStackupLayer::release_user_name() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackupLayer.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BoardStackupLayer::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackupLayer.user_name)
}

// -------------------------------------------------------------------

// BoardStackup

// .kiapi.board.BoardFinish finish = 1;
inline bool BoardStackup::_internal_has_finish() const {
  return this != internal_default_instance() && finish_ != nullptr;
}
inline bool BoardStackup::has_finish() const {
  return _internal_has_finish();
}
inline void BoardStackup::clear_finish() {
  if (GetArenaForAllocation() == nullptr && finish_ != nullptr) {
    delete finish_;
  }
  finish_ = nullptr;
}
inline const ::kiapi::board::BoardFinish& BoardStackup::_internal_finish() const {
  const ::kiapi::board::BoardFinish* p = finish_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::BoardFinish&>(
      ::kiapi::board::_BoardFinish_default_instance_);
}
inline const ::kiapi::board::BoardFinish& BoardStackup::finish() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackup.finish)
  return _internal_finish();
}
inline void BoardStackup::unsafe_arena_set_allocated_finish(
    ::kiapi::board::BoardFinish* finish) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_);
  }
  finish_ = finish;
  if (finish) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardStackup.finish)
}
inline ::kiapi::board::BoardFinish* BoardStackup::release_finish() {
  
  ::kiapi::board::BoardFinish* temp = finish_;
  finish_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::BoardFinish* BoardStackup::unsafe_arena_release_finish() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackup.finish)
  
  ::kiapi::board::BoardFinish* temp = finish_;
  finish_ = nullptr;
  return temp;
}
inline ::kiapi::board::BoardFinish* BoardStackup::_internal_mutable_finish() {
  
  if (finish_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::BoardFinish>(GetArenaForAllocation());
    finish_ = p;
  }
  return finish_;
}
inline ::kiapi::board::BoardFinish* BoardStackup::mutable_finish() {
  ::kiapi::board::BoardFinish* _msg = _internal_mutable_finish();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackup.finish)
  return _msg;
}
inline void BoardStackup::set_allocated_finish(::kiapi::board::BoardFinish* finish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete finish_;
  }
  if (finish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::BoardFinish>::GetOwningArena(finish);
    if (message_arena != submessage_arena) {
      finish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish, submessage_arena);
    }
    
  } else {
    
  }
  finish_ = finish;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackup.finish)
}

// .kiapi.board.BoardImpedanceControl impedance = 2;
inline bool BoardStackup::_internal_has_impedance() const {
  return this != internal_default_instance() && impedance_ != nullptr;
}
inline bool BoardStackup::has_impedance() const {
  return _internal_has_impedance();
}
inline void BoardStackup::clear_impedance() {
  if (GetArenaForAllocation() == nullptr && impedance_ != nullptr) {
    delete impedance_;
  }
  impedance_ = nullptr;
}
inline const ::kiapi::board::BoardImpedanceControl& BoardStackup::_internal_impedance() const {
  const ::kiapi::board::BoardImpedanceControl* p = impedance_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::BoardImpedanceControl&>(
      ::kiapi::board::_BoardImpedanceControl_default_instance_);
}
inline const ::kiapi::board::BoardImpedanceControl& BoardStackup::impedance() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackup.impedance)
  return _internal_impedance();
}
inline void BoardStackup::unsafe_arena_set_allocated_impedance(
    ::kiapi::board::BoardImpedanceControl* impedance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(impedance_);
  }
  impedance_ = impedance;
  if (impedance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardStackup.impedance)
}
inline ::kiapi::board::BoardImpedanceControl* BoardStackup::release_impedance() {
  
  ::kiapi::board::BoardImpedanceControl* temp = impedance_;
  impedance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::BoardImpedanceControl* BoardStackup::unsafe_arena_release_impedance() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackup.impedance)
  
  ::kiapi::board::BoardImpedanceControl* temp = impedance_;
  impedance_ = nullptr;
  return temp;
}
inline ::kiapi::board::BoardImpedanceControl* BoardStackup::_internal_mutable_impedance() {
  
  if (impedance_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::BoardImpedanceControl>(GetArenaForAllocation());
    impedance_ = p;
  }
  return impedance_;
}
inline ::kiapi::board::BoardImpedanceControl* BoardStackup::mutable_impedance() {
  ::kiapi::board::BoardImpedanceControl* _msg = _internal_mutable_impedance();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackup.impedance)
  return _msg;
}
inline void BoardStackup::set_allocated_impedance(::kiapi::board::BoardImpedanceControl* impedance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete impedance_;
  }
  if (impedance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::BoardImpedanceControl>::GetOwningArena(impedance);
    if (message_arena != submessage_arena) {
      impedance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impedance, submessage_arena);
    }
    
  } else {
    
  }
  impedance_ = impedance;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackup.impedance)
}

// .kiapi.board.BoardEdgeSettings edge = 3;
inline bool BoardStackup::_internal_has_edge() const {
  return this != internal_default_instance() && edge_ != nullptr;
}
inline bool BoardStackup::has_edge() const {
  return _internal_has_edge();
}
inline void BoardStackup::clear_edge() {
  if (GetArenaForAllocation() == nullptr && edge_ != nullptr) {
    delete edge_;
  }
  edge_ = nullptr;
}
inline const ::kiapi::board::BoardEdgeSettings& BoardStackup::_internal_edge() const {
  const ::kiapi::board::BoardEdgeSettings* p = edge_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::BoardEdgeSettings&>(
      ::kiapi::board::_BoardEdgeSettings_default_instance_);
}
inline const ::kiapi::board::BoardEdgeSettings& BoardStackup::edge() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackup.edge)
  return _internal_edge();
}
inline void BoardStackup::unsafe_arena_set_allocated_edge(
    ::kiapi::board::BoardEdgeSettings* edge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_);
  }
  edge_ = edge;
  if (edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardStackup.edge)
}
inline ::kiapi::board::BoardEdgeSettings* BoardStackup::release_edge() {
  
  ::kiapi::board::BoardEdgeSettings* temp = edge_;
  edge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::BoardEdgeSettings* BoardStackup::unsafe_arena_release_edge() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardStackup.edge)
  
  ::kiapi::board::BoardEdgeSettings* temp = edge_;
  edge_ = nullptr;
  return temp;
}
inline ::kiapi::board::BoardEdgeSettings* BoardStackup::_internal_mutable_edge() {
  
  if (edge_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::BoardEdgeSettings>(GetArenaForAllocation());
    edge_ = p;
  }
  return edge_;
}
inline ::kiapi::board::BoardEdgeSettings* BoardStackup::mutable_edge() {
  ::kiapi::board::BoardEdgeSettings* _msg = _internal_mutable_edge();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackup.edge)
  return _msg;
}
inline void BoardStackup::set_allocated_edge(::kiapi::board::BoardEdgeSettings* edge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete edge_;
  }
  if (edge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::BoardEdgeSettings>::GetOwningArena(edge);
    if (message_arena != submessage_arena) {
      edge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge, submessage_arena);
    }
    
  } else {
    
  }
  edge_ = edge;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardStackup.edge)
}

// repeated .kiapi.board.BoardStackupLayer layers = 4;
inline int BoardStackup::_internal_layers_size() const {
  return layers_.size();
}
inline int BoardStackup::layers_size() const {
  return _internal_layers_size();
}
inline void BoardStackup::clear_layers() {
  layers_.Clear();
}
inline ::kiapi::board::BoardStackupLayer* BoardStackup::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardStackup.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupLayer >*
BoardStackup::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.BoardStackup.layers)
  return &layers_;
}
inline const ::kiapi::board::BoardStackupLayer& BoardStackup::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::kiapi::board::BoardStackupLayer& BoardStackup::layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardStackup.layers)
  return _internal_layers(index);
}
inline ::kiapi::board::BoardStackupLayer* BoardStackup::_internal_add_layers() {
  return layers_.Add();
}
inline ::kiapi::board::BoardStackupLayer* BoardStackup::add_layers() {
  ::kiapi::board::BoardStackupLayer* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:kiapi.board.BoardStackup.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardStackupLayer >&
BoardStackup::layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.BoardStackup.layers)
  return layers_;
}

// -------------------------------------------------------------------

// BoardLayerGraphicsDefaults

// .kiapi.board.BoardLayerClass layer = 1;
inline void BoardLayerGraphicsDefaults::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::BoardLayerClass BoardLayerGraphicsDefaults::_internal_layer() const {
  return static_cast< ::kiapi::board::BoardLayerClass >(layer_);
}
inline ::kiapi::board::BoardLayerClass BoardLayerGraphicsDefaults::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardLayerGraphicsDefaults.layer)
  return _internal_layer();
}
inline void BoardLayerGraphicsDefaults::_internal_set_layer(::kiapi::board::BoardLayerClass value) {
  
  layer_ = value;
}
inline void BoardLayerGraphicsDefaults::set_layer(::kiapi::board::BoardLayerClass value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.BoardLayerGraphicsDefaults.layer)
}

// .kiapi.common.types.TextAttributes text = 2;
inline bool BoardLayerGraphicsDefaults::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool BoardLayerGraphicsDefaults::has_text() const {
  return _internal_has_text();
}
inline const ::kiapi::common::types::TextAttributes& BoardLayerGraphicsDefaults::_internal_text() const {
  const ::kiapi::common::types::TextAttributes* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::TextAttributes&>(
      ::kiapi::common::types::_TextAttributes_default_instance_);
}
inline const ::kiapi::common::types::TextAttributes& BoardLayerGraphicsDefaults::text() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardLayerGraphicsDefaults.text)
  return _internal_text();
}
inline void BoardLayerGraphicsDefaults::unsafe_arena_set_allocated_text(
    ::kiapi::common::types::TextAttributes* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardLayerGraphicsDefaults.text)
}
inline ::kiapi::common::types::TextAttributes* BoardLayerGraphicsDefaults::release_text() {
  
  ::kiapi::common::types::TextAttributes* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::TextAttributes* BoardLayerGraphicsDefaults::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardLayerGraphicsDefaults.text)
  
  ::kiapi::common::types::TextAttributes* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::TextAttributes* BoardLayerGraphicsDefaults::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::TextAttributes>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::kiapi::common::types::TextAttributes* BoardLayerGraphicsDefaults::mutable_text() {
  ::kiapi::common::types::TextAttributes* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardLayerGraphicsDefaults.text)
  return _msg;
}
inline void BoardLayerGraphicsDefaults::set_allocated_text(::kiapi::common::types::TextAttributes* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text));
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardLayerGraphicsDefaults.text)
}

// .kiapi.common.types.Distance line_thickness = 3;
inline bool BoardLayerGraphicsDefaults::_internal_has_line_thickness() const {
  return this != internal_default_instance() && line_thickness_ != nullptr;
}
inline bool BoardLayerGraphicsDefaults::has_line_thickness() const {
  return _internal_has_line_thickness();
}
inline const ::kiapi::common::types::Distance& BoardLayerGraphicsDefaults::_internal_line_thickness() const {
  const ::kiapi::common::types::Distance* p = line_thickness_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Distance&>(
      ::kiapi::common::types::_Distance_default_instance_);
}
inline const ::kiapi::common::types::Distance& BoardLayerGraphicsDefaults::line_thickness() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardLayerGraphicsDefaults.line_thickness)
  return _internal_line_thickness();
}
inline void BoardLayerGraphicsDefaults::unsafe_arena_set_allocated_line_thickness(
    ::kiapi::common::types::Distance* line_thickness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_thickness_);
  }
  line_thickness_ = line_thickness;
  if (line_thickness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardLayerGraphicsDefaults.line_thickness)
}
inline ::kiapi::common::types::Distance* BoardLayerGraphicsDefaults::release_line_thickness() {
  
  ::kiapi::common::types::Distance* temp = line_thickness_;
  line_thickness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Distance* BoardLayerGraphicsDefaults::unsafe_arena_release_line_thickness() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardLayerGraphicsDefaults.line_thickness)
  
  ::kiapi::common::types::Distance* temp = line_thickness_;
  line_thickness_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Distance* BoardLayerGraphicsDefaults::_internal_mutable_line_thickness() {
  
  if (line_thickness_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Distance>(GetArenaForAllocation());
    line_thickness_ = p;
  }
  return line_thickness_;
}
inline ::kiapi::common::types::Distance* BoardLayerGraphicsDefaults::mutable_line_thickness() {
  ::kiapi::common::types::Distance* _msg = _internal_mutable_line_thickness();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardLayerGraphicsDefaults.line_thickness)
  return _msg;
}
inline void BoardLayerGraphicsDefaults::set_allocated_line_thickness(::kiapi::common::types::Distance* line_thickness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_thickness_);
  }
  if (line_thickness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_thickness));
    if (message_arena != submessage_arena) {
      line_thickness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_thickness, submessage_arena);
    }
    
  } else {
    
  }
  line_thickness_ = line_thickness;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardLayerGraphicsDefaults.line_thickness)
}

// -------------------------------------------------------------------

// GraphicsDefaults

// repeated .kiapi.board.BoardLayerGraphicsDefaults layers = 1;
inline int GraphicsDefaults::_internal_layers_size() const {
  return layers_.size();
}
inline int GraphicsDefaults::layers_size() const {
  return _internal_layers_size();
}
inline void GraphicsDefaults::clear_layers() {
  layers_.Clear();
}
inline ::kiapi::board::BoardLayerGraphicsDefaults* GraphicsDefaults::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.GraphicsDefaults.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardLayerGraphicsDefaults >*
GraphicsDefaults::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.GraphicsDefaults.layers)
  return &layers_;
}
inline const ::kiapi::board::BoardLayerGraphicsDefaults& GraphicsDefaults::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::kiapi::board::BoardLayerGraphicsDefaults& GraphicsDefaults::layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.GraphicsDefaults.layers)
  return _internal_layers(index);
}
inline ::kiapi::board::BoardLayerGraphicsDefaults* GraphicsDefaults::_internal_add_layers() {
  return layers_.Add();
}
inline ::kiapi::board::BoardLayerGraphicsDefaults* GraphicsDefaults::add_layers() {
  ::kiapi::board::BoardLayerGraphicsDefaults* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:kiapi.board.GraphicsDefaults.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::BoardLayerGraphicsDefaults >&
GraphicsDefaults::layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.GraphicsDefaults.layers)
  return layers_;
}

// -------------------------------------------------------------------

// BoardSettings

// .kiapi.board.GraphicsDefaults graphics_defaults = 1;
inline bool BoardSettings::_internal_has_graphics_defaults() const {
  return this != internal_default_instance() && graphics_defaults_ != nullptr;
}
inline bool BoardSettings::has_graphics_defaults() const {
  return _internal_has_graphics_defaults();
}
inline void BoardSettings::clear_graphics_defaults() {
  if (GetArenaForAllocation() == nullptr && graphics_defaults_ != nullptr) {
    delete graphics_defaults_;
  }
  graphics_defaults_ = nullptr;
}
inline const ::kiapi::board::GraphicsDefaults& BoardSettings::_internal_graphics_defaults() const {
  const ::kiapi::board::GraphicsDefaults* p = graphics_defaults_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::GraphicsDefaults&>(
      ::kiapi::board::_GraphicsDefaults_default_instance_);
}
inline const ::kiapi::board::GraphicsDefaults& BoardSettings::graphics_defaults() const {
  // @@protoc_insertion_point(field_get:kiapi.board.BoardSettings.graphics_defaults)
  return _internal_graphics_defaults();
}
inline void BoardSettings::unsafe_arena_set_allocated_graphics_defaults(
    ::kiapi::board::GraphicsDefaults* graphics_defaults) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graphics_defaults_);
  }
  graphics_defaults_ = graphics_defaults;
  if (graphics_defaults) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.BoardSettings.graphics_defaults)
}
inline ::kiapi::board::GraphicsDefaults* BoardSettings::release_graphics_defaults() {
  
  ::kiapi::board::GraphicsDefaults* temp = graphics_defaults_;
  graphics_defaults_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::GraphicsDefaults* BoardSettings::unsafe_arena_release_graphics_defaults() {
  // @@protoc_insertion_point(field_release:kiapi.board.BoardSettings.graphics_defaults)
  
  ::kiapi::board::GraphicsDefaults* temp = graphics_defaults_;
  graphics_defaults_ = nullptr;
  return temp;
}
inline ::kiapi::board::GraphicsDefaults* BoardSettings::_internal_mutable_graphics_defaults() {
  
  if (graphics_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::GraphicsDefaults>(GetArenaForAllocation());
    graphics_defaults_ = p;
  }
  return graphics_defaults_;
}
inline ::kiapi::board::GraphicsDefaults* BoardSettings::mutable_graphics_defaults() {
  ::kiapi::board::GraphicsDefaults* _msg = _internal_mutable_graphics_defaults();
  // @@protoc_insertion_point(field_mutable:kiapi.board.BoardSettings.graphics_defaults)
  return _msg;
}
inline void BoardSettings::set_allocated_graphics_defaults(::kiapi::board::GraphicsDefaults* graphics_defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete graphics_defaults_;
  }
  if (graphics_defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::GraphicsDefaults>::GetOwningArena(graphics_defaults);
    if (message_arena != submessage_arena) {
      graphics_defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graphics_defaults, submessage_arena);
    }
    
  } else {
    
  }
  graphics_defaults_ = graphics_defaults;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.BoardSettings.graphics_defaults)
}

// -------------------------------------------------------------------

// BoardDesignRules

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace board
}  // namespace kiapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kiapi::board::BoardStackupLayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::BoardStackupLayerType>() {
  return ::kiapi::board::BoardStackupLayerType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::BoardLayerClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::BoardLayerClass>() {
  return ::kiapi::board::BoardLayerClass_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_board_2fboard_2eproto
