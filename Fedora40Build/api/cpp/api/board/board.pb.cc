// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board/board.proto

#include "board/board.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace board {
constexpr BoardFinish::BoardFinish(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BoardFinishDefaultTypeInternal {
  constexpr BoardFinishDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardFinishDefaultTypeInternal() {}
  union {
    BoardFinish _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardFinishDefaultTypeInternal _BoardFinish_default_instance_;
constexpr BoardImpedanceControl::BoardImpedanceControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_controlled_(false){}
struct BoardImpedanceControlDefaultTypeInternal {
  constexpr BoardImpedanceControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardImpedanceControlDefaultTypeInternal() {}
  union {
    BoardImpedanceControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardImpedanceControlDefaultTypeInternal _BoardImpedanceControl_default_instance_;
constexpr BoardEdgeConnector::BoardEdgeConnector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BoardEdgeConnectorDefaultTypeInternal {
  constexpr BoardEdgeConnectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardEdgeConnectorDefaultTypeInternal() {}
  union {
    BoardEdgeConnector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardEdgeConnectorDefaultTypeInternal _BoardEdgeConnector_default_instance_;
constexpr Castellation::Castellation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_castellated_pads_(false){}
struct CastellationDefaultTypeInternal {
  constexpr CastellationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CastellationDefaultTypeInternal() {}
  union {
    Castellation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CastellationDefaultTypeInternal _Castellation_default_instance_;
constexpr EdgePlating::EdgePlating(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_edge_plating_(false){}
struct EdgePlatingDefaultTypeInternal {
  constexpr EdgePlatingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgePlatingDefaultTypeInternal() {}
  union {
    EdgePlating _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgePlatingDefaultTypeInternal _EdgePlating_default_instance_;
constexpr BoardEdgeSettings::BoardEdgeSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connector_(nullptr)
  , castellation_(nullptr)
  , plating_(nullptr){}
struct BoardEdgeSettingsDefaultTypeInternal {
  constexpr BoardEdgeSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardEdgeSettingsDefaultTypeInternal() {}
  union {
    BoardEdgeSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardEdgeSettingsDefaultTypeInternal _BoardEdgeSettings_default_instance_;
constexpr BoardStackupCopperLayer::BoardStackupCopperLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BoardStackupCopperLayerDefaultTypeInternal {
  constexpr BoardStackupCopperLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardStackupCopperLayerDefaultTypeInternal() {}
  union {
    BoardStackupCopperLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardStackupCopperLayerDefaultTypeInternal _BoardStackupCopperLayer_default_instance_;
constexpr BoardStackupDielectricProperties::BoardStackupDielectricProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : material_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thickness_(nullptr)
  , epsilon_r_(0)
  , loss_tangent_(0){}
struct BoardStackupDielectricPropertiesDefaultTypeInternal {
  constexpr BoardStackupDielectricPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardStackupDielectricPropertiesDefaultTypeInternal() {}
  union {
    BoardStackupDielectricProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardStackupDielectricPropertiesDefaultTypeInternal _BoardStackupDielectricProperties_default_instance_;
constexpr BoardStackupDielectricLayer::BoardStackupDielectricLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layer_(){}
struct BoardStackupDielectricLayerDefaultTypeInternal {
  constexpr BoardStackupDielectricLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardStackupDielectricLayerDefaultTypeInternal() {}
  union {
    BoardStackupDielectricLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardStackupDielectricLayerDefaultTypeInternal _BoardStackupDielectricLayer_default_instance_;
constexpr BoardStackupLayer::BoardStackupLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : material_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thickness_(nullptr)
  , dielectric_(nullptr)
  , color_(nullptr)
  , layer_(0)

  , enabled_(false)
  , type_(0)
{}
struct BoardStackupLayerDefaultTypeInternal {
  constexpr BoardStackupLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardStackupLayerDefaultTypeInternal() {}
  union {
    BoardStackupLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardStackupLayerDefaultTypeInternal _BoardStackupLayer_default_instance_;
constexpr BoardStackup::BoardStackup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , finish_(nullptr)
  , impedance_(nullptr)
  , edge_(nullptr){}
struct BoardStackupDefaultTypeInternal {
  constexpr BoardStackupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardStackupDefaultTypeInternal() {}
  union {
    BoardStackup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardStackupDefaultTypeInternal _BoardStackup_default_instance_;
constexpr BoardLayerGraphicsDefaults::BoardLayerGraphicsDefaults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(nullptr)
  , line_thickness_(nullptr)
  , layer_(0)
{}
struct BoardLayerGraphicsDefaultsDefaultTypeInternal {
  constexpr BoardLayerGraphicsDefaultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardLayerGraphicsDefaultsDefaultTypeInternal() {}
  union {
    BoardLayerGraphicsDefaults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardLayerGraphicsDefaultsDefaultTypeInternal _BoardLayerGraphicsDefaults_default_instance_;
constexpr GraphicsDefaults::GraphicsDefaults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_(){}
struct GraphicsDefaultsDefaultTypeInternal {
  constexpr GraphicsDefaultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphicsDefaultsDefaultTypeInternal() {}
  union {
    GraphicsDefaults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphicsDefaultsDefaultTypeInternal _GraphicsDefaults_default_instance_;
constexpr BoardSettings::BoardSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : graphics_defaults_(nullptr){}
struct BoardSettingsDefaultTypeInternal {
  constexpr BoardSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardSettingsDefaultTypeInternal() {}
  union {
    BoardSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardSettingsDefaultTypeInternal _BoardSettings_default_instance_;
constexpr BoardDesignRules::BoardDesignRules(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BoardDesignRulesDefaultTypeInternal {
  constexpr BoardDesignRulesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardDesignRulesDefaultTypeInternal() {}
  union {
    BoardDesignRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardDesignRulesDefaultTypeInternal _BoardDesignRules_default_instance_;
}  // namespace board
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_board_2fboard_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_board_2fboard_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_board_2fboard_2eproto = nullptr;

const uint32_t TableStruct_board_2fboard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardFinish, type_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardImpedanceControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardImpedanceControl, is_controlled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardEdgeConnector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::Castellation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::Castellation, has_castellated_pads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::EdgePlating, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::EdgePlating, has_edge_plating_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardEdgeSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardEdgeSettings, connector_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardEdgeSettings, castellation_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardEdgeSettings, plating_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupCopperLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupDielectricProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupDielectricProperties, epsilon_r_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupDielectricProperties, loss_tangent_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupDielectricProperties, material_name_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupDielectricProperties, thickness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupDielectricLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupDielectricLayer, layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, thickness_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, enabled_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, dielectric_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, color_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, material_name_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackupLayer, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackup, finish_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackup, impedance_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackup, edge_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardStackup, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardLayerGraphicsDefaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardLayerGraphicsDefaults, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardLayerGraphicsDefaults, text_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardLayerGraphicsDefaults, line_thickness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::GraphicsDefaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::GraphicsDefaults, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardSettings, graphics_defaults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::BoardDesignRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::board::BoardFinish)},
  { 7, -1, -1, sizeof(::kiapi::board::BoardImpedanceControl)},
  { 14, -1, -1, sizeof(::kiapi::board::BoardEdgeConnector)},
  { 20, -1, -1, sizeof(::kiapi::board::Castellation)},
  { 27, -1, -1, sizeof(::kiapi::board::EdgePlating)},
  { 34, -1, -1, sizeof(::kiapi::board::BoardEdgeSettings)},
  { 43, -1, -1, sizeof(::kiapi::board::BoardStackupCopperLayer)},
  { 49, -1, -1, sizeof(::kiapi::board::BoardStackupDielectricProperties)},
  { 59, -1, -1, sizeof(::kiapi::board::BoardStackupDielectricLayer)},
  { 66, -1, -1, sizeof(::kiapi::board::BoardStackupLayer)},
  { 80, -1, -1, sizeof(::kiapi::board::BoardStackup)},
  { 90, -1, -1, sizeof(::kiapi::board::BoardLayerGraphicsDefaults)},
  { 99, -1, -1, sizeof(::kiapi::board::GraphicsDefaults)},
  { 106, -1, -1, sizeof(::kiapi::board::BoardSettings)},
  { 113, -1, -1, sizeof(::kiapi::board::BoardDesignRules)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardImpedanceControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardEdgeConnector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_Castellation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_EdgePlating_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardEdgeSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardStackupCopperLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardStackupDielectricProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardStackupDielectricLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardStackupLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardStackup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardLayerGraphicsDefaults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_GraphicsDefaults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::_BoardDesignRules_default_instance_),
};

const char descriptor_table_protodef_board_2fboard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021board/board.proto\022\013kiapi.board\032\035common"
  "/types/base_types.proto\032\027board/board_typ"
  "es.proto\" \n\013BoardFinish\022\021\n\ttype_name\030\001 \001"
  "(\t\".\n\025BoardImpedanceControl\022\025\n\ris_contro"
  "lled\030\001 \001(\010\"\024\n\022BoardEdgeConnector\",\n\014Cast"
  "ellation\022\034\n\024has_castellated_pads\030\001 \001(\010\"\'"
  "\n\013EdgePlating\022\030\n\020has_edge_plating\030\001 \001(\010\""
  "\243\001\n\021BoardEdgeSettings\0222\n\tconnector\030\001 \001(\013"
  "2\037.kiapi.board.BoardEdgeConnector\022/\n\014cas"
  "tellation\030\002 \001(\0132\031.kiapi.board.Castellati"
  "on\022)\n\007plating\030\003 \001(\0132\030.kiapi.board.EdgePl"
  "ating\"\031\n\027BoardStackupCopperLayer\"\223\001\n Boa"
  "rdStackupDielectricProperties\022\021\n\tepsilon"
  "_r\030\001 \001(\001\022\024\n\014loss_tangent\030\002 \001(\001\022\025\n\rmateri"
  "al_name\030\003 \001(\t\022/\n\tthickness\030\004 \001(\0132\034.kiapi"
  ".common.types.Distance\"[\n\033BoardStackupDi"
  "electricLayer\022<\n\005layer\030\001 \003(\0132-.kiapi.boa"
  "rd.BoardStackupDielectricProperties\"\307\002\n\021"
  "BoardStackupLayer\022/\n\tthickness\030\001 \001(\0132\034.k"
  "iapi.common.types.Distance\022,\n\005layer\030\002 \001("
  "\0162\035.kiapi.board.types.BoardLayer\022\017\n\007enab"
  "led\030\003 \001(\010\0220\n\004type\030\004 \001(\0162\".kiapi.board.Bo"
  "ardStackupLayerType\022<\n\ndielectric\030\005 \001(\0132"
  "(.kiapi.board.BoardStackupDielectricLaye"
  "r\022(\n\005color\030\006 \001(\0132\031.kiapi.common.types.Co"
  "lor\022\025\n\rmaterial_name\030\007 \001(\t\022\021\n\tuser_name\030"
  "\010 \001(\t\"\315\001\n\014BoardStackup\022(\n\006finish\030\001 \001(\0132\030"
  ".kiapi.board.BoardFinish\0225\n\timpedance\030\002 "
  "\001(\0132\".kiapi.board.BoardImpedanceControl\022"
  ",\n\004edge\030\003 \001(\0132\036.kiapi.board.BoardEdgeSet"
  "tings\022.\n\006layers\030\004 \003(\0132\036.kiapi.board.Boar"
  "dStackupLayer\"\261\001\n\032BoardLayerGraphicsDefa"
  "ults\022+\n\005layer\030\001 \001(\0162\034.kiapi.board.BoardL"
  "ayerClass\0220\n\004text\030\002 \001(\0132\".kiapi.common.t"
  "ypes.TextAttributes\0224\n\016line_thickness\030\003 "
  "\001(\0132\034.kiapi.common.types.Distance\"K\n\020Gra"
  "phicsDefaults\0227\n\006layers\030\001 \003(\0132\'.kiapi.bo"
  "ard.BoardLayerGraphicsDefaults\"I\n\rBoardS"
  "ettings\0228\n\021graphics_defaults\030\001 \001(\0132\035.kia"
  "pi.board.GraphicsDefaults\"\022\n\020BoardDesign"
  "Rules*\243\001\n\025BoardStackupLayerType\022\020\n\014BSLT_"
  "UNKNOWN\020\000\022\017\n\013BSLT_COPPER\020\001\022\023\n\017BSLT_DIELE"
  "CTRIC\020\002\022\023\n\017BSLT_SILKSCREEN\020\003\022\023\n\017BSLT_SOL"
  "DERMASK\020\004\022\024\n\020BSLT_SOLDERPASTE\020\005\022\022\n\016BSLT_"
  "UNDEFINED\020\007*\214\001\n\017BoardLayerClass\022\017\n\013BLC_U"
  "NKNOWN\020\000\022\022\n\016BLC_SILKSCREEN\020\001\022\016\n\nBLC_COPP"
  "ER\020\002\022\r\n\tBLC_EDGES\020\003\022\021\n\rBLC_COURTYARD\020\004\022\023"
  "\n\017BLC_FABRICATION\020\005\022\r\n\tBLC_OTHER\020\006b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_board_2fboard_2eproto_deps[2] = {
  &::descriptor_table_board_2fboard_5ftypes_2eproto,
  &::descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_board_2fboard_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_board_2fboard_2eproto = {
  false, false, 1922, descriptor_table_protodef_board_2fboard_2eproto, "board/board.proto", 
  &descriptor_table_board_2fboard_2eproto_once, descriptor_table_board_2fboard_2eproto_deps, 2, 15,
  schemas, file_default_instances, TableStruct_board_2fboard_2eproto::offsets,
  file_level_metadata_board_2fboard_2eproto, file_level_enum_descriptors_board_2fboard_2eproto, file_level_service_descriptors_board_2fboard_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_board_2fboard_2eproto_getter() {
  return &descriptor_table_board_2fboard_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_board_2fboard_2eproto(&descriptor_table_board_2fboard_2eproto);
namespace kiapi {
namespace board {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardStackupLayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_2eproto);
  return file_level_enum_descriptors_board_2fboard_2eproto[0];
}
bool BoardStackupLayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardLayerClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_2eproto);
  return file_level_enum_descriptors_board_2fboard_2eproto[1];
}
bool BoardLayerClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BoardFinish::_Internal {
 public:
};

BoardFinish::BoardFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardFinish)
}
BoardFinish::BoardFinish(const BoardFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_name().empty()) {
    type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardFinish)
}

inline void BoardFinish::SharedCtor() {
type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BoardFinish::~BoardFinish() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardFinish)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BoardFinish::ArenaDtor(void* object) {
  BoardFinish* _this = reinterpret_cast< BoardFinish* >(object);
  (void)_this;
}
void BoardFinish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardFinish)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.BoardFinish.type_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardFinish::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardFinish)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_name = 1;
  if (!this->_internal_type_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.BoardFinish.type_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardFinish)
  return target;
}

size_t BoardFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardFinish)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_name = 1;
  if (!this->_internal_type_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardFinish::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardFinish::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardFinish::GetClassData() const { return &_class_data_; }

void BoardFinish::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardFinish *>(to)->MergeFrom(
      static_cast<const BoardFinish &>(from));
}


void BoardFinish::MergeFrom(const BoardFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardFinish)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type_name().empty()) {
    _internal_set_type_name(from._internal_type_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardFinish::CopyFrom(const BoardFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardFinish::IsInitialized() const {
  return true;
}

void BoardFinish::InternalSwap(BoardFinish* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_name_, lhs_arena,
      &other->type_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardFinish::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[0]);
}

// ===================================================================

class BoardImpedanceControl::_Internal {
 public:
};

BoardImpedanceControl::BoardImpedanceControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardImpedanceControl)
}
BoardImpedanceControl::BoardImpedanceControl(const BoardImpedanceControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_controlled_ = from.is_controlled_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardImpedanceControl)
}

inline void BoardImpedanceControl::SharedCtor() {
is_controlled_ = false;
}

BoardImpedanceControl::~BoardImpedanceControl() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardImpedanceControl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardImpedanceControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoardImpedanceControl::ArenaDtor(void* object) {
  BoardImpedanceControl* _this = reinterpret_cast< BoardImpedanceControl* >(object);
  (void)_this;
}
void BoardImpedanceControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardImpedanceControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardImpedanceControl::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardImpedanceControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_controlled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardImpedanceControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_controlled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_controlled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardImpedanceControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardImpedanceControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_controlled = 1;
  if (this->_internal_is_controlled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_controlled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardImpedanceControl)
  return target;
}

size_t BoardImpedanceControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardImpedanceControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_controlled = 1;
  if (this->_internal_is_controlled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardImpedanceControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardImpedanceControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardImpedanceControl::GetClassData() const { return &_class_data_; }

void BoardImpedanceControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardImpedanceControl *>(to)->MergeFrom(
      static_cast<const BoardImpedanceControl &>(from));
}


void BoardImpedanceControl::MergeFrom(const BoardImpedanceControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardImpedanceControl)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_controlled() != 0) {
    _internal_set_is_controlled(from._internal_is_controlled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardImpedanceControl::CopyFrom(const BoardImpedanceControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardImpedanceControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardImpedanceControl::IsInitialized() const {
  return true;
}

void BoardImpedanceControl::InternalSwap(BoardImpedanceControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_controlled_, other->is_controlled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardImpedanceControl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[1]);
}

// ===================================================================

class BoardEdgeConnector::_Internal {
 public:
};

BoardEdgeConnector::BoardEdgeConnector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardEdgeConnector)
}
BoardEdgeConnector::BoardEdgeConnector(const BoardEdgeConnector& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardEdgeConnector)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardEdgeConnector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardEdgeConnector::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BoardEdgeConnector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[2]);
}

// ===================================================================

class Castellation::_Internal {
 public:
};

Castellation::Castellation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.Castellation)
}
Castellation::Castellation(const Castellation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  has_castellated_pads_ = from.has_castellated_pads_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.Castellation)
}

inline void Castellation::SharedCtor() {
has_castellated_pads_ = false;
}

Castellation::~Castellation() {
  // @@protoc_insertion_point(destructor:kiapi.board.Castellation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Castellation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Castellation::ArenaDtor(void* object) {
  Castellation* _this = reinterpret_cast< Castellation* >(object);
  (void)_this;
}
void Castellation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Castellation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Castellation::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.Castellation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_castellated_pads_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Castellation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_castellated_pads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          has_castellated_pads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Castellation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.Castellation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_castellated_pads = 1;
  if (this->_internal_has_castellated_pads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_castellated_pads(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.Castellation)
  return target;
}

size_t Castellation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.Castellation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool has_castellated_pads = 1;
  if (this->_internal_has_castellated_pads() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Castellation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Castellation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Castellation::GetClassData() const { return &_class_data_; }

void Castellation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Castellation *>(to)->MergeFrom(
      static_cast<const Castellation &>(from));
}


void Castellation::MergeFrom(const Castellation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.Castellation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_castellated_pads() != 0) {
    _internal_set_has_castellated_pads(from._internal_has_castellated_pads());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Castellation::CopyFrom(const Castellation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.Castellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Castellation::IsInitialized() const {
  return true;
}

void Castellation::InternalSwap(Castellation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(has_castellated_pads_, other->has_castellated_pads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Castellation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[3]);
}

// ===================================================================

class EdgePlating::_Internal {
 public:
};

EdgePlating::EdgePlating(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.EdgePlating)
}
EdgePlating::EdgePlating(const EdgePlating& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  has_edge_plating_ = from.has_edge_plating_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.EdgePlating)
}

inline void EdgePlating::SharedCtor() {
has_edge_plating_ = false;
}

EdgePlating::~EdgePlating() {
  // @@protoc_insertion_point(destructor:kiapi.board.EdgePlating)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EdgePlating::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdgePlating::ArenaDtor(void* object) {
  EdgePlating* _this = reinterpret_cast< EdgePlating* >(object);
  (void)_this;
}
void EdgePlating::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgePlating::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgePlating::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.EdgePlating)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_edge_plating_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgePlating::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_edge_plating = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          has_edge_plating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgePlating::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.EdgePlating)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_edge_plating = 1;
  if (this->_internal_has_edge_plating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_edge_plating(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.EdgePlating)
  return target;
}

size_t EdgePlating::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.EdgePlating)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool has_edge_plating = 1;
  if (this->_internal_has_edge_plating() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgePlating::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EdgePlating::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgePlating::GetClassData() const { return &_class_data_; }

void EdgePlating::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EdgePlating *>(to)->MergeFrom(
      static_cast<const EdgePlating &>(from));
}


void EdgePlating::MergeFrom(const EdgePlating& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.EdgePlating)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_edge_plating() != 0) {
    _internal_set_has_edge_plating(from._internal_has_edge_plating());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgePlating::CopyFrom(const EdgePlating& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.EdgePlating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePlating::IsInitialized() const {
  return true;
}

void EdgePlating::InternalSwap(EdgePlating* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(has_edge_plating_, other->has_edge_plating_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgePlating::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[4]);
}

// ===================================================================

class BoardEdgeSettings::_Internal {
 public:
  static const ::kiapi::board::BoardEdgeConnector& connector(const BoardEdgeSettings* msg);
  static const ::kiapi::board::Castellation& castellation(const BoardEdgeSettings* msg);
  static const ::kiapi::board::EdgePlating& plating(const BoardEdgeSettings* msg);
};

const ::kiapi::board::BoardEdgeConnector&
BoardEdgeSettings::_Internal::connector(const BoardEdgeSettings* msg) {
  return *msg->connector_;
}
const ::kiapi::board::Castellation&
BoardEdgeSettings::_Internal::castellation(const BoardEdgeSettings* msg) {
  return *msg->castellation_;
}
const ::kiapi::board::EdgePlating&
BoardEdgeSettings::_Internal::plating(const BoardEdgeSettings* msg) {
  return *msg->plating_;
}
BoardEdgeSettings::BoardEdgeSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardEdgeSettings)
}
BoardEdgeSettings::BoardEdgeSettings(const BoardEdgeSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connector()) {
    connector_ = new ::kiapi::board::BoardEdgeConnector(*from.connector_);
  } else {
    connector_ = nullptr;
  }
  if (from._internal_has_castellation()) {
    castellation_ = new ::kiapi::board::Castellation(*from.castellation_);
  } else {
    castellation_ = nullptr;
  }
  if (from._internal_has_plating()) {
    plating_ = new ::kiapi::board::EdgePlating(*from.plating_);
  } else {
    plating_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardEdgeSettings)
}

inline void BoardEdgeSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connector_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&plating_) -
    reinterpret_cast<char*>(&connector_)) + sizeof(plating_));
}

BoardEdgeSettings::~BoardEdgeSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardEdgeSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardEdgeSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete connector_;
  if (this != internal_default_instance()) delete castellation_;
  if (this != internal_default_instance()) delete plating_;
}

void BoardEdgeSettings::ArenaDtor(void* object) {
  BoardEdgeSettings* _this = reinterpret_cast< BoardEdgeSettings* >(object);
  (void)_this;
}
void BoardEdgeSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardEdgeSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardEdgeSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardEdgeSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && connector_ != nullptr) {
    delete connector_;
  }
  connector_ = nullptr;
  if (GetArenaForAllocation() == nullptr && castellation_ != nullptr) {
    delete castellation_;
  }
  castellation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && plating_ != nullptr) {
    delete plating_;
  }
  plating_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardEdgeSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.BoardEdgeConnector connector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.Castellation castellation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_castellation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.EdgePlating plating = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_plating(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardEdgeSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardEdgeSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.BoardEdgeConnector connector = 1;
  if (this->_internal_has_connector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::connector(this), target, stream);
  }

  // .kiapi.board.Castellation castellation = 2;
  if (this->_internal_has_castellation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::castellation(this), target, stream);
  }

  // .kiapi.board.EdgePlating plating = 3;
  if (this->_internal_has_plating()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::plating(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardEdgeSettings)
  return target;
}

size_t BoardEdgeSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardEdgeSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.BoardEdgeConnector connector = 1;
  if (this->_internal_has_connector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connector_);
  }

  // .kiapi.board.Castellation castellation = 2;
  if (this->_internal_has_castellation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *castellation_);
  }

  // .kiapi.board.EdgePlating plating = 3;
  if (this->_internal_has_plating()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plating_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardEdgeSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardEdgeSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardEdgeSettings::GetClassData() const { return &_class_data_; }

void BoardEdgeSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardEdgeSettings *>(to)->MergeFrom(
      static_cast<const BoardEdgeSettings &>(from));
}


void BoardEdgeSettings::MergeFrom(const BoardEdgeSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardEdgeSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connector()) {
    _internal_mutable_connector()->::kiapi::board::BoardEdgeConnector::MergeFrom(from._internal_connector());
  }
  if (from._internal_has_castellation()) {
    _internal_mutable_castellation()->::kiapi::board::Castellation::MergeFrom(from._internal_castellation());
  }
  if (from._internal_has_plating()) {
    _internal_mutable_plating()->::kiapi::board::EdgePlating::MergeFrom(from._internal_plating());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardEdgeSettings::CopyFrom(const BoardEdgeSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardEdgeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardEdgeSettings::IsInitialized() const {
  return true;
}

void BoardEdgeSettings::InternalSwap(BoardEdgeSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardEdgeSettings, plating_)
      + sizeof(BoardEdgeSettings::plating_)
      - PROTOBUF_FIELD_OFFSET(BoardEdgeSettings, connector_)>(
          reinterpret_cast<char*>(&connector_),
          reinterpret_cast<char*>(&other->connector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardEdgeSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[5]);
}

// ===================================================================

class BoardStackupCopperLayer::_Internal {
 public:
};

BoardStackupCopperLayer::BoardStackupCopperLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardStackupCopperLayer)
}
BoardStackupCopperLayer::BoardStackupCopperLayer(const BoardStackupCopperLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardStackupCopperLayer)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStackupCopperLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStackupCopperLayer::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BoardStackupCopperLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[6]);
}

// ===================================================================

class BoardStackupDielectricProperties::_Internal {
 public:
  static const ::kiapi::common::types::Distance& thickness(const BoardStackupDielectricProperties* msg);
};

const ::kiapi::common::types::Distance&
BoardStackupDielectricProperties::_Internal::thickness(const BoardStackupDielectricProperties* msg) {
  return *msg->thickness_;
}
void BoardStackupDielectricProperties::clear_thickness() {
  if (GetArenaForAllocation() == nullptr && thickness_ != nullptr) {
    delete thickness_;
  }
  thickness_ = nullptr;
}
BoardStackupDielectricProperties::BoardStackupDielectricProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardStackupDielectricProperties)
}
BoardStackupDielectricProperties::BoardStackupDielectricProperties(const BoardStackupDielectricProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  material_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    material_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_material_name().empty()) {
    material_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_material_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_thickness()) {
    thickness_ = new ::kiapi::common::types::Distance(*from.thickness_);
  } else {
    thickness_ = nullptr;
  }
  ::memcpy(&epsilon_r_, &from.epsilon_r_,
    static_cast<size_t>(reinterpret_cast<char*>(&loss_tangent_) -
    reinterpret_cast<char*>(&epsilon_r_)) + sizeof(loss_tangent_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardStackupDielectricProperties)
}

inline void BoardStackupDielectricProperties::SharedCtor() {
material_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  material_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&thickness_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&loss_tangent_) -
    reinterpret_cast<char*>(&thickness_)) + sizeof(loss_tangent_));
}

BoardStackupDielectricProperties::~BoardStackupDielectricProperties() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardStackupDielectricProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardStackupDielectricProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  material_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thickness_;
}

void BoardStackupDielectricProperties::ArenaDtor(void* object) {
  BoardStackupDielectricProperties* _this = reinterpret_cast< BoardStackupDielectricProperties* >(object);
  (void)_this;
}
void BoardStackupDielectricProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardStackupDielectricProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardStackupDielectricProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardStackupDielectricProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  material_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && thickness_ != nullptr) {
    delete thickness_;
  }
  thickness_ = nullptr;
  ::memset(&epsilon_r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loss_tangent_) -
      reinterpret_cast<char*>(&epsilon_r_)) + sizeof(loss_tangent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardStackupDielectricProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double epsilon_r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          epsilon_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double loss_tangent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          loss_tangent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string material_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_material_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.BoardStackupDielectricProperties.material_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance thickness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_thickness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardStackupDielectricProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardStackupDielectricProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double epsilon_r = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_epsilon_r = this->_internal_epsilon_r();
  uint64_t raw_epsilon_r;
  memcpy(&raw_epsilon_r, &tmp_epsilon_r, sizeof(tmp_epsilon_r));
  if (raw_epsilon_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_epsilon_r(), target);
  }

  // double loss_tangent = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loss_tangent = this->_internal_loss_tangent();
  uint64_t raw_loss_tangent;
  memcpy(&raw_loss_tangent, &tmp_loss_tangent, sizeof(tmp_loss_tangent));
  if (raw_loss_tangent != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_loss_tangent(), target);
  }

  // string material_name = 3;
  if (!this->_internal_material_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material_name().data(), static_cast<int>(this->_internal_material_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.BoardStackupDielectricProperties.material_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_material_name(), target);
  }

  // .kiapi.common.types.Distance thickness = 4;
  if (this->_internal_has_thickness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::thickness(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardStackupDielectricProperties)
  return target;
}

size_t BoardStackupDielectricProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardStackupDielectricProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string material_name = 3;
  if (!this->_internal_material_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material_name());
  }

  // .kiapi.common.types.Distance thickness = 4;
  if (this->_internal_has_thickness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thickness_);
  }

  // double epsilon_r = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_epsilon_r = this->_internal_epsilon_r();
  uint64_t raw_epsilon_r;
  memcpy(&raw_epsilon_r, &tmp_epsilon_r, sizeof(tmp_epsilon_r));
  if (raw_epsilon_r != 0) {
    total_size += 1 + 8;
  }

  // double loss_tangent = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loss_tangent = this->_internal_loss_tangent();
  uint64_t raw_loss_tangent;
  memcpy(&raw_loss_tangent, &tmp_loss_tangent, sizeof(tmp_loss_tangent));
  if (raw_loss_tangent != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStackupDielectricProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardStackupDielectricProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStackupDielectricProperties::GetClassData() const { return &_class_data_; }

void BoardStackupDielectricProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardStackupDielectricProperties *>(to)->MergeFrom(
      static_cast<const BoardStackupDielectricProperties &>(from));
}


void BoardStackupDielectricProperties::MergeFrom(const BoardStackupDielectricProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardStackupDielectricProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_material_name().empty()) {
    _internal_set_material_name(from._internal_material_name());
  }
  if (from._internal_has_thickness()) {
    _internal_mutable_thickness()->::kiapi::common::types::Distance::MergeFrom(from._internal_thickness());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_epsilon_r = from._internal_epsilon_r();
  uint64_t raw_epsilon_r;
  memcpy(&raw_epsilon_r, &tmp_epsilon_r, sizeof(tmp_epsilon_r));
  if (raw_epsilon_r != 0) {
    _internal_set_epsilon_r(from._internal_epsilon_r());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_loss_tangent = from._internal_loss_tangent();
  uint64_t raw_loss_tangent;
  memcpy(&raw_loss_tangent, &tmp_loss_tangent, sizeof(tmp_loss_tangent));
  if (raw_loss_tangent != 0) {
    _internal_set_loss_tangent(from._internal_loss_tangent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardStackupDielectricProperties::CopyFrom(const BoardStackupDielectricProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardStackupDielectricProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStackupDielectricProperties::IsInitialized() const {
  return true;
}

void BoardStackupDielectricProperties::InternalSwap(BoardStackupDielectricProperties* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &material_name_, lhs_arena,
      &other->material_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardStackupDielectricProperties, loss_tangent_)
      + sizeof(BoardStackupDielectricProperties::loss_tangent_)
      - PROTOBUF_FIELD_OFFSET(BoardStackupDielectricProperties, thickness_)>(
          reinterpret_cast<char*>(&thickness_),
          reinterpret_cast<char*>(&other->thickness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardStackupDielectricProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[7]);
}

// ===================================================================

class BoardStackupDielectricLayer::_Internal {
 public:
};

BoardStackupDielectricLayer::BoardStackupDielectricLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardStackupDielectricLayer)
}
BoardStackupDielectricLayer::BoardStackupDielectricLayer(const BoardStackupDielectricLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardStackupDielectricLayer)
}

inline void BoardStackupDielectricLayer::SharedCtor() {
}

BoardStackupDielectricLayer::~BoardStackupDielectricLayer() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardStackupDielectricLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardStackupDielectricLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoardStackupDielectricLayer::ArenaDtor(void* object) {
  BoardStackupDielectricLayer* _this = reinterpret_cast< BoardStackupDielectricLayer* >(object);
  (void)_this;
}
void BoardStackupDielectricLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardStackupDielectricLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardStackupDielectricLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardStackupDielectricLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardStackupDielectricLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.board.BoardStackupDielectricProperties layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardStackupDielectricLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardStackupDielectricLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.board.BoardStackupDielectricProperties layer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_layer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardStackupDielectricLayer)
  return target;
}

size_t BoardStackupDielectricLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardStackupDielectricLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.BoardStackupDielectricProperties layer = 1;
  total_size += 1UL * this->_internal_layer_size();
  for (const auto& msg : this->layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStackupDielectricLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardStackupDielectricLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStackupDielectricLayer::GetClassData() const { return &_class_data_; }

void BoardStackupDielectricLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardStackupDielectricLayer *>(to)->MergeFrom(
      static_cast<const BoardStackupDielectricLayer &>(from));
}


void BoardStackupDielectricLayer::MergeFrom(const BoardStackupDielectricLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardStackupDielectricLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layer_.MergeFrom(from.layer_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardStackupDielectricLayer::CopyFrom(const BoardStackupDielectricLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardStackupDielectricLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStackupDielectricLayer::IsInitialized() const {
  return true;
}

void BoardStackupDielectricLayer::InternalSwap(BoardStackupDielectricLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layer_.InternalSwap(&other->layer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardStackupDielectricLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[8]);
}

// ===================================================================

class BoardStackupLayer::_Internal {
 public:
  static const ::kiapi::common::types::Distance& thickness(const BoardStackupLayer* msg);
  static const ::kiapi::board::BoardStackupDielectricLayer& dielectric(const BoardStackupLayer* msg);
  static const ::kiapi::common::types::Color& color(const BoardStackupLayer* msg);
};

const ::kiapi::common::types::Distance&
BoardStackupLayer::_Internal::thickness(const BoardStackupLayer* msg) {
  return *msg->thickness_;
}
const ::kiapi::board::BoardStackupDielectricLayer&
BoardStackupLayer::_Internal::dielectric(const BoardStackupLayer* msg) {
  return *msg->dielectric_;
}
const ::kiapi::common::types::Color&
BoardStackupLayer::_Internal::color(const BoardStackupLayer* msg) {
  return *msg->color_;
}
void BoardStackupLayer::clear_thickness() {
  if (GetArenaForAllocation() == nullptr && thickness_ != nullptr) {
    delete thickness_;
  }
  thickness_ = nullptr;
}
void BoardStackupLayer::clear_color() {
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
BoardStackupLayer::BoardStackupLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardStackupLayer)
}
BoardStackupLayer::BoardStackupLayer(const BoardStackupLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  material_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    material_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_material_name().empty()) {
    material_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_material_name(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_thickness()) {
    thickness_ = new ::kiapi::common::types::Distance(*from.thickness_);
  } else {
    thickness_ = nullptr;
  }
  if (from._internal_has_dielectric()) {
    dielectric_ = new ::kiapi::board::BoardStackupDielectricLayer(*from.dielectric_);
  } else {
    dielectric_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::kiapi::common::types::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardStackupLayer)
}

inline void BoardStackupLayer::SharedCtor() {
material_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  material_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&thickness_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&thickness_)) + sizeof(type_));
}

BoardStackupLayer::~BoardStackupLayer() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardStackupLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardStackupLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  material_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thickness_;
  if (this != internal_default_instance()) delete dielectric_;
  if (this != internal_default_instance()) delete color_;
}

void BoardStackupLayer::ArenaDtor(void* object) {
  BoardStackupLayer* _this = reinterpret_cast< BoardStackupLayer* >(object);
  (void)_this;
}
void BoardStackupLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardStackupLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardStackupLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardStackupLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  material_name_.ClearToEmpty();
  user_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && thickness_ != nullptr) {
    delete thickness_;
  }
  thickness_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dielectric_ != nullptr) {
    delete dielectric_;
  }
  dielectric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardStackupLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Distance thickness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_thickness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.BoardStackupLayerType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::BoardStackupLayerType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.BoardStackupDielectricLayer dielectric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dielectric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Color color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string material_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_material_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.BoardStackupLayer.material_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.BoardStackupLayer.user_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardStackupLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardStackupLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Distance thickness = 1;
  if (this->_internal_has_thickness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::thickness(this), target, stream);
  }

  // .kiapi.board.types.BoardLayer layer = 2;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_layer(), target);
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  // .kiapi.board.BoardStackupLayerType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // .kiapi.board.BoardStackupDielectricLayer dielectric = 5;
  if (this->_internal_has_dielectric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dielectric(this), target, stream);
  }

  // .kiapi.common.types.Color color = 6;
  if (this->_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::color(this), target, stream);
  }

  // string material_name = 7;
  if (!this->_internal_material_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material_name().data(), static_cast<int>(this->_internal_material_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.BoardStackupLayer.material_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_material_name(), target);
  }

  // string user_name = 8;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.BoardStackupLayer.user_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardStackupLayer)
  return target;
}

size_t BoardStackupLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardStackupLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string material_name = 7;
  if (!this->_internal_material_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material_name());
  }

  // string user_name = 8;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // .kiapi.common.types.Distance thickness = 1;
  if (this->_internal_has_thickness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thickness_);
  }

  // .kiapi.board.BoardStackupDielectricLayer dielectric = 5;
  if (this->_internal_has_dielectric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dielectric_);
  }

  // .kiapi.common.types.Color color = 6;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .kiapi.board.types.BoardLayer layer = 2;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .kiapi.board.BoardStackupLayerType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStackupLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardStackupLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStackupLayer::GetClassData() const { return &_class_data_; }

void BoardStackupLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardStackupLayer *>(to)->MergeFrom(
      static_cast<const BoardStackupLayer &>(from));
}


void BoardStackupLayer::MergeFrom(const BoardStackupLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardStackupLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_material_name().empty()) {
    _internal_set_material_name(from._internal_material_name());
  }
  if (!from._internal_user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_has_thickness()) {
    _internal_mutable_thickness()->::kiapi::common::types::Distance::MergeFrom(from._internal_thickness());
  }
  if (from._internal_has_dielectric()) {
    _internal_mutable_dielectric()->::kiapi::board::BoardStackupDielectricLayer::MergeFrom(from._internal_dielectric());
  }
  if (from._internal_has_color()) {
    _internal_mutable_color()->::kiapi::common::types::Color::MergeFrom(from._internal_color());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardStackupLayer::CopyFrom(const BoardStackupLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardStackupLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStackupLayer::IsInitialized() const {
  return true;
}

void BoardStackupLayer::InternalSwap(BoardStackupLayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &material_name_, lhs_arena,
      &other->material_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardStackupLayer, type_)
      + sizeof(BoardStackupLayer::type_)
      - PROTOBUF_FIELD_OFFSET(BoardStackupLayer, thickness_)>(
          reinterpret_cast<char*>(&thickness_),
          reinterpret_cast<char*>(&other->thickness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardStackupLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[9]);
}

// ===================================================================

class BoardStackup::_Internal {
 public:
  static const ::kiapi::board::BoardFinish& finish(const BoardStackup* msg);
  static const ::kiapi::board::BoardImpedanceControl& impedance(const BoardStackup* msg);
  static const ::kiapi::board::BoardEdgeSettings& edge(const BoardStackup* msg);
};

const ::kiapi::board::BoardFinish&
BoardStackup::_Internal::finish(const BoardStackup* msg) {
  return *msg->finish_;
}
const ::kiapi::board::BoardImpedanceControl&
BoardStackup::_Internal::impedance(const BoardStackup* msg) {
  return *msg->impedance_;
}
const ::kiapi::board::BoardEdgeSettings&
BoardStackup::_Internal::edge(const BoardStackup* msg) {
  return *msg->edge_;
}
BoardStackup::BoardStackup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardStackup)
}
BoardStackup::BoardStackup(const BoardStackup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_finish()) {
    finish_ = new ::kiapi::board::BoardFinish(*from.finish_);
  } else {
    finish_ = nullptr;
  }
  if (from._internal_has_impedance()) {
    impedance_ = new ::kiapi::board::BoardImpedanceControl(*from.impedance_);
  } else {
    impedance_ = nullptr;
  }
  if (from._internal_has_edge()) {
    edge_ = new ::kiapi::board::BoardEdgeSettings(*from.edge_);
  } else {
    edge_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardStackup)
}

inline void BoardStackup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&finish_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edge_) -
    reinterpret_cast<char*>(&finish_)) + sizeof(edge_));
}

BoardStackup::~BoardStackup() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardStackup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardStackup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete finish_;
  if (this != internal_default_instance()) delete impedance_;
  if (this != internal_default_instance()) delete edge_;
}

void BoardStackup::ArenaDtor(void* object) {
  BoardStackup* _this = reinterpret_cast< BoardStackup* >(object);
  (void)_this;
}
void BoardStackup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardStackup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardStackup::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardStackup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  if (GetArenaForAllocation() == nullptr && finish_ != nullptr) {
    delete finish_;
  }
  finish_ = nullptr;
  if (GetArenaForAllocation() == nullptr && impedance_ != nullptr) {
    delete impedance_;
  }
  impedance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edge_ != nullptr) {
    delete edge_;
  }
  edge_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardStackup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.BoardFinish finish = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_finish(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.BoardImpedanceControl impedance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_impedance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.BoardEdgeSettings edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.BoardStackupLayer layers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardStackup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardStackup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.BoardFinish finish = 1;
  if (this->_internal_has_finish()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::finish(this), target, stream);
  }

  // .kiapi.board.BoardImpedanceControl impedance = 2;
  if (this->_internal_has_impedance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::impedance(this), target, stream);
  }

  // .kiapi.board.BoardEdgeSettings edge = 3;
  if (this->_internal_has_edge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edge(this), target, stream);
  }

  // repeated .kiapi.board.BoardStackupLayer layers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardStackup)
  return target;
}

size_t BoardStackup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardStackup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.BoardStackupLayer layers = 4;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.board.BoardFinish finish = 1;
  if (this->_internal_has_finish()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *finish_);
  }

  // .kiapi.board.BoardImpedanceControl impedance = 2;
  if (this->_internal_has_impedance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *impedance_);
  }

  // .kiapi.board.BoardEdgeSettings edge = 3;
  if (this->_internal_has_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStackup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardStackup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStackup::GetClassData() const { return &_class_data_; }

void BoardStackup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardStackup *>(to)->MergeFrom(
      static_cast<const BoardStackup &>(from));
}


void BoardStackup::MergeFrom(const BoardStackup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardStackup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  if (from._internal_has_finish()) {
    _internal_mutable_finish()->::kiapi::board::BoardFinish::MergeFrom(from._internal_finish());
  }
  if (from._internal_has_impedance()) {
    _internal_mutable_impedance()->::kiapi::board::BoardImpedanceControl::MergeFrom(from._internal_impedance());
  }
  if (from._internal_has_edge()) {
    _internal_mutable_edge()->::kiapi::board::BoardEdgeSettings::MergeFrom(from._internal_edge());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardStackup::CopyFrom(const BoardStackup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardStackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStackup::IsInitialized() const {
  return true;
}

void BoardStackup::InternalSwap(BoardStackup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardStackup, edge_)
      + sizeof(BoardStackup::edge_)
      - PROTOBUF_FIELD_OFFSET(BoardStackup, finish_)>(
          reinterpret_cast<char*>(&finish_),
          reinterpret_cast<char*>(&other->finish_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardStackup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[10]);
}

// ===================================================================

class BoardLayerGraphicsDefaults::_Internal {
 public:
  static const ::kiapi::common::types::TextAttributes& text(const BoardLayerGraphicsDefaults* msg);
  static const ::kiapi::common::types::Distance& line_thickness(const BoardLayerGraphicsDefaults* msg);
};

const ::kiapi::common::types::TextAttributes&
BoardLayerGraphicsDefaults::_Internal::text(const BoardLayerGraphicsDefaults* msg) {
  return *msg->text_;
}
const ::kiapi::common::types::Distance&
BoardLayerGraphicsDefaults::_Internal::line_thickness(const BoardLayerGraphicsDefaults* msg) {
  return *msg->line_thickness_;
}
void BoardLayerGraphicsDefaults::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
void BoardLayerGraphicsDefaults::clear_line_thickness() {
  if (GetArenaForAllocation() == nullptr && line_thickness_ != nullptr) {
    delete line_thickness_;
  }
  line_thickness_ = nullptr;
}
BoardLayerGraphicsDefaults::BoardLayerGraphicsDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardLayerGraphicsDefaults)
}
BoardLayerGraphicsDefaults::BoardLayerGraphicsDefaults(const BoardLayerGraphicsDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text()) {
    text_ = new ::kiapi::common::types::TextAttributes(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from._internal_has_line_thickness()) {
    line_thickness_ = new ::kiapi::common::types::Distance(*from.line_thickness_);
  } else {
    line_thickness_ = nullptr;
  }
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardLayerGraphicsDefaults)
}

inline void BoardLayerGraphicsDefaults::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&text_)) + sizeof(layer_));
}

BoardLayerGraphicsDefaults::~BoardLayerGraphicsDefaults() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardLayerGraphicsDefaults)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardLayerGraphicsDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete line_thickness_;
}

void BoardLayerGraphicsDefaults::ArenaDtor(void* object) {
  BoardLayerGraphicsDefaults* _this = reinterpret_cast< BoardLayerGraphicsDefaults* >(object);
  (void)_this;
}
void BoardLayerGraphicsDefaults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardLayerGraphicsDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardLayerGraphicsDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardLayerGraphicsDefaults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  if (GetArenaForAllocation() == nullptr && line_thickness_ != nullptr) {
    delete line_thickness_;
  }
  line_thickness_ = nullptr;
  layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardLayerGraphicsDefaults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.BoardLayerClass layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::BoardLayerClass>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.TextAttributes text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance line_thickness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_thickness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardLayerGraphicsDefaults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardLayerGraphicsDefaults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.BoardLayerClass layer = 1;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layer(), target);
  }

  // .kiapi.common.types.TextAttributes text = 2;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text(this), target, stream);
  }

  // .kiapi.common.types.Distance line_thickness = 3;
  if (this->_internal_has_line_thickness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::line_thickness(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardLayerGraphicsDefaults)
  return target;
}

size_t BoardLayerGraphicsDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardLayerGraphicsDefaults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.TextAttributes text = 2;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .kiapi.common.types.Distance line_thickness = 3;
  if (this->_internal_has_line_thickness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *line_thickness_);
  }

  // .kiapi.board.BoardLayerClass layer = 1;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardLayerGraphicsDefaults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardLayerGraphicsDefaults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardLayerGraphicsDefaults::GetClassData() const { return &_class_data_; }

void BoardLayerGraphicsDefaults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardLayerGraphicsDefaults *>(to)->MergeFrom(
      static_cast<const BoardLayerGraphicsDefaults &>(from));
}


void BoardLayerGraphicsDefaults::MergeFrom(const BoardLayerGraphicsDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardLayerGraphicsDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::common::types::TextAttributes::MergeFrom(from._internal_text());
  }
  if (from._internal_has_line_thickness()) {
    _internal_mutable_line_thickness()->::kiapi::common::types::Distance::MergeFrom(from._internal_line_thickness());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardLayerGraphicsDefaults::CopyFrom(const BoardLayerGraphicsDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardLayerGraphicsDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardLayerGraphicsDefaults::IsInitialized() const {
  return true;
}

void BoardLayerGraphicsDefaults::InternalSwap(BoardLayerGraphicsDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardLayerGraphicsDefaults, layer_)
      + sizeof(BoardLayerGraphicsDefaults::layer_)
      - PROTOBUF_FIELD_OFFSET(BoardLayerGraphicsDefaults, text_)>(
          reinterpret_cast<char*>(&text_),
          reinterpret_cast<char*>(&other->text_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardLayerGraphicsDefaults::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[11]);
}

// ===================================================================

class GraphicsDefaults::_Internal {
 public:
};

GraphicsDefaults::GraphicsDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.GraphicsDefaults)
}
GraphicsDefaults::GraphicsDefaults(const GraphicsDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.GraphicsDefaults)
}

inline void GraphicsDefaults::SharedCtor() {
}

GraphicsDefaults::~GraphicsDefaults() {
  // @@protoc_insertion_point(destructor:kiapi.board.GraphicsDefaults)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphicsDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GraphicsDefaults::ArenaDtor(void* object) {
  GraphicsDefaults* _this = reinterpret_cast< GraphicsDefaults* >(object);
  (void)_this;
}
void GraphicsDefaults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphicsDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphicsDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.GraphicsDefaults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphicsDefaults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kiapi.board.BoardLayerGraphicsDefaults layers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicsDefaults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.GraphicsDefaults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kiapi.board.BoardLayerGraphicsDefaults layers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.GraphicsDefaults)
  return target;
}

size_t GraphicsDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.GraphicsDefaults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.BoardLayerGraphicsDefaults layers = 1;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphicsDefaults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphicsDefaults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphicsDefaults::GetClassData() const { return &_class_data_; }

void GraphicsDefaults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphicsDefaults *>(to)->MergeFrom(
      static_cast<const GraphicsDefaults &>(from));
}


void GraphicsDefaults::MergeFrom(const GraphicsDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.GraphicsDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphicsDefaults::CopyFrom(const GraphicsDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.GraphicsDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsDefaults::IsInitialized() const {
  return true;
}

void GraphicsDefaults::InternalSwap(GraphicsDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphicsDefaults::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[12]);
}

// ===================================================================

class BoardSettings::_Internal {
 public:
  static const ::kiapi::board::GraphicsDefaults& graphics_defaults(const BoardSettings* msg);
};

const ::kiapi::board::GraphicsDefaults&
BoardSettings::_Internal::graphics_defaults(const BoardSettings* msg) {
  return *msg->graphics_defaults_;
}
BoardSettings::BoardSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardSettings)
}
BoardSettings::BoardSettings(const BoardSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graphics_defaults()) {
    graphics_defaults_ = new ::kiapi::board::GraphicsDefaults(*from.graphics_defaults_);
  } else {
    graphics_defaults_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardSettings)
}

inline void BoardSettings::SharedCtor() {
graphics_defaults_ = nullptr;
}

BoardSettings::~BoardSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.BoardSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete graphics_defaults_;
}

void BoardSettings::ArenaDtor(void* object) {
  BoardSettings* _this = reinterpret_cast< BoardSettings* >(object);
  (void)_this;
}
void BoardSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.BoardSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && graphics_defaults_ != nullptr) {
    delete graphics_defaults_;
  }
  graphics_defaults_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.GraphicsDefaults graphics_defaults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_graphics_defaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.BoardSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.GraphicsDefaults graphics_defaults = 1;
  if (this->_internal_has_graphics_defaults()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::graphics_defaults(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.BoardSettings)
  return target;
}

size_t BoardSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.BoardSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.GraphicsDefaults graphics_defaults = 1;
  if (this->_internal_has_graphics_defaults()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graphics_defaults_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardSettings::GetClassData() const { return &_class_data_; }

void BoardSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardSettings *>(to)->MergeFrom(
      static_cast<const BoardSettings &>(from));
}


void BoardSettings::MergeFrom(const BoardSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.BoardSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_graphics_defaults()) {
    _internal_mutable_graphics_defaults()->::kiapi::board::GraphicsDefaults::MergeFrom(from._internal_graphics_defaults());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardSettings::CopyFrom(const BoardSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.BoardSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardSettings::IsInitialized() const {
  return true;
}

void BoardSettings::InternalSwap(BoardSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(graphics_defaults_, other->graphics_defaults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[13]);
}

// ===================================================================

class BoardDesignRules::_Internal {
 public:
};

BoardDesignRules::BoardDesignRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.board.BoardDesignRules)
}
BoardDesignRules::BoardDesignRules(const BoardDesignRules& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.BoardDesignRules)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardDesignRules::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardDesignRules::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BoardDesignRules::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_2eproto_getter, &descriptor_table_board_2fboard_2eproto_once,
      file_level_metadata_board_2fboard_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace board
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardFinish* Arena::CreateMaybeMessage< ::kiapi::board::BoardFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardImpedanceControl* Arena::CreateMaybeMessage< ::kiapi::board::BoardImpedanceControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardImpedanceControl >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardEdgeConnector* Arena::CreateMaybeMessage< ::kiapi::board::BoardEdgeConnector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardEdgeConnector >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::Castellation* Arena::CreateMaybeMessage< ::kiapi::board::Castellation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::Castellation >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::EdgePlating* Arena::CreateMaybeMessage< ::kiapi::board::EdgePlating >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::EdgePlating >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardEdgeSettings* Arena::CreateMaybeMessage< ::kiapi::board::BoardEdgeSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardEdgeSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardStackupCopperLayer* Arena::CreateMaybeMessage< ::kiapi::board::BoardStackupCopperLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardStackupCopperLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardStackupDielectricProperties* Arena::CreateMaybeMessage< ::kiapi::board::BoardStackupDielectricProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardStackupDielectricProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardStackupDielectricLayer* Arena::CreateMaybeMessage< ::kiapi::board::BoardStackupDielectricLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardStackupDielectricLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardStackupLayer* Arena::CreateMaybeMessage< ::kiapi::board::BoardStackupLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardStackupLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardStackup* Arena::CreateMaybeMessage< ::kiapi::board::BoardStackup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardStackup >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardLayerGraphicsDefaults* Arena::CreateMaybeMessage< ::kiapi::board::BoardLayerGraphicsDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardLayerGraphicsDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::GraphicsDefaults* Arena::CreateMaybeMessage< ::kiapi::board::GraphicsDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::GraphicsDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardSettings* Arena::CreateMaybeMessage< ::kiapi::board::BoardSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::BoardDesignRules* Arena::CreateMaybeMessage< ::kiapi::board::BoardDesignRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::BoardDesignRules >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
