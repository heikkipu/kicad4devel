// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board/board_types.proto

#include "board/board_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kiapi {
namespace board {
namespace types {
constexpr NetCode::NetCode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct NetCodeDefaultTypeInternal {
  constexpr NetCodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetCodeDefaultTypeInternal() {}
  union {
    NetCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetCodeDefaultTypeInternal _NetCode_default_instance_;
constexpr Net::Net(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(nullptr){}
struct NetDefaultTypeInternal {
  constexpr NetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetDefaultTypeInternal() {}
  union {
    Net _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetDefaultTypeInternal _Net_default_instance_;
constexpr Track::Track(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , start_(nullptr)
  , end_(nullptr)
  , width_(nullptr)
  , net_(nullptr)
  , locked_(0)

  , layer_(0)
{}
struct TrackDefaultTypeInternal {
  constexpr TrackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackDefaultTypeInternal() {}
  union {
    Track _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackDefaultTypeInternal _Track_default_instance_;
constexpr Arc::Arc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , start_(nullptr)
  , mid_(nullptr)
  , end_(nullptr)
  , width_(nullptr)
  , net_(nullptr)
  , locked_(0)

  , layer_(0)
{}
struct ArcDefaultTypeInternal {
  constexpr ArcDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArcDefaultTypeInternal() {}
  union {
    Arc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArcDefaultTypeInternal _Arc_default_instance_;
constexpr ChamferedRectCorners::ChamferedRectCorners(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_left_(false)
  , top_right_(false)
  , bottom_left_(false)
  , bottom_right_(false){}
struct ChamferedRectCornersDefaultTypeInternal {
  constexpr ChamferedRectCornersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChamferedRectCornersDefaultTypeInternal() {}
  union {
    ChamferedRectCorners _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChamferedRectCornersDefaultTypeInternal _ChamferedRectCorners_default_instance_;
constexpr ZoneConnectionSettings::ZoneConnectionSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thermal_spokes_(nullptr)
  , zone_connection_(0)
{}
struct ZoneConnectionSettingsDefaultTypeInternal {
  constexpr ZoneConnectionSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneConnectionSettingsDefaultTypeInternal() {}
  union {
    ZoneConnectionSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneConnectionSettingsDefaultTypeInternal _ZoneConnectionSettings_default_instance_;
constexpr SolderMaskOverrides::SolderMaskOverrides(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : solder_mask_margin_(nullptr){}
struct SolderMaskOverridesDefaultTypeInternal {
  constexpr SolderMaskOverridesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolderMaskOverridesDefaultTypeInternal() {}
  union {
    SolderMaskOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolderMaskOverridesDefaultTypeInternal _SolderMaskOverrides_default_instance_;
constexpr SolderPasteOverrides::SolderPasteOverrides(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : solder_paste_margin_(nullptr)
  , solder_paste_margin_ratio_(nullptr){}
struct SolderPasteOverridesDefaultTypeInternal {
  constexpr SolderPasteOverridesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolderPasteOverridesDefaultTypeInternal() {}
  union {
    SolderPasteOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolderPasteOverridesDefaultTypeInternal _SolderPasteOverrides_default_instance_;
constexpr PadStackLayer::PadStackLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_shapes_()
  , size_(nullptr)
  , chamfered_corners_(nullptr)
  , zone_settings_(nullptr)
  , trapezoid_delta_(nullptr)
  , offset_(nullptr)
  , layer_(0)

  , shape_(0)

  , corner_rounding_ratio_(0)
  , chamfer_ratio_(0)
  , custom_anchor_shape_(0)
{}
struct PadStackLayerDefaultTypeInternal {
  constexpr PadStackLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PadStackLayerDefaultTypeInternal() {}
  union {
    PadStackLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PadStackLayerDefaultTypeInternal _PadStackLayer_default_instance_;
constexpr PadStackOuterLayer::PadStackOuterLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : solder_mask_settings_(nullptr)
  , solder_paste_settings_(nullptr)
  , solder_mask_mode_(0)

  , solder_paste_mode_(0)

  , plugging_mode_(0)

  , covering_mode_(0)
{}
struct PadStackOuterLayerDefaultTypeInternal {
  constexpr PadStackOuterLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PadStackOuterLayerDefaultTypeInternal() {}
  union {
    PadStackOuterLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PadStackOuterLayerDefaultTypeInternal _PadStackOuterLayer_default_instance_;
constexpr DrillProperties::DrillProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diameter_(nullptr)
  , start_layer_(0)

  , end_layer_(0)

  , shape_(0)

  , capped_(0)

  , filled_(0)
{}
struct DrillPropertiesDefaultTypeInternal {
  constexpr DrillPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrillPropertiesDefaultTypeInternal() {}
  union {
    DrillProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrillPropertiesDefaultTypeInternal _DrillProperties_default_instance_;
constexpr PadStack::PadStack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , _layers_cached_byte_size_(0)
  , copper_layers_()
  , drill_(nullptr)
  , angle_(nullptr)
  , front_outer_layers_(nullptr)
  , back_outer_layers_(nullptr)
  , zone_settings_(nullptr)
  , type_(0)

  , unconnected_layer_removal_(0)
{}
struct PadStackDefaultTypeInternal {
  constexpr PadStackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PadStackDefaultTypeInternal() {}
  union {
    PadStack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PadStackDefaultTypeInternal _PadStack_default_instance_;
constexpr Via::Via(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , position_(nullptr)
  , pad_stack_(nullptr)
  , net_(nullptr)
  , locked_(0)

  , type_(0)
{}
struct ViaDefaultTypeInternal {
  constexpr ViaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViaDefaultTypeInternal() {}
  union {
    Via _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViaDefaultTypeInternal _Via_default_instance_;
constexpr BoardGraphicShape::BoardGraphicShape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_(nullptr)
  , net_(nullptr)
  , id_(nullptr)
  , layer_(0)

  , locked_(0)
{}
struct BoardGraphicShapeDefaultTypeInternal {
  constexpr BoardGraphicShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardGraphicShapeDefaultTypeInternal() {}
  union {
    BoardGraphicShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardGraphicShapeDefaultTypeInternal _BoardGraphicShape_default_instance_;
constexpr BoardText::BoardText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , text_(nullptr)
  , layer_(0)

  , knockout_(false)
  , locked_(0)
{}
struct BoardTextDefaultTypeInternal {
  constexpr BoardTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardTextDefaultTypeInternal() {}
  union {
    BoardText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardTextDefaultTypeInternal _BoardText_default_instance_;
constexpr BoardTextBox::BoardTextBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , textbox_(nullptr)
  , layer_(0)

  , locked_(0)
{}
struct BoardTextBoxDefaultTypeInternal {
  constexpr BoardTextBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoardTextBoxDefaultTypeInternal() {}
  union {
    BoardTextBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoardTextBoxDefaultTypeInternal _BoardTextBox_default_instance_;
constexpr ThermalSpokeSettings::ThermalSpokeSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(nullptr)
  , angle_(nullptr)
  , gap_(nullptr){}
struct ThermalSpokeSettingsDefaultTypeInternal {
  constexpr ThermalSpokeSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThermalSpokeSettingsDefaultTypeInternal() {}
  union {
    ThermalSpokeSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThermalSpokeSettingsDefaultTypeInternal _ThermalSpokeSettings_default_instance_;
constexpr Pad::Pad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , net_(nullptr)
  , pad_stack_(nullptr)
  , position_(nullptr)
  , copper_clearance_override_(nullptr)
  , locked_(0)

  , type_(0)
{}
struct PadDefaultTypeInternal {
  constexpr PadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PadDefaultTypeInternal() {}
  union {
    Pad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PadDefaultTypeInternal _Pad_default_instance_;
constexpr HatchFillSettings::HatchFillSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thickness_(nullptr)
  , gap_(nullptr)
  , orientation_(nullptr)
  , hatch_smoothing_ratio_(0)
  , hatch_hole_min_area_ratio_(0)
  , border_mode_(0)
{}
struct HatchFillSettingsDefaultTypeInternal {
  constexpr HatchFillSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HatchFillSettingsDefaultTypeInternal() {}
  union {
    HatchFillSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HatchFillSettingsDefaultTypeInternal _HatchFillSettings_default_instance_;
constexpr TeardropSettings::TeardropSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct TeardropSettingsDefaultTypeInternal {
  constexpr TeardropSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeardropSettingsDefaultTypeInternal() {}
  union {
    TeardropSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeardropSettingsDefaultTypeInternal _TeardropSettings_default_instance_;
constexpr CopperZoneSettings::CopperZoneSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_(nullptr)
  , clearance_(nullptr)
  , min_thickness_(nullptr)
  , hatch_settings_(nullptr)
  , net_(nullptr)
  , teardrop_(nullptr)
  , min_island_area_(uint64_t{0u})
  , island_mode_(0)

  , fill_mode_(0)
{}
struct CopperZoneSettingsDefaultTypeInternal {
  constexpr CopperZoneSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CopperZoneSettingsDefaultTypeInternal() {}
  union {
    CopperZoneSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CopperZoneSettingsDefaultTypeInternal _CopperZoneSettings_default_instance_;
constexpr RuleAreaSettings::RuleAreaSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : placement_source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keepout_copper_(false)
  , keepout_vias_(false)
  , keepout_tracks_(false)
  , keepout_pads_(false)
  , keepout_footprints_(false)
  , placement_enabled_(false)
  , placement_source_type_(0)
{}
struct RuleAreaSettingsDefaultTypeInternal {
  constexpr RuleAreaSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuleAreaSettingsDefaultTypeInternal() {}
  union {
    RuleAreaSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuleAreaSettingsDefaultTypeInternal _RuleAreaSettings_default_instance_;
constexpr ZoneBorderSettings::ZoneBorderSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pitch_(nullptr)
  , style_(0)
{}
struct ZoneBorderSettingsDefaultTypeInternal {
  constexpr ZoneBorderSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneBorderSettingsDefaultTypeInternal() {}
  union {
    ZoneBorderSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneBorderSettingsDefaultTypeInternal _ZoneBorderSettings_default_instance_;
constexpr ZoneFilledPolygons::ZoneFilledPolygons(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shapes_(nullptr)
  , layer_(0)
{}
struct ZoneFilledPolygonsDefaultTypeInternal {
  constexpr ZoneFilledPolygonsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneFilledPolygonsDefaultTypeInternal() {}
  union {
    ZoneFilledPolygons _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneFilledPolygonsDefaultTypeInternal _ZoneFilledPolygons_default_instance_;
constexpr ZoneLayerProperties::ZoneLayerProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hatching_offset_(nullptr)
  , layer_(0)
{}
struct ZoneLayerPropertiesDefaultTypeInternal {
  constexpr ZoneLayerPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneLayerPropertiesDefaultTypeInternal() {}
  union {
    ZoneLayerProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneLayerPropertiesDefaultTypeInternal _ZoneLayerProperties_default_instance_;
constexpr Zone::Zone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layers_()
  , _layers_cached_byte_size_(0)
  , filled_polygons_()
  , layer_properties_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , outline_(nullptr)
  , border_(nullptr)
  , type_(0)

  , priority_(0u)
  , filled_(false)
  , locked_(0)

  , _oneof_case_{}{}
struct ZoneDefaultTypeInternal {
  constexpr ZoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneDefaultTypeInternal() {}
  union {
    Zone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneDefaultTypeInternal _Zone_default_instance_;
constexpr AlignedDimensionAttributes::AlignedDimensionAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr)
  , height_(nullptr)
  , extension_height_(nullptr){}
struct AlignedDimensionAttributesDefaultTypeInternal {
  constexpr AlignedDimensionAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlignedDimensionAttributesDefaultTypeInternal() {}
  union {
    AlignedDimensionAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlignedDimensionAttributesDefaultTypeInternal _AlignedDimensionAttributes_default_instance_;
constexpr OrthogonalDimensionAttributes::OrthogonalDimensionAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr)
  , height_(nullptr)
  , extension_height_(nullptr)
  , alignment_(0)
{}
struct OrthogonalDimensionAttributesDefaultTypeInternal {
  constexpr OrthogonalDimensionAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrthogonalDimensionAttributesDefaultTypeInternal() {}
  union {
    OrthogonalDimensionAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrthogonalDimensionAttributesDefaultTypeInternal _OrthogonalDimensionAttributes_default_instance_;
constexpr RadialDimensionAttributes::RadialDimensionAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr)
  , radius_point_(nullptr)
  , leader_length_(nullptr){}
struct RadialDimensionAttributesDefaultTypeInternal {
  constexpr RadialDimensionAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadialDimensionAttributesDefaultTypeInternal() {}
  union {
    RadialDimensionAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadialDimensionAttributesDefaultTypeInternal _RadialDimensionAttributes_default_instance_;
constexpr LeaderDimensionAttributes::LeaderDimensionAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr)
  , border_style_(0)
{}
struct LeaderDimensionAttributesDefaultTypeInternal {
  constexpr LeaderDimensionAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaderDimensionAttributesDefaultTypeInternal() {}
  union {
    LeaderDimensionAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaderDimensionAttributesDefaultTypeInternal _LeaderDimensionAttributes_default_instance_;
constexpr CenterDimensionAttributes::CenterDimensionAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr)
  , end_(nullptr){}
struct CenterDimensionAttributesDefaultTypeInternal {
  constexpr CenterDimensionAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CenterDimensionAttributesDefaultTypeInternal() {}
  union {
    CenterDimensionAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CenterDimensionAttributesDefaultTypeInternal _CenterDimensionAttributes_default_instance_;
constexpr Dimension::Dimension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : override_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , text_(nullptr)
  , line_thickness_(nullptr)
  , arrow_length_(nullptr)
  , extension_offset_(nullptr)
  , locked_(0)

  , layer_(0)

  , unit_(0)

  , unit_format_(0)

  , arrow_direction_(0)

  , precision_(0)

  , override_text_enabled_(false)
  , suppress_trailing_zeroes_(false)
  , keep_text_aligned_(false)
  , text_position_(0)

  , _oneof_case_{}{}
struct DimensionDefaultTypeInternal {
  constexpr DimensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DimensionDefaultTypeInternal() {}
  union {
    Dimension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DimensionDefaultTypeInternal _Dimension_default_instance_;
constexpr ReferenceImage::ReferenceImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReferenceImageDefaultTypeInternal {
  constexpr ReferenceImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceImageDefaultTypeInternal() {}
  union {
    ReferenceImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceImageDefaultTypeInternal _ReferenceImage_default_instance_;
constexpr Group::Group(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GroupDefaultTypeInternal {
  constexpr GroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupDefaultTypeInternal() {}
  union {
    Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupDefaultTypeInternal _Group_default_instance_;
constexpr FieldId::FieldId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct FieldIdDefaultTypeInternal {
  constexpr FieldIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldIdDefaultTypeInternal() {}
  union {
    FieldId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldIdDefaultTypeInternal _FieldId_default_instance_;
constexpr Field::Field(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , text_(nullptr)
  , visible_(false){}
struct FieldDefaultTypeInternal {
  constexpr FieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldDefaultTypeInternal() {}
  union {
    Field _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldDefaultTypeInternal _Field_default_instance_;
constexpr FootprintAttributes::FootprintAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keywords_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , not_in_schematic_(false)
  , exclude_from_position_files_(false)
  , exclude_from_bill_of_materials_(false)
  , exempt_from_courtyard_requirement_(false)
  , do_not_populate_(false)
  , mounting_style_(0)
{}
struct FootprintAttributesDefaultTypeInternal {
  constexpr FootprintAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FootprintAttributesDefaultTypeInternal() {}
  union {
    FootprintAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FootprintAttributesDefaultTypeInternal _FootprintAttributes_default_instance_;
constexpr NetTieDefinition::NetTieDefinition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pad_number_(){}
struct NetTieDefinitionDefaultTypeInternal {
  constexpr NetTieDefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetTieDefinitionDefaultTypeInternal() {}
  union {
    NetTieDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetTieDefinitionDefaultTypeInternal _NetTieDefinition_default_instance_;
constexpr FootprintDesignRuleOverrides::FootprintDesignRuleOverrides(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : solder_mask_(nullptr)
  , solder_paste_(nullptr)
  , copper_clearance_(nullptr)
  , zone_connection_(0)
{}
struct FootprintDesignRuleOverridesDefaultTypeInternal {
  constexpr FootprintDesignRuleOverridesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FootprintDesignRuleOverridesDefaultTypeInternal() {}
  union {
    FootprintDesignRuleOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FootprintDesignRuleOverridesDefaultTypeInternal _FootprintDesignRuleOverrides_default_instance_;
constexpr Footprint3DModel::Footprint3DModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scale_(nullptr)
  , rotation_(nullptr)
  , offset_(nullptr)
  , opacity_(0)
  , visible_(false){}
struct Footprint3DModelDefaultTypeInternal {
  constexpr Footprint3DModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Footprint3DModelDefaultTypeInternal() {}
  union {
    Footprint3DModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Footprint3DModelDefaultTypeInternal _Footprint3DModel_default_instance_;
constexpr JumperGroup::JumperGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pad_names_(){}
struct JumperGroupDefaultTypeInternal {
  constexpr JumperGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JumperGroupDefaultTypeInternal() {}
  union {
    JumperGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JumperGroupDefaultTypeInternal _JumperGroup_default_instance_;
constexpr JumperSettings::JumperSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groups_()
  , duplicate_names_are_jumpered_(false){}
struct JumperSettingsDefaultTypeInternal {
  constexpr JumperSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JumperSettingsDefaultTypeInternal() {}
  union {
    JumperSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JumperSettingsDefaultTypeInternal _JumperSettings_default_instance_;
constexpr Footprint::Footprint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_ties_()
  , private_layers_()
  , _private_layers_cached_byte_size_(0)
  , items_()
  , id_(nullptr)
  , anchor_(nullptr)
  , attributes_(nullptr)
  , overrides_(nullptr)
  , reference_field_(nullptr)
  , value_field_(nullptr)
  , datasheet_field_(nullptr)
  , description_field_(nullptr)
  , jumpers_(nullptr){}
struct FootprintDefaultTypeInternal {
  constexpr FootprintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FootprintDefaultTypeInternal() {}
  union {
    Footprint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FootprintDefaultTypeInternal _Footprint_default_instance_;
constexpr FootprintInstance::FootprintInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr)
  , definition_(nullptr)
  , reference_field_(nullptr)
  , value_field_(nullptr)
  , datasheet_field_(nullptr)
  , description_field_(nullptr)
  , attributes_(nullptr)
  , overrides_(nullptr)
  , layer_(0)

  , locked_(0)
{}
struct FootprintInstanceDefaultTypeInternal {
  constexpr FootprintInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FootprintInstanceDefaultTypeInternal() {}
  union {
    FootprintInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FootprintInstanceDefaultTypeInternal _FootprintInstance_default_instance_;
}  // namespace types
}  // namespace board
}  // namespace kiapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_board_2fboard_5ftypes_2eproto[44];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[30];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_board_2fboard_5ftypes_2eproto = nullptr;

const uint32_t TableStruct_board_2fboard_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::NetCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::NetCode, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Net, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Net, code_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Net, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, end_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, locked_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Track, net_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, mid_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, end_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, locked_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Arc, net_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ChamferedRectCorners, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ChamferedRectCorners, top_left_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ChamferedRectCorners, top_right_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ChamferedRectCorners, bottom_left_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ChamferedRectCorners, bottom_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneConnectionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneConnectionSettings, zone_connection_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneConnectionSettings, thermal_spokes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::SolderMaskOverrides, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::SolderMaskOverrides, solder_mask_margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::SolderPasteOverrides, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::SolderPasteOverrides, solder_paste_margin_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::SolderPasteOverrides, solder_paste_margin_ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, shape_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, size_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, corner_rounding_ratio_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, chamfer_ratio_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, chamfered_corners_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, custom_shapes_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, custom_anchor_shape_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, zone_settings_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, trapezoid_delta_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackLayer, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackOuterLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackOuterLayer, solder_mask_mode_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackOuterLayer, solder_paste_mode_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackOuterLayer, solder_mask_settings_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackOuterLayer, solder_paste_settings_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackOuterLayer, plugging_mode_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStackOuterLayer, covering_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::DrillProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::DrillProperties, start_layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::DrillProperties, end_layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::DrillProperties, diameter_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::DrillProperties, shape_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::DrillProperties, capped_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::DrillProperties, filled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, layers_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, drill_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, unconnected_layer_removal_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, copper_layers_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, angle_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, front_outer_layers_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, back_outer_layers_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::PadStack, zone_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Via, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Via, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Via, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Via, pad_stack_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Via, locked_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Via, net_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Via, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardGraphicShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardGraphicShape, shape_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardGraphicShape, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardGraphicShape, net_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardGraphicShape, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardGraphicShape, locked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardText, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardText, text_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardText, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardText, knockout_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardText, locked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardTextBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardTextBox, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardTextBox, textbox_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardTextBox, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::BoardTextBox, locked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ThermalSpokeSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ThermalSpokeSettings, width_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ThermalSpokeSettings, angle_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ThermalSpokeSettings, gap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, locked_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, number_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, net_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, pad_stack_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Pad, copper_clearance_override_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::HatchFillSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::HatchFillSettings, thickness_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::HatchFillSettings, gap_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::HatchFillSettings, orientation_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::HatchFillSettings, hatch_smoothing_ratio_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::HatchFillSettings, hatch_hole_min_area_ratio_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::HatchFillSettings, border_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::TeardropSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::TeardropSettings, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, connection_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, clearance_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, min_thickness_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, island_mode_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, min_island_area_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, fill_mode_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, hatch_settings_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, net_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CopperZoneSettings, teardrop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, keepout_copper_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, keepout_vias_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, keepout_tracks_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, keepout_pads_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, keepout_footprints_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, placement_enabled_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, placement_source_type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RuleAreaSettings, placement_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneBorderSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneBorderSettings, style_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneBorderSettings, pitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneFilledPolygons, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneFilledPolygons, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneFilledPolygons, shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneLayerProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneLayerProperties, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ZoneLayerProperties, hatching_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, type_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, layers_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, outline_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, name_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, priority_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, filled_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, filled_polygons_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, border_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, locked_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, layer_properties_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Zone, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::AlignedDimensionAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::AlignedDimensionAttributes, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::AlignedDimensionAttributes, end_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::AlignedDimensionAttributes, height_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::AlignedDimensionAttributes, extension_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::OrthogonalDimensionAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::OrthogonalDimensionAttributes, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::OrthogonalDimensionAttributes, end_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::OrthogonalDimensionAttributes, height_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::OrthogonalDimensionAttributes, extension_height_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::OrthogonalDimensionAttributes, alignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RadialDimensionAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RadialDimensionAttributes, center_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RadialDimensionAttributes, radius_point_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::RadialDimensionAttributes, leader_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::LeaderDimensionAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::LeaderDimensionAttributes, start_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::LeaderDimensionAttributes, end_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::LeaderDimensionAttributes, border_style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CenterDimensionAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CenterDimensionAttributes, center_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::CenterDimensionAttributes, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, locked_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, text_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, override_text_enabled_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, override_text_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, prefix_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, suffix_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, unit_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, unit_format_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, arrow_direction_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, precision_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, suppress_trailing_zeroes_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, line_thickness_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, arrow_length_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, extension_offset_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, text_position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, keep_text_aligned_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Dimension, dimension_style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::ReferenceImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FieldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FieldId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Field, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Field, name_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Field, text_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Field, visible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, description_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, keywords_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, not_in_schematic_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, exclude_from_position_files_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, exclude_from_bill_of_materials_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, exempt_from_courtyard_requirement_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, do_not_populate_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintAttributes, mounting_style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::NetTieDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::NetTieDefinition, pad_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintDesignRuleOverrides, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintDesignRuleOverrides, solder_mask_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintDesignRuleOverrides, solder_paste_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintDesignRuleOverrides, copper_clearance_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintDesignRuleOverrides, zone_connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint3DModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint3DModel, filename_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint3DModel, scale_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint3DModel, rotation_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint3DModel, offset_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint3DModel, visible_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint3DModel, opacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::JumperGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::JumperGroup, pad_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::JumperSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::JumperSettings, duplicate_names_are_jumpered_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::JumperSettings, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, anchor_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, attributes_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, overrides_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, net_ties_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, private_layers_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, reference_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, value_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, datasheet_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, description_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, items_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::Footprint, jumpers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, id_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, position_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, orientation_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, layer_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, locked_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, definition_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, reference_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, value_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, datasheet_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, description_field_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, attributes_),
  PROTOBUF_FIELD_OFFSET(::kiapi::board::types::FootprintInstance, overrides_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kiapi::board::types::NetCode)},
  { 7, -1, -1, sizeof(::kiapi::board::types::Net)},
  { 15, -1, -1, sizeof(::kiapi::board::types::Track)},
  { 28, -1, -1, sizeof(::kiapi::board::types::Arc)},
  { 42, -1, -1, sizeof(::kiapi::board::types::ChamferedRectCorners)},
  { 52, -1, -1, sizeof(::kiapi::board::types::ZoneConnectionSettings)},
  { 60, -1, -1, sizeof(::kiapi::board::types::SolderMaskOverrides)},
  { 67, -1, -1, sizeof(::kiapi::board::types::SolderPasteOverrides)},
  { 75, -1, -1, sizeof(::kiapi::board::types::PadStackLayer)},
  { 92, -1, -1, sizeof(::kiapi::board::types::PadStackOuterLayer)},
  { 104, -1, -1, sizeof(::kiapi::board::types::DrillProperties)},
  { 116, -1, -1, sizeof(::kiapi::board::types::PadStack)},
  { 131, -1, -1, sizeof(::kiapi::board::types::Via)},
  { 143, -1, -1, sizeof(::kiapi::board::types::BoardGraphicShape)},
  { 154, -1, -1, sizeof(::kiapi::board::types::BoardText)},
  { 165, -1, -1, sizeof(::kiapi::board::types::BoardTextBox)},
  { 175, -1, -1, sizeof(::kiapi::board::types::ThermalSpokeSettings)},
  { 184, -1, -1, sizeof(::kiapi::board::types::Pad)},
  { 198, -1, -1, sizeof(::kiapi::board::types::HatchFillSettings)},
  { 210, -1, -1, sizeof(::kiapi::board::types::TeardropSettings)},
  { 217, -1, -1, sizeof(::kiapi::board::types::CopperZoneSettings)},
  { 232, -1, -1, sizeof(::kiapi::board::types::RuleAreaSettings)},
  { 246, -1, -1, sizeof(::kiapi::board::types::ZoneBorderSettings)},
  { 254, -1, -1, sizeof(::kiapi::board::types::ZoneFilledPolygons)},
  { 262, -1, -1, sizeof(::kiapi::board::types::ZoneLayerProperties)},
  { 270, -1, -1, sizeof(::kiapi::board::types::Zone)},
  { 290, -1, -1, sizeof(::kiapi::board::types::AlignedDimensionAttributes)},
  { 300, -1, -1, sizeof(::kiapi::board::types::OrthogonalDimensionAttributes)},
  { 311, -1, -1, sizeof(::kiapi::board::types::RadialDimensionAttributes)},
  { 320, -1, -1, sizeof(::kiapi::board::types::LeaderDimensionAttributes)},
  { 329, -1, -1, sizeof(::kiapi::board::types::CenterDimensionAttributes)},
  { 337, -1, -1, sizeof(::kiapi::board::types::Dimension)},
  { 367, -1, -1, sizeof(::kiapi::board::types::ReferenceImage)},
  { 373, -1, -1, sizeof(::kiapi::board::types::Group)},
  { 379, -1, -1, sizeof(::kiapi::board::types::FieldId)},
  { 386, -1, -1, sizeof(::kiapi::board::types::Field)},
  { 396, -1, -1, sizeof(::kiapi::board::types::FootprintAttributes)},
  { 410, -1, -1, sizeof(::kiapi::board::types::NetTieDefinition)},
  { 417, -1, -1, sizeof(::kiapi::board::types::FootprintDesignRuleOverrides)},
  { 427, -1, -1, sizeof(::kiapi::board::types::Footprint3DModel)},
  { 439, -1, -1, sizeof(::kiapi::board::types::JumperGroup)},
  { 446, -1, -1, sizeof(::kiapi::board::types::JumperSettings)},
  { 454, -1, -1, sizeof(::kiapi::board::types::Footprint)},
  { 472, -1, -1, sizeof(::kiapi::board::types::FootprintInstance)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_NetCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Net_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Track_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Arc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_ChamferedRectCorners_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_ZoneConnectionSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_SolderMaskOverrides_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_SolderPasteOverrides_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_PadStackLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_PadStackOuterLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_DrillProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_PadStack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Via_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_BoardGraphicShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_BoardText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_BoardTextBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_ThermalSpokeSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Pad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_HatchFillSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_TeardropSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_CopperZoneSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_RuleAreaSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_ZoneBorderSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_ZoneFilledPolygons_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_ZoneLayerProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Zone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_AlignedDimensionAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_OrthogonalDimensionAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_RadialDimensionAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_LeaderDimensionAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_CenterDimensionAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Dimension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_ReferenceImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Group_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_FieldId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_FootprintAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_NetTieDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_FootprintDesignRuleOverrides_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Footprint3DModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_JumperGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_JumperSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_Footprint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kiapi::board::types::_FootprintInstance_default_instance_),
};

const char descriptor_table_protodef_board_2fboard_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027board/board_types.proto\022\021kiapi.board.t"
  "ypes\032\031google/protobuf/any.proto\032\035common/"
  "types/base_types.proto\"\030\n\007NetCode\022\r\n\005val"
  "ue\030\001 \001(\005\"=\n\003Net\022(\n\004code\030\001 \001(\0132\032.kiapi.bo"
  "ard.types.NetCode\022\014\n\004name\030\002 \001(\t\"\264\002\n\005Trac"
  "k\022$\n\002id\030\001 \001(\0132\030.kiapi.common.types.KIID\022"
  "*\n\005start\030\002 \001(\0132\033.kiapi.common.types.Vect"
  "or2\022(\n\003end\030\003 \001(\0132\033.kiapi.common.types.Ve"
  "ctor2\022+\n\005width\030\004 \001(\0132\034.kiapi.common.type"
  "s.Distance\022/\n\006locked\030\005 \001(\0162\037.kiapi.commo"
  "n.types.LockedState\022,\n\005layer\030\006 \001(\0162\035.kia"
  "pi.board.types.BoardLayer\022#\n\003net\030\007 \001(\0132\026"
  ".kiapi.board.types.Net\"\334\002\n\003Arc\022$\n\002id\030\001 \001"
  "(\0132\030.kiapi.common.types.KIID\022*\n\005start\030\002 "
  "\001(\0132\033.kiapi.common.types.Vector2\022(\n\003mid\030"
  "\003 \001(\0132\033.kiapi.common.types.Vector2\022(\n\003en"
  "d\030\004 \001(\0132\033.kiapi.common.types.Vector2\022+\n\005"
  "width\030\005 \001(\0132\034.kiapi.common.types.Distanc"
  "e\022/\n\006locked\030\006 \001(\0162\037.kiapi.common.types.L"
  "ockedState\022,\n\005layer\030\007 \001(\0162\035.kiapi.board."
  "types.BoardLayer\022#\n\003net\030\010 \001(\0132\026.kiapi.bo"
  "ard.types.Net\"f\n\024ChamferedRectCorners\022\020\n"
  "\010top_left\030\001 \001(\010\022\021\n\ttop_right\030\002 \001(\010\022\023\n\013bo"
  "ttom_left\030\003 \001(\010\022\024\n\014bottom_right\030\004 \001(\010\"\232\001"
  "\n\026ZoneConnectionSettings\022\?\n\017zone_connect"
  "ion\030\001 \001(\0162&.kiapi.board.types.ZoneConnec"
  "tionStyle\022\?\n\016thermal_spokes\030\002 \001(\0132\'.kiap"
  "i.board.types.ThermalSpokeSettings\"O\n\023So"
  "lderMaskOverrides\0228\n\022solder_mask_margin\030"
  "\001 \001(\0132\034.kiapi.common.types.Distance\"\217\001\n\024"
  "SolderPasteOverrides\0229\n\023solder_paste_mar"
  "gin\030\001 \001(\0132\034.kiapi.common.types.Distance\022"
  "<\n\031solder_paste_margin_ratio\030\002 \001(\0132\031.kia"
  "pi.common.types.Ratio\"\264\004\n\rPadStackLayer\022"
  ",\n\005layer\030\001 \001(\0162\035.kiapi.board.types.Board"
  "Layer\022/\n\005shape\030\002 \001(\0162 .kiapi.board.types"
  ".PadStackShape\022)\n\004size\030\003 \001(\0132\033.kiapi.com"
  "mon.types.Vector2\022\035\n\025corner_rounding_rat"
  "io\030\004 \001(\001\022\025\n\rchamfer_ratio\030\005 \001(\001\022B\n\021chamf"
  "ered_corners\030\006 \001(\0132\'.kiapi.board.types.C"
  "hamferedRectCorners\022;\n\rcustom_shapes\030\007 \003"
  "(\0132$.kiapi.board.types.BoardGraphicShape"
  "\022=\n\023custom_anchor_shape\030\010 \001(\0162 .kiapi.bo"
  "ard.types.PadStackShape\022@\n\rzone_settings"
  "\030\t \001(\0132).kiapi.board.types.ZoneConnectio"
  "nSettings\0224\n\017trapezoid_delta\030\n \001(\0132\033.kia"
  "pi.common.types.Vector2\022+\n\006offset\030\013 \001(\0132"
  "\033.kiapi.common.types.Vector2\"\224\003\n\022PadStac"
  "kOuterLayer\022;\n\020solder_mask_mode\030\001 \001(\0162!."
  "kiapi.board.types.SolderMaskMode\022=\n\021sold"
  "er_paste_mode\030\002 \001(\0162\".kiapi.board.types."
  "SolderPasteMode\022D\n\024solder_mask_settings\030"
  "\003 \001(\0132&.kiapi.board.types.SolderMaskOver"
  "rides\022F\n\025solder_paste_settings\030\004 \001(\0132\'.k"
  "iapi.board.types.SolderPasteOverrides\0229\n"
  "\rplugging_mode\030\005 \001(\0162\".kiapi.board.types"
  ".ViaPluggingMode\0229\n\rcovering_mode\030\006 \001(\0162"
  "\".kiapi.board.types.ViaCoveringMode\"\304\002\n\017"
  "DrillProperties\0222\n\013start_layer\030\001 \001(\0162\035.k"
  "iapi.board.types.BoardLayer\0220\n\tend_layer"
  "\030\002 \001(\0162\035.kiapi.board.types.BoardLayer\022-\n"
  "\010diameter\030\003 \001(\0132\033.kiapi.common.types.Vec"
  "tor2\022,\n\005shape\030\004 \001(\0162\035.kiapi.board.types."
  "DrillShape\0226\n\006capped\030\005 \001(\0162&.kiapi.board"
  ".types.ViaDrillCappingMode\0226\n\006filled\030\006 \001"
  "(\0162&.kiapi.board.types.ViaDrillFillingMo"
  "de\"\224\004\n\010PadStack\022-\n\004type\030\001 \001(\0162\037.kiapi.bo"
  "ard.types.PadStackType\022-\n\006layers\030\002 \003(\0162\035"
  ".kiapi.board.types.BoardLayer\0221\n\005drill\030\003"
  " \001(\0132\".kiapi.board.types.DrillProperties"
  "\022M\n\031unconnected_layer_removal\030\004 \001(\0162*.ki"
  "api.board.types.UnconnectedLayerRemoval\022"
  "7\n\rcopper_layers\030\005 \003(\0132 .kiapi.board.typ"
  "es.PadStackLayer\022(\n\005angle\030\006 \001(\0132\031.kiapi."
  "common.types.Angle\022A\n\022front_outer_layers"
  "\030\007 \001(\0132%.kiapi.board.types.PadStackOuter"
  "Layer\022@\n\021back_outer_layers\030\010 \001(\0132%.kiapi"
  ".board.types.PadStackOuterLayer\022@\n\rzone_"
  "settings\030\t \001(\0132).kiapi.board.types.ZoneC"
  "onnectionSettings\"\212\002\n\003Via\022$\n\002id\030\001 \001(\0132\030."
  "kiapi.common.types.KIID\022-\n\010position\030\002 \001("
  "\0132\033.kiapi.common.types.Vector2\022.\n\tpad_st"
  "ack\030\003 \001(\0132\033.kiapi.board.types.PadStack\022/"
  "\n\006locked\030\004 \001(\0162\037.kiapi.common.types.Lock"
  "edState\022#\n\003net\030\005 \001(\0132\026.kiapi.board.types"
  ".Net\022(\n\004type\030\006 \001(\0162\032.kiapi.board.types.V"
  "iaType\"\356\001\n\021BoardGraphicShape\022/\n\005shape\030\001 "
  "\001(\0132 .kiapi.common.types.GraphicShape\022,\n"
  "\005layer\030\002 \001(\0162\035.kiapi.board.types.BoardLa"
  "yer\022#\n\003net\030\003 \001(\0132\026.kiapi.board.types.Net"
  "\022$\n\002id\030\004 \001(\0132\030.kiapi.common.types.KIID\022/"
  "\n\006locked\030\005 \001(\0162\037.kiapi.common.types.Lock"
  "edState\"\312\001\n\tBoardText\022$\n\002id\030\001 \001(\0132\030.kiap"
  "i.common.types.KIID\022&\n\004text\030\002 \001(\0132\030.kiap"
  "i.common.types.Text\022,\n\005layer\030\003 \001(\0162\035.kia"
  "pi.board.types.BoardLayer\022\020\n\010knockout\030\004 "
  "\001(\010\022/\n\006locked\030\005 \001(\0162\037.kiapi.common.types"
  ".LockedState\"\301\001\n\014BoardTextBox\022$\n\002id\030\001 \001("
  "\0132\030.kiapi.common.types.KIID\022,\n\007textbox\030\002"
  " \001(\0132\033.kiapi.common.types.TextBox\022,\n\005lay"
  "er\030\003 \001(\0162\035.kiapi.board.types.BoardLayer\022"
  "/\n\006locked\030\004 \001(\0162\037.kiapi.common.types.Loc"
  "kedState\"\230\001\n\024ThermalSpokeSettings\022+\n\005wid"
  "th\030\001 \001(\0132\034.kiapi.common.types.Distance\022("
  "\n\005angle\030\002 \001(\0132\031.kiapi.common.types.Angle"
  "\022)\n\003gap\030\003 \001(\0132\034.kiapi.common.types.Dista"
  "nce\"\333\002\n\003Pad\022$\n\002id\030\001 \001(\0132\030.kiapi.common.t"
  "ypes.KIID\022/\n\006locked\030\002 \001(\0162\037.kiapi.common"
  ".types.LockedState\022\016\n\006number\030\003 \001(\t\022#\n\003ne"
  "t\030\004 \001(\0132\026.kiapi.board.types.Net\022(\n\004type\030"
  "\005 \001(\0162\032.kiapi.board.types.PadType\022.\n\tpad"
  "_stack\030\006 \001(\0132\033.kiapi.board.types.PadStac"
  "k\022-\n\010position\030\007 \001(\0132\033.kiapi.common.types"
  ".Vector2\022\?\n\031copper_clearance_override\030\010 "
  "\001(\0132\034.kiapi.common.types.Distance\"\242\002\n\021Ha"
  "tchFillSettings\022/\n\tthickness\030\001 \001(\0132\034.kia"
  "pi.common.types.Distance\022)\n\003gap\030\002 \001(\0132\034."
  "kiapi.common.types.Distance\022.\n\013orientati"
  "on\030\003 \001(\0132\031.kiapi.common.types.Angle\022\035\n\025h"
  "atch_smoothing_ratio\030\004 \001(\001\022!\n\031hatch_hole"
  "_min_area_ratio\030\005 \001(\001\022\?\n\013border_mode\030\006 \001"
  "(\0162*.kiapi.board.types.ZoneHatchFillBord"
  "erMode\"A\n\020TeardropSettings\022-\n\004type\030\001 \001(\016"
  "2\037.kiapi.board.types.TeardropType\"\333\003\n\022Co"
  "pperZoneSettings\022=\n\nconnection\030\001 \001(\0132).k"
  "iapi.board.types.ZoneConnectionSettings\022"
  "/\n\tclearance\030\002 \001(\0132\034.kiapi.common.types."
  "Distance\0223\n\rmin_thickness\030\003 \001(\0132\034.kiapi."
  "common.types.Distance\0229\n\013island_mode\030\004 \001"
  "(\0162$.kiapi.board.types.IslandRemovalMode"
  "\022\027\n\017min_island_area\030\005 \001(\004\0222\n\tfill_mode\030\006"
  " \001(\0162\037.kiapi.board.types.ZoneFillMode\022<\n"
  "\016hatch_settings\030\007 \001(\0132$.kiapi.board.type"
  "s.HatchFillSettings\022#\n\003net\030\010 \001(\0132\026.kiapi"
  ".board.types.Net\0225\n\010teardrop\030\t \001(\0132#.kia"
  "pi.board.types.TeardropSettings\"\212\002\n\020Rule"
  "AreaSettings\022\026\n\016keepout_copper\030\001 \001(\010\022\024\n\014"
  "keepout_vias\030\002 \001(\010\022\026\n\016keepout_tracks\030\003 \001"
  "(\010\022\024\n\014keepout_pads\030\004 \001(\010\022\032\n\022keepout_foot"
  "prints\030\005 \001(\010\022\031\n\021placement_enabled\030\006 \001(\010\022"
  "I\n\025placement_source_type\030\007 \001(\0162*.kiapi.b"
  "oard.types.PlacementRuleSourceType\022\030\n\020pl"
  "acement_source\030\010 \001(\t\"t\n\022ZoneBorderSettin"
  "gs\0221\n\005style\030\001 \001(\0162\".kiapi.board.types.Zo"
  "neBorderStyle\022+\n\005pitch\030\002 \001(\0132\034.kiapi.com"
  "mon.types.Distance\"o\n\022ZoneFilledPolygons"
  "\022,\n\005layer\030\001 \001(\0162\035.kiapi.board.types.Boar"
  "dLayer\022+\n\006shapes\030\002 \001(\0132\033.kiapi.common.ty"
  "pes.PolySet\"y\n\023ZoneLayerProperties\022,\n\005la"
  "yer\030\001 \001(\0162\035.kiapi.board.types.BoardLayer"
  "\0224\n\017hatching_offset\030\002 \001(\0132\033.kiapi.common"
  ".types.Vector2\"\337\004\n\004Zone\022$\n\002id\030\001 \001(\0132\030.ki"
  "api.common.types.KIID\022)\n\004type\030\002 \001(\0162\033.ki"
  "api.board.types.ZoneType\022-\n\006layers\030\003 \003(\016"
  "2\035.kiapi.board.types.BoardLayer\022,\n\007outli"
  "ne\030\004 \001(\0132\033.kiapi.common.types.PolySet\022\014\n"
  "\004name\030\005 \001(\t\022@\n\017copper_settings\030\006 \001(\0132%.k"
  "iapi.board.types.CopperZoneSettingsH\000\022A\n"
  "\022rule_area_settings\030\007 \001(\0132#.kiapi.board."
  "types.RuleAreaSettingsH\000\022\020\n\010priority\030\010 \001"
  "(\r\022\016\n\006filled\030\t \001(\010\022>\n\017filled_polygons\030\n "
  "\003(\0132%.kiapi.board.types.ZoneFilledPolygo"
  "ns\0225\n\006border\030\013 \001(\0132%.kiapi.board.types.Z"
  "oneBorderSettings\022/\n\006locked\030\014 \001(\0162\037.kiap"
  "i.common.types.LockedState\022@\n\020layer_prop"
  "erties\030\r \003(\0132&.kiapi.board.types.ZoneLay"
  "erPropertiesB\n\n\010settings\"\330\001\n\032AlignedDime"
  "nsionAttributes\022*\n\005start\030\001 \001(\0132\033.kiapi.c"
  "ommon.types.Vector2\022(\n\003end\030\002 \001(\0132\033.kiapi"
  ".common.types.Vector2\022,\n\006height\030\003 \001(\0132\034."
  "kiapi.common.types.Distance\0226\n\020extension"
  "_height\030\004 \001(\0132\034.kiapi.common.types.Dista"
  "nce\"\221\002\n\035OrthogonalDimensionAttributes\022*\n"
  "\005start\030\001 \001(\0132\033.kiapi.common.types.Vector"
  "2\022(\n\003end\030\002 \001(\0132\033.kiapi.common.types.Vect"
  "or2\022,\n\006height\030\003 \001(\0132\034.kiapi.common.types"
  ".Distance\0226\n\020extension_height\030\004 \001(\0132\034.ki"
  "api.common.types.Distance\0224\n\talignment\030\005"
  " \001(\0162!.kiapi.common.types.AxisAlignment\""
  "\260\001\n\031RadialDimensionAttributes\022+\n\006center\030"
  "\001 \001(\0132\033.kiapi.common.types.Vector2\0221\n\014ra"
  "dius_point\030\002 \001(\0132\033.kiapi.common.types.Ve"
  "ctor2\0223\n\rleader_length\030\003 \001(\0132\034.kiapi.com"
  "mon.types.Distance\"\264\001\n\031LeaderDimensionAt"
  "tributes\022*\n\005start\030\001 \001(\0132\033.kiapi.common.t"
  "ypes.Vector2\022(\n\003end\030\002 \001(\0132\033.kiapi.common"
  ".types.Vector2\022A\n\014border_style\030\003 \001(\0162+.k"
  "iapi.board.types.DimensionTextBorderStyl"
  "e\"r\n\031CenterDimensionAttributes\022+\n\006center"
  "\030\001 \001(\0132\033.kiapi.common.types.Vector2\022(\n\003e"
  "nd\030\002 \001(\0132\033.kiapi.common.types.Vector2\"\367\010"
  "\n\tDimension\022$\n\002id\030\001 \001(\0132\030.kiapi.common.t"
  "ypes.KIID\022/\n\006locked\030\002 \001(\0162\037.kiapi.common"
  ".types.LockedState\022,\n\005layer\030\003 \001(\0162\035.kiap"
  "i.board.types.BoardLayer\022&\n\004text\030\004 \001(\0132\030"
  ".kiapi.common.types.Text\022@\n\007aligned\030\005 \001("
  "\0132-.kiapi.board.types.AlignedDimensionAt"
  "tributesH\000\022F\n\northogonal\030\006 \001(\01320.kiapi.b"
  "oard.types.OrthogonalDimensionAttributes"
  "H\000\022>\n\006radial\030\007 \001(\0132,.kiapi.board.types.R"
  "adialDimensionAttributesH\000\022>\n\006leader\030\010 \001"
  "(\0132,.kiapi.board.types.LeaderDimensionAt"
  "tributesH\000\022>\n\006center\030\t \001(\0132,.kiapi.board"
  ".types.CenterDimensionAttributesH\000\022\035\n\025ov"
  "erride_text_enabled\030\n \001(\010\022\025\n\roverride_te"
  "xt\030\013 \001(\t\022\016\n\006prefix\030\014 \001(\t\022\016\n\006suffix\030\r \001(\t"
  "\022.\n\004unit\030\016 \001(\0162 .kiapi.board.types.Dimen"
  "sionUnit\022;\n\013unit_format\030\017 \001(\0162&.kiapi.bo"
  "ard.types.DimensionUnitFormat\022C\n\017arrow_d"
  "irection\030\020 \001(\0162*.kiapi.board.types.Dimen"
  "sionArrowDirection\0228\n\tprecision\030\021 \001(\0162%."
  "kiapi.board.types.DimensionPrecision\022 \n\030"
  "suppress_trailing_zeroes\030\022 \001(\010\0224\n\016line_t"
  "hickness\030\023 \001(\0132\034.kiapi.common.types.Dist"
  "ance\0222\n\014arrow_length\030\024 \001(\0132\034.kiapi.commo"
  "n.types.Distance\0226\n\020extension_offset\030\025 \001"
  "(\0132\034.kiapi.common.types.Distance\022\?\n\rtext"
  "_position\030\026 \001(\0162(.kiapi.board.types.Dime"
  "nsionTextPosition\022\031\n\021keep_text_aligned\030\027"
  " \001(\010B\021\n\017dimension_style\"\020\n\016ReferenceImag"
  "e\"\007\n\005Group\"\025\n\007FieldId\022\n\n\002id\030\001 \001(\005\"z\n\005Fie"
  "ld\022&\n\002id\030\001 \001(\0132\032.kiapi.board.types.Field"
  "Id\022\014\n\004name\030\002 \001(\t\022*\n\004text\030\003 \001(\0132\034.kiapi.b"
  "oard.types.BoardText\022\017\n\007visible\030\004 \001(\010\"\252\002"
  "\n\023FootprintAttributes\022\023\n\013description\030\001 \001"
  "(\t\022\020\n\010keywords\030\002 \001(\t\022\030\n\020not_in_schematic"
  "\030\003 \001(\010\022#\n\033exclude_from_position_files\030\004 "
  "\001(\010\022&\n\036exclude_from_bill_of_materials\030\005 "
  "\001(\010\022)\n!exempt_from_courtyard_requirement"
  "\030\006 \001(\010\022\027\n\017do_not_populate\030\007 \001(\010\022A\n\016mount"
  "ing_style\030\010 \001(\0162).kiapi.board.types.Foot"
  "printMountingStyle\"&\n\020NetTieDefinition\022\022"
  "\n\npad_number\030\001 \003(\t\"\223\002\n\034FootprintDesignRu"
  "leOverrides\022;\n\013solder_mask\030\001 \001(\0132&.kiapi"
  ".board.types.SolderMaskOverrides\022=\n\014sold"
  "er_paste\030\002 \001(\0132\'.kiapi.board.types.Solde"
  "rPasteOverrides\0226\n\020copper_clearance\030\003 \001("
  "\0132\034.kiapi.common.types.Distance\022\?\n\017zone_"
  "connection\030\004 \001(\0162&.kiapi.board.types.Zon"
  "eConnectionStyle\"\321\001\n\020Footprint3DModel\022\020\n"
  "\010filename\030\001 \001(\t\022+\n\005scale\030\002 \001(\0132\034.kiapi.c"
  "ommon.types.Vector3D\022.\n\010rotation\030\003 \001(\0132\034"
  ".kiapi.common.types.Vector3D\022,\n\006offset\030\004"
  " \001(\0132\034.kiapi.common.types.Vector3D\022\017\n\007vi"
  "sible\030\005 \001(\010\022\017\n\007opacity\030\006 \001(\001\" \n\013JumperGr"
  "oup\022\021\n\tpad_names\030\001 \003(\t\"f\n\016JumperSettings"
  "\022$\n\034duplicate_names_are_jumpered\030\001 \001(\010\022."
  "\n\006groups\030\002 \003(\0132\036.kiapi.board.types.Jumpe"
  "rGroup\"\374\004\n\tFootprint\0221\n\002id\030\001 \001(\0132%.kiapi"
  ".common.types.LibraryIdentifier\022+\n\006ancho"
  "r\030\002 \001(\0132\033.kiapi.common.types.Vector2\022:\n\n"
  "attributes\030\003 \001(\0132&.kiapi.board.types.Foo"
  "tprintAttributes\022B\n\toverrides\030\004 \001(\0132/.ki"
  "api.board.types.FootprintDesignRuleOverr"
  "ides\0225\n\010net_ties\030\005 \003(\0132#.kiapi.board.typ"
  "es.NetTieDefinition\0225\n\016private_layers\030\006 "
  "\003(\0162\035.kiapi.board.types.BoardLayer\0221\n\017re"
  "ference_field\030\007 \001(\0132\030.kiapi.board.types."
  "Field\022-\n\013value_field\030\010 \001(\0132\030.kiapi.board"
  ".types.Field\0221\n\017datasheet_field\030\t \001(\0132\030."
  "kiapi.board.types.Field\0223\n\021description_f"
  "ield\030\n \001(\0132\030.kiapi.board.types.Field\022#\n\005"
  "items\030\013 \003(\0132\024.google.protobuf.Any\0222\n\007jum"
  "pers\030\014 \001(\0132!.kiapi.board.types.JumperSet"
  "tings\"\363\004\n\021FootprintInstance\022$\n\002id\030\001 \001(\0132"
  "\030.kiapi.common.types.KIID\022-\n\010position\030\002 "
  "\001(\0132\033.kiapi.common.types.Vector2\022.\n\013orie"
  "ntation\030\003 \001(\0132\031.kiapi.common.types.Angle"
  "\022,\n\005layer\030\004 \001(\0162\035.kiapi.board.types.Boar"
  "dLayer\022/\n\006locked\030\005 \001(\0162\037.kiapi.common.ty"
  "pes.LockedState\0220\n\ndefinition\030\006 \001(\0132\034.ki"
  "api.board.types.Footprint\0221\n\017reference_f"
  "ield\030\007 \001(\0132\030.kiapi.board.types.Field\022-\n\013"
  "value_field\030\010 \001(\0132\030.kiapi.board.types.Fi"
  "eld\0221\n\017datasheet_field\030\t \001(\0132\030.kiapi.boa"
  "rd.types.Field\0223\n\021description_field\030\n \001("
  "\0132\030.kiapi.board.types.Field\022:\n\nattribute"
  "s\030\013 \001(\0132&.kiapi.board.types.FootprintAtt"
  "ributes\022B\n\toverrides\030\014 \001(\0132/.kiapi.board"
  ".types.FootprintDesignRuleOverrides*\253\014\n\n"
  "BoardLayer\022\016\n\nBL_UNKNOWN\020\000\022\020\n\014BL_UNDEFIN"
  "ED\020\001\022\021\n\rBL_UNSELECTED\020\002\022\013\n\007BL_F_Cu\020\003\022\r\n\t"
  "BL_In1_Cu\020\004\022\r\n\tBL_In2_Cu\020\005\022\r\n\tBL_In3_Cu\020"
  "\006\022\r\n\tBL_In4_Cu\020\007\022\r\n\tBL_In5_Cu\020\010\022\r\n\tBL_In"
  "6_Cu\020\t\022\r\n\tBL_In7_Cu\020\n\022\r\n\tBL_In8_Cu\020\013\022\r\n\t"
  "BL_In9_Cu\020\014\022\016\n\nBL_In10_Cu\020\r\022\016\n\nBL_In11_C"
  "u\020\016\022\016\n\nBL_In12_Cu\020\017\022\016\n\nBL_In13_Cu\020\020\022\016\n\nB"
  "L_In14_Cu\020\021\022\016\n\nBL_In15_Cu\020\022\022\016\n\nBL_In16_C"
  "u\020\023\022\016\n\nBL_In17_Cu\020\024\022\016\n\nBL_In18_Cu\020\025\022\016\n\nB"
  "L_In19_Cu\020\026\022\016\n\nBL_In20_Cu\020\027\022\016\n\nBL_In21_C"
  "u\020\030\022\016\n\nBL_In22_Cu\020\031\022\016\n\nBL_In23_Cu\020\032\022\016\n\nB"
  "L_In24_Cu\020\033\022\016\n\nBL_In25_Cu\020\034\022\016\n\nBL_In26_C"
  "u\020\035\022\016\n\nBL_In27_Cu\020\036\022\016\n\nBL_In28_Cu\020\037\022\016\n\nB"
  "L_In29_Cu\020 \022\016\n\nBL_In30_Cu\020!\022\013\n\007BL_B_Cu\020\""
  "\022\016\n\nBL_B_Adhes\020#\022\016\n\nBL_F_Adhes\020$\022\016\n\nBL_B"
  "_Paste\020%\022\016\n\nBL_F_Paste\020&\022\016\n\nBL_B_SilkS\020\'"
  "\022\016\n\nBL_F_SilkS\020(\022\r\n\tBL_B_Mask\020)\022\r\n\tBL_F_"
  "Mask\020*\022\020\n\014BL_Dwgs_User\020+\022\020\n\014BL_Cmts_User"
  "\020,\022\020\n\014BL_Eco1_User\020-\022\020\n\014BL_Eco2_User\020.\022\020"
  "\n\014BL_Edge_Cuts\020/\022\r\n\tBL_Margin\0200\022\016\n\nBL_B_"
  "CrtYd\0201\022\016\n\nBL_F_CrtYd\0202\022\014\n\010BL_B_Fab\0203\022\014\n"
  "\010BL_F_Fab\0204\022\r\n\tBL_User_1\0205\022\r\n\tBL_User_2\020"
  "6\022\r\n\tBL_User_3\0207\022\r\n\tBL_User_4\0208\022\r\n\tBL_Us"
  "er_5\0209\022\r\n\tBL_User_6\020:\022\r\n\tBL_User_7\020;\022\r\n\t"
  "BL_User_8\020<\022\r\n\tBL_User_9\020=\022\r\n\tBL_Rescue\020"
  ">\022\016\n\nBL_User_10\020\?\022\016\n\nBL_User_11\020@\022\016\n\nBL_"
  "User_12\020A\022\016\n\nBL_User_13\020B\022\016\n\nBL_User_14\020"
  "C\022\016\n\nBL_User_15\020D\022\016\n\nBL_User_16\020E\022\016\n\nBL_"
  "User_17\020F\022\016\n\nBL_User_18\020G\022\016\n\nBL_User_19\020"
  "H\022\016\n\nBL_User_20\020I\022\016\n\nBL_User_21\020J\022\016\n\nBL_"
  "User_22\020K\022\016\n\nBL_User_23\020L\022\016\n\nBL_User_24\020"
  "M\022\016\n\nBL_User_25\020N\022\016\n\nBL_User_26\020O\022\016\n\nBL_"
  "User_27\020P\022\016\n\nBL_User_28\020Q\022\016\n\nBL_User_29\020"
  "R\022\016\n\nBL_User_30\020S\022\016\n\nBL_User_31\020T\022\016\n\nBL_"
  "User_32\020U\022\016\n\nBL_User_33\020V\022\016\n\nBL_User_34\020"
  "W\022\016\n\nBL_User_35\020X\022\016\n\nBL_User_36\020Y\022\016\n\nBL_"
  "User_37\020Z\022\016\n\nBL_User_38\020[\022\016\n\nBL_User_39\020"
  "\\\022\016\n\nBL_User_40\020]\022\016\n\nBL_User_41\020^\022\016\n\nBL_"
  "User_42\020_\022\016\n\nBL_User_43\020`\022\016\n\nBL_User_44\020"
  "a\022\016\n\nBL_User_45\020b*Y\n\014PadStackType\022\017\n\013PST"
  "_UNKNOWN\020\000\022\016\n\nPST_NORMAL\020\001\022\030\n\024PST_FRONT_"
  "INNER_BACK\020\002\022\016\n\nPST_CUSTOM\020\003*m\n\027Unconnec"
  "tedLayerRemoval\022\017\n\013ULR_UNKNOWN\020\000\022\014\n\010ULR_"
  "KEEP\020\001\022\016\n\nULR_REMOVE\020\002\022#\n\037ULR_REMOVE_EXC"
  "EPT_START_AND_END\020\003*\236\001\n\rPadStackShape\022\017\n"
  "\013PSS_UNKNOWN\020\000\022\016\n\nPSS_CIRCLE\020\001\022\021\n\rPSS_RE"
  "CTANGLE\020\002\022\014\n\010PSS_OVAL\020\003\022\021\n\rPSS_TRAPEZOID"
  "\020\004\022\021\n\rPSS_ROUNDRECT\020\005\022\025\n\021PSS_CHAMFEREDRE"
  "CT\020\006\022\016\n\nPSS_CUSTOM\020\007*{\n\023ZoneConnectionSt"
  "yle\022\017\n\013ZCS_UNKNOWN\020\000\022\021\n\rZCS_INHERITED\020\001\022"
  "\014\n\010ZCS_NONE\020\002\022\017\n\013ZCS_THERMAL\020\003\022\014\n\010ZCS_FU"
  "LL\020\004\022\023\n\017ZCS_PTH_THERMAL\020\005*^\n\016SolderMaskM"
  "ode\022\017\n\013SMM_UNKNOWN\020\000\022\016\n\nSMM_MASKED\020\001\022\020\n\014"
  "SMM_UNMASKED\020\002\022\031\n\025SMM_FROM_DESIGN_RULES\020"
  "\003*a\n\017ViaCoveringMode\022\017\n\013VCM_UNKNOWN\020\000\022\017\n"
  "\013VCM_COVERED\020\001\022\021\n\rVCM_UNCOVERED\020\002\022\031\n\025VCM"
  "_FROM_DESIGN_RULES\020\003*a\n\017ViaPluggingMode\022"
  "\017\n\013VPM_UNKNOWN\020\000\022\017\n\013VPM_PLUGGED\020\001\022\021\n\rVPM"
  "_UNPLUGGED\020\002\022\031\n\025VPM_FROM_DESIGN_RULES\020\003*"
  "^\n\017SolderPasteMode\022\017\n\013SPM_UNKNOWN\020\000\022\r\n\tS"
  "PM_PASTE\020\001\022\020\n\014SPM_NO_PASTE\020\002\022\031\n\025SPM_FROM"
  "_DESIGN_RULES\020\003*L\n\nDrillShape\022\016\n\nDS_UNKN"
  "OWN\020\000\022\r\n\tDS_CIRCLE\020\001\022\r\n\tDS_OBLONG\020\002\022\020\n\014D"
  "S_UNDEFINED\020\003*g\n\023ViaDrillCappingMode\022\020\n\014"
  "VDCM_UNKNOWN\020\000\022\017\n\013VDCM_CAPPED\020\001\022\021\n\rVDCM_"
  "UNCAPPED\020\002\022\032\n\026VDCM_FROM_DESIGN_RULES\020\003*g"
  "\n\023ViaDrillFillingMode\022\020\n\014VDFM_UNKNOWN\020\000\022"
  "\017\n\013VDFM_FILLED\020\001\022\021\n\rVDFM_UNFILLED\020\002\022\032\n\026V"
  "DFM_FROM_DESIGN_RULES\020\003*L\n\007ViaType\022\016\n\nVT"
  "_UNKNOWN\020\000\022\016\n\nVT_THROUGH\020\001\022\023\n\017VT_BLIND_B"
  "URIED\020\002\022\014\n\010VT_MICRO\020\003*U\n\007PadType\022\016\n\nPT_U"
  "NKNOWN\020\000\022\n\n\006PT_PTH\020\001\022\n\n\006PT_SMD\020\002\022\025\n\021PT_E"
  "DGE_CONNECTOR\020\003\022\013\n\007PT_NPTH\020\004*Y\n\036CustomPa"
  "dShapeZoneFillStrategy\022\020\n\014CPSZ_UNKNOWN\020\000"
  "\022\020\n\014CPSZ_OUTLINE\020\001\022\023\n\017CPSZ_CONVEXHULL\020\002*"
  "^\n\010ZoneType\022\016\n\nZT_UNKNOWN\020\000\022\r\n\tZT_COPPER"
  "\020\001\022\020\n\014ZT_GRAPHICAL\020\002\022\020\n\014ZT_RULE_AREA\020\003\022\017"
  "\n\013ZT_TEARDROP\020\004*f\n\014TeardropType\022\017\n\013TDT_U"
  "NKNOWN\020\000\022\014\n\010TDT_NONE\020\001\022\023\n\017TDT_UNSPECIFIE"
  "D\020\002\022\017\n\013TDT_VIA_PAD\020\003\022\021\n\rTDT_TRACK_END\020\004*"
  "Q\n\021IslandRemovalMode\022\017\n\013IRM_UNKNOWN\020\000\022\016\n"
  "\nIRM_ALWAYS\020\001\022\r\n\tIRM_NEVER\020\002\022\014\n\010IRM_AREA"
  "\020\003*\?\n\014ZoneFillMode\022\017\n\013ZFM_UNKNOWN\020\000\022\r\n\tZ"
  "FM_SOLID\020\001\022\017\n\013ZFM_HATCHED\020\002*n\n\022ZoneHatch"
  "Smoothing\022\017\n\013ZHS_UNKNOWN\020\000\022\014\n\010ZHS_NONE\020\001"
  "\022\016\n\nZHS_FILLET\020\002\022\023\n\017ZHS_ARC_LOW_DEF\020\003\022\024\n"
  "\020ZHS_ARC_HIGH_DEF\020\004*m\n\027ZoneHatchFillBord"
  "erMode\022\021\n\rZHFBM_UNKNOWN\020\000\022 \n\034ZHFBM_USE_M"
  "IN_ZONE_THICKNESS\020\001\022\035\n\031ZHFBM_USE_HATCH_T"
  "HICKNESS\020\002*Z\n\027PlacementRuleSourceType\022\020\n"
  "\014PRST_UNKNOWN\020\000\022\023\n\017PRST_SHEET_NAME\020\001\022\030\n\024"
  "PRST_COMPONENT_CLASS\020\002*r\n\017ZoneBorderStyl"
  "e\022\017\n\013ZBS_UNKNOWN\020\000\022\r\n\tZBS_SOLID\020\001\022\025\n\021ZBS"
  "_DIAGONAL_FULL\020\002\022\025\n\021ZBS_DIAGONAL_EDGE\020\003\022"
  "\021\n\rZBS_INVISIBLE\020\004*t\n\030DimensionTextBorde"
  "rStyle\022\020\n\014DTBS_UNKNOWN\020\000\022\r\n\tDTBS_NONE\020\001\022"
  "\022\n\016DTBS_RECTANGLE\020\002\022\017\n\013DTBS_CIRCLE\020\003\022\022\n\016"
  "DTBS_ROUNDRECT\020\004*d\n\023DimensionUnitFormat\022"
  "\017\n\013DUF_UNKNOWN\020\000\022\021\n\rDUF_NO_SUFFIX\020\001\022\023\n\017D"
  "UF_BARE_SUFFIX\020\002\022\024\n\020DUF_PAREN_SUFFIX\020\003*K"
  "\n\027DimensionArrowDirection\022\017\n\013DAD_UNKNOWN"
  "\020\000\022\016\n\nDAD_INWARD\020\001\022\017\n\013DAD_OUTWARD\020\002*\324\001\n\022"
  "DimensionPrecision\022\016\n\nDP_UNKNOWN\020\000\022\016\n\nDP"
  "_FIXED_0\020\001\022\016\n\nDP_FIXED_1\020\002\022\016\n\nDP_FIXED_2"
  "\020\003\022\016\n\nDP_FIXED_3\020\004\022\016\n\nDP_FIXED_4\020\005\022\016\n\nDP"
  "_FIXED_5\020\006\022\022\n\016DP_SCALED_IN_2\020\007\022\022\n\016DP_SCA"
  "LED_IN_3\020\010\022\022\n\016DP_SCALED_IN_4\020\t\022\022\n\016DP_SCA"
  "LED_IN_5\020\n*Y\n\025DimensionTextPosition\022\017\n\013D"
  "TP_UNKNOWN\020\000\022\017\n\013DTP_OUTSIDE\020\001\022\016\n\nDTP_INL"
  "INE\020\002\022\016\n\nDTP_MANUAL\020\003*a\n\rDimensionUnit\022\016"
  "\n\nDU_UNKNOWN\020\000\022\r\n\tDU_INCHES\020\001\022\013\n\007DU_MILS"
  "\020\002\022\022\n\016DU_MILLIMETERS\020\003\022\020\n\014DU_AUTOMATIC\020\004"
  "*a\n\026FootprintMountingStyle\022\017\n\013FMS_UNKNOW"
  "N\020\000\022\024\n\020FMS_THROUGH_HOLE\020\001\022\013\n\007FMS_SMD\020\002\022\023"
  "\n\017FMS_UNSPECIFIED\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_board_2fboard_5ftypes_2eproto_deps[2] = {
  &::descriptor_table_common_2ftypes_2fbase_5ftypes_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_board_2fboard_5ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_board_2fboard_5ftypes_2eproto = {
  false, false, 15787, descriptor_table_protodef_board_2fboard_5ftypes_2eproto, "board/board_types.proto", 
  &descriptor_table_board_2fboard_5ftypes_2eproto_once, descriptor_table_board_2fboard_5ftypes_2eproto_deps, 2, 44,
  schemas, file_default_instances, TableStruct_board_2fboard_5ftypes_2eproto::offsets,
  file_level_metadata_board_2fboard_5ftypes_2eproto, file_level_enum_descriptors_board_2fboard_5ftypes_2eproto, file_level_service_descriptors_board_2fboard_5ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_board_2fboard_5ftypes_2eproto_getter() {
  return &descriptor_table_board_2fboard_5ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_board_2fboard_5ftypes_2eproto(&descriptor_table_board_2fboard_5ftypes_2eproto);
namespace kiapi {
namespace board {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardLayer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[0];
}
bool BoardLayer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PadStackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[1];
}
bool PadStackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnconnectedLayerRemoval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[2];
}
bool UnconnectedLayerRemoval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PadStackShape_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[3];
}
bool PadStackShape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneConnectionStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[4];
}
bool ZoneConnectionStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolderMaskMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[5];
}
bool SolderMaskMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaCoveringMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[6];
}
bool ViaCoveringMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaPluggingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[7];
}
bool ViaPluggingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolderPasteMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[8];
}
bool SolderPasteMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrillShape_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[9];
}
bool DrillShape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaDrillCappingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[10];
}
bool ViaDrillCappingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaDrillFillingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[11];
}
bool ViaDrillFillingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[12];
}
bool ViaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[13];
}
bool PadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CustomPadShapeZoneFillStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[14];
}
bool CustomPadShapeZoneFillStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[15];
}
bool ZoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeardropType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[16];
}
bool TeardropType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IslandRemovalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[17];
}
bool IslandRemovalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneFillMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[18];
}
bool ZoneFillMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneHatchSmoothing_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[19];
}
bool ZoneHatchSmoothing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneHatchFillBorderMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[20];
}
bool ZoneHatchFillBorderMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlacementRuleSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[21];
}
bool PlacementRuleSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZoneBorderStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[22];
}
bool ZoneBorderStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionTextBorderStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[23];
}
bool DimensionTextBorderStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionUnitFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[24];
}
bool DimensionUnitFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionArrowDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[25];
}
bool DimensionArrowDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionPrecision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[26];
}
bool DimensionPrecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionTextPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[27];
}
bool DimensionTextPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[28];
}
bool DimensionUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FootprintMountingStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_board_2fboard_5ftypes_2eproto);
  return file_level_enum_descriptors_board_2fboard_5ftypes_2eproto[29];
}
bool FootprintMountingStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NetCode::_Internal {
 public:
};

NetCode::NetCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.NetCode)
}
NetCode::NetCode(const NetCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.NetCode)
}

inline void NetCode::SharedCtor() {
value_ = 0;
}

NetCode::~NetCode() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.NetCode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetCode::ArenaDtor(void* object) {
  NetCode* _this = reinterpret_cast< NetCode* >(object);
  (void)_this;
}
void NetCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetCode::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.NetCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.NetCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.NetCode)
  return target;
}

size_t NetCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.NetCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetCode::GetClassData() const { return &_class_data_; }

void NetCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetCode *>(to)->MergeFrom(
      static_cast<const NetCode &>(from));
}


void NetCode::MergeFrom(const NetCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.NetCode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetCode::CopyFrom(const NetCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.NetCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetCode::IsInitialized() const {
  return true;
}

void NetCode::InternalSwap(NetCode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetCode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[0]);
}

// ===================================================================

class Net::_Internal {
 public:
  static const ::kiapi::board::types::NetCode& code(const Net* msg);
};

const ::kiapi::board::types::NetCode&
Net::_Internal::code(const Net* msg) {
  return *msg->code_;
}
Net::Net(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Net)
}
Net::Net(const Net& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_code()) {
    code_ = new ::kiapi::board::types::NetCode(*from.code_);
  } else {
    code_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Net)
}

inline void Net::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = nullptr;
}

Net::~Net() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Net)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Net::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
}

void Net::ArenaDtor(void* object) {
  Net* _this = reinterpret_cast< Net* >(object);
  (void)_this;
}
void Net::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Net::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Net::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Net)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Net::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.NetCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Net.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Net::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Net)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.NetCode code = 1;
  if (this->_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::code(this), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Net.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Net)
  return target;
}

size_t Net::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Net)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .kiapi.board.types.NetCode code = 1;
  if (this->_internal_has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Net::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Net::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Net::GetClassData() const { return &_class_data_; }

void Net::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Net *>(to)->MergeFrom(
      static_cast<const Net &>(from));
}


void Net::MergeFrom(const Net& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Net)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_code()) {
    _internal_mutable_code()->::kiapi::board::types::NetCode::MergeFrom(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Net::CopyFrom(const Net& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Net)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Net::IsInitialized() const {
  return true;
}

void Net::InternalSwap(Net* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Net::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[1]);
}

// ===================================================================

class Track::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const Track* msg);
  static const ::kiapi::common::types::Vector2& start(const Track* msg);
  static const ::kiapi::common::types::Vector2& end(const Track* msg);
  static const ::kiapi::common::types::Distance& width(const Track* msg);
  static const ::kiapi::board::types::Net& net(const Track* msg);
};

const ::kiapi::common::types::KIID&
Track::_Internal::id(const Track* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
Track::_Internal::start(const Track* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
Track::_Internal::end(const Track* msg) {
  return *msg->end_;
}
const ::kiapi::common::types::Distance&
Track::_Internal::width(const Track* msg) {
  return *msg->width_;
}
const ::kiapi::board::types::Net&
Track::_Internal::net(const Track* msg) {
  return *msg->net_;
}
void Track::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Track::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void Track::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
void Track::clear_width() {
  if (GetArenaForAllocation() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
Track::Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Track)
}
Track::Track(const Track& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_width()) {
    width_ = new ::kiapi::common::types::Distance(*from.width_);
  } else {
    width_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::kiapi::board::types::Net(*from.net_);
  } else {
    net_ = nullptr;
  }
  ::memcpy(&locked_, &from.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&locked_)) + sizeof(layer_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Track)
}

inline void Track::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&id_)) + sizeof(layer_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Track)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Track::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete width_;
  if (this != internal_default_instance()) delete net_;
}

void Track::ArenaDtor(void* object) {
  Track* _this = reinterpret_cast< Track* >(object);
  (void)_this;
}
void Track::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Track::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Track)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaForAllocation() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(layer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Track::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Net net = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Track::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Track)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 start = 2;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // .kiapi.common.types.Distance width = 4;
  if (this->_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::width(this), target, stream);
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_locked(), target);
  }

  // .kiapi.board.types.BoardLayer layer = 6;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_layer(), target);
  }

  // .kiapi.board.types.Net net = 7;
  if (this->_internal_has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::net(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Track)
  return target;
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Track)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 start = 2;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .kiapi.common.types.Distance width = 4;
  if (this->_internal_has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  // .kiapi.board.types.Net net = 7;
  if (this->_internal_has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  // .kiapi.board.types.BoardLayer layer = 6;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Track::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Track::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Track::GetClassData() const { return &_class_data_; }

void Track::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Track *>(to)->MergeFrom(
      static_cast<const Track &>(from));
}


void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Track)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  if (from._internal_has_width()) {
    _internal_mutable_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_width());
  }
  if (from._internal_has_net()) {
    _internal_mutable_net()->::kiapi::board::types::Net::MergeFrom(from._internal_net());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::InternalSwap(Track* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Track, layer_)
      + sizeof(Track::layer_)
      - PROTOBUF_FIELD_OFFSET(Track, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Track::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[2]);
}

// ===================================================================

class Arc::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const Arc* msg);
  static const ::kiapi::common::types::Vector2& start(const Arc* msg);
  static const ::kiapi::common::types::Vector2& mid(const Arc* msg);
  static const ::kiapi::common::types::Vector2& end(const Arc* msg);
  static const ::kiapi::common::types::Distance& width(const Arc* msg);
  static const ::kiapi::board::types::Net& net(const Arc* msg);
};

const ::kiapi::common::types::KIID&
Arc::_Internal::id(const Arc* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
Arc::_Internal::start(const Arc* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
Arc::_Internal::mid(const Arc* msg) {
  return *msg->mid_;
}
const ::kiapi::common::types::Vector2&
Arc::_Internal::end(const Arc* msg) {
  return *msg->end_;
}
const ::kiapi::common::types::Distance&
Arc::_Internal::width(const Arc* msg) {
  return *msg->width_;
}
const ::kiapi::board::types::Net&
Arc::_Internal::net(const Arc* msg) {
  return *msg->net_;
}
void Arc::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Arc::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void Arc::clear_mid() {
  if (GetArenaForAllocation() == nullptr && mid_ != nullptr) {
    delete mid_;
  }
  mid_ = nullptr;
}
void Arc::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
void Arc::clear_width() {
  if (GetArenaForAllocation() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
Arc::Arc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Arc)
}
Arc::Arc(const Arc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_mid()) {
    mid_ = new ::kiapi::common::types::Vector2(*from.mid_);
  } else {
    mid_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_width()) {
    width_ = new ::kiapi::common::types::Distance(*from.width_);
  } else {
    width_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::kiapi::board::types::Net(*from.net_);
  } else {
    net_ = nullptr;
  }
  ::memcpy(&locked_, &from.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&locked_)) + sizeof(layer_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Arc)
}

inline void Arc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&id_)) + sizeof(layer_));
}

Arc::~Arc() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Arc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Arc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete mid_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete width_;
  if (this != internal_default_instance()) delete net_;
}

void Arc::ArenaDtor(void* object) {
  Arc* _this = reinterpret_cast< Arc* >(object);
  (void)_this;
}
void Arc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Arc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Arc::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Arc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mid_ != nullptr) {
    delete mid_;
  }
  mid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaForAllocation() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(layer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Arc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 mid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Net net = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Arc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Arc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 start = 2;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 mid = 3;
  if (this->_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mid(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 4;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  // .kiapi.common.types.Distance width = 5;
  if (this->_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::width(this), target, stream);
  }

  // .kiapi.common.types.LockedState locked = 6;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_locked(), target);
  }

  // .kiapi.board.types.BoardLayer layer = 7;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_layer(), target);
  }

  // .kiapi.board.types.Net net = 8;
  if (this->_internal_has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::net(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Arc)
  return target;
}

size_t Arc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Arc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 start = 2;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 mid = 3;
  if (this->_internal_has_mid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mid_);
  }

  // .kiapi.common.types.Vector2 end = 4;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .kiapi.common.types.Distance width = 5;
  if (this->_internal_has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  // .kiapi.board.types.Net net = 8;
  if (this->_internal_has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .kiapi.common.types.LockedState locked = 6;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  // .kiapi.board.types.BoardLayer layer = 7;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Arc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Arc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Arc::GetClassData() const { return &_class_data_; }

void Arc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Arc *>(to)->MergeFrom(
      static_cast<const Arc &>(from));
}


void Arc::MergeFrom(const Arc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Arc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_mid()) {
    _internal_mutable_mid()->::kiapi::common::types::Vector2::MergeFrom(from._internal_mid());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  if (from._internal_has_width()) {
    _internal_mutable_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_width());
  }
  if (from._internal_has_net()) {
    _internal_mutable_net()->::kiapi::board::types::Net::MergeFrom(from._internal_net());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Arc::CopyFrom(const Arc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arc::IsInitialized() const {
  return true;
}

void Arc::InternalSwap(Arc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Arc, layer_)
      + sizeof(Arc::layer_)
      - PROTOBUF_FIELD_OFFSET(Arc, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Arc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[3]);
}

// ===================================================================

class ChamferedRectCorners::_Internal {
 public:
};

ChamferedRectCorners::ChamferedRectCorners(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.ChamferedRectCorners)
}
ChamferedRectCorners::ChamferedRectCorners(const ChamferedRectCorners& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top_left_, &from.top_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_right_) -
    reinterpret_cast<char*>(&top_left_)) + sizeof(bottom_right_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.ChamferedRectCorners)
}

inline void ChamferedRectCorners::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_right_) -
    reinterpret_cast<char*>(&top_left_)) + sizeof(bottom_right_));
}

ChamferedRectCorners::~ChamferedRectCorners() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.ChamferedRectCorners)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChamferedRectCorners::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChamferedRectCorners::ArenaDtor(void* object) {
  ChamferedRectCorners* _this = reinterpret_cast< ChamferedRectCorners* >(object);
  (void)_this;
}
void ChamferedRectCorners::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChamferedRectCorners::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChamferedRectCorners::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.ChamferedRectCorners)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&top_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_right_) -
      reinterpret_cast<char*>(&top_left_)) + sizeof(bottom_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChamferedRectCorners::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool top_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          top_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool top_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          top_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bottom_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          bottom_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bottom_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bottom_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChamferedRectCorners::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.ChamferedRectCorners)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool top_left = 1;
  if (this->_internal_top_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_top_left(), target);
  }

  // bool top_right = 2;
  if (this->_internal_top_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_top_right(), target);
  }

  // bool bottom_left = 3;
  if (this->_internal_bottom_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bottom_left(), target);
  }

  // bool bottom_right = 4;
  if (this->_internal_bottom_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bottom_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.ChamferedRectCorners)
  return target;
}

size_t ChamferedRectCorners::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.ChamferedRectCorners)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool top_left = 1;
  if (this->_internal_top_left() != 0) {
    total_size += 1 + 1;
  }

  // bool top_right = 2;
  if (this->_internal_top_right() != 0) {
    total_size += 1 + 1;
  }

  // bool bottom_left = 3;
  if (this->_internal_bottom_left() != 0) {
    total_size += 1 + 1;
  }

  // bool bottom_right = 4;
  if (this->_internal_bottom_right() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChamferedRectCorners::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChamferedRectCorners::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChamferedRectCorners::GetClassData() const { return &_class_data_; }

void ChamferedRectCorners::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChamferedRectCorners *>(to)->MergeFrom(
      static_cast<const ChamferedRectCorners &>(from));
}


void ChamferedRectCorners::MergeFrom(const ChamferedRectCorners& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.ChamferedRectCorners)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_top_left() != 0) {
    _internal_set_top_left(from._internal_top_left());
  }
  if (from._internal_top_right() != 0) {
    _internal_set_top_right(from._internal_top_right());
  }
  if (from._internal_bottom_left() != 0) {
    _internal_set_bottom_left(from._internal_bottom_left());
  }
  if (from._internal_bottom_right() != 0) {
    _internal_set_bottom_right(from._internal_bottom_right());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChamferedRectCorners::CopyFrom(const ChamferedRectCorners& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.ChamferedRectCorners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChamferedRectCorners::IsInitialized() const {
  return true;
}

void ChamferedRectCorners::InternalSwap(ChamferedRectCorners* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChamferedRectCorners, bottom_right_)
      + sizeof(ChamferedRectCorners::bottom_right_)
      - PROTOBUF_FIELD_OFFSET(ChamferedRectCorners, top_left_)>(
          reinterpret_cast<char*>(&top_left_),
          reinterpret_cast<char*>(&other->top_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChamferedRectCorners::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[4]);
}

// ===================================================================

class ZoneConnectionSettings::_Internal {
 public:
  static const ::kiapi::board::types::ThermalSpokeSettings& thermal_spokes(const ZoneConnectionSettings* msg);
};

const ::kiapi::board::types::ThermalSpokeSettings&
ZoneConnectionSettings::_Internal::thermal_spokes(const ZoneConnectionSettings* msg) {
  return *msg->thermal_spokes_;
}
ZoneConnectionSettings::ZoneConnectionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.ZoneConnectionSettings)
}
ZoneConnectionSettings::ZoneConnectionSettings(const ZoneConnectionSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_thermal_spokes()) {
    thermal_spokes_ = new ::kiapi::board::types::ThermalSpokeSettings(*from.thermal_spokes_);
  } else {
    thermal_spokes_ = nullptr;
  }
  zone_connection_ = from.zone_connection_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.ZoneConnectionSettings)
}

inline void ZoneConnectionSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&thermal_spokes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zone_connection_) -
    reinterpret_cast<char*>(&thermal_spokes_)) + sizeof(zone_connection_));
}

ZoneConnectionSettings::~ZoneConnectionSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.ZoneConnectionSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZoneConnectionSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete thermal_spokes_;
}

void ZoneConnectionSettings::ArenaDtor(void* object) {
  ZoneConnectionSettings* _this = reinterpret_cast< ZoneConnectionSettings* >(object);
  (void)_this;
}
void ZoneConnectionSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneConnectionSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneConnectionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.ZoneConnectionSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && thermal_spokes_ != nullptr) {
    delete thermal_spokes_;
  }
  thermal_spokes_ = nullptr;
  zone_connection_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneConnectionSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.ZoneConnectionStyle zone_connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_zone_connection(static_cast<::kiapi::board::types::ZoneConnectionStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ThermalSpokeSettings thermal_spokes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_thermal_spokes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZoneConnectionSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.ZoneConnectionSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.ZoneConnectionStyle zone_connection = 1;
  if (this->_internal_zone_connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_zone_connection(), target);
  }

  // .kiapi.board.types.ThermalSpokeSettings thermal_spokes = 2;
  if (this->_internal_has_thermal_spokes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::thermal_spokes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.ZoneConnectionSettings)
  return target;
}

size_t ZoneConnectionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.ZoneConnectionSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.types.ThermalSpokeSettings thermal_spokes = 2;
  if (this->_internal_has_thermal_spokes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thermal_spokes_);
  }

  // .kiapi.board.types.ZoneConnectionStyle zone_connection = 1;
  if (this->_internal_zone_connection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_zone_connection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZoneConnectionSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZoneConnectionSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZoneConnectionSettings::GetClassData() const { return &_class_data_; }

void ZoneConnectionSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZoneConnectionSettings *>(to)->MergeFrom(
      static_cast<const ZoneConnectionSettings &>(from));
}


void ZoneConnectionSettings::MergeFrom(const ZoneConnectionSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.ZoneConnectionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thermal_spokes()) {
    _internal_mutable_thermal_spokes()->::kiapi::board::types::ThermalSpokeSettings::MergeFrom(from._internal_thermal_spokes());
  }
  if (from._internal_zone_connection() != 0) {
    _internal_set_zone_connection(from._internal_zone_connection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneConnectionSettings::CopyFrom(const ZoneConnectionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.ZoneConnectionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneConnectionSettings::IsInitialized() const {
  return true;
}

void ZoneConnectionSettings::InternalSwap(ZoneConnectionSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoneConnectionSettings, zone_connection_)
      + sizeof(ZoneConnectionSettings::zone_connection_)
      - PROTOBUF_FIELD_OFFSET(ZoneConnectionSettings, thermal_spokes_)>(
          reinterpret_cast<char*>(&thermal_spokes_),
          reinterpret_cast<char*>(&other->thermal_spokes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneConnectionSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[5]);
}

// ===================================================================

class SolderMaskOverrides::_Internal {
 public:
  static const ::kiapi::common::types::Distance& solder_mask_margin(const SolderMaskOverrides* msg);
};

const ::kiapi::common::types::Distance&
SolderMaskOverrides::_Internal::solder_mask_margin(const SolderMaskOverrides* msg) {
  return *msg->solder_mask_margin_;
}
void SolderMaskOverrides::clear_solder_mask_margin() {
  if (GetArenaForAllocation() == nullptr && solder_mask_margin_ != nullptr) {
    delete solder_mask_margin_;
  }
  solder_mask_margin_ = nullptr;
}
SolderMaskOverrides::SolderMaskOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.SolderMaskOverrides)
}
SolderMaskOverrides::SolderMaskOverrides(const SolderMaskOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solder_mask_margin()) {
    solder_mask_margin_ = new ::kiapi::common::types::Distance(*from.solder_mask_margin_);
  } else {
    solder_mask_margin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.SolderMaskOverrides)
}

inline void SolderMaskOverrides::SharedCtor() {
solder_mask_margin_ = nullptr;
}

SolderMaskOverrides::~SolderMaskOverrides() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.SolderMaskOverrides)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SolderMaskOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete solder_mask_margin_;
}

void SolderMaskOverrides::ArenaDtor(void* object) {
  SolderMaskOverrides* _this = reinterpret_cast< SolderMaskOverrides* >(object);
  (void)_this;
}
void SolderMaskOverrides::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolderMaskOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolderMaskOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.SolderMaskOverrides)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && solder_mask_margin_ != nullptr) {
    delete solder_mask_margin_;
  }
  solder_mask_margin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolderMaskOverrides::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Distance solder_mask_margin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solder_mask_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolderMaskOverrides::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.SolderMaskOverrides)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Distance solder_mask_margin = 1;
  if (this->_internal_has_solder_mask_margin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solder_mask_margin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.SolderMaskOverrides)
  return target;
}

size_t SolderMaskOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.SolderMaskOverrides)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Distance solder_mask_margin = 1;
  if (this->_internal_has_solder_mask_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solder_mask_margin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolderMaskOverrides::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SolderMaskOverrides::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolderMaskOverrides::GetClassData() const { return &_class_data_; }

void SolderMaskOverrides::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SolderMaskOverrides *>(to)->MergeFrom(
      static_cast<const SolderMaskOverrides &>(from));
}


void SolderMaskOverrides::MergeFrom(const SolderMaskOverrides& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.SolderMaskOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_solder_mask_margin()) {
    _internal_mutable_solder_mask_margin()->::kiapi::common::types::Distance::MergeFrom(from._internal_solder_mask_margin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolderMaskOverrides::CopyFrom(const SolderMaskOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.SolderMaskOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolderMaskOverrides::IsInitialized() const {
  return true;
}

void SolderMaskOverrides::InternalSwap(SolderMaskOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(solder_mask_margin_, other->solder_mask_margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolderMaskOverrides::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[6]);
}

// ===================================================================

class SolderPasteOverrides::_Internal {
 public:
  static const ::kiapi::common::types::Distance& solder_paste_margin(const SolderPasteOverrides* msg);
  static const ::kiapi::common::types::Ratio& solder_paste_margin_ratio(const SolderPasteOverrides* msg);
};

const ::kiapi::common::types::Distance&
SolderPasteOverrides::_Internal::solder_paste_margin(const SolderPasteOverrides* msg) {
  return *msg->solder_paste_margin_;
}
const ::kiapi::common::types::Ratio&
SolderPasteOverrides::_Internal::solder_paste_margin_ratio(const SolderPasteOverrides* msg) {
  return *msg->solder_paste_margin_ratio_;
}
void SolderPasteOverrides::clear_solder_paste_margin() {
  if (GetArenaForAllocation() == nullptr && solder_paste_margin_ != nullptr) {
    delete solder_paste_margin_;
  }
  solder_paste_margin_ = nullptr;
}
void SolderPasteOverrides::clear_solder_paste_margin_ratio() {
  if (GetArenaForAllocation() == nullptr && solder_paste_margin_ratio_ != nullptr) {
    delete solder_paste_margin_ratio_;
  }
  solder_paste_margin_ratio_ = nullptr;
}
SolderPasteOverrides::SolderPasteOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.SolderPasteOverrides)
}
SolderPasteOverrides::SolderPasteOverrides(const SolderPasteOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solder_paste_margin()) {
    solder_paste_margin_ = new ::kiapi::common::types::Distance(*from.solder_paste_margin_);
  } else {
    solder_paste_margin_ = nullptr;
  }
  if (from._internal_has_solder_paste_margin_ratio()) {
    solder_paste_margin_ratio_ = new ::kiapi::common::types::Ratio(*from.solder_paste_margin_ratio_);
  } else {
    solder_paste_margin_ratio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.SolderPasteOverrides)
}

inline void SolderPasteOverrides::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&solder_paste_margin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&solder_paste_margin_ratio_) -
    reinterpret_cast<char*>(&solder_paste_margin_)) + sizeof(solder_paste_margin_ratio_));
}

SolderPasteOverrides::~SolderPasteOverrides() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.SolderPasteOverrides)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SolderPasteOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete solder_paste_margin_;
  if (this != internal_default_instance()) delete solder_paste_margin_ratio_;
}

void SolderPasteOverrides::ArenaDtor(void* object) {
  SolderPasteOverrides* _this = reinterpret_cast< SolderPasteOverrides* >(object);
  (void)_this;
}
void SolderPasteOverrides::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolderPasteOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolderPasteOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.SolderPasteOverrides)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && solder_paste_margin_ != nullptr) {
    delete solder_paste_margin_;
  }
  solder_paste_margin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && solder_paste_margin_ratio_ != nullptr) {
    delete solder_paste_margin_ratio_;
  }
  solder_paste_margin_ratio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolderPasteOverrides::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Distance solder_paste_margin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solder_paste_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Ratio solder_paste_margin_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solder_paste_margin_ratio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolderPasteOverrides::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.SolderPasteOverrides)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Distance solder_paste_margin = 1;
  if (this->_internal_has_solder_paste_margin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solder_paste_margin(this), target, stream);
  }

  // .kiapi.common.types.Ratio solder_paste_margin_ratio = 2;
  if (this->_internal_has_solder_paste_margin_ratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solder_paste_margin_ratio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.SolderPasteOverrides)
  return target;
}

size_t SolderPasteOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.SolderPasteOverrides)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Distance solder_paste_margin = 1;
  if (this->_internal_has_solder_paste_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solder_paste_margin_);
  }

  // .kiapi.common.types.Ratio solder_paste_margin_ratio = 2;
  if (this->_internal_has_solder_paste_margin_ratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solder_paste_margin_ratio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolderPasteOverrides::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SolderPasteOverrides::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolderPasteOverrides::GetClassData() const { return &_class_data_; }

void SolderPasteOverrides::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SolderPasteOverrides *>(to)->MergeFrom(
      static_cast<const SolderPasteOverrides &>(from));
}


void SolderPasteOverrides::MergeFrom(const SolderPasteOverrides& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.SolderPasteOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_solder_paste_margin()) {
    _internal_mutable_solder_paste_margin()->::kiapi::common::types::Distance::MergeFrom(from._internal_solder_paste_margin());
  }
  if (from._internal_has_solder_paste_margin_ratio()) {
    _internal_mutable_solder_paste_margin_ratio()->::kiapi::common::types::Ratio::MergeFrom(from._internal_solder_paste_margin_ratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolderPasteOverrides::CopyFrom(const SolderPasteOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.SolderPasteOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolderPasteOverrides::IsInitialized() const {
  return true;
}

void SolderPasteOverrides::InternalSwap(SolderPasteOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolderPasteOverrides, solder_paste_margin_ratio_)
      + sizeof(SolderPasteOverrides::solder_paste_margin_ratio_)
      - PROTOBUF_FIELD_OFFSET(SolderPasteOverrides, solder_paste_margin_)>(
          reinterpret_cast<char*>(&solder_paste_margin_),
          reinterpret_cast<char*>(&other->solder_paste_margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolderPasteOverrides::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[7]);
}

// ===================================================================

class PadStackLayer::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& size(const PadStackLayer* msg);
  static const ::kiapi::board::types::ChamferedRectCorners& chamfered_corners(const PadStackLayer* msg);
  static const ::kiapi::board::types::ZoneConnectionSettings& zone_settings(const PadStackLayer* msg);
  static const ::kiapi::common::types::Vector2& trapezoid_delta(const PadStackLayer* msg);
  static const ::kiapi::common::types::Vector2& offset(const PadStackLayer* msg);
};

const ::kiapi::common::types::Vector2&
PadStackLayer::_Internal::size(const PadStackLayer* msg) {
  return *msg->size_;
}
const ::kiapi::board::types::ChamferedRectCorners&
PadStackLayer::_Internal::chamfered_corners(const PadStackLayer* msg) {
  return *msg->chamfered_corners_;
}
const ::kiapi::board::types::ZoneConnectionSettings&
PadStackLayer::_Internal::zone_settings(const PadStackLayer* msg) {
  return *msg->zone_settings_;
}
const ::kiapi::common::types::Vector2&
PadStackLayer::_Internal::trapezoid_delta(const PadStackLayer* msg) {
  return *msg->trapezoid_delta_;
}
const ::kiapi::common::types::Vector2&
PadStackLayer::_Internal::offset(const PadStackLayer* msg) {
  return *msg->offset_;
}
void PadStackLayer::clear_size() {
  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
void PadStackLayer::clear_trapezoid_delta() {
  if (GetArenaForAllocation() == nullptr && trapezoid_delta_ != nullptr) {
    delete trapezoid_delta_;
  }
  trapezoid_delta_ = nullptr;
}
void PadStackLayer::clear_offset() {
  if (GetArenaForAllocation() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
PadStackLayer::PadStackLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_shapes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.PadStackLayer)
}
PadStackLayer::PadStackLayer(const PadStackLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      custom_shapes_(from.custom_shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::kiapi::common::types::Vector2(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_chamfered_corners()) {
    chamfered_corners_ = new ::kiapi::board::types::ChamferedRectCorners(*from.chamfered_corners_);
  } else {
    chamfered_corners_ = nullptr;
  }
  if (from._internal_has_zone_settings()) {
    zone_settings_ = new ::kiapi::board::types::ZoneConnectionSettings(*from.zone_settings_);
  } else {
    zone_settings_ = nullptr;
  }
  if (from._internal_has_trapezoid_delta()) {
    trapezoid_delta_ = new ::kiapi::common::types::Vector2(*from.trapezoid_delta_);
  } else {
    trapezoid_delta_ = nullptr;
  }
  if (from._internal_has_offset()) {
    offset_ = new ::kiapi::common::types::Vector2(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_anchor_shape_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(custom_anchor_shape_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.PadStackLayer)
}

inline void PadStackLayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_anchor_shape_) -
    reinterpret_cast<char*>(&size_)) + sizeof(custom_anchor_shape_));
}

PadStackLayer::~PadStackLayer() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.PadStackLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PadStackLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete chamfered_corners_;
  if (this != internal_default_instance()) delete zone_settings_;
  if (this != internal_default_instance()) delete trapezoid_delta_;
  if (this != internal_default_instance()) delete offset_;
}

void PadStackLayer::ArenaDtor(void* object) {
  PadStackLayer* _this = reinterpret_cast< PadStackLayer* >(object);
  (void)_this;
}
void PadStackLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PadStackLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PadStackLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.PadStackLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_shapes_.Clear();
  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chamfered_corners_ != nullptr) {
    delete chamfered_corners_;
  }
  chamfered_corners_ = nullptr;
  if (GetArenaForAllocation() == nullptr && zone_settings_ != nullptr) {
    delete zone_settings_;
  }
  zone_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trapezoid_delta_ != nullptr) {
    delete trapezoid_delta_;
  }
  trapezoid_delta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_anchor_shape_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(custom_anchor_shape_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PadStackLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.BoardLayer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PadStackShape shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shape(static_cast<::kiapi::board::types::PadStackShape>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double corner_rounding_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          corner_rounding_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double chamfer_ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          chamfer_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ChamferedRectCorners chamfered_corners = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chamfered_corners(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.BoardGraphicShape custom_shapes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PadStackShape custom_anchor_shape = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_custom_anchor_shape(static_cast<::kiapi::board::types::PadStackShape>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_zone_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 trapezoid_delta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_trapezoid_delta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PadStackLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.PadStackLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layer(), target);
  }

  // .kiapi.board.types.PadStackShape shape = 2;
  if (this->_internal_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_shape(), target);
  }

  // .kiapi.common.types.Vector2 size = 3;
  if (this->_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size(this), target, stream);
  }

  // double corner_rounding_ratio = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_corner_rounding_ratio = this->_internal_corner_rounding_ratio();
  uint64_t raw_corner_rounding_ratio;
  memcpy(&raw_corner_rounding_ratio, &tmp_corner_rounding_ratio, sizeof(tmp_corner_rounding_ratio));
  if (raw_corner_rounding_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_corner_rounding_ratio(), target);
  }

  // double chamfer_ratio = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_chamfer_ratio = this->_internal_chamfer_ratio();
  uint64_t raw_chamfer_ratio;
  memcpy(&raw_chamfer_ratio, &tmp_chamfer_ratio, sizeof(tmp_chamfer_ratio));
  if (raw_chamfer_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_chamfer_ratio(), target);
  }

  // .kiapi.board.types.ChamferedRectCorners chamfered_corners = 6;
  if (this->_internal_has_chamfered_corners()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::chamfered_corners(this), target, stream);
  }

  // repeated .kiapi.board.types.BoardGraphicShape custom_shapes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_custom_shapes(i), target, stream);
  }

  // .kiapi.board.types.PadStackShape custom_anchor_shape = 8;
  if (this->_internal_custom_anchor_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_custom_anchor_shape(), target);
  }

  // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
  if (this->_internal_has_zone_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::zone_settings(this), target, stream);
  }

  // .kiapi.common.types.Vector2 trapezoid_delta = 10;
  if (this->_internal_has_trapezoid_delta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::trapezoid_delta(this), target, stream);
  }

  // .kiapi.common.types.Vector2 offset = 11;
  if (this->_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.PadStackLayer)
  return target;
}

size_t PadStackLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.PadStackLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.BoardGraphicShape custom_shapes = 7;
  total_size += 1UL * this->_internal_custom_shapes_size();
  for (const auto& msg : this->custom_shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.Vector2 size = 3;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .kiapi.board.types.ChamferedRectCorners chamfered_corners = 6;
  if (this->_internal_has_chamfered_corners()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chamfered_corners_);
  }

  // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
  if (this->_internal_has_zone_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zone_settings_);
  }

  // .kiapi.common.types.Vector2 trapezoid_delta = 10;
  if (this->_internal_has_trapezoid_delta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trapezoid_delta_);
  }

  // .kiapi.common.types.Vector2 offset = 11;
  if (this->_internal_has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  // .kiapi.board.types.PadStackShape shape = 2;
  if (this->_internal_shape() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shape());
  }

  // double corner_rounding_ratio = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_corner_rounding_ratio = this->_internal_corner_rounding_ratio();
  uint64_t raw_corner_rounding_ratio;
  memcpy(&raw_corner_rounding_ratio, &tmp_corner_rounding_ratio, sizeof(tmp_corner_rounding_ratio));
  if (raw_corner_rounding_ratio != 0) {
    total_size += 1 + 8;
  }

  // double chamfer_ratio = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_chamfer_ratio = this->_internal_chamfer_ratio();
  uint64_t raw_chamfer_ratio;
  memcpy(&raw_chamfer_ratio, &tmp_chamfer_ratio, sizeof(tmp_chamfer_ratio));
  if (raw_chamfer_ratio != 0) {
    total_size += 1 + 8;
  }

  // .kiapi.board.types.PadStackShape custom_anchor_shape = 8;
  if (this->_internal_custom_anchor_shape() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_custom_anchor_shape());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PadStackLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PadStackLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PadStackLayer::GetClassData() const { return &_class_data_; }

void PadStackLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PadStackLayer *>(to)->MergeFrom(
      static_cast<const PadStackLayer &>(from));
}


void PadStackLayer::MergeFrom(const PadStackLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.PadStackLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  custom_shapes_.MergeFrom(from.custom_shapes_);
  if (from._internal_has_size()) {
    _internal_mutable_size()->::kiapi::common::types::Vector2::MergeFrom(from._internal_size());
  }
  if (from._internal_has_chamfered_corners()) {
    _internal_mutable_chamfered_corners()->::kiapi::board::types::ChamferedRectCorners::MergeFrom(from._internal_chamfered_corners());
  }
  if (from._internal_has_zone_settings()) {
    _internal_mutable_zone_settings()->::kiapi::board::types::ZoneConnectionSettings::MergeFrom(from._internal_zone_settings());
  }
  if (from._internal_has_trapezoid_delta()) {
    _internal_mutable_trapezoid_delta()->::kiapi::common::types::Vector2::MergeFrom(from._internal_trapezoid_delta());
  }
  if (from._internal_has_offset()) {
    _internal_mutable_offset()->::kiapi::common::types::Vector2::MergeFrom(from._internal_offset());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from._internal_shape() != 0) {
    _internal_set_shape(from._internal_shape());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_corner_rounding_ratio = from._internal_corner_rounding_ratio();
  uint64_t raw_corner_rounding_ratio;
  memcpy(&raw_corner_rounding_ratio, &tmp_corner_rounding_ratio, sizeof(tmp_corner_rounding_ratio));
  if (raw_corner_rounding_ratio != 0) {
    _internal_set_corner_rounding_ratio(from._internal_corner_rounding_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_chamfer_ratio = from._internal_chamfer_ratio();
  uint64_t raw_chamfer_ratio;
  memcpy(&raw_chamfer_ratio, &tmp_chamfer_ratio, sizeof(tmp_chamfer_ratio));
  if (raw_chamfer_ratio != 0) {
    _internal_set_chamfer_ratio(from._internal_chamfer_ratio());
  }
  if (from._internal_custom_anchor_shape() != 0) {
    _internal_set_custom_anchor_shape(from._internal_custom_anchor_shape());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PadStackLayer::CopyFrom(const PadStackLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.PadStackLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadStackLayer::IsInitialized() const {
  return true;
}

void PadStackLayer::InternalSwap(PadStackLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  custom_shapes_.InternalSwap(&other->custom_shapes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PadStackLayer, custom_anchor_shape_)
      + sizeof(PadStackLayer::custom_anchor_shape_)
      - PROTOBUF_FIELD_OFFSET(PadStackLayer, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PadStackLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[8]);
}

// ===================================================================

class PadStackOuterLayer::_Internal {
 public:
  static const ::kiapi::board::types::SolderMaskOverrides& solder_mask_settings(const PadStackOuterLayer* msg);
  static const ::kiapi::board::types::SolderPasteOverrides& solder_paste_settings(const PadStackOuterLayer* msg);
};

const ::kiapi::board::types::SolderMaskOverrides&
PadStackOuterLayer::_Internal::solder_mask_settings(const PadStackOuterLayer* msg) {
  return *msg->solder_mask_settings_;
}
const ::kiapi::board::types::SolderPasteOverrides&
PadStackOuterLayer::_Internal::solder_paste_settings(const PadStackOuterLayer* msg) {
  return *msg->solder_paste_settings_;
}
PadStackOuterLayer::PadStackOuterLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.PadStackOuterLayer)
}
PadStackOuterLayer::PadStackOuterLayer(const PadStackOuterLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solder_mask_settings()) {
    solder_mask_settings_ = new ::kiapi::board::types::SolderMaskOverrides(*from.solder_mask_settings_);
  } else {
    solder_mask_settings_ = nullptr;
  }
  if (from._internal_has_solder_paste_settings()) {
    solder_paste_settings_ = new ::kiapi::board::types::SolderPasteOverrides(*from.solder_paste_settings_);
  } else {
    solder_paste_settings_ = nullptr;
  }
  ::memcpy(&solder_mask_mode_, &from.solder_mask_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&covering_mode_) -
    reinterpret_cast<char*>(&solder_mask_mode_)) + sizeof(covering_mode_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.PadStackOuterLayer)
}

inline void PadStackOuterLayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&solder_mask_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&covering_mode_) -
    reinterpret_cast<char*>(&solder_mask_settings_)) + sizeof(covering_mode_));
}

PadStackOuterLayer::~PadStackOuterLayer() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.PadStackOuterLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PadStackOuterLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete solder_mask_settings_;
  if (this != internal_default_instance()) delete solder_paste_settings_;
}

void PadStackOuterLayer::ArenaDtor(void* object) {
  PadStackOuterLayer* _this = reinterpret_cast< PadStackOuterLayer* >(object);
  (void)_this;
}
void PadStackOuterLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PadStackOuterLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PadStackOuterLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.PadStackOuterLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && solder_mask_settings_ != nullptr) {
    delete solder_mask_settings_;
  }
  solder_mask_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && solder_paste_settings_ != nullptr) {
    delete solder_paste_settings_;
  }
  solder_paste_settings_ = nullptr;
  ::memset(&solder_mask_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&covering_mode_) -
      reinterpret_cast<char*>(&solder_mask_mode_)) + sizeof(covering_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PadStackOuterLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.SolderMaskMode solder_mask_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_solder_mask_mode(static_cast<::kiapi::board::types::SolderMaskMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.SolderPasteMode solder_paste_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_solder_paste_mode(static_cast<::kiapi::board::types::SolderPasteMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.SolderMaskOverrides solder_mask_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_solder_mask_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.SolderPasteOverrides solder_paste_settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_solder_paste_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ViaPluggingMode plugging_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plugging_mode(static_cast<::kiapi::board::types::ViaPluggingMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ViaCoveringMode covering_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_covering_mode(static_cast<::kiapi::board::types::ViaCoveringMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PadStackOuterLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.PadStackOuterLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.SolderMaskMode solder_mask_mode = 1;
  if (this->_internal_solder_mask_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_solder_mask_mode(), target);
  }

  // .kiapi.board.types.SolderPasteMode solder_paste_mode = 2;
  if (this->_internal_solder_paste_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solder_paste_mode(), target);
  }

  // .kiapi.board.types.SolderMaskOverrides solder_mask_settings = 3;
  if (this->_internal_has_solder_mask_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::solder_mask_settings(this), target, stream);
  }

  // .kiapi.board.types.SolderPasteOverrides solder_paste_settings = 4;
  if (this->_internal_has_solder_paste_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::solder_paste_settings(this), target, stream);
  }

  // .kiapi.board.types.ViaPluggingMode plugging_mode = 5;
  if (this->_internal_plugging_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_plugging_mode(), target);
  }

  // .kiapi.board.types.ViaCoveringMode covering_mode = 6;
  if (this->_internal_covering_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_covering_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.PadStackOuterLayer)
  return target;
}

size_t PadStackOuterLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.PadStackOuterLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.types.SolderMaskOverrides solder_mask_settings = 3;
  if (this->_internal_has_solder_mask_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solder_mask_settings_);
  }

  // .kiapi.board.types.SolderPasteOverrides solder_paste_settings = 4;
  if (this->_internal_has_solder_paste_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solder_paste_settings_);
  }

  // .kiapi.board.types.SolderMaskMode solder_mask_mode = 1;
  if (this->_internal_solder_mask_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solder_mask_mode());
  }

  // .kiapi.board.types.SolderPasteMode solder_paste_mode = 2;
  if (this->_internal_solder_paste_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solder_paste_mode());
  }

  // .kiapi.board.types.ViaPluggingMode plugging_mode = 5;
  if (this->_internal_plugging_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plugging_mode());
  }

  // .kiapi.board.types.ViaCoveringMode covering_mode = 6;
  if (this->_internal_covering_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_covering_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PadStackOuterLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PadStackOuterLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PadStackOuterLayer::GetClassData() const { return &_class_data_; }

void PadStackOuterLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PadStackOuterLayer *>(to)->MergeFrom(
      static_cast<const PadStackOuterLayer &>(from));
}


void PadStackOuterLayer::MergeFrom(const PadStackOuterLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.PadStackOuterLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_solder_mask_settings()) {
    _internal_mutable_solder_mask_settings()->::kiapi::board::types::SolderMaskOverrides::MergeFrom(from._internal_solder_mask_settings());
  }
  if (from._internal_has_solder_paste_settings()) {
    _internal_mutable_solder_paste_settings()->::kiapi::board::types::SolderPasteOverrides::MergeFrom(from._internal_solder_paste_settings());
  }
  if (from._internal_solder_mask_mode() != 0) {
    _internal_set_solder_mask_mode(from._internal_solder_mask_mode());
  }
  if (from._internal_solder_paste_mode() != 0) {
    _internal_set_solder_paste_mode(from._internal_solder_paste_mode());
  }
  if (from._internal_plugging_mode() != 0) {
    _internal_set_plugging_mode(from._internal_plugging_mode());
  }
  if (from._internal_covering_mode() != 0) {
    _internal_set_covering_mode(from._internal_covering_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PadStackOuterLayer::CopyFrom(const PadStackOuterLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.PadStackOuterLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadStackOuterLayer::IsInitialized() const {
  return true;
}

void PadStackOuterLayer::InternalSwap(PadStackOuterLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PadStackOuterLayer, covering_mode_)
      + sizeof(PadStackOuterLayer::covering_mode_)
      - PROTOBUF_FIELD_OFFSET(PadStackOuterLayer, solder_mask_settings_)>(
          reinterpret_cast<char*>(&solder_mask_settings_),
          reinterpret_cast<char*>(&other->solder_mask_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PadStackOuterLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[9]);
}

// ===================================================================

class DrillProperties::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& diameter(const DrillProperties* msg);
};

const ::kiapi::common::types::Vector2&
DrillProperties::_Internal::diameter(const DrillProperties* msg) {
  return *msg->diameter_;
}
void DrillProperties::clear_diameter() {
  if (GetArenaForAllocation() == nullptr && diameter_ != nullptr) {
    delete diameter_;
  }
  diameter_ = nullptr;
}
DrillProperties::DrillProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.DrillProperties)
}
DrillProperties::DrillProperties(const DrillProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_diameter()) {
    diameter_ = new ::kiapi::common::types::Vector2(*from.diameter_);
  } else {
    diameter_ = nullptr;
  }
  ::memcpy(&start_layer_, &from.start_layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&filled_) -
    reinterpret_cast<char*>(&start_layer_)) + sizeof(filled_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.DrillProperties)
}

inline void DrillProperties::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&diameter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filled_) -
    reinterpret_cast<char*>(&diameter_)) + sizeof(filled_));
}

DrillProperties::~DrillProperties() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.DrillProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DrillProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete diameter_;
}

void DrillProperties::ArenaDtor(void* object) {
  DrillProperties* _this = reinterpret_cast< DrillProperties* >(object);
  (void)_this;
}
void DrillProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrillProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrillProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.DrillProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && diameter_ != nullptr) {
    delete diameter_;
  }
  diameter_ = nullptr;
  ::memset(&start_layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filled_) -
      reinterpret_cast<char*>(&start_layer_)) + sizeof(filled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrillProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.BoardLayer start_layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_start_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer end_layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_end_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 diameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_diameter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DrillShape shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shape(static_cast<::kiapi::board::types::DrillShape>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ViaDrillCappingMode capped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_capped(static_cast<::kiapi::board::types::ViaDrillCappingMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ViaDrillFillingMode filled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filled(static_cast<::kiapi::board::types::ViaDrillFillingMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrillProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.DrillProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.BoardLayer start_layer = 1;
  if (this->_internal_start_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_start_layer(), target);
  }

  // .kiapi.board.types.BoardLayer end_layer = 2;
  if (this->_internal_end_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_end_layer(), target);
  }

  // .kiapi.common.types.Vector2 diameter = 3;
  if (this->_internal_has_diameter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::diameter(this), target, stream);
  }

  // .kiapi.board.types.DrillShape shape = 4;
  if (this->_internal_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_shape(), target);
  }

  // .kiapi.board.types.ViaDrillCappingMode capped = 5;
  if (this->_internal_capped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_capped(), target);
  }

  // .kiapi.board.types.ViaDrillFillingMode filled = 6;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_filled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.DrillProperties)
  return target;
}

size_t DrillProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.DrillProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 diameter = 3;
  if (this->_internal_has_diameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diameter_);
  }

  // .kiapi.board.types.BoardLayer start_layer = 1;
  if (this->_internal_start_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_start_layer());
  }

  // .kiapi.board.types.BoardLayer end_layer = 2;
  if (this->_internal_end_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_end_layer());
  }

  // .kiapi.board.types.DrillShape shape = 4;
  if (this->_internal_shape() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shape());
  }

  // .kiapi.board.types.ViaDrillCappingMode capped = 5;
  if (this->_internal_capped() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_capped());
  }

  // .kiapi.board.types.ViaDrillFillingMode filled = 6;
  if (this->_internal_filled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filled());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrillProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DrillProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrillProperties::GetClassData() const { return &_class_data_; }

void DrillProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DrillProperties *>(to)->MergeFrom(
      static_cast<const DrillProperties &>(from));
}


void DrillProperties::MergeFrom(const DrillProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.DrillProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_diameter()) {
    _internal_mutable_diameter()->::kiapi::common::types::Vector2::MergeFrom(from._internal_diameter());
  }
  if (from._internal_start_layer() != 0) {
    _internal_set_start_layer(from._internal_start_layer());
  }
  if (from._internal_end_layer() != 0) {
    _internal_set_end_layer(from._internal_end_layer());
  }
  if (from._internal_shape() != 0) {
    _internal_set_shape(from._internal_shape());
  }
  if (from._internal_capped() != 0) {
    _internal_set_capped(from._internal_capped());
  }
  if (from._internal_filled() != 0) {
    _internal_set_filled(from._internal_filled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrillProperties::CopyFrom(const DrillProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.DrillProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrillProperties::IsInitialized() const {
  return true;
}

void DrillProperties::InternalSwap(DrillProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrillProperties, filled_)
      + sizeof(DrillProperties::filled_)
      - PROTOBUF_FIELD_OFFSET(DrillProperties, diameter_)>(
          reinterpret_cast<char*>(&diameter_),
          reinterpret_cast<char*>(&other->diameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrillProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[10]);
}

// ===================================================================

class PadStack::_Internal {
 public:
  static const ::kiapi::board::types::DrillProperties& drill(const PadStack* msg);
  static const ::kiapi::common::types::Angle& angle(const PadStack* msg);
  static const ::kiapi::board::types::PadStackOuterLayer& front_outer_layers(const PadStack* msg);
  static const ::kiapi::board::types::PadStackOuterLayer& back_outer_layers(const PadStack* msg);
  static const ::kiapi::board::types::ZoneConnectionSettings& zone_settings(const PadStack* msg);
};

const ::kiapi::board::types::DrillProperties&
PadStack::_Internal::drill(const PadStack* msg) {
  return *msg->drill_;
}
const ::kiapi::common::types::Angle&
PadStack::_Internal::angle(const PadStack* msg) {
  return *msg->angle_;
}
const ::kiapi::board::types::PadStackOuterLayer&
PadStack::_Internal::front_outer_layers(const PadStack* msg) {
  return *msg->front_outer_layers_;
}
const ::kiapi::board::types::PadStackOuterLayer&
PadStack::_Internal::back_outer_layers(const PadStack* msg) {
  return *msg->back_outer_layers_;
}
const ::kiapi::board::types::ZoneConnectionSettings&
PadStack::_Internal::zone_settings(const PadStack* msg) {
  return *msg->zone_settings_;
}
void PadStack::clear_angle() {
  if (GetArenaForAllocation() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
}
PadStack::PadStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena),
  copper_layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.PadStack)
}
PadStack::PadStack(const PadStack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_),
      copper_layers_(from.copper_layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drill()) {
    drill_ = new ::kiapi::board::types::DrillProperties(*from.drill_);
  } else {
    drill_ = nullptr;
  }
  if (from._internal_has_angle()) {
    angle_ = new ::kiapi::common::types::Angle(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  if (from._internal_has_front_outer_layers()) {
    front_outer_layers_ = new ::kiapi::board::types::PadStackOuterLayer(*from.front_outer_layers_);
  } else {
    front_outer_layers_ = nullptr;
  }
  if (from._internal_has_back_outer_layers()) {
    back_outer_layers_ = new ::kiapi::board::types::PadStackOuterLayer(*from.back_outer_layers_);
  } else {
    back_outer_layers_ = nullptr;
  }
  if (from._internal_has_zone_settings()) {
    zone_settings_ = new ::kiapi::board::types::ZoneConnectionSettings(*from.zone_settings_);
  } else {
    zone_settings_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&unconnected_layer_removal_) -
    reinterpret_cast<char*>(&type_)) + sizeof(unconnected_layer_removal_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.PadStack)
}

inline void PadStack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unconnected_layer_removal_) -
    reinterpret_cast<char*>(&drill_)) + sizeof(unconnected_layer_removal_));
}

PadStack::~PadStack() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.PadStack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PadStack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete drill_;
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete front_outer_layers_;
  if (this != internal_default_instance()) delete back_outer_layers_;
  if (this != internal_default_instance()) delete zone_settings_;
}

void PadStack::ArenaDtor(void* object) {
  PadStack* _this = reinterpret_cast< PadStack* >(object);
  (void)_this;
}
void PadStack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PadStack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PadStack::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.PadStack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  copper_layers_.Clear();
  if (GetArenaForAllocation() == nullptr && drill_ != nullptr) {
    delete drill_;
  }
  drill_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && front_outer_layers_ != nullptr) {
    delete front_outer_layers_;
  }
  front_outer_layers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_outer_layers_ != nullptr) {
    delete back_outer_layers_;
  }
  back_outer_layers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && zone_settings_ != nullptr) {
    delete zone_settings_;
  }
  zone_settings_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconnected_layer_removal_) -
      reinterpret_cast<char*>(&type_)) + sizeof(unconnected_layer_removal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PadStack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.PadStackType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::types::PadStackType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.BoardLayer layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_layers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_layers(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DrillProperties drill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.UnconnectedLayerRemoval unconnected_layer_removal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unconnected_layer_removal(static_cast<::kiapi::board::types::UnconnectedLayerRemoval>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.PadStackLayer copper_layers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_copper_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Angle angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PadStackOuterLayer front_outer_layers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_outer_layers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PadStackOuterLayer back_outer_layers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_back_outer_layers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_zone_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PadStack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.PadStack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.PadStackType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .kiapi.board.types.BoardLayer layers = 2;
  {
    int byte_size = _layers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, layers_, byte_size, target);
    }
  }

  // .kiapi.board.types.DrillProperties drill = 3;
  if (this->_internal_has_drill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::drill(this), target, stream);
  }

  // .kiapi.board.types.UnconnectedLayerRemoval unconnected_layer_removal = 4;
  if (this->_internal_unconnected_layer_removal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_unconnected_layer_removal(), target);
  }

  // repeated .kiapi.board.types.PadStackLayer copper_layers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_copper_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_copper_layers(i), target, stream);
  }

  // .kiapi.common.types.Angle angle = 6;
  if (this->_internal_has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::angle(this), target, stream);
  }

  // .kiapi.board.types.PadStackOuterLayer front_outer_layers = 7;
  if (this->_internal_has_front_outer_layers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::front_outer_layers(this), target, stream);
  }

  // .kiapi.board.types.PadStackOuterLayer back_outer_layers = 8;
  if (this->_internal_has_back_outer_layers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::back_outer_layers(this), target, stream);
  }

  // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
  if (this->_internal_has_zone_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::zone_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.PadStack)
  return target;
}

size_t PadStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.PadStack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.BoardLayer layers = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_layers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_layers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kiapi.board.types.PadStackLayer copper_layers = 5;
  total_size += 1UL * this->_internal_copper_layers_size();
  for (const auto& msg : this->copper_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.board.types.DrillProperties drill = 3;
  if (this->_internal_has_drill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drill_);
  }

  // .kiapi.common.types.Angle angle = 6;
  if (this->_internal_has_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angle_);
  }

  // .kiapi.board.types.PadStackOuterLayer front_outer_layers = 7;
  if (this->_internal_has_front_outer_layers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_outer_layers_);
  }

  // .kiapi.board.types.PadStackOuterLayer back_outer_layers = 8;
  if (this->_internal_has_back_outer_layers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_outer_layers_);
  }

  // .kiapi.board.types.ZoneConnectionSettings zone_settings = 9;
  if (this->_internal_has_zone_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zone_settings_);
  }

  // .kiapi.board.types.PadStackType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .kiapi.board.types.UnconnectedLayerRemoval unconnected_layer_removal = 4;
  if (this->_internal_unconnected_layer_removal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unconnected_layer_removal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PadStack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PadStack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PadStack::GetClassData() const { return &_class_data_; }

void PadStack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PadStack *>(to)->MergeFrom(
      static_cast<const PadStack &>(from));
}


void PadStack::MergeFrom(const PadStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.PadStack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  copper_layers_.MergeFrom(from.copper_layers_);
  if (from._internal_has_drill()) {
    _internal_mutable_drill()->::kiapi::board::types::DrillProperties::MergeFrom(from._internal_drill());
  }
  if (from._internal_has_angle()) {
    _internal_mutable_angle()->::kiapi::common::types::Angle::MergeFrom(from._internal_angle());
  }
  if (from._internal_has_front_outer_layers()) {
    _internal_mutable_front_outer_layers()->::kiapi::board::types::PadStackOuterLayer::MergeFrom(from._internal_front_outer_layers());
  }
  if (from._internal_has_back_outer_layers()) {
    _internal_mutable_back_outer_layers()->::kiapi::board::types::PadStackOuterLayer::MergeFrom(from._internal_back_outer_layers());
  }
  if (from._internal_has_zone_settings()) {
    _internal_mutable_zone_settings()->::kiapi::board::types::ZoneConnectionSettings::MergeFrom(from._internal_zone_settings());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_unconnected_layer_removal() != 0) {
    _internal_set_unconnected_layer_removal(from._internal_unconnected_layer_removal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PadStack::CopyFrom(const PadStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.PadStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadStack::IsInitialized() const {
  return true;
}

void PadStack::InternalSwap(PadStack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  copper_layers_.InternalSwap(&other->copper_layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PadStack, unconnected_layer_removal_)
      + sizeof(PadStack::unconnected_layer_removal_)
      - PROTOBUF_FIELD_OFFSET(PadStack, drill_)>(
          reinterpret_cast<char*>(&drill_),
          reinterpret_cast<char*>(&other->drill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PadStack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[11]);
}

// ===================================================================

class Via::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const Via* msg);
  static const ::kiapi::common::types::Vector2& position(const Via* msg);
  static const ::kiapi::board::types::PadStack& pad_stack(const Via* msg);
  static const ::kiapi::board::types::Net& net(const Via* msg);
};

const ::kiapi::common::types::KIID&
Via::_Internal::id(const Via* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
Via::_Internal::position(const Via* msg) {
  return *msg->position_;
}
const ::kiapi::board::types::PadStack&
Via::_Internal::pad_stack(const Via* msg) {
  return *msg->pad_stack_;
}
const ::kiapi::board::types::Net&
Via::_Internal::net(const Via* msg) {
  return *msg->net_;
}
void Via::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Via::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
Via::Via(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Via)
}
Via::Via(const Via& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_pad_stack()) {
    pad_stack_ = new ::kiapi::board::types::PadStack(*from.pad_stack_);
  } else {
    pad_stack_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::kiapi::board::types::Net(*from.net_);
  } else {
    net_ = nullptr;
  }
  ::memcpy(&locked_, &from.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&locked_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Via)
}

inline void Via::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Via::~Via() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Via)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Via::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete pad_stack_;
  if (this != internal_default_instance()) delete net_;
}

void Via::ArenaDtor(void* object) {
  Via* _this = reinterpret_cast< Via* >(object);
  (void)_this;
}
void Via::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Via::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Via::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Via)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pad_stack_ != nullptr) {
    delete pad_stack_;
  }
  pad_stack_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Via::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PadStack pad_stack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pad_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Net net = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ViaType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::types::ViaType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Via::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Via)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .kiapi.board.types.PadStack pad_stack = 3;
  if (this->_internal_has_pad_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pad_stack(this), target, stream);
  }

  // .kiapi.common.types.LockedState locked = 4;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_locked(), target);
  }

  // .kiapi.board.types.Net net = 5;
  if (this->_internal_has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::net(this), target, stream);
  }

  // .kiapi.board.types.ViaType type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Via)
  return target;
}

size_t Via::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Via)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.board.types.PadStack pad_stack = 3;
  if (this->_internal_has_pad_stack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pad_stack_);
  }

  // .kiapi.board.types.Net net = 5;
  if (this->_internal_has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .kiapi.common.types.LockedState locked = 4;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  // .kiapi.board.types.ViaType type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Via::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Via::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Via::GetClassData() const { return &_class_data_; }

void Via::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Via *>(to)->MergeFrom(
      static_cast<const Via &>(from));
}


void Via::MergeFrom(const Via& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Via)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_pad_stack()) {
    _internal_mutable_pad_stack()->::kiapi::board::types::PadStack::MergeFrom(from._internal_pad_stack());
  }
  if (from._internal_has_net()) {
    _internal_mutable_net()->::kiapi::board::types::Net::MergeFrom(from._internal_net());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Via::CopyFrom(const Via& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Via)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Via::IsInitialized() const {
  return true;
}

void Via::InternalSwap(Via* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Via, type_)
      + sizeof(Via::type_)
      - PROTOBUF_FIELD_OFFSET(Via, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Via::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[12]);
}

// ===================================================================

class BoardGraphicShape::_Internal {
 public:
  static const ::kiapi::common::types::GraphicShape& shape(const BoardGraphicShape* msg);
  static const ::kiapi::board::types::Net& net(const BoardGraphicShape* msg);
  static const ::kiapi::common::types::KIID& id(const BoardGraphicShape* msg);
};

const ::kiapi::common::types::GraphicShape&
BoardGraphicShape::_Internal::shape(const BoardGraphicShape* msg) {
  return *msg->shape_;
}
const ::kiapi::board::types::Net&
BoardGraphicShape::_Internal::net(const BoardGraphicShape* msg) {
  return *msg->net_;
}
const ::kiapi::common::types::KIID&
BoardGraphicShape::_Internal::id(const BoardGraphicShape* msg) {
  return *msg->id_;
}
void BoardGraphicShape::clear_shape() {
  if (GetArenaForAllocation() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
void BoardGraphicShape::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
BoardGraphicShape::BoardGraphicShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.BoardGraphicShape)
}
BoardGraphicShape::BoardGraphicShape(const BoardGraphicShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::kiapi::common::types::GraphicShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::kiapi::board::types::Net(*from.net_);
  } else {
    net_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.BoardGraphicShape)
}

inline void BoardGraphicShape::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(locked_));
}

BoardGraphicShape::~BoardGraphicShape() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.BoardGraphicShape)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardGraphicShape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete net_;
  if (this != internal_default_instance()) delete id_;
}

void BoardGraphicShape::ArenaDtor(void* object) {
  BoardGraphicShape* _this = reinterpret_cast< BoardGraphicShape* >(object);
  (void)_this;
}
void BoardGraphicShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardGraphicShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardGraphicShape::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.BoardGraphicShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardGraphicShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.GraphicShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Net net = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.KIID id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardGraphicShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.BoardGraphicShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.GraphicShape shape = 1;
  if (this->_internal_has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shape(this), target, stream);
  }

  // .kiapi.board.types.BoardLayer layer = 2;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_layer(), target);
  }

  // .kiapi.board.types.Net net = 3;
  if (this->_internal_has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::net(this), target, stream);
  }

  // .kiapi.common.types.KIID id = 4;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.BoardGraphicShape)
  return target;
}

size_t BoardGraphicShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.BoardGraphicShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.GraphicShape shape = 1;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .kiapi.board.types.Net net = 3;
  if (this->_internal_has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .kiapi.common.types.KIID id = 4;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.board.types.BoardLayer layer = 2;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardGraphicShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardGraphicShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardGraphicShape::GetClassData() const { return &_class_data_; }

void BoardGraphicShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardGraphicShape *>(to)->MergeFrom(
      static_cast<const BoardGraphicShape &>(from));
}


void BoardGraphicShape::MergeFrom(const BoardGraphicShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.BoardGraphicShape)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _internal_mutable_shape()->::kiapi::common::types::GraphicShape::MergeFrom(from._internal_shape());
  }
  if (from._internal_has_net()) {
    _internal_mutable_net()->::kiapi::board::types::Net::MergeFrom(from._internal_net());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardGraphicShape::CopyFrom(const BoardGraphicShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.BoardGraphicShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardGraphicShape::IsInitialized() const {
  return true;
}

void BoardGraphicShape::InternalSwap(BoardGraphicShape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardGraphicShape, locked_)
      + sizeof(BoardGraphicShape::locked_)
      - PROTOBUF_FIELD_OFFSET(BoardGraphicShape, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardGraphicShape::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[13]);
}

// ===================================================================

class BoardText::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const BoardText* msg);
  static const ::kiapi::common::types::Text& text(const BoardText* msg);
};

const ::kiapi::common::types::KIID&
BoardText::_Internal::id(const BoardText* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Text&
BoardText::_Internal::text(const BoardText* msg) {
  return *msg->text_;
}
void BoardText::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void BoardText::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
BoardText::BoardText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.BoardText)
}
BoardText::BoardText(const BoardText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::kiapi::common::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.BoardText)
}

inline void BoardText::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&id_)) + sizeof(locked_));
}

BoardText::~BoardText() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.BoardText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete text_;
}

void BoardText::ArenaDtor(void* object) {
  BoardText* _this = reinterpret_cast< BoardText* >(object);
  (void)_this;
}
void BoardText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardText::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.BoardText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Text text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // bool knockout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          knockout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.BoardText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Text text = 2;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text(this), target, stream);
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_layer(), target);
  }

  // bool knockout = 4;
  if (this->_internal_knockout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_knockout(), target);
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.BoardText)
  return target;
}

size_t BoardText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.BoardText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Text text = 2;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  // bool knockout = 4;
  if (this->_internal_knockout() != 0) {
    total_size += 1 + 1;
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardText::GetClassData() const { return &_class_data_; }

void BoardText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardText *>(to)->MergeFrom(
      static_cast<const BoardText &>(from));
}


void BoardText::MergeFrom(const BoardText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.BoardText)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::common::types::Text::MergeFrom(from._internal_text());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from._internal_knockout() != 0) {
    _internal_set_knockout(from._internal_knockout());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardText::CopyFrom(const BoardText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.BoardText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardText::IsInitialized() const {
  return true;
}

void BoardText::InternalSwap(BoardText* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardText, locked_)
      + sizeof(BoardText::locked_)
      - PROTOBUF_FIELD_OFFSET(BoardText, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[14]);
}

// ===================================================================

class BoardTextBox::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const BoardTextBox* msg);
  static const ::kiapi::common::types::TextBox& textbox(const BoardTextBox* msg);
};

const ::kiapi::common::types::KIID&
BoardTextBox::_Internal::id(const BoardTextBox* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::TextBox&
BoardTextBox::_Internal::textbox(const BoardTextBox* msg) {
  return *msg->textbox_;
}
void BoardTextBox::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void BoardTextBox::clear_textbox() {
  if (GetArenaForAllocation() == nullptr && textbox_ != nullptr) {
    delete textbox_;
  }
  textbox_ = nullptr;
}
BoardTextBox::BoardTextBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.BoardTextBox)
}
BoardTextBox::BoardTextBox(const BoardTextBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_textbox()) {
    textbox_ = new ::kiapi::common::types::TextBox(*from.textbox_);
  } else {
    textbox_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.BoardTextBox)
}

inline void BoardTextBox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&id_)) + sizeof(locked_));
}

BoardTextBox::~BoardTextBox() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.BoardTextBox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoardTextBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete textbox_;
}

void BoardTextBox::ArenaDtor(void* object) {
  BoardTextBox* _this = reinterpret_cast< BoardTextBox* >(object);
  (void)_this;
}
void BoardTextBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoardTextBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardTextBox::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.BoardTextBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && textbox_ != nullptr) {
    delete textbox_;
  }
  textbox_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardTextBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.TextBox textbox = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_textbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardTextBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.BoardTextBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.TextBox textbox = 2;
  if (this->_internal_has_textbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::textbox(this), target, stream);
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_layer(), target);
  }

  // .kiapi.common.types.LockedState locked = 4;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.BoardTextBox)
  return target;
}

size_t BoardTextBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.BoardTextBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.TextBox textbox = 2;
  if (this->_internal_has_textbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *textbox_);
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  // .kiapi.common.types.LockedState locked = 4;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardTextBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardTextBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardTextBox::GetClassData() const { return &_class_data_; }

void BoardTextBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardTextBox *>(to)->MergeFrom(
      static_cast<const BoardTextBox &>(from));
}


void BoardTextBox::MergeFrom(const BoardTextBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.BoardTextBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_textbox()) {
    _internal_mutable_textbox()->::kiapi::common::types::TextBox::MergeFrom(from._internal_textbox());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardTextBox::CopyFrom(const BoardTextBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.BoardTextBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardTextBox::IsInitialized() const {
  return true;
}

void BoardTextBox::InternalSwap(BoardTextBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardTextBox, locked_)
      + sizeof(BoardTextBox::locked_)
      - PROTOBUF_FIELD_OFFSET(BoardTextBox, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardTextBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[15]);
}

// ===================================================================

class ThermalSpokeSettings::_Internal {
 public:
  static const ::kiapi::common::types::Distance& width(const ThermalSpokeSettings* msg);
  static const ::kiapi::common::types::Angle& angle(const ThermalSpokeSettings* msg);
  static const ::kiapi::common::types::Distance& gap(const ThermalSpokeSettings* msg);
};

const ::kiapi::common::types::Distance&
ThermalSpokeSettings::_Internal::width(const ThermalSpokeSettings* msg) {
  return *msg->width_;
}
const ::kiapi::common::types::Angle&
ThermalSpokeSettings::_Internal::angle(const ThermalSpokeSettings* msg) {
  return *msg->angle_;
}
const ::kiapi::common::types::Distance&
ThermalSpokeSettings::_Internal::gap(const ThermalSpokeSettings* msg) {
  return *msg->gap_;
}
void ThermalSpokeSettings::clear_width() {
  if (GetArenaForAllocation() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
void ThermalSpokeSettings::clear_angle() {
  if (GetArenaForAllocation() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
}
void ThermalSpokeSettings::clear_gap() {
  if (GetArenaForAllocation() == nullptr && gap_ != nullptr) {
    delete gap_;
  }
  gap_ = nullptr;
}
ThermalSpokeSettings::ThermalSpokeSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.ThermalSpokeSettings)
}
ThermalSpokeSettings::ThermalSpokeSettings(const ThermalSpokeSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_width()) {
    width_ = new ::kiapi::common::types::Distance(*from.width_);
  } else {
    width_ = nullptr;
  }
  if (from._internal_has_angle()) {
    angle_ = new ::kiapi::common::types::Angle(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  if (from._internal_has_gap()) {
    gap_ = new ::kiapi::common::types::Distance(*from.gap_);
  } else {
    gap_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.ThermalSpokeSettings)
}

inline void ThermalSpokeSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gap_) -
    reinterpret_cast<char*>(&width_)) + sizeof(gap_));
}

ThermalSpokeSettings::~ThermalSpokeSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.ThermalSpokeSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThermalSpokeSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete width_;
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete gap_;
}

void ThermalSpokeSettings::ArenaDtor(void* object) {
  ThermalSpokeSettings* _this = reinterpret_cast< ThermalSpokeSettings* >(object);
  (void)_this;
}
void ThermalSpokeSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalSpokeSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThermalSpokeSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.ThermalSpokeSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gap_ != nullptr) {
    delete gap_;
  }
  gap_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalSpokeSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Distance width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Angle angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance gap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThermalSpokeSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.ThermalSpokeSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Distance width = 1;
  if (this->_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::width(this), target, stream);
  }

  // .kiapi.common.types.Angle angle = 2;
  if (this->_internal_has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angle(this), target, stream);
  }

  // .kiapi.common.types.Distance gap = 3;
  if (this->_internal_has_gap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.ThermalSpokeSettings)
  return target;
}

size_t ThermalSpokeSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.ThermalSpokeSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Distance width = 1;
  if (this->_internal_has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  // .kiapi.common.types.Angle angle = 2;
  if (this->_internal_has_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angle_);
  }

  // .kiapi.common.types.Distance gap = 3;
  if (this->_internal_has_gap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gap_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThermalSpokeSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThermalSpokeSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThermalSpokeSettings::GetClassData() const { return &_class_data_; }

void ThermalSpokeSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThermalSpokeSettings *>(to)->MergeFrom(
      static_cast<const ThermalSpokeSettings &>(from));
}


void ThermalSpokeSettings::MergeFrom(const ThermalSpokeSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.ThermalSpokeSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_width()) {
    _internal_mutable_width()->::kiapi::common::types::Distance::MergeFrom(from._internal_width());
  }
  if (from._internal_has_angle()) {
    _internal_mutable_angle()->::kiapi::common::types::Angle::MergeFrom(from._internal_angle());
  }
  if (from._internal_has_gap()) {
    _internal_mutable_gap()->::kiapi::common::types::Distance::MergeFrom(from._internal_gap());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThermalSpokeSettings::CopyFrom(const ThermalSpokeSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.ThermalSpokeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalSpokeSettings::IsInitialized() const {
  return true;
}

void ThermalSpokeSettings::InternalSwap(ThermalSpokeSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalSpokeSettings, gap_)
      + sizeof(ThermalSpokeSettings::gap_)
      - PROTOBUF_FIELD_OFFSET(ThermalSpokeSettings, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalSpokeSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[16]);
}

// ===================================================================

class Pad::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const Pad* msg);
  static const ::kiapi::board::types::Net& net(const Pad* msg);
  static const ::kiapi::board::types::PadStack& pad_stack(const Pad* msg);
  static const ::kiapi::common::types::Vector2& position(const Pad* msg);
  static const ::kiapi::common::types::Distance& copper_clearance_override(const Pad* msg);
};

const ::kiapi::common::types::KIID&
Pad::_Internal::id(const Pad* msg) {
  return *msg->id_;
}
const ::kiapi::board::types::Net&
Pad::_Internal::net(const Pad* msg) {
  return *msg->net_;
}
const ::kiapi::board::types::PadStack&
Pad::_Internal::pad_stack(const Pad* msg) {
  return *msg->pad_stack_;
}
const ::kiapi::common::types::Vector2&
Pad::_Internal::position(const Pad* msg) {
  return *msg->position_;
}
const ::kiapi::common::types::Distance&
Pad::_Internal::copper_clearance_override(const Pad* msg) {
  return *msg->copper_clearance_override_;
}
void Pad::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Pad::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Pad::clear_copper_clearance_override() {
  if (GetArenaForAllocation() == nullptr && copper_clearance_override_ != nullptr) {
    delete copper_clearance_override_;
  }
  copper_clearance_override_ = nullptr;
}
Pad::Pad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Pad)
}
Pad::Pad(const Pad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_number(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::kiapi::board::types::Net(*from.net_);
  } else {
    net_ = nullptr;
  }
  if (from._internal_has_pad_stack()) {
    pad_stack_ = new ::kiapi::board::types::PadStack(*from.pad_stack_);
  } else {
    pad_stack_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_copper_clearance_override()) {
    copper_clearance_override_ = new ::kiapi::common::types::Distance(*from.copper_clearance_override_);
  } else {
    copper_clearance_override_ = nullptr;
  }
  ::memcpy(&locked_, &from.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&locked_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Pad)
}

inline void Pad::SharedCtor() {
number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Pad::~Pad() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Pad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete net_;
  if (this != internal_default_instance()) delete pad_stack_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete copper_clearance_override_;
}

void Pad::ArenaDtor(void* object) {
  Pad* _this = reinterpret_cast< Pad* >(object);
  (void)_this;
}
void Pad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pad::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Pad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pad_stack_ != nullptr) {
    delete pad_stack_;
  }
  pad_stack_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && copper_clearance_override_ != nullptr) {
    delete copper_clearance_override_;
  }
  copper_clearance_override_ = nullptr;
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      // string number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Pad.number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Net net = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PadType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::types::PadType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PadStack pad_stack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pad_stack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance copper_clearance_override = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_copper_clearance_override(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Pad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.LockedState locked = 2;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_locked(), target);
  }

  // string number = 3;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Pad.number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_number(), target);
  }

  // .kiapi.board.types.Net net = 4;
  if (this->_internal_has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::net(this), target, stream);
  }

  // .kiapi.board.types.PadType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // .kiapi.board.types.PadStack pad_stack = 6;
  if (this->_internal_has_pad_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pad_stack(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 7;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // .kiapi.common.types.Distance copper_clearance_override = 8;
  if (this->_internal_has_copper_clearance_override()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::copper_clearance_override(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Pad)
  return target;
}

size_t Pad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Pad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string number = 3;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.board.types.Net net = 4;
  if (this->_internal_has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .kiapi.board.types.PadStack pad_stack = 6;
  if (this->_internal_has_pad_stack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pad_stack_);
  }

  // .kiapi.common.types.Vector2 position = 7;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.common.types.Distance copper_clearance_override = 8;
  if (this->_internal_has_copper_clearance_override()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copper_clearance_override_);
  }

  // .kiapi.common.types.LockedState locked = 2;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  // .kiapi.board.types.PadType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pad::GetClassData() const { return &_class_data_; }

void Pad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pad *>(to)->MergeFrom(
      static_cast<const Pad &>(from));
}


void Pad::MergeFrom(const Pad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Pad)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_number().empty()) {
    _internal_set_number(from._internal_number());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_net()) {
    _internal_mutable_net()->::kiapi::board::types::Net::MergeFrom(from._internal_net());
  }
  if (from._internal_has_pad_stack()) {
    _internal_mutable_pad_stack()->::kiapi::board::types::PadStack::MergeFrom(from._internal_pad_stack());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_copper_clearance_override()) {
    _internal_mutable_copper_clearance_override()->::kiapi::common::types::Distance::MergeFrom(from._internal_copper_clearance_override());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pad::CopyFrom(const Pad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Pad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pad::IsInitialized() const {
  return true;
}

void Pad::InternalSwap(Pad* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &number_, lhs_arena,
      &other->number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pad, type_)
      + sizeof(Pad::type_)
      - PROTOBUF_FIELD_OFFSET(Pad, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[17]);
}

// ===================================================================

class HatchFillSettings::_Internal {
 public:
  static const ::kiapi::common::types::Distance& thickness(const HatchFillSettings* msg);
  static const ::kiapi::common::types::Distance& gap(const HatchFillSettings* msg);
  static const ::kiapi::common::types::Angle& orientation(const HatchFillSettings* msg);
};

const ::kiapi::common::types::Distance&
HatchFillSettings::_Internal::thickness(const HatchFillSettings* msg) {
  return *msg->thickness_;
}
const ::kiapi::common::types::Distance&
HatchFillSettings::_Internal::gap(const HatchFillSettings* msg) {
  return *msg->gap_;
}
const ::kiapi::common::types::Angle&
HatchFillSettings::_Internal::orientation(const HatchFillSettings* msg) {
  return *msg->orientation_;
}
void HatchFillSettings::clear_thickness() {
  if (GetArenaForAllocation() == nullptr && thickness_ != nullptr) {
    delete thickness_;
  }
  thickness_ = nullptr;
}
void HatchFillSettings::clear_gap() {
  if (GetArenaForAllocation() == nullptr && gap_ != nullptr) {
    delete gap_;
  }
  gap_ = nullptr;
}
void HatchFillSettings::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
HatchFillSettings::HatchFillSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.HatchFillSettings)
}
HatchFillSettings::HatchFillSettings(const HatchFillSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_thickness()) {
    thickness_ = new ::kiapi::common::types::Distance(*from.thickness_);
  } else {
    thickness_ = nullptr;
  }
  if (from._internal_has_gap()) {
    gap_ = new ::kiapi::common::types::Distance(*from.gap_);
  } else {
    gap_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::kiapi::common::types::Angle(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&hatch_smoothing_ratio_, &from.hatch_smoothing_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&border_mode_) -
    reinterpret_cast<char*>(&hatch_smoothing_ratio_)) + sizeof(border_mode_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.HatchFillSettings)
}

inline void HatchFillSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&thickness_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&border_mode_) -
    reinterpret_cast<char*>(&thickness_)) + sizeof(border_mode_));
}

HatchFillSettings::~HatchFillSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.HatchFillSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HatchFillSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete thickness_;
  if (this != internal_default_instance()) delete gap_;
  if (this != internal_default_instance()) delete orientation_;
}

void HatchFillSettings::ArenaDtor(void* object) {
  HatchFillSettings* _this = reinterpret_cast< HatchFillSettings* >(object);
  (void)_this;
}
void HatchFillSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HatchFillSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HatchFillSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.HatchFillSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && thickness_ != nullptr) {
    delete thickness_;
  }
  thickness_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gap_ != nullptr) {
    delete gap_;
  }
  gap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&hatch_smoothing_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&border_mode_) -
      reinterpret_cast<char*>(&hatch_smoothing_ratio_)) + sizeof(border_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HatchFillSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Distance thickness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_thickness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance gap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Angle orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double hatch_smoothing_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          hatch_smoothing_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double hatch_hole_min_area_ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          hatch_hole_min_area_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ZoneHatchFillBorderMode border_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_border_mode(static_cast<::kiapi::board::types::ZoneHatchFillBorderMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HatchFillSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.HatchFillSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Distance thickness = 1;
  if (this->_internal_has_thickness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::thickness(this), target, stream);
  }

  // .kiapi.common.types.Distance gap = 2;
  if (this->_internal_has_gap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gap(this), target, stream);
  }

  // .kiapi.common.types.Angle orientation = 3;
  if (this->_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // double hatch_smoothing_ratio = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hatch_smoothing_ratio = this->_internal_hatch_smoothing_ratio();
  uint64_t raw_hatch_smoothing_ratio;
  memcpy(&raw_hatch_smoothing_ratio, &tmp_hatch_smoothing_ratio, sizeof(tmp_hatch_smoothing_ratio));
  if (raw_hatch_smoothing_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_hatch_smoothing_ratio(), target);
  }

  // double hatch_hole_min_area_ratio = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hatch_hole_min_area_ratio = this->_internal_hatch_hole_min_area_ratio();
  uint64_t raw_hatch_hole_min_area_ratio;
  memcpy(&raw_hatch_hole_min_area_ratio, &tmp_hatch_hole_min_area_ratio, sizeof(tmp_hatch_hole_min_area_ratio));
  if (raw_hatch_hole_min_area_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_hatch_hole_min_area_ratio(), target);
  }

  // .kiapi.board.types.ZoneHatchFillBorderMode border_mode = 6;
  if (this->_internal_border_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_border_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.HatchFillSettings)
  return target;
}

size_t HatchFillSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.HatchFillSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Distance thickness = 1;
  if (this->_internal_has_thickness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thickness_);
  }

  // .kiapi.common.types.Distance gap = 2;
  if (this->_internal_has_gap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gap_);
  }

  // .kiapi.common.types.Angle orientation = 3;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // double hatch_smoothing_ratio = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hatch_smoothing_ratio = this->_internal_hatch_smoothing_ratio();
  uint64_t raw_hatch_smoothing_ratio;
  memcpy(&raw_hatch_smoothing_ratio, &tmp_hatch_smoothing_ratio, sizeof(tmp_hatch_smoothing_ratio));
  if (raw_hatch_smoothing_ratio != 0) {
    total_size += 1 + 8;
  }

  // double hatch_hole_min_area_ratio = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hatch_hole_min_area_ratio = this->_internal_hatch_hole_min_area_ratio();
  uint64_t raw_hatch_hole_min_area_ratio;
  memcpy(&raw_hatch_hole_min_area_ratio, &tmp_hatch_hole_min_area_ratio, sizeof(tmp_hatch_hole_min_area_ratio));
  if (raw_hatch_hole_min_area_ratio != 0) {
    total_size += 1 + 8;
  }

  // .kiapi.board.types.ZoneHatchFillBorderMode border_mode = 6;
  if (this->_internal_border_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_border_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HatchFillSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HatchFillSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HatchFillSettings::GetClassData() const { return &_class_data_; }

void HatchFillSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HatchFillSettings *>(to)->MergeFrom(
      static_cast<const HatchFillSettings &>(from));
}


void HatchFillSettings::MergeFrom(const HatchFillSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.HatchFillSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thickness()) {
    _internal_mutable_thickness()->::kiapi::common::types::Distance::MergeFrom(from._internal_thickness());
  }
  if (from._internal_has_gap()) {
    _internal_mutable_gap()->::kiapi::common::types::Distance::MergeFrom(from._internal_gap());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::kiapi::common::types::Angle::MergeFrom(from._internal_orientation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hatch_smoothing_ratio = from._internal_hatch_smoothing_ratio();
  uint64_t raw_hatch_smoothing_ratio;
  memcpy(&raw_hatch_smoothing_ratio, &tmp_hatch_smoothing_ratio, sizeof(tmp_hatch_smoothing_ratio));
  if (raw_hatch_smoothing_ratio != 0) {
    _internal_set_hatch_smoothing_ratio(from._internal_hatch_smoothing_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hatch_hole_min_area_ratio = from._internal_hatch_hole_min_area_ratio();
  uint64_t raw_hatch_hole_min_area_ratio;
  memcpy(&raw_hatch_hole_min_area_ratio, &tmp_hatch_hole_min_area_ratio, sizeof(tmp_hatch_hole_min_area_ratio));
  if (raw_hatch_hole_min_area_ratio != 0) {
    _internal_set_hatch_hole_min_area_ratio(from._internal_hatch_hole_min_area_ratio());
  }
  if (from._internal_border_mode() != 0) {
    _internal_set_border_mode(from._internal_border_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HatchFillSettings::CopyFrom(const HatchFillSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.HatchFillSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HatchFillSettings::IsInitialized() const {
  return true;
}

void HatchFillSettings::InternalSwap(HatchFillSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HatchFillSettings, border_mode_)
      + sizeof(HatchFillSettings::border_mode_)
      - PROTOBUF_FIELD_OFFSET(HatchFillSettings, thickness_)>(
          reinterpret_cast<char*>(&thickness_),
          reinterpret_cast<char*>(&other->thickness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HatchFillSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[18]);
}

// ===================================================================

class TeardropSettings::_Internal {
 public:
};

TeardropSettings::TeardropSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.TeardropSettings)
}
TeardropSettings::TeardropSettings(const TeardropSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.TeardropSettings)
}

inline void TeardropSettings::SharedCtor() {
type_ = 0;
}

TeardropSettings::~TeardropSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.TeardropSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TeardropSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeardropSettings::ArenaDtor(void* object) {
  TeardropSettings* _this = reinterpret_cast< TeardropSettings* >(object);
  (void)_this;
}
void TeardropSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeardropSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeardropSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.TeardropSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeardropSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.TeardropType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::types::TeardropType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeardropSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.TeardropSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.TeardropType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.TeardropSettings)
  return target;
}

size_t TeardropSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.TeardropSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.types.TeardropType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeardropSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeardropSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeardropSettings::GetClassData() const { return &_class_data_; }

void TeardropSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeardropSettings *>(to)->MergeFrom(
      static_cast<const TeardropSettings &>(from));
}


void TeardropSettings::MergeFrom(const TeardropSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.TeardropSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeardropSettings::CopyFrom(const TeardropSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.TeardropSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeardropSettings::IsInitialized() const {
  return true;
}

void TeardropSettings::InternalSwap(TeardropSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeardropSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[19]);
}

// ===================================================================

class CopperZoneSettings::_Internal {
 public:
  static const ::kiapi::board::types::ZoneConnectionSettings& connection(const CopperZoneSettings* msg);
  static const ::kiapi::common::types::Distance& clearance(const CopperZoneSettings* msg);
  static const ::kiapi::common::types::Distance& min_thickness(const CopperZoneSettings* msg);
  static const ::kiapi::board::types::HatchFillSettings& hatch_settings(const CopperZoneSettings* msg);
  static const ::kiapi::board::types::Net& net(const CopperZoneSettings* msg);
  static const ::kiapi::board::types::TeardropSettings& teardrop(const CopperZoneSettings* msg);
};

const ::kiapi::board::types::ZoneConnectionSettings&
CopperZoneSettings::_Internal::connection(const CopperZoneSettings* msg) {
  return *msg->connection_;
}
const ::kiapi::common::types::Distance&
CopperZoneSettings::_Internal::clearance(const CopperZoneSettings* msg) {
  return *msg->clearance_;
}
const ::kiapi::common::types::Distance&
CopperZoneSettings::_Internal::min_thickness(const CopperZoneSettings* msg) {
  return *msg->min_thickness_;
}
const ::kiapi::board::types::HatchFillSettings&
CopperZoneSettings::_Internal::hatch_settings(const CopperZoneSettings* msg) {
  return *msg->hatch_settings_;
}
const ::kiapi::board::types::Net&
CopperZoneSettings::_Internal::net(const CopperZoneSettings* msg) {
  return *msg->net_;
}
const ::kiapi::board::types::TeardropSettings&
CopperZoneSettings::_Internal::teardrop(const CopperZoneSettings* msg) {
  return *msg->teardrop_;
}
void CopperZoneSettings::clear_clearance() {
  if (GetArenaForAllocation() == nullptr && clearance_ != nullptr) {
    delete clearance_;
  }
  clearance_ = nullptr;
}
void CopperZoneSettings::clear_min_thickness() {
  if (GetArenaForAllocation() == nullptr && min_thickness_ != nullptr) {
    delete min_thickness_;
  }
  min_thickness_ = nullptr;
}
CopperZoneSettings::CopperZoneSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.CopperZoneSettings)
}
CopperZoneSettings::CopperZoneSettings(const CopperZoneSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection()) {
    connection_ = new ::kiapi::board::types::ZoneConnectionSettings(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  if (from._internal_has_clearance()) {
    clearance_ = new ::kiapi::common::types::Distance(*from.clearance_);
  } else {
    clearance_ = nullptr;
  }
  if (from._internal_has_min_thickness()) {
    min_thickness_ = new ::kiapi::common::types::Distance(*from.min_thickness_);
  } else {
    min_thickness_ = nullptr;
  }
  if (from._internal_has_hatch_settings()) {
    hatch_settings_ = new ::kiapi::board::types::HatchFillSettings(*from.hatch_settings_);
  } else {
    hatch_settings_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::kiapi::board::types::Net(*from.net_);
  } else {
    net_ = nullptr;
  }
  if (from._internal_has_teardrop()) {
    teardrop_ = new ::kiapi::board::types::TeardropSettings(*from.teardrop_);
  } else {
    teardrop_ = nullptr;
  }
  ::memcpy(&min_island_area_, &from.min_island_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&fill_mode_) -
    reinterpret_cast<char*>(&min_island_area_)) + sizeof(fill_mode_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.CopperZoneSettings)
}

inline void CopperZoneSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fill_mode_) -
    reinterpret_cast<char*>(&connection_)) + sizeof(fill_mode_));
}

CopperZoneSettings::~CopperZoneSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.CopperZoneSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CopperZoneSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete connection_;
  if (this != internal_default_instance()) delete clearance_;
  if (this != internal_default_instance()) delete min_thickness_;
  if (this != internal_default_instance()) delete hatch_settings_;
  if (this != internal_default_instance()) delete net_;
  if (this != internal_default_instance()) delete teardrop_;
}

void CopperZoneSettings::ArenaDtor(void* object) {
  CopperZoneSettings* _this = reinterpret_cast< CopperZoneSettings* >(object);
  (void)_this;
}
void CopperZoneSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CopperZoneSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CopperZoneSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.CopperZoneSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && clearance_ != nullptr) {
    delete clearance_;
  }
  clearance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_thickness_ != nullptr) {
    delete min_thickness_;
  }
  min_thickness_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hatch_settings_ != nullptr) {
    delete hatch_settings_;
  }
  hatch_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  if (GetArenaForAllocation() == nullptr && teardrop_ != nullptr) {
    delete teardrop_;
  }
  teardrop_ = nullptr;
  ::memset(&min_island_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fill_mode_) -
      reinterpret_cast<char*>(&min_island_area_)) + sizeof(fill_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopperZoneSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.ZoneConnectionSettings connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance clearance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance min_thickness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_thickness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.IslandRemovalMode island_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_island_mode(static_cast<::kiapi::board::types::IslandRemovalMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 min_island_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          min_island_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ZoneFillMode fill_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fill_mode(static_cast<::kiapi::board::types::ZoneFillMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.HatchFillSettings hatch_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hatch_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Net net = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.TeardropSettings teardrop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_teardrop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CopperZoneSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.CopperZoneSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.ZoneConnectionSettings connection = 1;
  if (this->_internal_has_connection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::connection(this), target, stream);
  }

  // .kiapi.common.types.Distance clearance = 2;
  if (this->_internal_has_clearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clearance(this), target, stream);
  }

  // .kiapi.common.types.Distance min_thickness = 3;
  if (this->_internal_has_min_thickness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::min_thickness(this), target, stream);
  }

  // .kiapi.board.types.IslandRemovalMode island_mode = 4;
  if (this->_internal_island_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_island_mode(), target);
  }

  // uint64 min_island_area = 5;
  if (this->_internal_min_island_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_min_island_area(), target);
  }

  // .kiapi.board.types.ZoneFillMode fill_mode = 6;
  if (this->_internal_fill_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_fill_mode(), target);
  }

  // .kiapi.board.types.HatchFillSettings hatch_settings = 7;
  if (this->_internal_has_hatch_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::hatch_settings(this), target, stream);
  }

  // .kiapi.board.types.Net net = 8;
  if (this->_internal_has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::net(this), target, stream);
  }

  // .kiapi.board.types.TeardropSettings teardrop = 9;
  if (this->_internal_has_teardrop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::teardrop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.CopperZoneSettings)
  return target;
}

size_t CopperZoneSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.CopperZoneSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.types.ZoneConnectionSettings connection = 1;
  if (this->_internal_has_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .kiapi.common.types.Distance clearance = 2;
  if (this->_internal_has_clearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clearance_);
  }

  // .kiapi.common.types.Distance min_thickness = 3;
  if (this->_internal_has_min_thickness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_thickness_);
  }

  // .kiapi.board.types.HatchFillSettings hatch_settings = 7;
  if (this->_internal_has_hatch_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hatch_settings_);
  }

  // .kiapi.board.types.Net net = 8;
  if (this->_internal_has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .kiapi.board.types.TeardropSettings teardrop = 9;
  if (this->_internal_has_teardrop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teardrop_);
  }

  // uint64 min_island_area = 5;
  if (this->_internal_min_island_area() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_min_island_area());
  }

  // .kiapi.board.types.IslandRemovalMode island_mode = 4;
  if (this->_internal_island_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_island_mode());
  }

  // .kiapi.board.types.ZoneFillMode fill_mode = 6;
  if (this->_internal_fill_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fill_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopperZoneSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CopperZoneSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopperZoneSettings::GetClassData() const { return &_class_data_; }

void CopperZoneSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CopperZoneSettings *>(to)->MergeFrom(
      static_cast<const CopperZoneSettings &>(from));
}


void CopperZoneSettings::MergeFrom(const CopperZoneSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.CopperZoneSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection()) {
    _internal_mutable_connection()->::kiapi::board::types::ZoneConnectionSettings::MergeFrom(from._internal_connection());
  }
  if (from._internal_has_clearance()) {
    _internal_mutable_clearance()->::kiapi::common::types::Distance::MergeFrom(from._internal_clearance());
  }
  if (from._internal_has_min_thickness()) {
    _internal_mutable_min_thickness()->::kiapi::common::types::Distance::MergeFrom(from._internal_min_thickness());
  }
  if (from._internal_has_hatch_settings()) {
    _internal_mutable_hatch_settings()->::kiapi::board::types::HatchFillSettings::MergeFrom(from._internal_hatch_settings());
  }
  if (from._internal_has_net()) {
    _internal_mutable_net()->::kiapi::board::types::Net::MergeFrom(from._internal_net());
  }
  if (from._internal_has_teardrop()) {
    _internal_mutable_teardrop()->::kiapi::board::types::TeardropSettings::MergeFrom(from._internal_teardrop());
  }
  if (from._internal_min_island_area() != 0) {
    _internal_set_min_island_area(from._internal_min_island_area());
  }
  if (from._internal_island_mode() != 0) {
    _internal_set_island_mode(from._internal_island_mode());
  }
  if (from._internal_fill_mode() != 0) {
    _internal_set_fill_mode(from._internal_fill_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CopperZoneSettings::CopyFrom(const CopperZoneSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.CopperZoneSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopperZoneSettings::IsInitialized() const {
  return true;
}

void CopperZoneSettings::InternalSwap(CopperZoneSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CopperZoneSettings, fill_mode_)
      + sizeof(CopperZoneSettings::fill_mode_)
      - PROTOBUF_FIELD_OFFSET(CopperZoneSettings, connection_)>(
          reinterpret_cast<char*>(&connection_),
          reinterpret_cast<char*>(&other->connection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CopperZoneSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[20]);
}

// ===================================================================

class RuleAreaSettings::_Internal {
 public:
};

RuleAreaSettings::RuleAreaSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.RuleAreaSettings)
}
RuleAreaSettings::RuleAreaSettings(const RuleAreaSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placement_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    placement_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placement_source().empty()) {
    placement_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placement_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&keepout_copper_, &from.keepout_copper_,
    static_cast<size_t>(reinterpret_cast<char*>(&placement_source_type_) -
    reinterpret_cast<char*>(&keepout_copper_)) + sizeof(placement_source_type_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.RuleAreaSettings)
}

inline void RuleAreaSettings::SharedCtor() {
placement_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  placement_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&keepout_copper_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&placement_source_type_) -
    reinterpret_cast<char*>(&keepout_copper_)) + sizeof(placement_source_type_));
}

RuleAreaSettings::~RuleAreaSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.RuleAreaSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuleAreaSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  placement_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuleAreaSettings::ArenaDtor(void* object) {
  RuleAreaSettings* _this = reinterpret_cast< RuleAreaSettings* >(object);
  (void)_this;
}
void RuleAreaSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleAreaSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleAreaSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.RuleAreaSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placement_source_.ClearToEmpty();
  ::memset(&keepout_copper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&placement_source_type_) -
      reinterpret_cast<char*>(&keepout_copper_)) + sizeof(placement_source_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleAreaSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool keepout_copper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          keepout_copper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keepout_vias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          keepout_vias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keepout_tracks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          keepout_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keepout_pads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          keepout_pads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keepout_footprints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          keepout_footprints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool placement_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          placement_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.PlacementRuleSourceType placement_source_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_placement_source_type(static_cast<::kiapi::board::types::PlacementRuleSourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // string placement_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_placement_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.RuleAreaSettings.placement_source"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleAreaSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.RuleAreaSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keepout_copper = 1;
  if (this->_internal_keepout_copper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_keepout_copper(), target);
  }

  // bool keepout_vias = 2;
  if (this->_internal_keepout_vias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_keepout_vias(), target);
  }

  // bool keepout_tracks = 3;
  if (this->_internal_keepout_tracks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_keepout_tracks(), target);
  }

  // bool keepout_pads = 4;
  if (this->_internal_keepout_pads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_keepout_pads(), target);
  }

  // bool keepout_footprints = 5;
  if (this->_internal_keepout_footprints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_keepout_footprints(), target);
  }

  // bool placement_enabled = 6;
  if (this->_internal_placement_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_placement_enabled(), target);
  }

  // .kiapi.board.types.PlacementRuleSourceType placement_source_type = 7;
  if (this->_internal_placement_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_placement_source_type(), target);
  }

  // string placement_source = 8;
  if (!this->_internal_placement_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placement_source().data(), static_cast<int>(this->_internal_placement_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.RuleAreaSettings.placement_source");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_placement_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.RuleAreaSettings)
  return target;
}

size_t RuleAreaSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.RuleAreaSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string placement_source = 8;
  if (!this->_internal_placement_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placement_source());
  }

  // bool keepout_copper = 1;
  if (this->_internal_keepout_copper() != 0) {
    total_size += 1 + 1;
  }

  // bool keepout_vias = 2;
  if (this->_internal_keepout_vias() != 0) {
    total_size += 1 + 1;
  }

  // bool keepout_tracks = 3;
  if (this->_internal_keepout_tracks() != 0) {
    total_size += 1 + 1;
  }

  // bool keepout_pads = 4;
  if (this->_internal_keepout_pads() != 0) {
    total_size += 1 + 1;
  }

  // bool keepout_footprints = 5;
  if (this->_internal_keepout_footprints() != 0) {
    total_size += 1 + 1;
  }

  // bool placement_enabled = 6;
  if (this->_internal_placement_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .kiapi.board.types.PlacementRuleSourceType placement_source_type = 7;
  if (this->_internal_placement_source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_placement_source_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleAreaSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleAreaSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleAreaSettings::GetClassData() const { return &_class_data_; }

void RuleAreaSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleAreaSettings *>(to)->MergeFrom(
      static_cast<const RuleAreaSettings &>(from));
}


void RuleAreaSettings::MergeFrom(const RuleAreaSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.RuleAreaSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_placement_source().empty()) {
    _internal_set_placement_source(from._internal_placement_source());
  }
  if (from._internal_keepout_copper() != 0) {
    _internal_set_keepout_copper(from._internal_keepout_copper());
  }
  if (from._internal_keepout_vias() != 0) {
    _internal_set_keepout_vias(from._internal_keepout_vias());
  }
  if (from._internal_keepout_tracks() != 0) {
    _internal_set_keepout_tracks(from._internal_keepout_tracks());
  }
  if (from._internal_keepout_pads() != 0) {
    _internal_set_keepout_pads(from._internal_keepout_pads());
  }
  if (from._internal_keepout_footprints() != 0) {
    _internal_set_keepout_footprints(from._internal_keepout_footprints());
  }
  if (from._internal_placement_enabled() != 0) {
    _internal_set_placement_enabled(from._internal_placement_enabled());
  }
  if (from._internal_placement_source_type() != 0) {
    _internal_set_placement_source_type(from._internal_placement_source_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleAreaSettings::CopyFrom(const RuleAreaSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.RuleAreaSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleAreaSettings::IsInitialized() const {
  return true;
}

void RuleAreaSettings::InternalSwap(RuleAreaSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placement_source_, lhs_arena,
      &other->placement_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuleAreaSettings, placement_source_type_)
      + sizeof(RuleAreaSettings::placement_source_type_)
      - PROTOBUF_FIELD_OFFSET(RuleAreaSettings, keepout_copper_)>(
          reinterpret_cast<char*>(&keepout_copper_),
          reinterpret_cast<char*>(&other->keepout_copper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleAreaSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[21]);
}

// ===================================================================

class ZoneBorderSettings::_Internal {
 public:
  static const ::kiapi::common::types::Distance& pitch(const ZoneBorderSettings* msg);
};

const ::kiapi::common::types::Distance&
ZoneBorderSettings::_Internal::pitch(const ZoneBorderSettings* msg) {
  return *msg->pitch_;
}
void ZoneBorderSettings::clear_pitch() {
  if (GetArenaForAllocation() == nullptr && pitch_ != nullptr) {
    delete pitch_;
  }
  pitch_ = nullptr;
}
ZoneBorderSettings::ZoneBorderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.ZoneBorderSettings)
}
ZoneBorderSettings::ZoneBorderSettings(const ZoneBorderSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pitch()) {
    pitch_ = new ::kiapi::common::types::Distance(*from.pitch_);
  } else {
    pitch_ = nullptr;
  }
  style_ = from.style_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.ZoneBorderSettings)
}

inline void ZoneBorderSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pitch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(style_));
}

ZoneBorderSettings::~ZoneBorderSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.ZoneBorderSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZoneBorderSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pitch_;
}

void ZoneBorderSettings::ArenaDtor(void* object) {
  ZoneBorderSettings* _this = reinterpret_cast< ZoneBorderSettings* >(object);
  (void)_this;
}
void ZoneBorderSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneBorderSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneBorderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.ZoneBorderSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pitch_ != nullptr) {
    delete pitch_;
  }
  pitch_ = nullptr;
  style_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneBorderSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.ZoneBorderStyle style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_style(static_cast<::kiapi::board::types::ZoneBorderStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pitch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZoneBorderSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.ZoneBorderSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.ZoneBorderStyle style = 1;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_style(), target);
  }

  // .kiapi.common.types.Distance pitch = 2;
  if (this->_internal_has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pitch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.ZoneBorderSettings)
  return target;
}

size_t ZoneBorderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.ZoneBorderSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Distance pitch = 2;
  if (this->_internal_has_pitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pitch_);
  }

  // .kiapi.board.types.ZoneBorderStyle style = 1;
  if (this->_internal_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZoneBorderSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZoneBorderSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZoneBorderSettings::GetClassData() const { return &_class_data_; }

void ZoneBorderSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZoneBorderSettings *>(to)->MergeFrom(
      static_cast<const ZoneBorderSettings &>(from));
}


void ZoneBorderSettings::MergeFrom(const ZoneBorderSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.ZoneBorderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pitch()) {
    _internal_mutable_pitch()->::kiapi::common::types::Distance::MergeFrom(from._internal_pitch());
  }
  if (from._internal_style() != 0) {
    _internal_set_style(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneBorderSettings::CopyFrom(const ZoneBorderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.ZoneBorderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneBorderSettings::IsInitialized() const {
  return true;
}

void ZoneBorderSettings::InternalSwap(ZoneBorderSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoneBorderSettings, style_)
      + sizeof(ZoneBorderSettings::style_)
      - PROTOBUF_FIELD_OFFSET(ZoneBorderSettings, pitch_)>(
          reinterpret_cast<char*>(&pitch_),
          reinterpret_cast<char*>(&other->pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneBorderSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[22]);
}

// ===================================================================

class ZoneFilledPolygons::_Internal {
 public:
  static const ::kiapi::common::types::PolySet& shapes(const ZoneFilledPolygons* msg);
};

const ::kiapi::common::types::PolySet&
ZoneFilledPolygons::_Internal::shapes(const ZoneFilledPolygons* msg) {
  return *msg->shapes_;
}
void ZoneFilledPolygons::clear_shapes() {
  if (GetArenaForAllocation() == nullptr && shapes_ != nullptr) {
    delete shapes_;
  }
  shapes_ = nullptr;
}
ZoneFilledPolygons::ZoneFilledPolygons(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.ZoneFilledPolygons)
}
ZoneFilledPolygons::ZoneFilledPolygons(const ZoneFilledPolygons& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shapes()) {
    shapes_ = new ::kiapi::common::types::PolySet(*from.shapes_);
  } else {
    shapes_ = nullptr;
  }
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.ZoneFilledPolygons)
}

inline void ZoneFilledPolygons::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shapes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&shapes_)) + sizeof(layer_));
}

ZoneFilledPolygons::~ZoneFilledPolygons() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.ZoneFilledPolygons)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZoneFilledPolygons::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shapes_;
}

void ZoneFilledPolygons::ArenaDtor(void* object) {
  ZoneFilledPolygons* _this = reinterpret_cast< ZoneFilledPolygons* >(object);
  (void)_this;
}
void ZoneFilledPolygons::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneFilledPolygons::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneFilledPolygons::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.ZoneFilledPolygons)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && shapes_ != nullptr) {
    delete shapes_;
  }
  shapes_ = nullptr;
  layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneFilledPolygons::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.BoardLayer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.PolySet shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shapes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZoneFilledPolygons::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.ZoneFilledPolygons)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layer(), target);
  }

  // .kiapi.common.types.PolySet shapes = 2;
  if (this->_internal_has_shapes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shapes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.ZoneFilledPolygons)
  return target;
}

size_t ZoneFilledPolygons::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.ZoneFilledPolygons)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.PolySet shapes = 2;
  if (this->_internal_has_shapes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shapes_);
  }

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZoneFilledPolygons::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZoneFilledPolygons::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZoneFilledPolygons::GetClassData() const { return &_class_data_; }

void ZoneFilledPolygons::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZoneFilledPolygons *>(to)->MergeFrom(
      static_cast<const ZoneFilledPolygons &>(from));
}


void ZoneFilledPolygons::MergeFrom(const ZoneFilledPolygons& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.ZoneFilledPolygons)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shapes()) {
    _internal_mutable_shapes()->::kiapi::common::types::PolySet::MergeFrom(from._internal_shapes());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneFilledPolygons::CopyFrom(const ZoneFilledPolygons& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.ZoneFilledPolygons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneFilledPolygons::IsInitialized() const {
  return true;
}

void ZoneFilledPolygons::InternalSwap(ZoneFilledPolygons* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoneFilledPolygons, layer_)
      + sizeof(ZoneFilledPolygons::layer_)
      - PROTOBUF_FIELD_OFFSET(ZoneFilledPolygons, shapes_)>(
          reinterpret_cast<char*>(&shapes_),
          reinterpret_cast<char*>(&other->shapes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneFilledPolygons::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[23]);
}

// ===================================================================

class ZoneLayerProperties::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& hatching_offset(const ZoneLayerProperties* msg);
};

const ::kiapi::common::types::Vector2&
ZoneLayerProperties::_Internal::hatching_offset(const ZoneLayerProperties* msg) {
  return *msg->hatching_offset_;
}
void ZoneLayerProperties::clear_hatching_offset() {
  if (GetArenaForAllocation() == nullptr && hatching_offset_ != nullptr) {
    delete hatching_offset_;
  }
  hatching_offset_ = nullptr;
}
ZoneLayerProperties::ZoneLayerProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.ZoneLayerProperties)
}
ZoneLayerProperties::ZoneLayerProperties(const ZoneLayerProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hatching_offset()) {
    hatching_offset_ = new ::kiapi::common::types::Vector2(*from.hatching_offset_);
  } else {
    hatching_offset_ = nullptr;
  }
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.ZoneLayerProperties)
}

inline void ZoneLayerProperties::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hatching_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_) -
    reinterpret_cast<char*>(&hatching_offset_)) + sizeof(layer_));
}

ZoneLayerProperties::~ZoneLayerProperties() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.ZoneLayerProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZoneLayerProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hatching_offset_;
}

void ZoneLayerProperties::ArenaDtor(void* object) {
  ZoneLayerProperties* _this = reinterpret_cast< ZoneLayerProperties* >(object);
  (void)_this;
}
void ZoneLayerProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneLayerProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneLayerProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.ZoneLayerProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hatching_offset_ != nullptr) {
    delete hatching_offset_;
  }
  hatching_offset_ = nullptr;
  layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneLayerProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.BoardLayer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 hatching_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hatching_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZoneLayerProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.ZoneLayerProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layer(), target);
  }

  // .kiapi.common.types.Vector2 hatching_offset = 2;
  if (this->_internal_has_hatching_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hatching_offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.ZoneLayerProperties)
  return target;
}

size_t ZoneLayerProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.ZoneLayerProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 hatching_offset = 2;
  if (this->_internal_has_hatching_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hatching_offset_);
  }

  // .kiapi.board.types.BoardLayer layer = 1;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZoneLayerProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZoneLayerProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZoneLayerProperties::GetClassData() const { return &_class_data_; }

void ZoneLayerProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZoneLayerProperties *>(to)->MergeFrom(
      static_cast<const ZoneLayerProperties &>(from));
}


void ZoneLayerProperties::MergeFrom(const ZoneLayerProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.ZoneLayerProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hatching_offset()) {
    _internal_mutable_hatching_offset()->::kiapi::common::types::Vector2::MergeFrom(from._internal_hatching_offset());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneLayerProperties::CopyFrom(const ZoneLayerProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.ZoneLayerProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneLayerProperties::IsInitialized() const {
  return true;
}

void ZoneLayerProperties::InternalSwap(ZoneLayerProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoneLayerProperties, layer_)
      + sizeof(ZoneLayerProperties::layer_)
      - PROTOBUF_FIELD_OFFSET(ZoneLayerProperties, hatching_offset_)>(
          reinterpret_cast<char*>(&hatching_offset_),
          reinterpret_cast<char*>(&other->hatching_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneLayerProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[24]);
}

// ===================================================================

class Zone::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const Zone* msg);
  static const ::kiapi::common::types::PolySet& outline(const Zone* msg);
  static const ::kiapi::board::types::CopperZoneSettings& copper_settings(const Zone* msg);
  static const ::kiapi::board::types::RuleAreaSettings& rule_area_settings(const Zone* msg);
  static const ::kiapi::board::types::ZoneBorderSettings& border(const Zone* msg);
};

const ::kiapi::common::types::KIID&
Zone::_Internal::id(const Zone* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::PolySet&
Zone::_Internal::outline(const Zone* msg) {
  return *msg->outline_;
}
const ::kiapi::board::types::CopperZoneSettings&
Zone::_Internal::copper_settings(const Zone* msg) {
  return *msg->settings_.copper_settings_;
}
const ::kiapi::board::types::RuleAreaSettings&
Zone::_Internal::rule_area_settings(const Zone* msg) {
  return *msg->settings_.rule_area_settings_;
}
const ::kiapi::board::types::ZoneBorderSettings&
Zone::_Internal::border(const Zone* msg) {
  return *msg->border_;
}
void Zone::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Zone::clear_outline() {
  if (GetArenaForAllocation() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
}
void Zone::set_allocated_copper_settings(::kiapi::board::types::CopperZoneSettings* copper_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_settings();
  if (copper_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::CopperZoneSettings>::GetOwningArena(copper_settings);
    if (message_arena != submessage_arena) {
      copper_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copper_settings, submessage_arena);
    }
    set_has_copper_settings();
    settings_.copper_settings_ = copper_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Zone.copper_settings)
}
void Zone::set_allocated_rule_area_settings(::kiapi::board::types::RuleAreaSettings* rule_area_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_settings();
  if (rule_area_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::RuleAreaSettings>::GetOwningArena(rule_area_settings);
    if (message_arena != submessage_arena) {
      rule_area_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule_area_settings, submessage_arena);
    }
    set_has_rule_area_settings();
    settings_.rule_area_settings_ = rule_area_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Zone.rule_area_settings)
}
Zone::Zone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layers_(arena),
  filled_polygons_(arena),
  layer_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Zone)
}
Zone::Zone(const Zone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_),
      filled_polygons_(from.filled_polygons_),
      layer_properties_(from.layer_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_outline()) {
    outline_ = new ::kiapi::common::types::PolySet(*from.outline_);
  } else {
    outline_ = nullptr;
  }
  if (from._internal_has_border()) {
    border_ = new ::kiapi::board::types::ZoneBorderSettings(*from.border_);
  } else {
    border_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&type_)) + sizeof(locked_));
  clear_has_settings();
  switch (from.settings_case()) {
    case kCopperSettings: {
      _internal_mutable_copper_settings()->::kiapi::board::types::CopperZoneSettings::MergeFrom(from._internal_copper_settings());
      break;
    }
    case kRuleAreaSettings: {
      _internal_mutable_rule_area_settings()->::kiapi::board::types::RuleAreaSettings::MergeFrom(from._internal_rule_area_settings());
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Zone)
}

inline void Zone::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&id_)) + sizeof(locked_));
clear_has_settings();
}

Zone::~Zone() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Zone)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Zone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete outline_;
  if (this != internal_default_instance()) delete border_;
  if (has_settings()) {
    clear_settings();
  }
}

void Zone::ArenaDtor(void* object) {
  Zone* _this = reinterpret_cast< Zone* >(object);
  (void)_this;
}
void Zone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Zone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Zone::clear_settings() {
// @@protoc_insertion_point(one_of_clear_start:kiapi.board.types.Zone)
  switch (settings_case()) {
    case kCopperSettings: {
      if (GetArenaForAllocation() == nullptr) {
        delete settings_.copper_settings_;
      }
      break;
    }
    case kRuleAreaSettings: {
      if (GetArenaForAllocation() == nullptr) {
        delete settings_.rule_area_settings_;
      }
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SETTINGS_NOT_SET;
}


void Zone::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Zone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  filled_polygons_.Clear();
  layer_properties_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
  if (GetArenaForAllocation() == nullptr && border_ != nullptr) {
    delete border_;
  }
  border_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_) -
      reinterpret_cast<char*>(&type_)) + sizeof(locked_));
  clear_settings();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Zone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ZoneType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kiapi::board::types::ZoneType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.BoardLayer layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_layers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_layers(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.PolySet outline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Zone.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.CopperZoneSettings copper_settings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_copper_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.RuleAreaSettings rule_area_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule_area_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 priority = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool filled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.ZoneFilledPolygons filled_polygons = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filled_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ZoneBorderSettings border = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_border(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.ZoneLayerProperties layer_properties = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Zone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Zone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.board.types.ZoneType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .kiapi.board.types.BoardLayer layers = 3;
  {
    int byte_size = _layers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, layers_, byte_size, target);
    }
  }

  // .kiapi.common.types.PolySet outline = 4;
  if (this->_internal_has_outline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::outline(this), target, stream);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Zone.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // .kiapi.board.types.CopperZoneSettings copper_settings = 6;
  if (_internal_has_copper_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::copper_settings(this), target, stream);
  }

  // .kiapi.board.types.RuleAreaSettings rule_area_settings = 7;
  if (_internal_has_rule_area_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rule_area_settings(this), target, stream);
  }

  // uint32 priority = 8;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_priority(), target);
  }

  // bool filled = 9;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_filled(), target);
  }

  // repeated .kiapi.board.types.ZoneFilledPolygons filled_polygons = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filled_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_filled_polygons(i), target, stream);
  }

  // .kiapi.board.types.ZoneBorderSettings border = 11;
  if (this->_internal_has_border()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::border(this), target, stream);
  }

  // .kiapi.common.types.LockedState locked = 12;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_locked(), target);
  }

  // repeated .kiapi.board.types.ZoneLayerProperties layer_properties = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_layer_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Zone)
  return target;
}

size_t Zone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Zone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.BoardLayer layers = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_layers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_layers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kiapi.board.types.ZoneFilledPolygons filled_polygons = 10;
  total_size += 1UL * this->_internal_filled_polygons_size();
  for (const auto& msg : this->filled_polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kiapi.board.types.ZoneLayerProperties layer_properties = 13;
  total_size += 1UL * this->_internal_layer_properties_size();
  for (const auto& msg : this->layer_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.PolySet outline = 4;
  if (this->_internal_has_outline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outline_);
  }

  // .kiapi.board.types.ZoneBorderSettings border = 11;
  if (this->_internal_has_border()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *border_);
  }

  // .kiapi.board.types.ZoneType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 priority = 8;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  // bool filled = 9;
  if (this->_internal_filled() != 0) {
    total_size += 1 + 1;
  }

  // .kiapi.common.types.LockedState locked = 12;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  switch (settings_case()) {
    // .kiapi.board.types.CopperZoneSettings copper_settings = 6;
    case kCopperSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_.copper_settings_);
      break;
    }
    // .kiapi.board.types.RuleAreaSettings rule_area_settings = 7;
    case kRuleAreaSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_.rule_area_settings_);
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Zone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Zone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Zone::GetClassData() const { return &_class_data_; }

void Zone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Zone *>(to)->MergeFrom(
      static_cast<const Zone &>(from));
}


void Zone::MergeFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Zone)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  filled_polygons_.MergeFrom(from.filled_polygons_);
  layer_properties_.MergeFrom(from.layer_properties_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_outline()) {
    _internal_mutable_outline()->::kiapi::common::types::PolySet::MergeFrom(from._internal_outline());
  }
  if (from._internal_has_border()) {
    _internal_mutable_border()->::kiapi::board::types::ZoneBorderSettings::MergeFrom(from._internal_border());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from._internal_filled() != 0) {
    _internal_set_filled(from._internal_filled());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  switch (from.settings_case()) {
    case kCopperSettings: {
      _internal_mutable_copper_settings()->::kiapi::board::types::CopperZoneSettings::MergeFrom(from._internal_copper_settings());
      break;
    }
    case kRuleAreaSettings: {
      _internal_mutable_rule_area_settings()->::kiapi::board::types::RuleAreaSettings::MergeFrom(from._internal_rule_area_settings());
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Zone::CopyFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone::IsInitialized() const {
  return true;
}

void Zone::InternalSwap(Zone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  filled_polygons_.InternalSwap(&other->filled_polygons_);
  layer_properties_.InternalSwap(&other->layer_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Zone, locked_)
      + sizeof(Zone::locked_)
      - PROTOBUF_FIELD_OFFSET(Zone, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(settings_, other->settings_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Zone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[25]);
}

// ===================================================================

class AlignedDimensionAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& start(const AlignedDimensionAttributes* msg);
  static const ::kiapi::common::types::Vector2& end(const AlignedDimensionAttributes* msg);
  static const ::kiapi::common::types::Distance& height(const AlignedDimensionAttributes* msg);
  static const ::kiapi::common::types::Distance& extension_height(const AlignedDimensionAttributes* msg);
};

const ::kiapi::common::types::Vector2&
AlignedDimensionAttributes::_Internal::start(const AlignedDimensionAttributes* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
AlignedDimensionAttributes::_Internal::end(const AlignedDimensionAttributes* msg) {
  return *msg->end_;
}
const ::kiapi::common::types::Distance&
AlignedDimensionAttributes::_Internal::height(const AlignedDimensionAttributes* msg) {
  return *msg->height_;
}
const ::kiapi::common::types::Distance&
AlignedDimensionAttributes::_Internal::extension_height(const AlignedDimensionAttributes* msg) {
  return *msg->extension_height_;
}
void AlignedDimensionAttributes::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void AlignedDimensionAttributes::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
void AlignedDimensionAttributes::clear_height() {
  if (GetArenaForAllocation() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
}
void AlignedDimensionAttributes::clear_extension_height() {
  if (GetArenaForAllocation() == nullptr && extension_height_ != nullptr) {
    delete extension_height_;
  }
  extension_height_ = nullptr;
}
AlignedDimensionAttributes::AlignedDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.AlignedDimensionAttributes)
}
AlignedDimensionAttributes::AlignedDimensionAttributes(const AlignedDimensionAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_height()) {
    height_ = new ::kiapi::common::types::Distance(*from.height_);
  } else {
    height_ = nullptr;
  }
  if (from._internal_has_extension_height()) {
    extension_height_ = new ::kiapi::common::types::Distance(*from.extension_height_);
  } else {
    extension_height_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.AlignedDimensionAttributes)
}

inline void AlignedDimensionAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extension_height_) -
    reinterpret_cast<char*>(&start_)) + sizeof(extension_height_));
}

AlignedDimensionAttributes::~AlignedDimensionAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.AlignedDimensionAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlignedDimensionAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete height_;
  if (this != internal_default_instance()) delete extension_height_;
}

void AlignedDimensionAttributes::ArenaDtor(void* object) {
  AlignedDimensionAttributes* _this = reinterpret_cast< AlignedDimensionAttributes* >(object);
  (void)_this;
}
void AlignedDimensionAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlignedDimensionAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlignedDimensionAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.AlignedDimensionAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaForAllocation() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extension_height_ != nullptr) {
    delete extension_height_;
  }
  extension_height_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlignedDimensionAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance extension_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_height(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlignedDimensionAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.AlignedDimensionAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  // .kiapi.common.types.Distance height = 3;
  if (this->_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::height(this), target, stream);
  }

  // .kiapi.common.types.Distance extension_height = 4;
  if (this->_internal_has_extension_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::extension_height(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.AlignedDimensionAttributes)
  return target;
}

size_t AlignedDimensionAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.AlignedDimensionAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .kiapi.common.types.Distance height = 3;
  if (this->_internal_has_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *height_);
  }

  // .kiapi.common.types.Distance extension_height = 4;
  if (this->_internal_has_extension_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlignedDimensionAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlignedDimensionAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlignedDimensionAttributes::GetClassData() const { return &_class_data_; }

void AlignedDimensionAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AlignedDimensionAttributes *>(to)->MergeFrom(
      static_cast<const AlignedDimensionAttributes &>(from));
}


void AlignedDimensionAttributes::MergeFrom(const AlignedDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.AlignedDimensionAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  if (from._internal_has_height()) {
    _internal_mutable_height()->::kiapi::common::types::Distance::MergeFrom(from._internal_height());
  }
  if (from._internal_has_extension_height()) {
    _internal_mutable_extension_height()->::kiapi::common::types::Distance::MergeFrom(from._internal_extension_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlignedDimensionAttributes::CopyFrom(const AlignedDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.AlignedDimensionAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignedDimensionAttributes::IsInitialized() const {
  return true;
}

void AlignedDimensionAttributes::InternalSwap(AlignedDimensionAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlignedDimensionAttributes, extension_height_)
      + sizeof(AlignedDimensionAttributes::extension_height_)
      - PROTOBUF_FIELD_OFFSET(AlignedDimensionAttributes, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignedDimensionAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[26]);
}

// ===================================================================

class OrthogonalDimensionAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& start(const OrthogonalDimensionAttributes* msg);
  static const ::kiapi::common::types::Vector2& end(const OrthogonalDimensionAttributes* msg);
  static const ::kiapi::common::types::Distance& height(const OrthogonalDimensionAttributes* msg);
  static const ::kiapi::common::types::Distance& extension_height(const OrthogonalDimensionAttributes* msg);
};

const ::kiapi::common::types::Vector2&
OrthogonalDimensionAttributes::_Internal::start(const OrthogonalDimensionAttributes* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
OrthogonalDimensionAttributes::_Internal::end(const OrthogonalDimensionAttributes* msg) {
  return *msg->end_;
}
const ::kiapi::common::types::Distance&
OrthogonalDimensionAttributes::_Internal::height(const OrthogonalDimensionAttributes* msg) {
  return *msg->height_;
}
const ::kiapi::common::types::Distance&
OrthogonalDimensionAttributes::_Internal::extension_height(const OrthogonalDimensionAttributes* msg) {
  return *msg->extension_height_;
}
void OrthogonalDimensionAttributes::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void OrthogonalDimensionAttributes::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
void OrthogonalDimensionAttributes::clear_height() {
  if (GetArenaForAllocation() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
}
void OrthogonalDimensionAttributes::clear_extension_height() {
  if (GetArenaForAllocation() == nullptr && extension_height_ != nullptr) {
    delete extension_height_;
  }
  extension_height_ = nullptr;
}
OrthogonalDimensionAttributes::OrthogonalDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.OrthogonalDimensionAttributes)
}
OrthogonalDimensionAttributes::OrthogonalDimensionAttributes(const OrthogonalDimensionAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_height()) {
    height_ = new ::kiapi::common::types::Distance(*from.height_);
  } else {
    height_ = nullptr;
  }
  if (from._internal_has_extension_height()) {
    extension_height_ = new ::kiapi::common::types::Distance(*from.extension_height_);
  } else {
    extension_height_ = nullptr;
  }
  alignment_ = from.alignment_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.OrthogonalDimensionAttributes)
}

inline void OrthogonalDimensionAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alignment_) -
    reinterpret_cast<char*>(&start_)) + sizeof(alignment_));
}

OrthogonalDimensionAttributes::~OrthogonalDimensionAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.OrthogonalDimensionAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrthogonalDimensionAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete height_;
  if (this != internal_default_instance()) delete extension_height_;
}

void OrthogonalDimensionAttributes::ArenaDtor(void* object) {
  OrthogonalDimensionAttributes* _this = reinterpret_cast< OrthogonalDimensionAttributes* >(object);
  (void)_this;
}
void OrthogonalDimensionAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrthogonalDimensionAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrthogonalDimensionAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.OrthogonalDimensionAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaForAllocation() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extension_height_ != nullptr) {
    delete extension_height_;
  }
  extension_height_ = nullptr;
  alignment_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrthogonalDimensionAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance extension_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_height(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.AxisAlignment alignment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alignment(static_cast<::kiapi::common::types::AxisAlignment>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrthogonalDimensionAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.OrthogonalDimensionAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  // .kiapi.common.types.Distance height = 3;
  if (this->_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::height(this), target, stream);
  }

  // .kiapi.common.types.Distance extension_height = 4;
  if (this->_internal_has_extension_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::extension_height(this), target, stream);
  }

  // .kiapi.common.types.AxisAlignment alignment = 5;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_alignment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.OrthogonalDimensionAttributes)
  return target;
}

size_t OrthogonalDimensionAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.OrthogonalDimensionAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .kiapi.common.types.Distance height = 3;
  if (this->_internal_has_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *height_);
  }

  // .kiapi.common.types.Distance extension_height = 4;
  if (this->_internal_has_extension_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_height_);
  }

  // .kiapi.common.types.AxisAlignment alignment = 5;
  if (this->_internal_alignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alignment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrthogonalDimensionAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrthogonalDimensionAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrthogonalDimensionAttributes::GetClassData() const { return &_class_data_; }

void OrthogonalDimensionAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrthogonalDimensionAttributes *>(to)->MergeFrom(
      static_cast<const OrthogonalDimensionAttributes &>(from));
}


void OrthogonalDimensionAttributes::MergeFrom(const OrthogonalDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.OrthogonalDimensionAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  if (from._internal_has_height()) {
    _internal_mutable_height()->::kiapi::common::types::Distance::MergeFrom(from._internal_height());
  }
  if (from._internal_has_extension_height()) {
    _internal_mutable_extension_height()->::kiapi::common::types::Distance::MergeFrom(from._internal_extension_height());
  }
  if (from._internal_alignment() != 0) {
    _internal_set_alignment(from._internal_alignment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrthogonalDimensionAttributes::CopyFrom(const OrthogonalDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.OrthogonalDimensionAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrthogonalDimensionAttributes::IsInitialized() const {
  return true;
}

void OrthogonalDimensionAttributes::InternalSwap(OrthogonalDimensionAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrthogonalDimensionAttributes, alignment_)
      + sizeof(OrthogonalDimensionAttributes::alignment_)
      - PROTOBUF_FIELD_OFFSET(OrthogonalDimensionAttributes, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrthogonalDimensionAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[27]);
}

// ===================================================================

class RadialDimensionAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& center(const RadialDimensionAttributes* msg);
  static const ::kiapi::common::types::Vector2& radius_point(const RadialDimensionAttributes* msg);
  static const ::kiapi::common::types::Distance& leader_length(const RadialDimensionAttributes* msg);
};

const ::kiapi::common::types::Vector2&
RadialDimensionAttributes::_Internal::center(const RadialDimensionAttributes* msg) {
  return *msg->center_;
}
const ::kiapi::common::types::Vector2&
RadialDimensionAttributes::_Internal::radius_point(const RadialDimensionAttributes* msg) {
  return *msg->radius_point_;
}
const ::kiapi::common::types::Distance&
RadialDimensionAttributes::_Internal::leader_length(const RadialDimensionAttributes* msg) {
  return *msg->leader_length_;
}
void RadialDimensionAttributes::clear_center() {
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void RadialDimensionAttributes::clear_radius_point() {
  if (GetArenaForAllocation() == nullptr && radius_point_ != nullptr) {
    delete radius_point_;
  }
  radius_point_ = nullptr;
}
void RadialDimensionAttributes::clear_leader_length() {
  if (GetArenaForAllocation() == nullptr && leader_length_ != nullptr) {
    delete leader_length_;
  }
  leader_length_ = nullptr;
}
RadialDimensionAttributes::RadialDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.RadialDimensionAttributes)
}
RadialDimensionAttributes::RadialDimensionAttributes(const RadialDimensionAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::kiapi::common::types::Vector2(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_radius_point()) {
    radius_point_ = new ::kiapi::common::types::Vector2(*from.radius_point_);
  } else {
    radius_point_ = nullptr;
  }
  if (from._internal_has_leader_length()) {
    leader_length_ = new ::kiapi::common::types::Distance(*from.leader_length_);
  } else {
    leader_length_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.RadialDimensionAttributes)
}

inline void RadialDimensionAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leader_length_) -
    reinterpret_cast<char*>(&center_)) + sizeof(leader_length_));
}

RadialDimensionAttributes::~RadialDimensionAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.RadialDimensionAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadialDimensionAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete radius_point_;
  if (this != internal_default_instance()) delete leader_length_;
}

void RadialDimensionAttributes::ArenaDtor(void* object) {
  RadialDimensionAttributes* _this = reinterpret_cast< RadialDimensionAttributes* >(object);
  (void)_this;
}
void RadialDimensionAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadialDimensionAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadialDimensionAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.RadialDimensionAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArenaForAllocation() == nullptr && radius_point_ != nullptr) {
    delete radius_point_;
  }
  radius_point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && leader_length_ != nullptr) {
    delete leader_length_;
  }
  leader_length_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadialDimensionAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 radius_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radius_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance leader_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_length(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadialDimensionAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.RadialDimensionAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 center = 1;
  if (this->_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .kiapi.common.types.Vector2 radius_point = 2;
  if (this->_internal_has_radius_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::radius_point(this), target, stream);
  }

  // .kiapi.common.types.Distance leader_length = 3;
  if (this->_internal_has_leader_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leader_length(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.RadialDimensionAttributes)
  return target;
}

size_t RadialDimensionAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.RadialDimensionAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .kiapi.common.types.Vector2 radius_point = 2;
  if (this->_internal_has_radius_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *radius_point_);
  }

  // .kiapi.common.types.Distance leader_length = 3;
  if (this->_internal_has_leader_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_length_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadialDimensionAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadialDimensionAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadialDimensionAttributes::GetClassData() const { return &_class_data_; }

void RadialDimensionAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadialDimensionAttributes *>(to)->MergeFrom(
      static_cast<const RadialDimensionAttributes &>(from));
}


void RadialDimensionAttributes::MergeFrom(const RadialDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.RadialDimensionAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _internal_mutable_center()->::kiapi::common::types::Vector2::MergeFrom(from._internal_center());
  }
  if (from._internal_has_radius_point()) {
    _internal_mutable_radius_point()->::kiapi::common::types::Vector2::MergeFrom(from._internal_radius_point());
  }
  if (from._internal_has_leader_length()) {
    _internal_mutable_leader_length()->::kiapi::common::types::Distance::MergeFrom(from._internal_leader_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadialDimensionAttributes::CopyFrom(const RadialDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.RadialDimensionAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadialDimensionAttributes::IsInitialized() const {
  return true;
}

void RadialDimensionAttributes::InternalSwap(RadialDimensionAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadialDimensionAttributes, leader_length_)
      + sizeof(RadialDimensionAttributes::leader_length_)
      - PROTOBUF_FIELD_OFFSET(RadialDimensionAttributes, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadialDimensionAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[28]);
}

// ===================================================================

class LeaderDimensionAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& start(const LeaderDimensionAttributes* msg);
  static const ::kiapi::common::types::Vector2& end(const LeaderDimensionAttributes* msg);
};

const ::kiapi::common::types::Vector2&
LeaderDimensionAttributes::_Internal::start(const LeaderDimensionAttributes* msg) {
  return *msg->start_;
}
const ::kiapi::common::types::Vector2&
LeaderDimensionAttributes::_Internal::end(const LeaderDimensionAttributes* msg) {
  return *msg->end_;
}
void LeaderDimensionAttributes::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void LeaderDimensionAttributes::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
LeaderDimensionAttributes::LeaderDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.LeaderDimensionAttributes)
}
LeaderDimensionAttributes::LeaderDimensionAttributes(const LeaderDimensionAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::kiapi::common::types::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  border_style_ = from.border_style_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.LeaderDimensionAttributes)
}

inline void LeaderDimensionAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&border_style_) -
    reinterpret_cast<char*>(&start_)) + sizeof(border_style_));
}

LeaderDimensionAttributes::~LeaderDimensionAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.LeaderDimensionAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeaderDimensionAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void LeaderDimensionAttributes::ArenaDtor(void* object) {
  LeaderDimensionAttributes* _this = reinterpret_cast< LeaderDimensionAttributes* >(object);
  (void)_this;
}
void LeaderDimensionAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderDimensionAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaderDimensionAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.LeaderDimensionAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  border_style_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderDimensionAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DimensionTextBorderStyle border_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_border_style(static_cast<::kiapi::board::types::DimensionTextBorderStyle>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaderDimensionAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.LeaderDimensionAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  // .kiapi.board.types.DimensionTextBorderStyle border_style = 3;
  if (this->_internal_border_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_border_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.LeaderDimensionAttributes)
  return target;
}

size_t LeaderDimensionAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.LeaderDimensionAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .kiapi.board.types.DimensionTextBorderStyle border_style = 3;
  if (this->_internal_border_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_border_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaderDimensionAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaderDimensionAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaderDimensionAttributes::GetClassData() const { return &_class_data_; }

void LeaderDimensionAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaderDimensionAttributes *>(to)->MergeFrom(
      static_cast<const LeaderDimensionAttributes &>(from));
}


void LeaderDimensionAttributes::MergeFrom(const LeaderDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.LeaderDimensionAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::kiapi::common::types::Vector2::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  if (from._internal_border_style() != 0) {
    _internal_set_border_style(from._internal_border_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaderDimensionAttributes::CopyFrom(const LeaderDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.LeaderDimensionAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderDimensionAttributes::IsInitialized() const {
  return true;
}

void LeaderDimensionAttributes::InternalSwap(LeaderDimensionAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderDimensionAttributes, border_style_)
      + sizeof(LeaderDimensionAttributes::border_style_)
      - PROTOBUF_FIELD_OFFSET(LeaderDimensionAttributes, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderDimensionAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[29]);
}

// ===================================================================

class CenterDimensionAttributes::_Internal {
 public:
  static const ::kiapi::common::types::Vector2& center(const CenterDimensionAttributes* msg);
  static const ::kiapi::common::types::Vector2& end(const CenterDimensionAttributes* msg);
};

const ::kiapi::common::types::Vector2&
CenterDimensionAttributes::_Internal::center(const CenterDimensionAttributes* msg) {
  return *msg->center_;
}
const ::kiapi::common::types::Vector2&
CenterDimensionAttributes::_Internal::end(const CenterDimensionAttributes* msg) {
  return *msg->end_;
}
void CenterDimensionAttributes::clear_center() {
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void CenterDimensionAttributes::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
CenterDimensionAttributes::CenterDimensionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.CenterDimensionAttributes)
}
CenterDimensionAttributes::CenterDimensionAttributes(const CenterDimensionAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::kiapi::common::types::Vector2(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::kiapi::common::types::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.CenterDimensionAttributes)
}

inline void CenterDimensionAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&center_)) + sizeof(end_));
}

CenterDimensionAttributes::~CenterDimensionAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.CenterDimensionAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CenterDimensionAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete end_;
}

void CenterDimensionAttributes::ArenaDtor(void* object) {
  CenterDimensionAttributes* _this = reinterpret_cast< CenterDimensionAttributes* >(object);
  (void)_this;
}
void CenterDimensionAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CenterDimensionAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CenterDimensionAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.CenterDimensionAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CenterDimensionAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.Vector2 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CenterDimensionAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.CenterDimensionAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 center = 1;
  if (this->_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.CenterDimensionAttributes)
  return target;
}

size_t CenterDimensionAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.CenterDimensionAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.Vector2 center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .kiapi.common.types.Vector2 end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CenterDimensionAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CenterDimensionAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CenterDimensionAttributes::GetClassData() const { return &_class_data_; }

void CenterDimensionAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CenterDimensionAttributes *>(to)->MergeFrom(
      static_cast<const CenterDimensionAttributes &>(from));
}


void CenterDimensionAttributes::MergeFrom(const CenterDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.CenterDimensionAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _internal_mutable_center()->::kiapi::common::types::Vector2::MergeFrom(from._internal_center());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::kiapi::common::types::Vector2::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CenterDimensionAttributes::CopyFrom(const CenterDimensionAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.CenterDimensionAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterDimensionAttributes::IsInitialized() const {
  return true;
}

void CenterDimensionAttributes::InternalSwap(CenterDimensionAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CenterDimensionAttributes, end_)
      + sizeof(CenterDimensionAttributes::end_)
      - PROTOBUF_FIELD_OFFSET(CenterDimensionAttributes, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CenterDimensionAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[30]);
}

// ===================================================================

class Dimension::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const Dimension* msg);
  static const ::kiapi::common::types::Text& text(const Dimension* msg);
  static const ::kiapi::board::types::AlignedDimensionAttributes& aligned(const Dimension* msg);
  static const ::kiapi::board::types::OrthogonalDimensionAttributes& orthogonal(const Dimension* msg);
  static const ::kiapi::board::types::RadialDimensionAttributes& radial(const Dimension* msg);
  static const ::kiapi::board::types::LeaderDimensionAttributes& leader(const Dimension* msg);
  static const ::kiapi::board::types::CenterDimensionAttributes& center(const Dimension* msg);
  static const ::kiapi::common::types::Distance& line_thickness(const Dimension* msg);
  static const ::kiapi::common::types::Distance& arrow_length(const Dimension* msg);
  static const ::kiapi::common::types::Distance& extension_offset(const Dimension* msg);
};

const ::kiapi::common::types::KIID&
Dimension::_Internal::id(const Dimension* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Text&
Dimension::_Internal::text(const Dimension* msg) {
  return *msg->text_;
}
const ::kiapi::board::types::AlignedDimensionAttributes&
Dimension::_Internal::aligned(const Dimension* msg) {
  return *msg->dimension_style_.aligned_;
}
const ::kiapi::board::types::OrthogonalDimensionAttributes&
Dimension::_Internal::orthogonal(const Dimension* msg) {
  return *msg->dimension_style_.orthogonal_;
}
const ::kiapi::board::types::RadialDimensionAttributes&
Dimension::_Internal::radial(const Dimension* msg) {
  return *msg->dimension_style_.radial_;
}
const ::kiapi::board::types::LeaderDimensionAttributes&
Dimension::_Internal::leader(const Dimension* msg) {
  return *msg->dimension_style_.leader_;
}
const ::kiapi::board::types::CenterDimensionAttributes&
Dimension::_Internal::center(const Dimension* msg) {
  return *msg->dimension_style_.center_;
}
const ::kiapi::common::types::Distance&
Dimension::_Internal::line_thickness(const Dimension* msg) {
  return *msg->line_thickness_;
}
const ::kiapi::common::types::Distance&
Dimension::_Internal::arrow_length(const Dimension* msg) {
  return *msg->arrow_length_;
}
const ::kiapi::common::types::Distance&
Dimension::_Internal::extension_offset(const Dimension* msg) {
  return *msg->extension_offset_;
}
void Dimension::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Dimension::clear_text() {
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
void Dimension::set_allocated_aligned(::kiapi::board::types::AlignedDimensionAttributes* aligned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dimension_style();
  if (aligned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::AlignedDimensionAttributes>::GetOwningArena(aligned);
    if (message_arena != submessage_arena) {
      aligned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aligned, submessage_arena);
    }
    set_has_aligned();
    dimension_style_.aligned_ = aligned;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.aligned)
}
void Dimension::set_allocated_orthogonal(::kiapi::board::types::OrthogonalDimensionAttributes* orthogonal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dimension_style();
  if (orthogonal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::OrthogonalDimensionAttributes>::GetOwningArena(orthogonal);
    if (message_arena != submessage_arena) {
      orthogonal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orthogonal, submessage_arena);
    }
    set_has_orthogonal();
    dimension_style_.orthogonal_ = orthogonal;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.orthogonal)
}
void Dimension::set_allocated_radial(::kiapi::board::types::RadialDimensionAttributes* radial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dimension_style();
  if (radial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::RadialDimensionAttributes>::GetOwningArena(radial);
    if (message_arena != submessage_arena) {
      radial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radial, submessage_arena);
    }
    set_has_radial();
    dimension_style_.radial_ = radial;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.radial)
}
void Dimension::set_allocated_leader(::kiapi::board::types::LeaderDimensionAttributes* leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dimension_style();
  if (leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::LeaderDimensionAttributes>::GetOwningArena(leader);
    if (message_arena != submessage_arena) {
      leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    set_has_leader();
    dimension_style_.leader_ = leader;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.leader)
}
void Dimension::set_allocated_center(::kiapi::board::types::CenterDimensionAttributes* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dimension_style();
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::types::CenterDimensionAttributes>::GetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    set_has_center();
    dimension_style_.center_ = center;
  }
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.types.Dimension.center)
}
void Dimension::clear_line_thickness() {
  if (GetArenaForAllocation() == nullptr && line_thickness_ != nullptr) {
    delete line_thickness_;
  }
  line_thickness_ = nullptr;
}
void Dimension::clear_arrow_length() {
  if (GetArenaForAllocation() == nullptr && arrow_length_ != nullptr) {
    delete arrow_length_;
  }
  arrow_length_ = nullptr;
}
void Dimension::clear_extension_offset() {
  if (GetArenaForAllocation() == nullptr && extension_offset_ != nullptr) {
    delete extension_offset_;
  }
  extension_offset_ = nullptr;
}
Dimension::Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Dimension)
}
Dimension::Dimension(const Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  override_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    override_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_override_text().empty()) {
    override_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_override_text(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_suffix().empty()) {
    suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suffix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::kiapi::common::types::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from._internal_has_line_thickness()) {
    line_thickness_ = new ::kiapi::common::types::Distance(*from.line_thickness_);
  } else {
    line_thickness_ = nullptr;
  }
  if (from._internal_has_arrow_length()) {
    arrow_length_ = new ::kiapi::common::types::Distance(*from.arrow_length_);
  } else {
    arrow_length_ = nullptr;
  }
  if (from._internal_has_extension_offset()) {
    extension_offset_ = new ::kiapi::common::types::Distance(*from.extension_offset_);
  } else {
    extension_offset_ = nullptr;
  }
  ::memcpy(&locked_, &from.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_position_) -
    reinterpret_cast<char*>(&locked_)) + sizeof(text_position_));
  clear_has_dimension_style();
  switch (from.dimension_style_case()) {
    case kAligned: {
      _internal_mutable_aligned()->::kiapi::board::types::AlignedDimensionAttributes::MergeFrom(from._internal_aligned());
      break;
    }
    case kOrthogonal: {
      _internal_mutable_orthogonal()->::kiapi::board::types::OrthogonalDimensionAttributes::MergeFrom(from._internal_orthogonal());
      break;
    }
    case kRadial: {
      _internal_mutable_radial()->::kiapi::board::types::RadialDimensionAttributes::MergeFrom(from._internal_radial());
      break;
    }
    case kLeader: {
      _internal_mutable_leader()->::kiapi::board::types::LeaderDimensionAttributes::MergeFrom(from._internal_leader());
      break;
    }
    case kCenter: {
      _internal_mutable_center()->::kiapi::board::types::CenterDimensionAttributes::MergeFrom(from._internal_center());
      break;
    }
    case DIMENSION_STYLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Dimension)
}

inline void Dimension::SharedCtor() {
override_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  override_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_position_) -
    reinterpret_cast<char*>(&id_)) + sizeof(text_position_));
clear_has_dimension_style();
}

Dimension::~Dimension() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Dimension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  override_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete line_thickness_;
  if (this != internal_default_instance()) delete arrow_length_;
  if (this != internal_default_instance()) delete extension_offset_;
  if (has_dimension_style()) {
    clear_dimension_style();
  }
}

void Dimension::ArenaDtor(void* object) {
  Dimension* _this = reinterpret_cast< Dimension* >(object);
  (void)_this;
}
void Dimension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dimension::clear_dimension_style() {
// @@protoc_insertion_point(one_of_clear_start:kiapi.board.types.Dimension)
  switch (dimension_style_case()) {
    case kAligned: {
      if (GetArenaForAllocation() == nullptr) {
        delete dimension_style_.aligned_;
      }
      break;
    }
    case kOrthogonal: {
      if (GetArenaForAllocation() == nullptr) {
        delete dimension_style_.orthogonal_;
      }
      break;
    }
    case kRadial: {
      if (GetArenaForAllocation() == nullptr) {
        delete dimension_style_.radial_;
      }
      break;
    }
    case kLeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete dimension_style_.leader_;
      }
      break;
    }
    case kCenter: {
      if (GetArenaForAllocation() == nullptr) {
        delete dimension_style_.center_;
      }
      break;
    }
    case DIMENSION_STYLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DIMENSION_STYLE_NOT_SET;
}


void Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Dimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  override_text_.ClearToEmpty();
  prefix_.ClearToEmpty();
  suffix_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  if (GetArenaForAllocation() == nullptr && line_thickness_ != nullptr) {
    delete line_thickness_;
  }
  line_thickness_ = nullptr;
  if (GetArenaForAllocation() == nullptr && arrow_length_ != nullptr) {
    delete arrow_length_;
  }
  arrow_length_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extension_offset_ != nullptr) {
    delete extension_offset_;
  }
  extension_offset_ = nullptr;
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_position_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(text_position_));
  clear_dimension_style();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Text text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.AlignedDimensionAttributes aligned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_aligned(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.OrthogonalDimensionAttributes orthogonal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_orthogonal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.RadialDimensionAttributes radial = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_radial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.LeaderDimensionAttributes leader = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.CenterDimensionAttributes center = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool override_text_enabled = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          override_text_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string override_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_override_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Dimension.override_text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefix = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Dimension.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string suffix = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Dimension.suffix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DimensionUnit unit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::kiapi::board::types::DimensionUnit>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DimensionUnitFormat unit_format = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit_format(static_cast<::kiapi::board::types::DimensionUnitFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DimensionArrowDirection arrow_direction = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arrow_direction(static_cast<::kiapi::board::types::DimensionArrowDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DimensionPrecision precision = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_precision(static_cast<::kiapi::board::types::DimensionPrecision>(val));
        } else
          goto handle_unusual;
        continue;
      // bool suppress_trailing_zeroes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          suppress_trailing_zeroes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance line_thickness = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_thickness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance arrow_length = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow_length(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance extension_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.DimensionTextPosition text_position = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_text_position(static_cast<::kiapi::board::types::DimensionTextPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // bool keep_text_aligned = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          keep_text_aligned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Dimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.LockedState locked = 2;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_locked(), target);
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_layer(), target);
  }

  // .kiapi.common.types.Text text = 4;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text(this), target, stream);
  }

  // .kiapi.board.types.AlignedDimensionAttributes aligned = 5;
  if (_internal_has_aligned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::aligned(this), target, stream);
  }

  // .kiapi.board.types.OrthogonalDimensionAttributes orthogonal = 6;
  if (_internal_has_orthogonal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::orthogonal(this), target, stream);
  }

  // .kiapi.board.types.RadialDimensionAttributes radial = 7;
  if (_internal_has_radial()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::radial(this), target, stream);
  }

  // .kiapi.board.types.LeaderDimensionAttributes leader = 8;
  if (_internal_has_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::leader(this), target, stream);
  }

  // .kiapi.board.types.CenterDimensionAttributes center = 9;
  if (_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::center(this), target, stream);
  }

  // bool override_text_enabled = 10;
  if (this->_internal_override_text_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_override_text_enabled(), target);
  }

  // string override_text = 11;
  if (!this->_internal_override_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_override_text().data(), static_cast<int>(this->_internal_override_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Dimension.override_text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_override_text(), target);
  }

  // string prefix = 12;
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Dimension.prefix");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_prefix(), target);
  }

  // string suffix = 13;
  if (!this->_internal_suffix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Dimension.suffix");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_suffix(), target);
  }

  // .kiapi.board.types.DimensionUnit unit = 14;
  if (this->_internal_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_unit(), target);
  }

  // .kiapi.board.types.DimensionUnitFormat unit_format = 15;
  if (this->_internal_unit_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_unit_format(), target);
  }

  // .kiapi.board.types.DimensionArrowDirection arrow_direction = 16;
  if (this->_internal_arrow_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_arrow_direction(), target);
  }

  // .kiapi.board.types.DimensionPrecision precision = 17;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_precision(), target);
  }

  // bool suppress_trailing_zeroes = 18;
  if (this->_internal_suppress_trailing_zeroes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_suppress_trailing_zeroes(), target);
  }

  // .kiapi.common.types.Distance line_thickness = 19;
  if (this->_internal_has_line_thickness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::line_thickness(this), target, stream);
  }

  // .kiapi.common.types.Distance arrow_length = 20;
  if (this->_internal_has_arrow_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::arrow_length(this), target, stream);
  }

  // .kiapi.common.types.Distance extension_offset = 21;
  if (this->_internal_has_extension_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::extension_offset(this), target, stream);
  }

  // .kiapi.board.types.DimensionTextPosition text_position = 22;
  if (this->_internal_text_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_text_position(), target);
  }

  // bool keep_text_aligned = 23;
  if (this->_internal_keep_text_aligned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_keep_text_aligned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Dimension)
  return target;
}

size_t Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Dimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string override_text = 11;
  if (!this->_internal_override_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_override_text());
  }

  // string prefix = 12;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string suffix = 13;
  if (!this->_internal_suffix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suffix());
  }

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Text text = 4;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .kiapi.common.types.Distance line_thickness = 19;
  if (this->_internal_has_line_thickness()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *line_thickness_);
  }

  // .kiapi.common.types.Distance arrow_length = 20;
  if (this->_internal_has_arrow_length()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arrow_length_);
  }

  // .kiapi.common.types.Distance extension_offset = 21;
  if (this->_internal_has_extension_offset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_offset_);
  }

  // .kiapi.common.types.LockedState locked = 2;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  // .kiapi.board.types.BoardLayer layer = 3;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  // .kiapi.board.types.DimensionUnit unit = 14;
  if (this->_internal_unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  // .kiapi.board.types.DimensionUnitFormat unit_format = 15;
  if (this->_internal_unit_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit_format());
  }

  // .kiapi.board.types.DimensionArrowDirection arrow_direction = 16;
  if (this->_internal_arrow_direction() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arrow_direction());
  }

  // .kiapi.board.types.DimensionPrecision precision = 17;
  if (this->_internal_precision() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_precision());
  }

  // bool override_text_enabled = 10;
  if (this->_internal_override_text_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool suppress_trailing_zeroes = 18;
  if (this->_internal_suppress_trailing_zeroes() != 0) {
    total_size += 2 + 1;
  }

  // bool keep_text_aligned = 23;
  if (this->_internal_keep_text_aligned() != 0) {
    total_size += 2 + 1;
  }

  // .kiapi.board.types.DimensionTextPosition text_position = 22;
  if (this->_internal_text_position() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_position());
  }

  switch (dimension_style_case()) {
    // .kiapi.board.types.AlignedDimensionAttributes aligned = 5;
    case kAligned: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimension_style_.aligned_);
      break;
    }
    // .kiapi.board.types.OrthogonalDimensionAttributes orthogonal = 6;
    case kOrthogonal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimension_style_.orthogonal_);
      break;
    }
    // .kiapi.board.types.RadialDimensionAttributes radial = 7;
    case kRadial: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimension_style_.radial_);
      break;
    }
    // .kiapi.board.types.LeaderDimensionAttributes leader = 8;
    case kLeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimension_style_.leader_);
      break;
    }
    // .kiapi.board.types.CenterDimensionAttributes center = 9;
    case kCenter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimension_style_.center_);
      break;
    }
    case DIMENSION_STYLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dimension::GetClassData() const { return &_class_data_; }

void Dimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dimension *>(to)->MergeFrom(
      static_cast<const Dimension &>(from));
}


void Dimension::MergeFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_override_text().empty()) {
    _internal_set_override_text(from._internal_override_text());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_suffix().empty()) {
    _internal_set_suffix(from._internal_suffix());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::common::types::Text::MergeFrom(from._internal_text());
  }
  if (from._internal_has_line_thickness()) {
    _internal_mutable_line_thickness()->::kiapi::common::types::Distance::MergeFrom(from._internal_line_thickness());
  }
  if (from._internal_has_arrow_length()) {
    _internal_mutable_arrow_length()->::kiapi::common::types::Distance::MergeFrom(from._internal_arrow_length());
  }
  if (from._internal_has_extension_offset()) {
    _internal_mutable_extension_offset()->::kiapi::common::types::Distance::MergeFrom(from._internal_extension_offset());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from._internal_unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (from._internal_unit_format() != 0) {
    _internal_set_unit_format(from._internal_unit_format());
  }
  if (from._internal_arrow_direction() != 0) {
    _internal_set_arrow_direction(from._internal_arrow_direction());
  }
  if (from._internal_precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  if (from._internal_override_text_enabled() != 0) {
    _internal_set_override_text_enabled(from._internal_override_text_enabled());
  }
  if (from._internal_suppress_trailing_zeroes() != 0) {
    _internal_set_suppress_trailing_zeroes(from._internal_suppress_trailing_zeroes());
  }
  if (from._internal_keep_text_aligned() != 0) {
    _internal_set_keep_text_aligned(from._internal_keep_text_aligned());
  }
  if (from._internal_text_position() != 0) {
    _internal_set_text_position(from._internal_text_position());
  }
  switch (from.dimension_style_case()) {
    case kAligned: {
      _internal_mutable_aligned()->::kiapi::board::types::AlignedDimensionAttributes::MergeFrom(from._internal_aligned());
      break;
    }
    case kOrthogonal: {
      _internal_mutable_orthogonal()->::kiapi::board::types::OrthogonalDimensionAttributes::MergeFrom(from._internal_orthogonal());
      break;
    }
    case kRadial: {
      _internal_mutable_radial()->::kiapi::board::types::RadialDimensionAttributes::MergeFrom(from._internal_radial());
      break;
    }
    case kLeader: {
      _internal_mutable_leader()->::kiapi::board::types::LeaderDimensionAttributes::MergeFrom(from._internal_leader());
      break;
    }
    case kCenter: {
      _internal_mutable_center()->::kiapi::board::types::CenterDimensionAttributes::MergeFrom(from._internal_center());
      break;
    }
    case DIMENSION_STYLE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dimension::CopyFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension::IsInitialized() const {
  return true;
}

void Dimension::InternalSwap(Dimension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &override_text_, lhs_arena,
      &other->override_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &suffix_, lhs_arena,
      &other->suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dimension, text_position_)
      + sizeof(Dimension::text_position_)
      - PROTOBUF_FIELD_OFFSET(Dimension, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(dimension_style_, other->dimension_style_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[31]);
}

// ===================================================================

class ReferenceImage::_Internal {
 public:
};

ReferenceImage::ReferenceImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.ReferenceImage)
}
ReferenceImage::ReferenceImage(const ReferenceImage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.ReferenceImage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceImage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReferenceImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[32]);
}

// ===================================================================

class Group::_Internal {
 public:
};

Group::Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Group)
}
Group::Group(const Group& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Group)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Group::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Group::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[33]);
}

// ===================================================================

class FieldId::_Internal {
 public:
};

FieldId::FieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.FieldId)
}
FieldId::FieldId(const FieldId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.FieldId)
}

inline void FieldId::SharedCtor() {
id_ = 0;
}

FieldId::~FieldId() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.FieldId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FieldId::ArenaDtor(void* object) {
  FieldId* _this = reinterpret_cast< FieldId* >(object);
  (void)_this;
}
void FieldId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldId::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.FieldId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.FieldId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.FieldId)
  return target;
}

size_t FieldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.FieldId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldId::GetClassData() const { return &_class_data_; }

void FieldId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldId *>(to)->MergeFrom(
      static_cast<const FieldId &>(from));
}


void FieldId::MergeFrom(const FieldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.FieldId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldId::CopyFrom(const FieldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.FieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldId::IsInitialized() const {
  return true;
}

void FieldId::InternalSwap(FieldId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[34]);
}

// ===================================================================

class Field::_Internal {
 public:
  static const ::kiapi::board::types::FieldId& id(const Field* msg);
  static const ::kiapi::board::types::BoardText& text(const Field* msg);
};

const ::kiapi::board::types::FieldId&
Field::_Internal::id(const Field* msg) {
  return *msg->id_;
}
const ::kiapi::board::types::BoardText&
Field::_Internal::text(const Field* msg) {
  return *msg->text_;
}
Field::Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Field)
}
Field::Field(const Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::kiapi::board::types::FieldId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::kiapi::board::types::BoardText(*from.text_);
  } else {
    text_ = nullptr;
  }
  visible_ = from.visible_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Field)
}

inline void Field::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&id_)) + sizeof(visible_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Field)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Field::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete text_;
}

void Field::ArenaDtor(void* object) {
  Field* _this = reinterpret_cast< Field* >(object);
  (void)_this;
}
void Field::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Field)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  visible_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.FieldId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Field.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardText text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool visible = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Field::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Field)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.FieldId id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Field.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .kiapi.board.types.BoardText text = 3;
  if (this->_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text(this), target, stream);
  }

  // bool visible = 4;
  if (this->_internal_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Field)
  return target;
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Field)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .kiapi.board.types.FieldId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.board.types.BoardText text = 3;
  if (this->_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // bool visible = 4;
  if (this->_internal_visible() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Field::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Field::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Field::GetClassData() const { return &_class_data_; }

void Field::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Field *>(to)->MergeFrom(
      static_cast<const Field &>(from));
}


void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Field)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::board::types::FieldId::MergeFrom(from._internal_id());
  }
  if (from._internal_has_text()) {
    _internal_mutable_text()->::kiapi::board::types::BoardText::MergeFrom(from._internal_text());
  }
  if (from._internal_visible() != 0) {
    _internal_set_visible(from._internal_visible());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::InternalSwap(Field* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Field, visible_)
      + sizeof(Field::visible_)
      - PROTOBUF_FIELD_OFFSET(Field, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Field::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[35]);
}

// ===================================================================

class FootprintAttributes::_Internal {
 public:
};

FootprintAttributes::FootprintAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.FootprintAttributes)
}
FootprintAttributes::FootprintAttributes(const FootprintAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  keywords_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keywords_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keywords().empty()) {
    keywords_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keywords(), 
      GetArenaForAllocation());
  }
  ::memcpy(&not_in_schematic_, &from.not_in_schematic_,
    static_cast<size_t>(reinterpret_cast<char*>(&mounting_style_) -
    reinterpret_cast<char*>(&not_in_schematic_)) + sizeof(mounting_style_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.FootprintAttributes)
}

inline void FootprintAttributes::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
keywords_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keywords_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&not_in_schematic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mounting_style_) -
    reinterpret_cast<char*>(&not_in_schematic_)) + sizeof(mounting_style_));
}

FootprintAttributes::~FootprintAttributes() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.FootprintAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FootprintAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keywords_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FootprintAttributes::ArenaDtor(void* object) {
  FootprintAttributes* _this = reinterpret_cast< FootprintAttributes* >(object);
  (void)_this;
}
void FootprintAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FootprintAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FootprintAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.FootprintAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  keywords_.ClearToEmpty();
  ::memset(&not_in_schematic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mounting_style_) -
      reinterpret_cast<char*>(&not_in_schematic_)) + sizeof(mounting_style_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootprintAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.FootprintAttributes.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string keywords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_keywords();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.FootprintAttributes.keywords"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool not_in_schematic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          not_in_schematic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_from_position_files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          exclude_from_position_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_from_bill_of_materials = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          exclude_from_bill_of_materials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exempt_from_courtyard_requirement = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          exempt_from_courtyard_requirement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool do_not_populate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          do_not_populate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.FootprintMountingStyle mounting_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mounting_style(static_cast<::kiapi::board::types::FootprintMountingStyle>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FootprintAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.FootprintAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.FootprintAttributes.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // string keywords = 2;
  if (!this->_internal_keywords().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keywords().data(), static_cast<int>(this->_internal_keywords().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.FootprintAttributes.keywords");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_keywords(), target);
  }

  // bool not_in_schematic = 3;
  if (this->_internal_not_in_schematic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_not_in_schematic(), target);
  }

  // bool exclude_from_position_files = 4;
  if (this->_internal_exclude_from_position_files() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_exclude_from_position_files(), target);
  }

  // bool exclude_from_bill_of_materials = 5;
  if (this->_internal_exclude_from_bill_of_materials() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_exclude_from_bill_of_materials(), target);
  }

  // bool exempt_from_courtyard_requirement = 6;
  if (this->_internal_exempt_from_courtyard_requirement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_exempt_from_courtyard_requirement(), target);
  }

  // bool do_not_populate = 7;
  if (this->_internal_do_not_populate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_do_not_populate(), target);
  }

  // .kiapi.board.types.FootprintMountingStyle mounting_style = 8;
  if (this->_internal_mounting_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_mounting_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.FootprintAttributes)
  return target;
}

size_t FootprintAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.FootprintAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string keywords = 2;
  if (!this->_internal_keywords().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keywords());
  }

  // bool not_in_schematic = 3;
  if (this->_internal_not_in_schematic() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_from_position_files = 4;
  if (this->_internal_exclude_from_position_files() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_from_bill_of_materials = 5;
  if (this->_internal_exclude_from_bill_of_materials() != 0) {
    total_size += 1 + 1;
  }

  // bool exempt_from_courtyard_requirement = 6;
  if (this->_internal_exempt_from_courtyard_requirement() != 0) {
    total_size += 1 + 1;
  }

  // bool do_not_populate = 7;
  if (this->_internal_do_not_populate() != 0) {
    total_size += 1 + 1;
  }

  // .kiapi.board.types.FootprintMountingStyle mounting_style = 8;
  if (this->_internal_mounting_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mounting_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FootprintAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FootprintAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FootprintAttributes::GetClassData() const { return &_class_data_; }

void FootprintAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FootprintAttributes *>(to)->MergeFrom(
      static_cast<const FootprintAttributes &>(from));
}


void FootprintAttributes::MergeFrom(const FootprintAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.FootprintAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_keywords().empty()) {
    _internal_set_keywords(from._internal_keywords());
  }
  if (from._internal_not_in_schematic() != 0) {
    _internal_set_not_in_schematic(from._internal_not_in_schematic());
  }
  if (from._internal_exclude_from_position_files() != 0) {
    _internal_set_exclude_from_position_files(from._internal_exclude_from_position_files());
  }
  if (from._internal_exclude_from_bill_of_materials() != 0) {
    _internal_set_exclude_from_bill_of_materials(from._internal_exclude_from_bill_of_materials());
  }
  if (from._internal_exempt_from_courtyard_requirement() != 0) {
    _internal_set_exempt_from_courtyard_requirement(from._internal_exempt_from_courtyard_requirement());
  }
  if (from._internal_do_not_populate() != 0) {
    _internal_set_do_not_populate(from._internal_do_not_populate());
  }
  if (from._internal_mounting_style() != 0) {
    _internal_set_mounting_style(from._internal_mounting_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FootprintAttributes::CopyFrom(const FootprintAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.FootprintAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootprintAttributes::IsInitialized() const {
  return true;
}

void FootprintAttributes::InternalSwap(FootprintAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &keywords_, lhs_arena,
      &other->keywords_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootprintAttributes, mounting_style_)
      + sizeof(FootprintAttributes::mounting_style_)
      - PROTOBUF_FIELD_OFFSET(FootprintAttributes, not_in_schematic_)>(
          reinterpret_cast<char*>(&not_in_schematic_),
          reinterpret_cast<char*>(&other->not_in_schematic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootprintAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[36]);
}

// ===================================================================

class NetTieDefinition::_Internal {
 public:
};

NetTieDefinition::NetTieDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pad_number_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.NetTieDefinition)
}
NetTieDefinition::NetTieDefinition(const NetTieDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pad_number_(from.pad_number_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.NetTieDefinition)
}

inline void NetTieDefinition::SharedCtor() {
}

NetTieDefinition::~NetTieDefinition() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.NetTieDefinition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetTieDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetTieDefinition::ArenaDtor(void* object) {
  NetTieDefinition* _this = reinterpret_cast< NetTieDefinition* >(object);
  (void)_this;
}
void NetTieDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetTieDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetTieDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.NetTieDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_number_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetTieDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pad_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pad_number();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.NetTieDefinition.pad_number"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetTieDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.NetTieDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pad_number = 1;
  for (int i = 0, n = this->_internal_pad_number_size(); i < n; i++) {
    const auto& s = this->_internal_pad_number(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.NetTieDefinition.pad_number");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.NetTieDefinition)
  return target;
}

size_t NetTieDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.NetTieDefinition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pad_number = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pad_number_.size());
  for (int i = 0, n = pad_number_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pad_number_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetTieDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetTieDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetTieDefinition::GetClassData() const { return &_class_data_; }

void NetTieDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetTieDefinition *>(to)->MergeFrom(
      static_cast<const NetTieDefinition &>(from));
}


void NetTieDefinition::MergeFrom(const NetTieDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.NetTieDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pad_number_.MergeFrom(from.pad_number_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetTieDefinition::CopyFrom(const NetTieDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.NetTieDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetTieDefinition::IsInitialized() const {
  return true;
}

void NetTieDefinition::InternalSwap(NetTieDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pad_number_.InternalSwap(&other->pad_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetTieDefinition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[37]);
}

// ===================================================================

class FootprintDesignRuleOverrides::_Internal {
 public:
  static const ::kiapi::board::types::SolderMaskOverrides& solder_mask(const FootprintDesignRuleOverrides* msg);
  static const ::kiapi::board::types::SolderPasteOverrides& solder_paste(const FootprintDesignRuleOverrides* msg);
  static const ::kiapi::common::types::Distance& copper_clearance(const FootprintDesignRuleOverrides* msg);
};

const ::kiapi::board::types::SolderMaskOverrides&
FootprintDesignRuleOverrides::_Internal::solder_mask(const FootprintDesignRuleOverrides* msg) {
  return *msg->solder_mask_;
}
const ::kiapi::board::types::SolderPasteOverrides&
FootprintDesignRuleOverrides::_Internal::solder_paste(const FootprintDesignRuleOverrides* msg) {
  return *msg->solder_paste_;
}
const ::kiapi::common::types::Distance&
FootprintDesignRuleOverrides::_Internal::copper_clearance(const FootprintDesignRuleOverrides* msg) {
  return *msg->copper_clearance_;
}
void FootprintDesignRuleOverrides::clear_copper_clearance() {
  if (GetArenaForAllocation() == nullptr && copper_clearance_ != nullptr) {
    delete copper_clearance_;
  }
  copper_clearance_ = nullptr;
}
FootprintDesignRuleOverrides::FootprintDesignRuleOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.FootprintDesignRuleOverrides)
}
FootprintDesignRuleOverrides::FootprintDesignRuleOverrides(const FootprintDesignRuleOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solder_mask()) {
    solder_mask_ = new ::kiapi::board::types::SolderMaskOverrides(*from.solder_mask_);
  } else {
    solder_mask_ = nullptr;
  }
  if (from._internal_has_solder_paste()) {
    solder_paste_ = new ::kiapi::board::types::SolderPasteOverrides(*from.solder_paste_);
  } else {
    solder_paste_ = nullptr;
  }
  if (from._internal_has_copper_clearance()) {
    copper_clearance_ = new ::kiapi::common::types::Distance(*from.copper_clearance_);
  } else {
    copper_clearance_ = nullptr;
  }
  zone_connection_ = from.zone_connection_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.FootprintDesignRuleOverrides)
}

inline void FootprintDesignRuleOverrides::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&solder_mask_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zone_connection_) -
    reinterpret_cast<char*>(&solder_mask_)) + sizeof(zone_connection_));
}

FootprintDesignRuleOverrides::~FootprintDesignRuleOverrides() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.FootprintDesignRuleOverrides)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FootprintDesignRuleOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete solder_mask_;
  if (this != internal_default_instance()) delete solder_paste_;
  if (this != internal_default_instance()) delete copper_clearance_;
}

void FootprintDesignRuleOverrides::ArenaDtor(void* object) {
  FootprintDesignRuleOverrides* _this = reinterpret_cast< FootprintDesignRuleOverrides* >(object);
  (void)_this;
}
void FootprintDesignRuleOverrides::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FootprintDesignRuleOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FootprintDesignRuleOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.FootprintDesignRuleOverrides)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && solder_mask_ != nullptr) {
    delete solder_mask_;
  }
  solder_mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && solder_paste_ != nullptr) {
    delete solder_paste_;
  }
  solder_paste_ = nullptr;
  if (GetArenaForAllocation() == nullptr && copper_clearance_ != nullptr) {
    delete copper_clearance_;
  }
  copper_clearance_ = nullptr;
  zone_connection_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootprintDesignRuleOverrides::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.board.types.SolderMaskOverrides solder_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solder_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.SolderPasteOverrides solder_paste = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solder_paste(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Distance copper_clearance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_copper_clearance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.ZoneConnectionStyle zone_connection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_zone_connection(static_cast<::kiapi::board::types::ZoneConnectionStyle>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FootprintDesignRuleOverrides::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.FootprintDesignRuleOverrides)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.board.types.SolderMaskOverrides solder_mask = 1;
  if (this->_internal_has_solder_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solder_mask(this), target, stream);
  }

  // .kiapi.board.types.SolderPasteOverrides solder_paste = 2;
  if (this->_internal_has_solder_paste()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::solder_paste(this), target, stream);
  }

  // .kiapi.common.types.Distance copper_clearance = 3;
  if (this->_internal_has_copper_clearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::copper_clearance(this), target, stream);
  }

  // .kiapi.board.types.ZoneConnectionStyle zone_connection = 4;
  if (this->_internal_zone_connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_zone_connection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.FootprintDesignRuleOverrides)
  return target;
}

size_t FootprintDesignRuleOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.FootprintDesignRuleOverrides)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.board.types.SolderMaskOverrides solder_mask = 1;
  if (this->_internal_has_solder_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solder_mask_);
  }

  // .kiapi.board.types.SolderPasteOverrides solder_paste = 2;
  if (this->_internal_has_solder_paste()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solder_paste_);
  }

  // .kiapi.common.types.Distance copper_clearance = 3;
  if (this->_internal_has_copper_clearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copper_clearance_);
  }

  // .kiapi.board.types.ZoneConnectionStyle zone_connection = 4;
  if (this->_internal_zone_connection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_zone_connection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FootprintDesignRuleOverrides::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FootprintDesignRuleOverrides::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FootprintDesignRuleOverrides::GetClassData() const { return &_class_data_; }

void FootprintDesignRuleOverrides::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FootprintDesignRuleOverrides *>(to)->MergeFrom(
      static_cast<const FootprintDesignRuleOverrides &>(from));
}


void FootprintDesignRuleOverrides::MergeFrom(const FootprintDesignRuleOverrides& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.FootprintDesignRuleOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_solder_mask()) {
    _internal_mutable_solder_mask()->::kiapi::board::types::SolderMaskOverrides::MergeFrom(from._internal_solder_mask());
  }
  if (from._internal_has_solder_paste()) {
    _internal_mutable_solder_paste()->::kiapi::board::types::SolderPasteOverrides::MergeFrom(from._internal_solder_paste());
  }
  if (from._internal_has_copper_clearance()) {
    _internal_mutable_copper_clearance()->::kiapi::common::types::Distance::MergeFrom(from._internal_copper_clearance());
  }
  if (from._internal_zone_connection() != 0) {
    _internal_set_zone_connection(from._internal_zone_connection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FootprintDesignRuleOverrides::CopyFrom(const FootprintDesignRuleOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.FootprintDesignRuleOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootprintDesignRuleOverrides::IsInitialized() const {
  return true;
}

void FootprintDesignRuleOverrides::InternalSwap(FootprintDesignRuleOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootprintDesignRuleOverrides, zone_connection_)
      + sizeof(FootprintDesignRuleOverrides::zone_connection_)
      - PROTOBUF_FIELD_OFFSET(FootprintDesignRuleOverrides, solder_mask_)>(
          reinterpret_cast<char*>(&solder_mask_),
          reinterpret_cast<char*>(&other->solder_mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootprintDesignRuleOverrides::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[38]);
}

// ===================================================================

class Footprint3DModel::_Internal {
 public:
  static const ::kiapi::common::types::Vector3D& scale(const Footprint3DModel* msg);
  static const ::kiapi::common::types::Vector3D& rotation(const Footprint3DModel* msg);
  static const ::kiapi::common::types::Vector3D& offset(const Footprint3DModel* msg);
};

const ::kiapi::common::types::Vector3D&
Footprint3DModel::_Internal::scale(const Footprint3DModel* msg) {
  return *msg->scale_;
}
const ::kiapi::common::types::Vector3D&
Footprint3DModel::_Internal::rotation(const Footprint3DModel* msg) {
  return *msg->rotation_;
}
const ::kiapi::common::types::Vector3D&
Footprint3DModel::_Internal::offset(const Footprint3DModel* msg) {
  return *msg->offset_;
}
void Footprint3DModel::clear_scale() {
  if (GetArenaForAllocation() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
void Footprint3DModel::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
void Footprint3DModel::clear_offset() {
  if (GetArenaForAllocation() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
Footprint3DModel::Footprint3DModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Footprint3DModel)
}
Footprint3DModel::Footprint3DModel(const Footprint3DModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_scale()) {
    scale_ = new ::kiapi::common::types::Vector3D(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::kiapi::common::types::Vector3D(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_offset()) {
    offset_ = new ::kiapi::common::types::Vector3D(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  ::memcpy(&opacity_, &from.opacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&opacity_)) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Footprint3DModel)
}

inline void Footprint3DModel::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(visible_));
}

Footprint3DModel::~Footprint3DModel() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Footprint3DModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Footprint3DModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete offset_;
}

void Footprint3DModel::ArenaDtor(void* object) {
  Footprint3DModel* _this = reinterpret_cast< Footprint3DModel* >(object);
  (void)_this;
}
void Footprint3DModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Footprint3DModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Footprint3DModel::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Footprint3DModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  ::memset(&opacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visible_) -
      reinterpret_cast<char*>(&opacity_)) + sizeof(visible_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Footprint3DModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.Footprint3DModel.filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector3D scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector3D rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector3D offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double opacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Footprint3DModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Footprint3DModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.Footprint3DModel.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .kiapi.common.types.Vector3D scale = 2;
  if (this->_internal_has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scale(this), target, stream);
  }

  // .kiapi.common.types.Vector3D rotation = 3;
  if (this->_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  // .kiapi.common.types.Vector3D offset = 4;
  if (this->_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::offset(this), target, stream);
  }

  // bool visible = 5;
  if (this->_internal_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_visible(), target);
  }

  // double opacity = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Footprint3DModel)
  return target;
}

size_t Footprint3DModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Footprint3DModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .kiapi.common.types.Vector3D scale = 2;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .kiapi.common.types.Vector3D rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .kiapi.common.types.Vector3D offset = 4;
  if (this->_internal_has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  // double opacity = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 1 + 8;
  }

  // bool visible = 5;
  if (this->_internal_visible() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Footprint3DModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Footprint3DModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Footprint3DModel::GetClassData() const { return &_class_data_; }

void Footprint3DModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Footprint3DModel *>(to)->MergeFrom(
      static_cast<const Footprint3DModel &>(from));
}


void Footprint3DModel::MergeFrom(const Footprint3DModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Footprint3DModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (from._internal_has_scale()) {
    _internal_mutable_scale()->::kiapi::common::types::Vector3D::MergeFrom(from._internal_scale());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::kiapi::common::types::Vector3D::MergeFrom(from._internal_rotation());
  }
  if (from._internal_has_offset()) {
    _internal_mutable_offset()->::kiapi::common::types::Vector3D::MergeFrom(from._internal_offset());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = from._internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _internal_set_opacity(from._internal_opacity());
  }
  if (from._internal_visible() != 0) {
    _internal_set_visible(from._internal_visible());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Footprint3DModel::CopyFrom(const Footprint3DModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Footprint3DModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footprint3DModel::IsInitialized() const {
  return true;
}

void Footprint3DModel::InternalSwap(Footprint3DModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Footprint3DModel, visible_)
      + sizeof(Footprint3DModel::visible_)
      - PROTOBUF_FIELD_OFFSET(Footprint3DModel, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Footprint3DModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[39]);
}

// ===================================================================

class JumperGroup::_Internal {
 public:
};

JumperGroup::JumperGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pad_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.JumperGroup)
}
JumperGroup::JumperGroup(const JumperGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pad_names_(from.pad_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.JumperGroup)
}

inline void JumperGroup::SharedCtor() {
}

JumperGroup::~JumperGroup() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.JumperGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JumperGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JumperGroup::ArenaDtor(void* object) {
  JumperGroup* _this = reinterpret_cast< JumperGroup* >(object);
  (void)_this;
}
void JumperGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JumperGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JumperGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.JumperGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JumperGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pad_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pad_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kiapi.board.types.JumperGroup.pad_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JumperGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.JumperGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pad_names = 1;
  for (int i = 0, n = this->_internal_pad_names_size(); i < n; i++) {
    const auto& s = this->_internal_pad_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kiapi.board.types.JumperGroup.pad_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.JumperGroup)
  return target;
}

size_t JumperGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.JumperGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pad_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pad_names_.size());
  for (int i = 0, n = pad_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pad_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JumperGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JumperGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JumperGroup::GetClassData() const { return &_class_data_; }

void JumperGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JumperGroup *>(to)->MergeFrom(
      static_cast<const JumperGroup &>(from));
}


void JumperGroup::MergeFrom(const JumperGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.JumperGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pad_names_.MergeFrom(from.pad_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JumperGroup::CopyFrom(const JumperGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.JumperGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumperGroup::IsInitialized() const {
  return true;
}

void JumperGroup::InternalSwap(JumperGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pad_names_.InternalSwap(&other->pad_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JumperGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[40]);
}

// ===================================================================

class JumperSettings::_Internal {
 public:
};

JumperSettings::JumperSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.JumperSettings)
}
JumperSettings::JumperSettings(const JumperSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duplicate_names_are_jumpered_ = from.duplicate_names_are_jumpered_;
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.JumperSettings)
}

inline void JumperSettings::SharedCtor() {
duplicate_names_are_jumpered_ = false;
}

JumperSettings::~JumperSettings() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.JumperSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JumperSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JumperSettings::ArenaDtor(void* object) {
  JumperSettings* _this = reinterpret_cast< JumperSettings* >(object);
  (void)_this;
}
void JumperSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JumperSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JumperSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.JumperSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  duplicate_names_are_jumpered_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JumperSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool duplicate_names_are_jumpered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          duplicate_names_are_jumpered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.JumperGroup groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JumperSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.JumperSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool duplicate_names_are_jumpered = 1;
  if (this->_internal_duplicate_names_are_jumpered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_duplicate_names_are_jumpered(), target);
  }

  // repeated .kiapi.board.types.JumperGroup groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.JumperSettings)
  return target;
}

size_t JumperSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.JumperSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.JumperGroup groups = 2;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool duplicate_names_are_jumpered = 1;
  if (this->_internal_duplicate_names_are_jumpered() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JumperSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JumperSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JumperSettings::GetClassData() const { return &_class_data_; }

void JumperSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JumperSettings *>(to)->MergeFrom(
      static_cast<const JumperSettings &>(from));
}


void JumperSettings::MergeFrom(const JumperSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.JumperSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from._internal_duplicate_names_are_jumpered() != 0) {
    _internal_set_duplicate_names_are_jumpered(from._internal_duplicate_names_are_jumpered());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JumperSettings::CopyFrom(const JumperSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.JumperSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumperSettings::IsInitialized() const {
  return true;
}

void JumperSettings::InternalSwap(JumperSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  swap(duplicate_names_are_jumpered_, other->duplicate_names_are_jumpered_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JumperSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[41]);
}

// ===================================================================

class Footprint::_Internal {
 public:
  static const ::kiapi::common::types::LibraryIdentifier& id(const Footprint* msg);
  static const ::kiapi::common::types::Vector2& anchor(const Footprint* msg);
  static const ::kiapi::board::types::FootprintAttributes& attributes(const Footprint* msg);
  static const ::kiapi::board::types::FootprintDesignRuleOverrides& overrides(const Footprint* msg);
  static const ::kiapi::board::types::Field& reference_field(const Footprint* msg);
  static const ::kiapi::board::types::Field& value_field(const Footprint* msg);
  static const ::kiapi::board::types::Field& datasheet_field(const Footprint* msg);
  static const ::kiapi::board::types::Field& description_field(const Footprint* msg);
  static const ::kiapi::board::types::JumperSettings& jumpers(const Footprint* msg);
};

const ::kiapi::common::types::LibraryIdentifier&
Footprint::_Internal::id(const Footprint* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
Footprint::_Internal::anchor(const Footprint* msg) {
  return *msg->anchor_;
}
const ::kiapi::board::types::FootprintAttributes&
Footprint::_Internal::attributes(const Footprint* msg) {
  return *msg->attributes_;
}
const ::kiapi::board::types::FootprintDesignRuleOverrides&
Footprint::_Internal::overrides(const Footprint* msg) {
  return *msg->overrides_;
}
const ::kiapi::board::types::Field&
Footprint::_Internal::reference_field(const Footprint* msg) {
  return *msg->reference_field_;
}
const ::kiapi::board::types::Field&
Footprint::_Internal::value_field(const Footprint* msg) {
  return *msg->value_field_;
}
const ::kiapi::board::types::Field&
Footprint::_Internal::datasheet_field(const Footprint* msg) {
  return *msg->datasheet_field_;
}
const ::kiapi::board::types::Field&
Footprint::_Internal::description_field(const Footprint* msg) {
  return *msg->description_field_;
}
const ::kiapi::board::types::JumperSettings&
Footprint::_Internal::jumpers(const Footprint* msg) {
  return *msg->jumpers_;
}
void Footprint::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Footprint::clear_anchor() {
  if (GetArenaForAllocation() == nullptr && anchor_ != nullptr) {
    delete anchor_;
  }
  anchor_ = nullptr;
}
void Footprint::clear_items() {
  items_.Clear();
}
Footprint::Footprint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  net_ties_(arena),
  private_layers_(arena),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.Footprint)
}
Footprint::Footprint(const Footprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      net_ties_(from.net_ties_),
      private_layers_(from.private_layers_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::LibraryIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_anchor()) {
    anchor_ = new ::kiapi::common::types::Vector2(*from.anchor_);
  } else {
    anchor_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::kiapi::board::types::FootprintAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  if (from._internal_has_overrides()) {
    overrides_ = new ::kiapi::board::types::FootprintDesignRuleOverrides(*from.overrides_);
  } else {
    overrides_ = nullptr;
  }
  if (from._internal_has_reference_field()) {
    reference_field_ = new ::kiapi::board::types::Field(*from.reference_field_);
  } else {
    reference_field_ = nullptr;
  }
  if (from._internal_has_value_field()) {
    value_field_ = new ::kiapi::board::types::Field(*from.value_field_);
  } else {
    value_field_ = nullptr;
  }
  if (from._internal_has_datasheet_field()) {
    datasheet_field_ = new ::kiapi::board::types::Field(*from.datasheet_field_);
  } else {
    datasheet_field_ = nullptr;
  }
  if (from._internal_has_description_field()) {
    description_field_ = new ::kiapi::board::types::Field(*from.description_field_);
  } else {
    description_field_ = nullptr;
  }
  if (from._internal_has_jumpers()) {
    jumpers_ = new ::kiapi::board::types::JumperSettings(*from.jumpers_);
  } else {
    jumpers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.Footprint)
}

inline void Footprint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&jumpers_) -
    reinterpret_cast<char*>(&id_)) + sizeof(jumpers_));
}

Footprint::~Footprint() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.Footprint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Footprint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete anchor_;
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete overrides_;
  if (this != internal_default_instance()) delete reference_field_;
  if (this != internal_default_instance()) delete value_field_;
  if (this != internal_default_instance()) delete datasheet_field_;
  if (this != internal_default_instance()) delete description_field_;
  if (this != internal_default_instance()) delete jumpers_;
}

void Footprint::ArenaDtor(void* object) {
  Footprint* _this = reinterpret_cast< Footprint* >(object);
  (void)_this;
}
void Footprint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Footprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Footprint::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.Footprint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_ties_.Clear();
  private_layers_.Clear();
  items_.Clear();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && anchor_ != nullptr) {
    delete anchor_;
  }
  anchor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reference_field_ != nullptr) {
    delete reference_field_;
  }
  reference_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_field_ != nullptr) {
    delete value_field_;
  }
  value_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && datasheet_field_ != nullptr) {
    delete datasheet_field_;
  }
  datasheet_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && description_field_ != nullptr) {
    delete description_field_;
  }
  description_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && jumpers_ != nullptr) {
    delete jumpers_;
  }
  jumpers_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Footprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.LibraryIdentifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 anchor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.FootprintAttributes attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_overrides(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.NetTieDefinition net_ties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_net_ties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .kiapi.board.types.BoardLayer private_layers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_private_layers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_private_layers(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field reference_field = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field value_field = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field datasheet_field = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_datasheet_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field description_field = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_description_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.JumperSettings jumpers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_jumpers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Footprint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.Footprint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.LibraryIdentifier id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 anchor = 2;
  if (this->_internal_has_anchor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::anchor(this), target, stream);
  }

  // .kiapi.board.types.FootprintAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attributes(this), target, stream);
  }

  // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 4;
  if (this->_internal_has_overrides()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::overrides(this), target, stream);
  }

  // repeated .kiapi.board.types.NetTieDefinition net_ties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_net_ties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_net_ties(i), target, stream);
  }

  // repeated .kiapi.board.types.BoardLayer private_layers = 6;
  {
    int byte_size = _private_layers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, private_layers_, byte_size, target);
    }
  }

  // .kiapi.board.types.Field reference_field = 7;
  if (this->_internal_has_reference_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reference_field(this), target, stream);
  }

  // .kiapi.board.types.Field value_field = 8;
  if (this->_internal_has_value_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::value_field(this), target, stream);
  }

  // .kiapi.board.types.Field datasheet_field = 9;
  if (this->_internal_has_datasheet_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::datasheet_field(this), target, stream);
  }

  // .kiapi.board.types.Field description_field = 10;
  if (this->_internal_has_description_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::description_field(this), target, stream);
  }

  // repeated .google.protobuf.Any items = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_items(i), target, stream);
  }

  // .kiapi.board.types.JumperSettings jumpers = 12;
  if (this->_internal_has_jumpers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::jumpers(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.Footprint)
  return target;
}

size_t Footprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.Footprint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kiapi.board.types.NetTieDefinition net_ties = 5;
  total_size += 1UL * this->_internal_net_ties_size();
  for (const auto& msg : this->net_ties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kiapi.board.types.BoardLayer private_layers = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_private_layers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_private_layers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _private_layers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.protobuf.Any items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kiapi.common.types.LibraryIdentifier id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 anchor = 2;
  if (this->_internal_has_anchor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anchor_);
  }

  // .kiapi.board.types.FootprintAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 4;
  if (this->_internal_has_overrides()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overrides_);
  }

  // .kiapi.board.types.Field reference_field = 7;
  if (this->_internal_has_reference_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_field_);
  }

  // .kiapi.board.types.Field value_field = 8;
  if (this->_internal_has_value_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_field_);
  }

  // .kiapi.board.types.Field datasheet_field = 9;
  if (this->_internal_has_datasheet_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datasheet_field_);
  }

  // .kiapi.board.types.Field description_field = 10;
  if (this->_internal_has_description_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_field_);
  }

  // .kiapi.board.types.JumperSettings jumpers = 12;
  if (this->_internal_has_jumpers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jumpers_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Footprint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Footprint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Footprint::GetClassData() const { return &_class_data_; }

void Footprint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Footprint *>(to)->MergeFrom(
      static_cast<const Footprint &>(from));
}


void Footprint::MergeFrom(const Footprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.Footprint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  net_ties_.MergeFrom(from.net_ties_);
  private_layers_.MergeFrom(from.private_layers_);
  items_.MergeFrom(from.items_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::LibraryIdentifier::MergeFrom(from._internal_id());
  }
  if (from._internal_has_anchor()) {
    _internal_mutable_anchor()->::kiapi::common::types::Vector2::MergeFrom(from._internal_anchor());
  }
  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::kiapi::board::types::FootprintAttributes::MergeFrom(from._internal_attributes());
  }
  if (from._internal_has_overrides()) {
    _internal_mutable_overrides()->::kiapi::board::types::FootprintDesignRuleOverrides::MergeFrom(from._internal_overrides());
  }
  if (from._internal_has_reference_field()) {
    _internal_mutable_reference_field()->::kiapi::board::types::Field::MergeFrom(from._internal_reference_field());
  }
  if (from._internal_has_value_field()) {
    _internal_mutable_value_field()->::kiapi::board::types::Field::MergeFrom(from._internal_value_field());
  }
  if (from._internal_has_datasheet_field()) {
    _internal_mutable_datasheet_field()->::kiapi::board::types::Field::MergeFrom(from._internal_datasheet_field());
  }
  if (from._internal_has_description_field()) {
    _internal_mutable_description_field()->::kiapi::board::types::Field::MergeFrom(from._internal_description_field());
  }
  if (from._internal_has_jumpers()) {
    _internal_mutable_jumpers()->::kiapi::board::types::JumperSettings::MergeFrom(from._internal_jumpers());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Footprint::CopyFrom(const Footprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.Footprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footprint::IsInitialized() const {
  return true;
}

void Footprint::InternalSwap(Footprint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  net_ties_.InternalSwap(&other->net_ties_);
  private_layers_.InternalSwap(&other->private_layers_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Footprint, jumpers_)
      + sizeof(Footprint::jumpers_)
      - PROTOBUF_FIELD_OFFSET(Footprint, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Footprint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[42]);
}

// ===================================================================

class FootprintInstance::_Internal {
 public:
  static const ::kiapi::common::types::KIID& id(const FootprintInstance* msg);
  static const ::kiapi::common::types::Vector2& position(const FootprintInstance* msg);
  static const ::kiapi::common::types::Angle& orientation(const FootprintInstance* msg);
  static const ::kiapi::board::types::Footprint& definition(const FootprintInstance* msg);
  static const ::kiapi::board::types::Field& reference_field(const FootprintInstance* msg);
  static const ::kiapi::board::types::Field& value_field(const FootprintInstance* msg);
  static const ::kiapi::board::types::Field& datasheet_field(const FootprintInstance* msg);
  static const ::kiapi::board::types::Field& description_field(const FootprintInstance* msg);
  static const ::kiapi::board::types::FootprintAttributes& attributes(const FootprintInstance* msg);
  static const ::kiapi::board::types::FootprintDesignRuleOverrides& overrides(const FootprintInstance* msg);
};

const ::kiapi::common::types::KIID&
FootprintInstance::_Internal::id(const FootprintInstance* msg) {
  return *msg->id_;
}
const ::kiapi::common::types::Vector2&
FootprintInstance::_Internal::position(const FootprintInstance* msg) {
  return *msg->position_;
}
const ::kiapi::common::types::Angle&
FootprintInstance::_Internal::orientation(const FootprintInstance* msg) {
  return *msg->orientation_;
}
const ::kiapi::board::types::Footprint&
FootprintInstance::_Internal::definition(const FootprintInstance* msg) {
  return *msg->definition_;
}
const ::kiapi::board::types::Field&
FootprintInstance::_Internal::reference_field(const FootprintInstance* msg) {
  return *msg->reference_field_;
}
const ::kiapi::board::types::Field&
FootprintInstance::_Internal::value_field(const FootprintInstance* msg) {
  return *msg->value_field_;
}
const ::kiapi::board::types::Field&
FootprintInstance::_Internal::datasheet_field(const FootprintInstance* msg) {
  return *msg->datasheet_field_;
}
const ::kiapi::board::types::Field&
FootprintInstance::_Internal::description_field(const FootprintInstance* msg) {
  return *msg->description_field_;
}
const ::kiapi::board::types::FootprintAttributes&
FootprintInstance::_Internal::attributes(const FootprintInstance* msg) {
  return *msg->attributes_;
}
const ::kiapi::board::types::FootprintDesignRuleOverrides&
FootprintInstance::_Internal::overrides(const FootprintInstance* msg) {
  return *msg->overrides_;
}
void FootprintInstance::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void FootprintInstance::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void FootprintInstance::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
FootprintInstance::FootprintInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kiapi.board.types.FootprintInstance)
}
FootprintInstance::FootprintInstance(const FootprintInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::kiapi::common::types::KIID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::kiapi::common::types::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::kiapi::common::types::Angle(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_definition()) {
    definition_ = new ::kiapi::board::types::Footprint(*from.definition_);
  } else {
    definition_ = nullptr;
  }
  if (from._internal_has_reference_field()) {
    reference_field_ = new ::kiapi::board::types::Field(*from.reference_field_);
  } else {
    reference_field_ = nullptr;
  }
  if (from._internal_has_value_field()) {
    value_field_ = new ::kiapi::board::types::Field(*from.value_field_);
  } else {
    value_field_ = nullptr;
  }
  if (from._internal_has_datasheet_field()) {
    datasheet_field_ = new ::kiapi::board::types::Field(*from.datasheet_field_);
  } else {
    datasheet_field_ = nullptr;
  }
  if (from._internal_has_description_field()) {
    description_field_ = new ::kiapi::board::types::Field(*from.description_field_);
  } else {
    description_field_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::kiapi::board::types::FootprintAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  if (from._internal_has_overrides()) {
    overrides_ = new ::kiapi::board::types::FootprintDesignRuleOverrides(*from.overrides_);
  } else {
    overrides_ = nullptr;
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  // @@protoc_insertion_point(copy_constructor:kiapi.board.types.FootprintInstance)
}

inline void FootprintInstance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&id_)) + sizeof(locked_));
}

FootprintInstance::~FootprintInstance() {
  // @@protoc_insertion_point(destructor:kiapi.board.types.FootprintInstance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FootprintInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete definition_;
  if (this != internal_default_instance()) delete reference_field_;
  if (this != internal_default_instance()) delete value_field_;
  if (this != internal_default_instance()) delete datasheet_field_;
  if (this != internal_default_instance()) delete description_field_;
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete overrides_;
}

void FootprintInstance::ArenaDtor(void* object) {
  FootprintInstance* _this = reinterpret_cast< FootprintInstance* >(object);
  (void)_this;
}
void FootprintInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FootprintInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FootprintInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:kiapi.board.types.FootprintInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && definition_ != nullptr) {
    delete definition_;
  }
  definition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reference_field_ != nullptr) {
    delete reference_field_;
  }
  reference_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_field_ != nullptr) {
    delete value_field_;
  }
  value_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && datasheet_field_ != nullptr) {
    delete datasheet_field_;
  }
  datasheet_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && description_field_ != nullptr) {
    delete description_field_;
  }
  description_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootprintInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kiapi.common.types.KIID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.Angle orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.BoardLayer layer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layer(static_cast<::kiapi::board::types::BoardLayer>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.common.types.LockedState locked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locked(static_cast<::kiapi::common::types::LockedState>(val));
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Footprint definition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_definition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field reference_field = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field value_field = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field datasheet_field = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_datasheet_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.Field description_field = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_description_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.FootprintAttributes attributes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_overrides(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FootprintInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kiapi.board.types.FootprintInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .kiapi.common.types.Angle orientation = 3;
  if (this->_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // .kiapi.board.types.BoardLayer layer = 4;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_layer(), target);
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_locked(), target);
  }

  // .kiapi.board.types.Footprint definition = 6;
  if (this->_internal_has_definition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::definition(this), target, stream);
  }

  // .kiapi.board.types.Field reference_field = 7;
  if (this->_internal_has_reference_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reference_field(this), target, stream);
  }

  // .kiapi.board.types.Field value_field = 8;
  if (this->_internal_has_value_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::value_field(this), target, stream);
  }

  // .kiapi.board.types.Field datasheet_field = 9;
  if (this->_internal_has_datasheet_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::datasheet_field(this), target, stream);
  }

  // .kiapi.board.types.Field description_field = 10;
  if (this->_internal_has_description_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::description_field(this), target, stream);
  }

  // .kiapi.board.types.FootprintAttributes attributes = 11;
  if (this->_internal_has_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::attributes(this), target, stream);
  }

  // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 12;
  if (this->_internal_has_overrides()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::overrides(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kiapi.board.types.FootprintInstance)
  return target;
}

size_t FootprintInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kiapi.board.types.FootprintInstance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kiapi.common.types.KIID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .kiapi.common.types.Vector2 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .kiapi.common.types.Angle orientation = 3;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .kiapi.board.types.Footprint definition = 6;
  if (this->_internal_has_definition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *definition_);
  }

  // .kiapi.board.types.Field reference_field = 7;
  if (this->_internal_has_reference_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_field_);
  }

  // .kiapi.board.types.Field value_field = 8;
  if (this->_internal_has_value_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_field_);
  }

  // .kiapi.board.types.Field datasheet_field = 9;
  if (this->_internal_has_datasheet_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datasheet_field_);
  }

  // .kiapi.board.types.Field description_field = 10;
  if (this->_internal_has_description_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_field_);
  }

  // .kiapi.board.types.FootprintAttributes attributes = 11;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  // .kiapi.board.types.FootprintDesignRuleOverrides overrides = 12;
  if (this->_internal_has_overrides()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overrides_);
  }

  // .kiapi.board.types.BoardLayer layer = 4;
  if (this->_internal_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer());
  }

  // .kiapi.common.types.LockedState locked = 5;
  if (this->_internal_locked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locked());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FootprintInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FootprintInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FootprintInstance::GetClassData() const { return &_class_data_; }

void FootprintInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FootprintInstance *>(to)->MergeFrom(
      static_cast<const FootprintInstance &>(from));
}


void FootprintInstance::MergeFrom(const FootprintInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kiapi.board.types.FootprintInstance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::kiapi::common::types::KIID::MergeFrom(from._internal_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::kiapi::common::types::Vector2::MergeFrom(from._internal_position());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::kiapi::common::types::Angle::MergeFrom(from._internal_orientation());
  }
  if (from._internal_has_definition()) {
    _internal_mutable_definition()->::kiapi::board::types::Footprint::MergeFrom(from._internal_definition());
  }
  if (from._internal_has_reference_field()) {
    _internal_mutable_reference_field()->::kiapi::board::types::Field::MergeFrom(from._internal_reference_field());
  }
  if (from._internal_has_value_field()) {
    _internal_mutable_value_field()->::kiapi::board::types::Field::MergeFrom(from._internal_value_field());
  }
  if (from._internal_has_datasheet_field()) {
    _internal_mutable_datasheet_field()->::kiapi::board::types::Field::MergeFrom(from._internal_datasheet_field());
  }
  if (from._internal_has_description_field()) {
    _internal_mutable_description_field()->::kiapi::board::types::Field::MergeFrom(from._internal_description_field());
  }
  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::kiapi::board::types::FootprintAttributes::MergeFrom(from._internal_attributes());
  }
  if (from._internal_has_overrides()) {
    _internal_mutable_overrides()->::kiapi::board::types::FootprintDesignRuleOverrides::MergeFrom(from._internal_overrides());
  }
  if (from._internal_layer() != 0) {
    _internal_set_layer(from._internal_layer());
  }
  if (from._internal_locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FootprintInstance::CopyFrom(const FootprintInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kiapi.board.types.FootprintInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootprintInstance::IsInitialized() const {
  return true;
}

void FootprintInstance::InternalSwap(FootprintInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootprintInstance, locked_)
      + sizeof(FootprintInstance::locked_)
      - PROTOBUF_FIELD_OFFSET(FootprintInstance, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootprintInstance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_board_2fboard_5ftypes_2eproto_getter, &descriptor_table_board_2fboard_5ftypes_2eproto_once,
      file_level_metadata_board_2fboard_5ftypes_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace board
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kiapi::board::types::NetCode* Arena::CreateMaybeMessage< ::kiapi::board::types::NetCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::NetCode >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Net* Arena::CreateMaybeMessage< ::kiapi::board::types::Net >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Net >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Track* Arena::CreateMaybeMessage< ::kiapi::board::types::Track >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Track >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Arc* Arena::CreateMaybeMessage< ::kiapi::board::types::Arc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Arc >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::ChamferedRectCorners* Arena::CreateMaybeMessage< ::kiapi::board::types::ChamferedRectCorners >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::ChamferedRectCorners >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::ZoneConnectionSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::ZoneConnectionSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::ZoneConnectionSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::SolderMaskOverrides* Arena::CreateMaybeMessage< ::kiapi::board::types::SolderMaskOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::SolderMaskOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::SolderPasteOverrides* Arena::CreateMaybeMessage< ::kiapi::board::types::SolderPasteOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::SolderPasteOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::PadStackLayer* Arena::CreateMaybeMessage< ::kiapi::board::types::PadStackLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::PadStackLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::PadStackOuterLayer* Arena::CreateMaybeMessage< ::kiapi::board::types::PadStackOuterLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::PadStackOuterLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::DrillProperties* Arena::CreateMaybeMessage< ::kiapi::board::types::DrillProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::DrillProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::PadStack* Arena::CreateMaybeMessage< ::kiapi::board::types::PadStack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::PadStack >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Via* Arena::CreateMaybeMessage< ::kiapi::board::types::Via >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Via >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::BoardGraphicShape* Arena::CreateMaybeMessage< ::kiapi::board::types::BoardGraphicShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::BoardGraphicShape >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::BoardText* Arena::CreateMaybeMessage< ::kiapi::board::types::BoardText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::BoardText >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::BoardTextBox* Arena::CreateMaybeMessage< ::kiapi::board::types::BoardTextBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::BoardTextBox >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::ThermalSpokeSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::ThermalSpokeSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::ThermalSpokeSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Pad* Arena::CreateMaybeMessage< ::kiapi::board::types::Pad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Pad >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::HatchFillSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::HatchFillSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::HatchFillSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::TeardropSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::TeardropSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::TeardropSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::CopperZoneSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::CopperZoneSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::CopperZoneSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::RuleAreaSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::RuleAreaSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::RuleAreaSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::ZoneBorderSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::ZoneBorderSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::ZoneBorderSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::ZoneFilledPolygons* Arena::CreateMaybeMessage< ::kiapi::board::types::ZoneFilledPolygons >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::ZoneFilledPolygons >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::ZoneLayerProperties* Arena::CreateMaybeMessage< ::kiapi::board::types::ZoneLayerProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::ZoneLayerProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Zone* Arena::CreateMaybeMessage< ::kiapi::board::types::Zone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Zone >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::AlignedDimensionAttributes* Arena::CreateMaybeMessage< ::kiapi::board::types::AlignedDimensionAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::AlignedDimensionAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::OrthogonalDimensionAttributes* Arena::CreateMaybeMessage< ::kiapi::board::types::OrthogonalDimensionAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::OrthogonalDimensionAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::RadialDimensionAttributes* Arena::CreateMaybeMessage< ::kiapi::board::types::RadialDimensionAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::RadialDimensionAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::LeaderDimensionAttributes* Arena::CreateMaybeMessage< ::kiapi::board::types::LeaderDimensionAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::LeaderDimensionAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::CenterDimensionAttributes* Arena::CreateMaybeMessage< ::kiapi::board::types::CenterDimensionAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::CenterDimensionAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Dimension* Arena::CreateMaybeMessage< ::kiapi::board::types::Dimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::ReferenceImage* Arena::CreateMaybeMessage< ::kiapi::board::types::ReferenceImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::ReferenceImage >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Group* Arena::CreateMaybeMessage< ::kiapi::board::types::Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Group >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::FieldId* Arena::CreateMaybeMessage< ::kiapi::board::types::FieldId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::FieldId >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Field* Arena::CreateMaybeMessage< ::kiapi::board::types::Field >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Field >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::FootprintAttributes* Arena::CreateMaybeMessage< ::kiapi::board::types::FootprintAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::FootprintAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::NetTieDefinition* Arena::CreateMaybeMessage< ::kiapi::board::types::NetTieDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::NetTieDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::FootprintDesignRuleOverrides* Arena::CreateMaybeMessage< ::kiapi::board::types::FootprintDesignRuleOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::FootprintDesignRuleOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Footprint3DModel* Arena::CreateMaybeMessage< ::kiapi::board::types::Footprint3DModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Footprint3DModel >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::JumperGroup* Arena::CreateMaybeMessage< ::kiapi::board::types::JumperGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::JumperGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::JumperSettings* Arena::CreateMaybeMessage< ::kiapi::board::types::JumperSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::JumperSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::Footprint* Arena::CreateMaybeMessage< ::kiapi::board::types::Footprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::Footprint >(arena);
}
template<> PROTOBUF_NOINLINE ::kiapi::board::types::FootprintInstance* Arena::CreateMaybeMessage< ::kiapi::board::types::FootprintInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kiapi::board::types::FootprintInstance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
