// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board/board_commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_board_2fboard_5fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_board_2fboard_5fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/types/base_types.pb.h"
#include "common/types/enums.pb.h"
#include "common/types/project_settings.pb.h"
#include "board/board.pb.h"
#include "board/board_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_board_2fboard_5fcommands_2eproto KIAPI_IMPORTEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct KIAPI_IMPORTEXPORT TableStruct_board_2fboard_5fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
KIAPI_IMPORTEXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_board_2fboard_5fcommands_2eproto;
namespace kiapi {
namespace board {
namespace commands {
class BoardEditorAppearanceSettings;
struct BoardEditorAppearanceSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardEditorAppearanceSettingsDefaultTypeInternal _BoardEditorAppearanceSettings_default_instance_;
class BoardLayerResponse;
struct BoardLayerResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardLayerResponseDefaultTypeInternal _BoardLayerResponse_default_instance_;
class BoardLayers;
struct BoardLayersDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardLayersDefaultTypeInternal _BoardLayers_default_instance_;
class BoardStackupResponse;
struct BoardStackupResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern BoardStackupResponseDefaultTypeInternal _BoardStackupResponse_default_instance_;
class GetActiveLayer;
struct GetActiveLayerDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetActiveLayerDefaultTypeInternal _GetActiveLayer_default_instance_;
class GetBoardEditorAppearanceSettings;
struct GetBoardEditorAppearanceSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetBoardEditorAppearanceSettingsDefaultTypeInternal _GetBoardEditorAppearanceSettings_default_instance_;
class GetBoardOrigin;
struct GetBoardOriginDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetBoardOriginDefaultTypeInternal _GetBoardOrigin_default_instance_;
class GetBoardStackup;
struct GetBoardStackupDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetBoardStackupDefaultTypeInternal _GetBoardStackup_default_instance_;
class GetGraphicsDefaults;
struct GetGraphicsDefaultsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetGraphicsDefaultsDefaultTypeInternal _GetGraphicsDefaults_default_instance_;
class GetItemsByNet;
struct GetItemsByNetDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetItemsByNetDefaultTypeInternal _GetItemsByNet_default_instance_;
class GetItemsByNetClass;
struct GetItemsByNetClassDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetItemsByNetClassDefaultTypeInternal _GetItemsByNetClass_default_instance_;
class GetNetClassForNets;
struct GetNetClassForNetsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetNetClassForNetsDefaultTypeInternal _GetNetClassForNets_default_instance_;
class GetNets;
struct GetNetsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetNetsDefaultTypeInternal _GetNets_default_instance_;
class GetPadShapeAsPolygon;
struct GetPadShapeAsPolygonDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetPadShapeAsPolygonDefaultTypeInternal _GetPadShapeAsPolygon_default_instance_;
class GetVisibleLayers;
struct GetVisibleLayersDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GetVisibleLayersDefaultTypeInternal _GetVisibleLayers_default_instance_;
class GraphicsDefaultsResponse;
struct GraphicsDefaultsResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern GraphicsDefaultsResponseDefaultTypeInternal _GraphicsDefaultsResponse_default_instance_;
class InteractiveMoveItems;
struct InteractiveMoveItemsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern InteractiveMoveItemsDefaultTypeInternal _InteractiveMoveItems_default_instance_;
class NetClassForNetsResponse;
struct NetClassForNetsResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetClassForNetsResponseDefaultTypeInternal _NetClassForNetsResponse_default_instance_;
class NetClassForNetsResponse_ClassesEntry_DoNotUse;
struct NetClassForNetsResponse_ClassesEntry_DoNotUseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetClassForNetsResponse_ClassesEntry_DoNotUseDefaultTypeInternal _NetClassForNetsResponse_ClassesEntry_DoNotUse_default_instance_;
class NetsResponse;
struct NetsResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern NetsResponseDefaultTypeInternal _NetsResponse_default_instance_;
class PadShapeAsPolygonResponse;
struct PadShapeAsPolygonResponseDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern PadShapeAsPolygonResponseDefaultTypeInternal _PadShapeAsPolygonResponse_default_instance_;
class RefillZones;
struct RefillZonesDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern RefillZonesDefaultTypeInternal _RefillZones_default_instance_;
class SetActiveLayer;
struct SetActiveLayerDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SetActiveLayerDefaultTypeInternal _SetActiveLayer_default_instance_;
class SetBoardEditorAppearanceSettings;
struct SetBoardEditorAppearanceSettingsDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SetBoardEditorAppearanceSettingsDefaultTypeInternal _SetBoardEditorAppearanceSettings_default_instance_;
class SetBoardOrigin;
struct SetBoardOriginDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SetBoardOriginDefaultTypeInternal _SetBoardOrigin_default_instance_;
class SetVisibleLayers;
struct SetVisibleLayersDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern SetVisibleLayersDefaultTypeInternal _SetVisibleLayers_default_instance_;
class UpdateBoardStackup;
struct UpdateBoardStackupDefaultTypeInternal;
KIAPI_IMPORTEXPORT extern UpdateBoardStackupDefaultTypeInternal _UpdateBoardStackup_default_instance_;
}  // namespace commands
}  // namespace board
}  // namespace kiapi
PROTOBUF_NAMESPACE_OPEN
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::BoardEditorAppearanceSettings* Arena::CreateMaybeMessage<::kiapi::board::commands::BoardEditorAppearanceSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::BoardLayerResponse* Arena::CreateMaybeMessage<::kiapi::board::commands::BoardLayerResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::BoardLayers* Arena::CreateMaybeMessage<::kiapi::board::commands::BoardLayers>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::BoardStackupResponse* Arena::CreateMaybeMessage<::kiapi::board::commands::BoardStackupResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetActiveLayer* Arena::CreateMaybeMessage<::kiapi::board::commands::GetActiveLayer>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetBoardEditorAppearanceSettings* Arena::CreateMaybeMessage<::kiapi::board::commands::GetBoardEditorAppearanceSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetBoardOrigin* Arena::CreateMaybeMessage<::kiapi::board::commands::GetBoardOrigin>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetBoardStackup* Arena::CreateMaybeMessage<::kiapi::board::commands::GetBoardStackup>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetGraphicsDefaults* Arena::CreateMaybeMessage<::kiapi::board::commands::GetGraphicsDefaults>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetItemsByNet* Arena::CreateMaybeMessage<::kiapi::board::commands::GetItemsByNet>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetItemsByNetClass* Arena::CreateMaybeMessage<::kiapi::board::commands::GetItemsByNetClass>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetNetClassForNets* Arena::CreateMaybeMessage<::kiapi::board::commands::GetNetClassForNets>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetNets* Arena::CreateMaybeMessage<::kiapi::board::commands::GetNets>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetPadShapeAsPolygon* Arena::CreateMaybeMessage<::kiapi::board::commands::GetPadShapeAsPolygon>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GetVisibleLayers* Arena::CreateMaybeMessage<::kiapi::board::commands::GetVisibleLayers>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::GraphicsDefaultsResponse* Arena::CreateMaybeMessage<::kiapi::board::commands::GraphicsDefaultsResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::InteractiveMoveItems* Arena::CreateMaybeMessage<::kiapi::board::commands::InteractiveMoveItems>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::NetClassForNetsResponse* Arena::CreateMaybeMessage<::kiapi::board::commands::NetClassForNetsResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse* Arena::CreateMaybeMessage<::kiapi::board::commands::NetClassForNetsResponse_ClassesEntry_DoNotUse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::NetsResponse* Arena::CreateMaybeMessage<::kiapi::board::commands::NetsResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::PadShapeAsPolygonResponse* Arena::CreateMaybeMessage<::kiapi::board::commands::PadShapeAsPolygonResponse>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::RefillZones* Arena::CreateMaybeMessage<::kiapi::board::commands::RefillZones>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::SetActiveLayer* Arena::CreateMaybeMessage<::kiapi::board::commands::SetActiveLayer>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::SetBoardEditorAppearanceSettings* Arena::CreateMaybeMessage<::kiapi::board::commands::SetBoardEditorAppearanceSettings>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::SetBoardOrigin* Arena::CreateMaybeMessage<::kiapi::board::commands::SetBoardOrigin>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::SetVisibleLayers* Arena::CreateMaybeMessage<::kiapi::board::commands::SetVisibleLayers>(Arena*);
template<> KIAPI_IMPORTEXPORT ::kiapi::board::commands::UpdateBoardStackup* Arena::CreateMaybeMessage<::kiapi::board::commands::UpdateBoardStackup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kiapi {
namespace board {
namespace commands {

enum BoardOriginType : int {
  BOT_UNKNOWN = 0,
  BOT_GRID = 1,
  BOT_DRILL = 2,
  BoardOriginType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BoardOriginType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool BoardOriginType_IsValid(int value);
constexpr BoardOriginType BoardOriginType_MIN = BOT_UNKNOWN;
constexpr BoardOriginType BoardOriginType_MAX = BOT_DRILL;
constexpr int BoardOriginType_ARRAYSIZE = BoardOriginType_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardOriginType_descriptor();
template<typename T>
inline const std::string& BoardOriginType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoardOriginType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoardOriginType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoardOriginType_descriptor(), enum_t_value);
}
inline bool BoardOriginType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoardOriginType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoardOriginType>(
    BoardOriginType_descriptor(), name, value);
}
enum InactiveLayerDisplayMode : int {
  ILDM_UNKNOWN = 0,
  ILDM_NORMAL = 1,
  ILDM_DIMMED = 2,
  ILDM_HIDDEN = 3,
  InactiveLayerDisplayMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InactiveLayerDisplayMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool InactiveLayerDisplayMode_IsValid(int value);
constexpr InactiveLayerDisplayMode InactiveLayerDisplayMode_MIN = ILDM_UNKNOWN;
constexpr InactiveLayerDisplayMode InactiveLayerDisplayMode_MAX = ILDM_HIDDEN;
constexpr int InactiveLayerDisplayMode_ARRAYSIZE = InactiveLayerDisplayMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InactiveLayerDisplayMode_descriptor();
template<typename T>
inline const std::string& InactiveLayerDisplayMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InactiveLayerDisplayMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InactiveLayerDisplayMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InactiveLayerDisplayMode_descriptor(), enum_t_value);
}
inline bool InactiveLayerDisplayMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InactiveLayerDisplayMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InactiveLayerDisplayMode>(
    InactiveLayerDisplayMode_descriptor(), name, value);
}
enum NetColorDisplayMode : int {
  NCDM_UNKNOWN = 0,
  NCDM_ALL = 1,
  NCDM_RATSNEST = 2,
  NCDM_OFF = 3,
  NetColorDisplayMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetColorDisplayMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool NetColorDisplayMode_IsValid(int value);
constexpr NetColorDisplayMode NetColorDisplayMode_MIN = NCDM_UNKNOWN;
constexpr NetColorDisplayMode NetColorDisplayMode_MAX = NCDM_OFF;
constexpr int NetColorDisplayMode_ARRAYSIZE = NetColorDisplayMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetColorDisplayMode_descriptor();
template<typename T>
inline const std::string& NetColorDisplayMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetColorDisplayMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetColorDisplayMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetColorDisplayMode_descriptor(), enum_t_value);
}
inline bool NetColorDisplayMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetColorDisplayMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetColorDisplayMode>(
    NetColorDisplayMode_descriptor(), name, value);
}
enum BoardFlipMode : int {
  BFM_UNKNOWN = 0,
  BFM_NORMAL = 1,
  BFM_FLIPPED_X = 2,
  BoardFlipMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BoardFlipMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool BoardFlipMode_IsValid(int value);
constexpr BoardFlipMode BoardFlipMode_MIN = BFM_UNKNOWN;
constexpr BoardFlipMode BoardFlipMode_MAX = BFM_FLIPPED_X;
constexpr int BoardFlipMode_ARRAYSIZE = BoardFlipMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoardFlipMode_descriptor();
template<typename T>
inline const std::string& BoardFlipMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoardFlipMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoardFlipMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoardFlipMode_descriptor(), enum_t_value);
}
inline bool BoardFlipMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoardFlipMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoardFlipMode>(
    BoardFlipMode_descriptor(), name, value);
}
enum RatsnestDisplayMode : int {
  RDM_UNKNOWN = 0,
  RDM_ALL_LAYERS = 1,
  RDM_VISIBLE_LAYERS = 2,
  RatsnestDisplayMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RatsnestDisplayMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
KIAPI_IMPORTEXPORT bool RatsnestDisplayMode_IsValid(int value);
constexpr RatsnestDisplayMode RatsnestDisplayMode_MIN = RDM_UNKNOWN;
constexpr RatsnestDisplayMode RatsnestDisplayMode_MAX = RDM_VISIBLE_LAYERS;
constexpr int RatsnestDisplayMode_ARRAYSIZE = RatsnestDisplayMode_MAX + 1;

KIAPI_IMPORTEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RatsnestDisplayMode_descriptor();
template<typename T>
inline const std::string& RatsnestDisplayMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RatsnestDisplayMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RatsnestDisplayMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RatsnestDisplayMode_descriptor(), enum_t_value);
}
inline bool RatsnestDisplayMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RatsnestDisplayMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RatsnestDisplayMode>(
    RatsnestDisplayMode_descriptor(), name, value);
}
// ===================================================================

class KIAPI_IMPORTEXPORT GetBoardStackup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetBoardStackup) */ {
 public:
  inline GetBoardStackup() : GetBoardStackup(nullptr) {}
  ~GetBoardStackup() override;
  explicit constexpr GetBoardStackup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBoardStackup(const GetBoardStackup& from);
  GetBoardStackup(GetBoardStackup&& from) noexcept
    : GetBoardStackup() {
    *this = ::std::move(from);
  }

  inline GetBoardStackup& operator=(const GetBoardStackup& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBoardStackup& operator=(GetBoardStackup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBoardStackup& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBoardStackup* internal_default_instance() {
    return reinterpret_cast<const GetBoardStackup*>(
               &_GetBoardStackup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetBoardStackup& a, GetBoardStackup& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBoardStackup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBoardStackup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBoardStackup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBoardStackup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBoardStackup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBoardStackup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBoardStackup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetBoardStackup";
  }
  protected:
  explicit GetBoardStackup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetBoardStackup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardStackupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.BoardStackupResponse) */ {
 public:
  inline BoardStackupResponse() : BoardStackupResponse(nullptr) {}
  ~BoardStackupResponse() override;
  explicit constexpr BoardStackupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardStackupResponse(const BoardStackupResponse& from);
  BoardStackupResponse(BoardStackupResponse&& from) noexcept
    : BoardStackupResponse() {
    *this = ::std::move(from);
  }

  inline BoardStackupResponse& operator=(const BoardStackupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardStackupResponse& operator=(BoardStackupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardStackupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardStackupResponse* internal_default_instance() {
    return reinterpret_cast<const BoardStackupResponse*>(
               &_BoardStackupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoardStackupResponse& a, BoardStackupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardStackupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardStackupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardStackupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardStackupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardStackupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardStackupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardStackupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.BoardStackupResponse";
  }
  protected:
  explicit BoardStackupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackupFieldNumber = 1,
  };
  // .kiapi.board.BoardStackup stackup = 1;
  bool has_stackup() const;
  private:
  bool _internal_has_stackup() const;
  public:
  void clear_stackup();
  const ::kiapi::board::BoardStackup& stackup() const;
  PROTOBUF_NODISCARD ::kiapi::board::BoardStackup* release_stackup();
  ::kiapi::board::BoardStackup* mutable_stackup();
  void set_allocated_stackup(::kiapi::board::BoardStackup* stackup);
  private:
  const ::kiapi::board::BoardStackup& _internal_stackup() const;
  ::kiapi::board::BoardStackup* _internal_mutable_stackup();
  public:
  void unsafe_arena_set_allocated_stackup(
      ::kiapi::board::BoardStackup* stackup);
  ::kiapi::board::BoardStackup* unsafe_arena_release_stackup();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.BoardStackupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::BoardStackup* stackup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT UpdateBoardStackup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.UpdateBoardStackup) */ {
 public:
  inline UpdateBoardStackup() : UpdateBoardStackup(nullptr) {}
  ~UpdateBoardStackup() override;
  explicit constexpr UpdateBoardStackup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBoardStackup(const UpdateBoardStackup& from);
  UpdateBoardStackup(UpdateBoardStackup&& from) noexcept
    : UpdateBoardStackup() {
    *this = ::std::move(from);
  }

  inline UpdateBoardStackup& operator=(const UpdateBoardStackup& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBoardStackup& operator=(UpdateBoardStackup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBoardStackup& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBoardStackup* internal_default_instance() {
    return reinterpret_cast<const UpdateBoardStackup*>(
               &_UpdateBoardStackup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateBoardStackup& a, UpdateBoardStackup& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBoardStackup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBoardStackup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBoardStackup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBoardStackup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBoardStackup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBoardStackup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBoardStackup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.UpdateBoardStackup";
  }
  protected:
  explicit UpdateBoardStackup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
    kStackupFieldNumber = 2,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // .kiapi.board.BoardStackup stackup = 2;
  bool has_stackup() const;
  private:
  bool _internal_has_stackup() const;
  public:
  void clear_stackup();
  const ::kiapi::board::BoardStackup& stackup() const;
  PROTOBUF_NODISCARD ::kiapi::board::BoardStackup* release_stackup();
  ::kiapi::board::BoardStackup* mutable_stackup();
  void set_allocated_stackup(::kiapi::board::BoardStackup* stackup);
  private:
  const ::kiapi::board::BoardStackup& _internal_stackup() const;
  ::kiapi::board::BoardStackup* _internal_mutable_stackup();
  public:
  void unsafe_arena_set_allocated_stackup(
      ::kiapi::board::BoardStackup* stackup);
  ::kiapi::board::BoardStackup* unsafe_arena_release_stackup();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.UpdateBoardStackup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  ::kiapi::board::BoardStackup* stackup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetGraphicsDefaults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetGraphicsDefaults) */ {
 public:
  inline GetGraphicsDefaults() : GetGraphicsDefaults(nullptr) {}
  ~GetGraphicsDefaults() override;
  explicit constexpr GetGraphicsDefaults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGraphicsDefaults(const GetGraphicsDefaults& from);
  GetGraphicsDefaults(GetGraphicsDefaults&& from) noexcept
    : GetGraphicsDefaults() {
    *this = ::std::move(from);
  }

  inline GetGraphicsDefaults& operator=(const GetGraphicsDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGraphicsDefaults& operator=(GetGraphicsDefaults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGraphicsDefaults& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGraphicsDefaults* internal_default_instance() {
    return reinterpret_cast<const GetGraphicsDefaults*>(
               &_GetGraphicsDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetGraphicsDefaults& a, GetGraphicsDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGraphicsDefaults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGraphicsDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGraphicsDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGraphicsDefaults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGraphicsDefaults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetGraphicsDefaults& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGraphicsDefaults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetGraphicsDefaults";
  }
  protected:
  explicit GetGraphicsDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetGraphicsDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GraphicsDefaultsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GraphicsDefaultsResponse) */ {
 public:
  inline GraphicsDefaultsResponse() : GraphicsDefaultsResponse(nullptr) {}
  ~GraphicsDefaultsResponse() override;
  explicit constexpr GraphicsDefaultsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphicsDefaultsResponse(const GraphicsDefaultsResponse& from);
  GraphicsDefaultsResponse(GraphicsDefaultsResponse&& from) noexcept
    : GraphicsDefaultsResponse() {
    *this = ::std::move(from);
  }

  inline GraphicsDefaultsResponse& operator=(const GraphicsDefaultsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphicsDefaultsResponse& operator=(GraphicsDefaultsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphicsDefaultsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphicsDefaultsResponse* internal_default_instance() {
    return reinterpret_cast<const GraphicsDefaultsResponse*>(
               &_GraphicsDefaultsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GraphicsDefaultsResponse& a, GraphicsDefaultsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphicsDefaultsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphicsDefaultsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphicsDefaultsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphicsDefaultsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphicsDefaultsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GraphicsDefaultsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphicsDefaultsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GraphicsDefaultsResponse";
  }
  protected:
  explicit GraphicsDefaultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultsFieldNumber = 1,
  };
  // .kiapi.board.GraphicsDefaults defaults = 1;
  bool has_defaults() const;
  private:
  bool _internal_has_defaults() const;
  public:
  void clear_defaults();
  const ::kiapi::board::GraphicsDefaults& defaults() const;
  PROTOBUF_NODISCARD ::kiapi::board::GraphicsDefaults* release_defaults();
  ::kiapi::board::GraphicsDefaults* mutable_defaults();
  void set_allocated_defaults(::kiapi::board::GraphicsDefaults* defaults);
  private:
  const ::kiapi::board::GraphicsDefaults& _internal_defaults() const;
  ::kiapi::board::GraphicsDefaults* _internal_mutable_defaults();
  public:
  void unsafe_arena_set_allocated_defaults(
      ::kiapi::board::GraphicsDefaults* defaults);
  ::kiapi::board::GraphicsDefaults* unsafe_arena_release_defaults();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GraphicsDefaultsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::GraphicsDefaults* defaults_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetBoardOrigin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetBoardOrigin) */ {
 public:
  inline GetBoardOrigin() : GetBoardOrigin(nullptr) {}
  ~GetBoardOrigin() override;
  explicit constexpr GetBoardOrigin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBoardOrigin(const GetBoardOrigin& from);
  GetBoardOrigin(GetBoardOrigin&& from) noexcept
    : GetBoardOrigin() {
    *this = ::std::move(from);
  }

  inline GetBoardOrigin& operator=(const GetBoardOrigin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBoardOrigin& operator=(GetBoardOrigin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBoardOrigin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBoardOrigin* internal_default_instance() {
    return reinterpret_cast<const GetBoardOrigin*>(
               &_GetBoardOrigin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBoardOrigin& a, GetBoardOrigin& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBoardOrigin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBoardOrigin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBoardOrigin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBoardOrigin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBoardOrigin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBoardOrigin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBoardOrigin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetBoardOrigin";
  }
  protected:
  explicit GetBoardOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // .kiapi.board.commands.BoardOriginType type = 2;
  void clear_type();
  ::kiapi::board::commands::BoardOriginType type() const;
  void set_type(::kiapi::board::commands::BoardOriginType value);
  private:
  ::kiapi::board::commands::BoardOriginType _internal_type() const;
  void _internal_set_type(::kiapi::board::commands::BoardOriginType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetBoardOrigin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SetBoardOrigin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.SetBoardOrigin) */ {
 public:
  inline SetBoardOrigin() : SetBoardOrigin(nullptr) {}
  ~SetBoardOrigin() override;
  explicit constexpr SetBoardOrigin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBoardOrigin(const SetBoardOrigin& from);
  SetBoardOrigin(SetBoardOrigin&& from) noexcept
    : SetBoardOrigin() {
    *this = ::std::move(from);
  }

  inline SetBoardOrigin& operator=(const SetBoardOrigin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBoardOrigin& operator=(SetBoardOrigin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBoardOrigin& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBoardOrigin* internal_default_instance() {
    return reinterpret_cast<const SetBoardOrigin*>(
               &_SetBoardOrigin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetBoardOrigin& a, SetBoardOrigin& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBoardOrigin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBoardOrigin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBoardOrigin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBoardOrigin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBoardOrigin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBoardOrigin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBoardOrigin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.SetBoardOrigin";
  }
  protected:
  explicit SetBoardOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
    kOriginFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // .kiapi.common.types.Vector2 origin = 3;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::kiapi::common::types::Vector2& origin() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::Vector2* release_origin();
  ::kiapi::common::types::Vector2* mutable_origin();
  void set_allocated_origin(::kiapi::common::types::Vector2* origin);
  private:
  const ::kiapi::common::types::Vector2& _internal_origin() const;
  ::kiapi::common::types::Vector2* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::kiapi::common::types::Vector2* origin);
  ::kiapi::common::types::Vector2* unsafe_arena_release_origin();

  // .kiapi.board.commands.BoardOriginType type = 2;
  void clear_type();
  ::kiapi::board::commands::BoardOriginType type() const;
  void set_type(::kiapi::board::commands::BoardOriginType value);
  private:
  ::kiapi::board::commands::BoardOriginType _internal_type() const;
  void _internal_set_type(::kiapi::board::commands::BoardOriginType value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.SetBoardOrigin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  ::kiapi::common::types::Vector2* origin_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetNets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetNets) */ {
 public:
  inline GetNets() : GetNets(nullptr) {}
  ~GetNets() override;
  explicit constexpr GetNets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNets(const GetNets& from);
  GetNets(GetNets&& from) noexcept
    : GetNets() {
    *this = ::std::move(from);
  }

  inline GetNets& operator=(const GetNets& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNets& operator=(GetNets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNets& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNets* internal_default_instance() {
    return reinterpret_cast<const GetNets*>(
               &_GetNets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetNets& a, GetNets& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNets& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetNets";
  }
  protected:
  explicit GetNets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetclassFilterFieldNumber = 2,
    kBoardFieldNumber = 1,
  };
  // repeated string netclass_filter = 2;
  int netclass_filter_size() const;
  private:
  int _internal_netclass_filter_size() const;
  public:
  void clear_netclass_filter();
  const std::string& netclass_filter(int index) const;
  std::string* mutable_netclass_filter(int index);
  void set_netclass_filter(int index, const std::string& value);
  void set_netclass_filter(int index, std::string&& value);
  void set_netclass_filter(int index, const char* value);
  void set_netclass_filter(int index, const char* value, size_t size);
  std::string* add_netclass_filter();
  void add_netclass_filter(const std::string& value);
  void add_netclass_filter(std::string&& value);
  void add_netclass_filter(const char* value);
  void add_netclass_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& netclass_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_netclass_filter();
  private:
  const std::string& _internal_netclass_filter(int index) const;
  std::string* _internal_add_netclass_filter();
  public:

  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetNets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> netclass_filter_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT NetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.NetsResponse) */ {
 public:
  inline NetsResponse() : NetsResponse(nullptr) {}
  ~NetsResponse() override;
  explicit constexpr NetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetsResponse(const NetsResponse& from);
  NetsResponse(NetsResponse&& from) noexcept
    : NetsResponse() {
    *this = ::std::move(from);
  }

  inline NetsResponse& operator=(const NetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetsResponse& operator=(NetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetsResponse* internal_default_instance() {
    return reinterpret_cast<const NetsResponse*>(
               &_NetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NetsResponse& a, NetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.NetsResponse";
  }
  protected:
  explicit NetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetsFieldNumber = 1,
  };
  // repeated .kiapi.board.types.Net nets = 1;
  int nets_size() const;
  private:
  int _internal_nets_size() const;
  public:
  void clear_nets();
  ::kiapi::board::types::Net* mutable_nets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >*
      mutable_nets();
  private:
  const ::kiapi::board::types::Net& _internal_nets(int index) const;
  ::kiapi::board::types::Net* _internal_add_nets();
  public:
  const ::kiapi::board::types::Net& nets(int index) const;
  ::kiapi::board::types::Net* add_nets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >&
      nets() const;

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.NetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net > nets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetItemsByNet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetItemsByNet) */ {
 public:
  inline GetItemsByNet() : GetItemsByNet(nullptr) {}
  ~GetItemsByNet() override;
  explicit constexpr GetItemsByNet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetItemsByNet(const GetItemsByNet& from);
  GetItemsByNet(GetItemsByNet&& from) noexcept
    : GetItemsByNet() {
    *this = ::std::move(from);
  }

  inline GetItemsByNet& operator=(const GetItemsByNet& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemsByNet& operator=(GetItemsByNet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetItemsByNet& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetItemsByNet* internal_default_instance() {
    return reinterpret_cast<const GetItemsByNet*>(
               &_GetItemsByNet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetItemsByNet& a, GetItemsByNet& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemsByNet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetItemsByNet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetItemsByNet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetItemsByNet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetItemsByNet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetItemsByNet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemsByNet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetItemsByNet";
  }
  protected:
  explicit GetItemsByNet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 2,
    kNetCodesFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::kiapi::common::types::KiCadObjectType _internal_types(int index) const;
  void _internal_add_types(::kiapi::common::types::KiCadObjectType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::kiapi::common::types::KiCadObjectType types(int index) const;
  void set_types(int index, ::kiapi::common::types::KiCadObjectType value);
  void add_types(::kiapi::common::types::KiCadObjectType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // repeated .kiapi.board.types.NetCode net_codes = 3;
  int net_codes_size() const;
  private:
  int _internal_net_codes_size() const;
  public:
  void clear_net_codes();
  ::kiapi::board::types::NetCode* mutable_net_codes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetCode >*
      mutable_net_codes();
  private:
  const ::kiapi::board::types::NetCode& _internal_net_codes(int index) const;
  ::kiapi::board::types::NetCode* _internal_add_net_codes();
  public:
  const ::kiapi::board::types::NetCode& net_codes(int index) const;
  ::kiapi::board::types::NetCode* add_net_codes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetCode >&
      net_codes() const;

  // .kiapi.common.types.ItemHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kiapi::common::types::ItemHeader& header() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::ItemHeader* release_header();
  ::kiapi::common::types::ItemHeader* mutable_header();
  void set_allocated_header(::kiapi::common::types::ItemHeader* header);
  private:
  const ::kiapi::common::types::ItemHeader& _internal_header() const;
  ::kiapi::common::types::ItemHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kiapi::common::types::ItemHeader* header);
  ::kiapi::common::types::ItemHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetItemsByNet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
  mutable std::atomic<int> _types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetCode > net_codes_;
  ::kiapi::common::types::ItemHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetItemsByNetClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetItemsByNetClass) */ {
 public:
  inline GetItemsByNetClass() : GetItemsByNetClass(nullptr) {}
  ~GetItemsByNetClass() override;
  explicit constexpr GetItemsByNetClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetItemsByNetClass(const GetItemsByNetClass& from);
  GetItemsByNetClass(GetItemsByNetClass&& from) noexcept
    : GetItemsByNetClass() {
    *this = ::std::move(from);
  }

  inline GetItemsByNetClass& operator=(const GetItemsByNetClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemsByNetClass& operator=(GetItemsByNetClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetItemsByNetClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetItemsByNetClass* internal_default_instance() {
    return reinterpret_cast<const GetItemsByNetClass*>(
               &_GetItemsByNetClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetItemsByNetClass& a, GetItemsByNetClass& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemsByNetClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetItemsByNetClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetItemsByNetClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetItemsByNetClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetItemsByNetClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetItemsByNetClass& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemsByNetClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetItemsByNetClass";
  }
  protected:
  explicit GetItemsByNetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 2,
    kNetClassesFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .kiapi.common.types.KiCadObjectType types = 2;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::kiapi::common::types::KiCadObjectType _internal_types(int index) const;
  void _internal_add_types(::kiapi::common::types::KiCadObjectType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::kiapi::common::types::KiCadObjectType types(int index) const;
  void set_types(int index, ::kiapi::common::types::KiCadObjectType value);
  void add_types(::kiapi::common::types::KiCadObjectType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // repeated string net_classes = 3;
  int net_classes_size() const;
  private:
  int _internal_net_classes_size() const;
  public:
  void clear_net_classes();
  const std::string& net_classes(int index) const;
  std::string* mutable_net_classes(int index);
  void set_net_classes(int index, const std::string& value);
  void set_net_classes(int index, std::string&& value);
  void set_net_classes(int index, const char* value);
  void set_net_classes(int index, const char* value, size_t size);
  std::string* add_net_classes();
  void add_net_classes(const std::string& value);
  void add_net_classes(std::string&& value);
  void add_net_classes(const char* value);
  void add_net_classes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& net_classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_net_classes();
  private:
  const std::string& _internal_net_classes(int index) const;
  std::string* _internal_add_net_classes();
  public:

  // .kiapi.common.types.ItemHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kiapi::common::types::ItemHeader& header() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::ItemHeader* release_header();
  ::kiapi::common::types::ItemHeader* mutable_header();
  void set_allocated_header(::kiapi::common::types::ItemHeader* header);
  private:
  const ::kiapi::common::types::ItemHeader& _internal_header() const;
  ::kiapi::common::types::ItemHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kiapi::common::types::ItemHeader* header);
  ::kiapi::common::types::ItemHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetItemsByNetClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
  mutable std::atomic<int> _types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> net_classes_;
  ::kiapi::common::types::ItemHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetNetClassForNets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetNetClassForNets) */ {
 public:
  inline GetNetClassForNets() : GetNetClassForNets(nullptr) {}
  ~GetNetClassForNets() override;
  explicit constexpr GetNetClassForNets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNetClassForNets(const GetNetClassForNets& from);
  GetNetClassForNets(GetNetClassForNets&& from) noexcept
    : GetNetClassForNets() {
    *this = ::std::move(from);
  }

  inline GetNetClassForNets& operator=(const GetNetClassForNets& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetClassForNets& operator=(GetNetClassForNets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNetClassForNets& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNetClassForNets* internal_default_instance() {
    return reinterpret_cast<const GetNetClassForNets*>(
               &_GetNetClassForNets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetNetClassForNets& a, GetNetClassForNets& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetClassForNets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetClassForNets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNetClassForNets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNetClassForNets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNetClassForNets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNetClassForNets& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetClassForNets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetNetClassForNets";
  }
  protected:
  explicit GetNetClassForNets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetFieldNumber = 1,
  };
  // repeated .kiapi.board.types.Net net = 1;
  int net_size() const;
  private:
  int _internal_net_size() const;
  public:
  void clear_net();
  ::kiapi::board::types::Net* mutable_net(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >*
      mutable_net();
  private:
  const ::kiapi::board::types::Net& _internal_net(int index) const;
  ::kiapi::board::types::Net* _internal_add_net();
  public:
  const ::kiapi::board::types::Net& net(int index) const;
  ::kiapi::board::types::Net* add_net();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >&
      net() const;

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetNetClassForNets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net > net_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class NetClassForNetsResponse_ClassesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetClassForNetsResponse_ClassesEntry_DoNotUse, 
    std::string, ::kiapi::common::project::NetClass,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetClassForNetsResponse_ClassesEntry_DoNotUse, 
    std::string, ::kiapi::common::project::NetClass,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  NetClassForNetsResponse_ClassesEntry_DoNotUse();
  explicit constexpr NetClassForNetsResponse_ClassesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NetClassForNetsResponse_ClassesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NetClassForNetsResponse_ClassesEntry_DoNotUse& other);
  static const NetClassForNetsResponse_ClassesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetClassForNetsResponse_ClassesEntry_DoNotUse*>(&_NetClassForNetsResponse_ClassesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kiapi.board.commands.NetClassForNetsResponse.ClassesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT NetClassForNetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.NetClassForNetsResponse) */ {
 public:
  inline NetClassForNetsResponse() : NetClassForNetsResponse(nullptr) {}
  ~NetClassForNetsResponse() override;
  explicit constexpr NetClassForNetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetClassForNetsResponse(const NetClassForNetsResponse& from);
  NetClassForNetsResponse(NetClassForNetsResponse&& from) noexcept
    : NetClassForNetsResponse() {
    *this = ::std::move(from);
  }

  inline NetClassForNetsResponse& operator=(const NetClassForNetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetClassForNetsResponse& operator=(NetClassForNetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetClassForNetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetClassForNetsResponse* internal_default_instance() {
    return reinterpret_cast<const NetClassForNetsResponse*>(
               &_NetClassForNetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NetClassForNetsResponse& a, NetClassForNetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetClassForNetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetClassForNetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetClassForNetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetClassForNetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetClassForNetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetClassForNetsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetClassForNetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.NetClassForNetsResponse";
  }
  protected:
  explicit NetClassForNetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
  };
  // map<string, .kiapi.common.project.NetClass> classes = 1;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >&
      _internal_classes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >*
      _internal_mutable_classes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >&
      classes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >*
      mutable_classes();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.NetClassForNetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NetClassForNetsResponse_ClassesEntry_DoNotUse,
      std::string, ::kiapi::common::project::NetClass,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> classes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT RefillZones final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.RefillZones) */ {
 public:
  inline RefillZones() : RefillZones(nullptr) {}
  ~RefillZones() override;
  explicit constexpr RefillZones(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefillZones(const RefillZones& from);
  RefillZones(RefillZones&& from) noexcept
    : RefillZones() {
    *this = ::std::move(from);
  }

  inline RefillZones& operator=(const RefillZones& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefillZones& operator=(RefillZones&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefillZones& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefillZones* internal_default_instance() {
    return reinterpret_cast<const RefillZones*>(
               &_RefillZones_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RefillZones& a, RefillZones& b) {
    a.Swap(&b);
  }
  inline void Swap(RefillZones* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefillZones* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RefillZones* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RefillZones>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RefillZones& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RefillZones& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefillZones* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.RefillZones";
  }
  protected:
  explicit RefillZones(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZonesFieldNumber = 2,
    kBoardFieldNumber = 1,
  };
  // repeated .kiapi.common.types.KIID zones = 2;
  int zones_size() const;
  private:
  int _internal_zones_size() const;
  public:
  void clear_zones();
  ::kiapi::common::types::KIID* mutable_zones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
      mutable_zones();
  private:
  const ::kiapi::common::types::KIID& _internal_zones(int index) const;
  ::kiapi::common::types::KIID* _internal_add_zones();
  public:
  const ::kiapi::common::types::KIID& zones(int index) const;
  ::kiapi::common::types::KIID* add_zones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
      zones() const;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.RefillZones)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID > zones_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetPadShapeAsPolygon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetPadShapeAsPolygon) */ {
 public:
  inline GetPadShapeAsPolygon() : GetPadShapeAsPolygon(nullptr) {}
  ~GetPadShapeAsPolygon() override;
  explicit constexpr GetPadShapeAsPolygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPadShapeAsPolygon(const GetPadShapeAsPolygon& from);
  GetPadShapeAsPolygon(GetPadShapeAsPolygon&& from) noexcept
    : GetPadShapeAsPolygon() {
    *this = ::std::move(from);
  }

  inline GetPadShapeAsPolygon& operator=(const GetPadShapeAsPolygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPadShapeAsPolygon& operator=(GetPadShapeAsPolygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPadShapeAsPolygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPadShapeAsPolygon* internal_default_instance() {
    return reinterpret_cast<const GetPadShapeAsPolygon*>(
               &_GetPadShapeAsPolygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetPadShapeAsPolygon& a, GetPadShapeAsPolygon& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPadShapeAsPolygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPadShapeAsPolygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPadShapeAsPolygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPadShapeAsPolygon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPadShapeAsPolygon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPadShapeAsPolygon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPadShapeAsPolygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetPadShapeAsPolygon";
  }
  protected:
  explicit GetPadShapeAsPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadsFieldNumber = 2,
    kBoardFieldNumber = 1,
    kLayerFieldNumber = 3,
  };
  // repeated .kiapi.common.types.KIID pads = 2;
  int pads_size() const;
  private:
  int _internal_pads_size() const;
  public:
  void clear_pads();
  ::kiapi::common::types::KIID* mutable_pads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
      mutable_pads();
  private:
  const ::kiapi::common::types::KIID& _internal_pads(int index) const;
  ::kiapi::common::types::KIID* _internal_add_pads();
  public:
  const ::kiapi::common::types::KIID& pads(int index) const;
  ::kiapi::common::types::KIID* add_pads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
      pads() const;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // .kiapi.board.types.BoardLayer layer = 3;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetPadShapeAsPolygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID > pads_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT PadShapeAsPolygonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.PadShapeAsPolygonResponse) */ {
 public:
  inline PadShapeAsPolygonResponse() : PadShapeAsPolygonResponse(nullptr) {}
  ~PadShapeAsPolygonResponse() override;
  explicit constexpr PadShapeAsPolygonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PadShapeAsPolygonResponse(const PadShapeAsPolygonResponse& from);
  PadShapeAsPolygonResponse(PadShapeAsPolygonResponse&& from) noexcept
    : PadShapeAsPolygonResponse() {
    *this = ::std::move(from);
  }

  inline PadShapeAsPolygonResponse& operator=(const PadShapeAsPolygonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PadShapeAsPolygonResponse& operator=(PadShapeAsPolygonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PadShapeAsPolygonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PadShapeAsPolygonResponse* internal_default_instance() {
    return reinterpret_cast<const PadShapeAsPolygonResponse*>(
               &_PadShapeAsPolygonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PadShapeAsPolygonResponse& a, PadShapeAsPolygonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PadShapeAsPolygonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PadShapeAsPolygonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PadShapeAsPolygonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PadShapeAsPolygonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PadShapeAsPolygonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PadShapeAsPolygonResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PadShapeAsPolygonResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.PadShapeAsPolygonResponse";
  }
  protected:
  explicit PadShapeAsPolygonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadsFieldNumber = 1,
    kPolygonsFieldNumber = 2,
  };
  // repeated .kiapi.common.types.KIID pads = 1;
  int pads_size() const;
  private:
  int _internal_pads_size() const;
  public:
  void clear_pads();
  ::kiapi::common::types::KIID* mutable_pads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
      mutable_pads();
  private:
  const ::kiapi::common::types::KIID& _internal_pads(int index) const;
  ::kiapi::common::types::KIID* _internal_add_pads();
  public:
  const ::kiapi::common::types::KIID& pads(int index) const;
  ::kiapi::common::types::KIID* add_pads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
      pads() const;

  // repeated .kiapi.common.types.PolygonWithHoles polygons = 2;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::kiapi::common::types::PolygonWithHoles* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::PolygonWithHoles >*
      mutable_polygons();
  private:
  const ::kiapi::common::types::PolygonWithHoles& _internal_polygons(int index) const;
  ::kiapi::common::types::PolygonWithHoles* _internal_add_polygons();
  public:
  const ::kiapi::common::types::PolygonWithHoles& polygons(int index) const;
  ::kiapi::common::types::PolygonWithHoles* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::PolygonWithHoles >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.PadShapeAsPolygonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID > pads_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::PolygonWithHoles > polygons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetVisibleLayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetVisibleLayers) */ {
 public:
  inline GetVisibleLayers() : GetVisibleLayers(nullptr) {}
  ~GetVisibleLayers() override;
  explicit constexpr GetVisibleLayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVisibleLayers(const GetVisibleLayers& from);
  GetVisibleLayers(GetVisibleLayers&& from) noexcept
    : GetVisibleLayers() {
    *this = ::std::move(from);
  }

  inline GetVisibleLayers& operator=(const GetVisibleLayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleLayers& operator=(GetVisibleLayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVisibleLayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVisibleLayers* internal_default_instance() {
    return reinterpret_cast<const GetVisibleLayers*>(
               &_GetVisibleLayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetVisibleLayers& a, GetVisibleLayers& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleLayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleLayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVisibleLayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVisibleLayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVisibleLayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVisibleLayers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleLayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetVisibleLayers";
  }
  protected:
  explicit GetVisibleLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetVisibleLayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardLayerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.BoardLayerResponse) */ {
 public:
  inline BoardLayerResponse() : BoardLayerResponse(nullptr) {}
  ~BoardLayerResponse() override;
  explicit constexpr BoardLayerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardLayerResponse(const BoardLayerResponse& from);
  BoardLayerResponse(BoardLayerResponse&& from) noexcept
    : BoardLayerResponse() {
    *this = ::std::move(from);
  }

  inline BoardLayerResponse& operator=(const BoardLayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardLayerResponse& operator=(BoardLayerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardLayerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardLayerResponse* internal_default_instance() {
    return reinterpret_cast<const BoardLayerResponse*>(
               &_BoardLayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BoardLayerResponse& a, BoardLayerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardLayerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardLayerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardLayerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardLayerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardLayerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardLayerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardLayerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.BoardLayerResponse";
  }
  protected:
  explicit BoardLayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 1,
  };
  // .kiapi.board.types.BoardLayer layer = 1;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.BoardLayerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardLayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.BoardLayers) */ {
 public:
  inline BoardLayers() : BoardLayers(nullptr) {}
  ~BoardLayers() override;
  explicit constexpr BoardLayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardLayers(const BoardLayers& from);
  BoardLayers(BoardLayers&& from) noexcept
    : BoardLayers() {
    *this = ::std::move(from);
  }

  inline BoardLayers& operator=(const BoardLayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardLayers& operator=(BoardLayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardLayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardLayers* internal_default_instance() {
    return reinterpret_cast<const BoardLayers*>(
               &_BoardLayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BoardLayers& a, BoardLayers& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardLayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardLayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardLayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardLayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardLayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardLayers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardLayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.BoardLayers";
  }
  protected:
  explicit BoardLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .kiapi.board.types.BoardLayer layers = 1;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  private:
  ::kiapi::board::types::BoardLayer _internal_layers(int index) const;
  void _internal_add_layers(::kiapi::board::types::BoardLayer value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_layers();
  public:
  ::kiapi::board::types::BoardLayer layers(int index) const;
  void set_layers(int index, ::kiapi::board::types::BoardLayer value);
  void add_layers(::kiapi::board::types::BoardLayer value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_layers();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.BoardLayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> layers_;
  mutable std::atomic<int> _layers_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SetVisibleLayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.SetVisibleLayers) */ {
 public:
  inline SetVisibleLayers() : SetVisibleLayers(nullptr) {}
  ~SetVisibleLayers() override;
  explicit constexpr SetVisibleLayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVisibleLayers(const SetVisibleLayers& from);
  SetVisibleLayers(SetVisibleLayers&& from) noexcept
    : SetVisibleLayers() {
    *this = ::std::move(from);
  }

  inline SetVisibleLayers& operator=(const SetVisibleLayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVisibleLayers& operator=(SetVisibleLayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVisibleLayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVisibleLayers* internal_default_instance() {
    return reinterpret_cast<const SetVisibleLayers*>(
               &_SetVisibleLayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetVisibleLayers& a, SetVisibleLayers& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVisibleLayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVisibleLayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVisibleLayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVisibleLayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVisibleLayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVisibleLayers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVisibleLayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.SetVisibleLayers";
  }
  protected:
  explicit SetVisibleLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kBoardFieldNumber = 1,
  };
  // repeated .kiapi.board.types.BoardLayer layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  private:
  ::kiapi::board::types::BoardLayer _internal_layers(int index) const;
  void _internal_add_layers(::kiapi::board::types::BoardLayer value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_layers();
  public:
  ::kiapi::board::types::BoardLayer layers(int index) const;
  void set_layers(int index, ::kiapi::board::types::BoardLayer value);
  void add_layers(::kiapi::board::types::BoardLayer value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_layers();

  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.SetVisibleLayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> layers_;
  mutable std::atomic<int> _layers_cached_byte_size_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetActiveLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetActiveLayer) */ {
 public:
  inline GetActiveLayer() : GetActiveLayer(nullptr) {}
  ~GetActiveLayer() override;
  explicit constexpr GetActiveLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActiveLayer(const GetActiveLayer& from);
  GetActiveLayer(GetActiveLayer&& from) noexcept
    : GetActiveLayer() {
    *this = ::std::move(from);
  }

  inline GetActiveLayer& operator=(const GetActiveLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActiveLayer& operator=(GetActiveLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActiveLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActiveLayer* internal_default_instance() {
    return reinterpret_cast<const GetActiveLayer*>(
               &_GetActiveLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetActiveLayer& a, GetActiveLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActiveLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActiveLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActiveLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActiveLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActiveLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetActiveLayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActiveLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetActiveLayer";
  }
  protected:
  explicit GetActiveLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetActiveLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SetActiveLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.SetActiveLayer) */ {
 public:
  inline SetActiveLayer() : SetActiveLayer(nullptr) {}
  ~SetActiveLayer() override;
  explicit constexpr SetActiveLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetActiveLayer(const SetActiveLayer& from);
  SetActiveLayer(SetActiveLayer&& from) noexcept
    : SetActiveLayer() {
    *this = ::std::move(from);
  }

  inline SetActiveLayer& operator=(const SetActiveLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActiveLayer& operator=(SetActiveLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetActiveLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetActiveLayer* internal_default_instance() {
    return reinterpret_cast<const SetActiveLayer*>(
               &_SetActiveLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetActiveLayer& a, SetActiveLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActiveLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActiveLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetActiveLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetActiveLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetActiveLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetActiveLayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActiveLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.SetActiveLayer";
  }
  protected:
  explicit SetActiveLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 1,
    kLayerFieldNumber = 2,
  };
  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // .kiapi.board.types.BoardLayer layer = 2;
  void clear_layer();
  ::kiapi::board::types::BoardLayer layer() const;
  void set_layer(::kiapi::board::types::BoardLayer value);
  private:
  ::kiapi::board::types::BoardLayer _internal_layer() const;
  void _internal_set_layer(::kiapi::board::types::BoardLayer value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.SetActiveLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  int layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT BoardEditorAppearanceSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.BoardEditorAppearanceSettings) */ {
 public:
  inline BoardEditorAppearanceSettings() : BoardEditorAppearanceSettings(nullptr) {}
  ~BoardEditorAppearanceSettings() override;
  explicit constexpr BoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardEditorAppearanceSettings(const BoardEditorAppearanceSettings& from);
  BoardEditorAppearanceSettings(BoardEditorAppearanceSettings&& from) noexcept
    : BoardEditorAppearanceSettings() {
    *this = ::std::move(from);
  }

  inline BoardEditorAppearanceSettings& operator=(const BoardEditorAppearanceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardEditorAppearanceSettings& operator=(BoardEditorAppearanceSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardEditorAppearanceSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardEditorAppearanceSettings* internal_default_instance() {
    return reinterpret_cast<const BoardEditorAppearanceSettings*>(
               &_BoardEditorAppearanceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BoardEditorAppearanceSettings& a, BoardEditorAppearanceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardEditorAppearanceSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardEditorAppearanceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardEditorAppearanceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardEditorAppearanceSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardEditorAppearanceSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardEditorAppearanceSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardEditorAppearanceSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.BoardEditorAppearanceSettings";
  }
  protected:
  explicit BoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInactiveLayerDisplayFieldNumber = 1,
    kNetColorDisplayFieldNumber = 2,
    kBoardFlipFieldNumber = 3,
    kRatsnestDisplayFieldNumber = 4,
  };
  // .kiapi.board.commands.InactiveLayerDisplayMode inactive_layer_display = 1;
  void clear_inactive_layer_display();
  ::kiapi::board::commands::InactiveLayerDisplayMode inactive_layer_display() const;
  void set_inactive_layer_display(::kiapi::board::commands::InactiveLayerDisplayMode value);
  private:
  ::kiapi::board::commands::InactiveLayerDisplayMode _internal_inactive_layer_display() const;
  void _internal_set_inactive_layer_display(::kiapi::board::commands::InactiveLayerDisplayMode value);
  public:

  // .kiapi.board.commands.NetColorDisplayMode net_color_display = 2;
  void clear_net_color_display();
  ::kiapi::board::commands::NetColorDisplayMode net_color_display() const;
  void set_net_color_display(::kiapi::board::commands::NetColorDisplayMode value);
  private:
  ::kiapi::board::commands::NetColorDisplayMode _internal_net_color_display() const;
  void _internal_set_net_color_display(::kiapi::board::commands::NetColorDisplayMode value);
  public:

  // .kiapi.board.commands.BoardFlipMode board_flip = 3;
  void clear_board_flip();
  ::kiapi::board::commands::BoardFlipMode board_flip() const;
  void set_board_flip(::kiapi::board::commands::BoardFlipMode value);
  private:
  ::kiapi::board::commands::BoardFlipMode _internal_board_flip() const;
  void _internal_set_board_flip(::kiapi::board::commands::BoardFlipMode value);
  public:

  // .kiapi.board.commands.RatsnestDisplayMode ratsnest_display = 4;
  void clear_ratsnest_display();
  ::kiapi::board::commands::RatsnestDisplayMode ratsnest_display() const;
  void set_ratsnest_display(::kiapi::board::commands::RatsnestDisplayMode value);
  private:
  ::kiapi::board::commands::RatsnestDisplayMode _internal_ratsnest_display() const;
  void _internal_set_ratsnest_display(::kiapi::board::commands::RatsnestDisplayMode value);
  public:

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.BoardEditorAppearanceSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int inactive_layer_display_;
  int net_color_display_;
  int board_flip_;
  int ratsnest_display_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT GetBoardEditorAppearanceSettings final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:kiapi.board.commands.GetBoardEditorAppearanceSettings) */ {
 public:
  inline GetBoardEditorAppearanceSettings() : GetBoardEditorAppearanceSettings(nullptr) {}
  explicit constexpr GetBoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBoardEditorAppearanceSettings(const GetBoardEditorAppearanceSettings& from);
  GetBoardEditorAppearanceSettings(GetBoardEditorAppearanceSettings&& from) noexcept
    : GetBoardEditorAppearanceSettings() {
    *this = ::std::move(from);
  }

  inline GetBoardEditorAppearanceSettings& operator=(const GetBoardEditorAppearanceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBoardEditorAppearanceSettings& operator=(GetBoardEditorAppearanceSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBoardEditorAppearanceSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBoardEditorAppearanceSettings* internal_default_instance() {
    return reinterpret_cast<const GetBoardEditorAppearanceSettings*>(
               &_GetBoardEditorAppearanceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetBoardEditorAppearanceSettings& a, GetBoardEditorAppearanceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBoardEditorAppearanceSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBoardEditorAppearanceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBoardEditorAppearanceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBoardEditorAppearanceSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetBoardEditorAppearanceSettings& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetBoardEditorAppearanceSettings& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.GetBoardEditorAppearanceSettings";
  }
  protected:
  explicit GetBoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.GetBoardEditorAppearanceSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT SetBoardEditorAppearanceSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.SetBoardEditorAppearanceSettings) */ {
 public:
  inline SetBoardEditorAppearanceSettings() : SetBoardEditorAppearanceSettings(nullptr) {}
  ~SetBoardEditorAppearanceSettings() override;
  explicit constexpr SetBoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBoardEditorAppearanceSettings(const SetBoardEditorAppearanceSettings& from);
  SetBoardEditorAppearanceSettings(SetBoardEditorAppearanceSettings&& from) noexcept
    : SetBoardEditorAppearanceSettings() {
    *this = ::std::move(from);
  }

  inline SetBoardEditorAppearanceSettings& operator=(const SetBoardEditorAppearanceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBoardEditorAppearanceSettings& operator=(SetBoardEditorAppearanceSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBoardEditorAppearanceSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBoardEditorAppearanceSettings* internal_default_instance() {
    return reinterpret_cast<const SetBoardEditorAppearanceSettings*>(
               &_SetBoardEditorAppearanceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetBoardEditorAppearanceSettings& a, SetBoardEditorAppearanceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBoardEditorAppearanceSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBoardEditorAppearanceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBoardEditorAppearanceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBoardEditorAppearanceSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBoardEditorAppearanceSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBoardEditorAppearanceSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBoardEditorAppearanceSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.SetBoardEditorAppearanceSettings";
  }
  protected:
  explicit SetBoardEditorAppearanceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // .kiapi.board.commands.BoardEditorAppearanceSettings settings = 1;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::kiapi::board::commands::BoardEditorAppearanceSettings& settings() const;
  PROTOBUF_NODISCARD ::kiapi::board::commands::BoardEditorAppearanceSettings* release_settings();
  ::kiapi::board::commands::BoardEditorAppearanceSettings* mutable_settings();
  void set_allocated_settings(::kiapi::board::commands::BoardEditorAppearanceSettings* settings);
  private:
  const ::kiapi::board::commands::BoardEditorAppearanceSettings& _internal_settings() const;
  ::kiapi::board::commands::BoardEditorAppearanceSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::kiapi::board::commands::BoardEditorAppearanceSettings* settings);
  ::kiapi::board::commands::BoardEditorAppearanceSettings* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.SetBoardEditorAppearanceSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kiapi::board::commands::BoardEditorAppearanceSettings* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class KIAPI_IMPORTEXPORT InteractiveMoveItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kiapi.board.commands.InteractiveMoveItems) */ {
 public:
  inline InteractiveMoveItems() : InteractiveMoveItems(nullptr) {}
  ~InteractiveMoveItems() override;
  explicit constexpr InteractiveMoveItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InteractiveMoveItems(const InteractiveMoveItems& from);
  InteractiveMoveItems(InteractiveMoveItems&& from) noexcept
    : InteractiveMoveItems() {
    *this = ::std::move(from);
  }

  inline InteractiveMoveItems& operator=(const InteractiveMoveItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveMoveItems& operator=(InteractiveMoveItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractiveMoveItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const InteractiveMoveItems* internal_default_instance() {
    return reinterpret_cast<const InteractiveMoveItems*>(
               &_InteractiveMoveItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(InteractiveMoveItems& a, InteractiveMoveItems& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractiveMoveItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveMoveItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractiveMoveItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InteractiveMoveItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InteractiveMoveItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InteractiveMoveItems& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractiveMoveItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kiapi.board.commands.InteractiveMoveItems";
  }
  protected:
  explicit InteractiveMoveItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kBoardFieldNumber = 1,
  };
  // repeated .kiapi.common.types.KIID items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::kiapi::common::types::KIID* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
      mutable_items();
  private:
  const ::kiapi::common::types::KIID& _internal_items(int index) const;
  ::kiapi::common::types::KIID* _internal_add_items();
  public:
  const ::kiapi::common::types::KIID& items(int index) const;
  ::kiapi::common::types::KIID* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
      items() const;

  // .kiapi.common.types.DocumentSpecifier board = 1;
  bool has_board() const;
  private:
  bool _internal_has_board() const;
  public:
  void clear_board();
  const ::kiapi::common::types::DocumentSpecifier& board() const;
  PROTOBUF_NODISCARD ::kiapi::common::types::DocumentSpecifier* release_board();
  ::kiapi::common::types::DocumentSpecifier* mutable_board();
  void set_allocated_board(::kiapi::common::types::DocumentSpecifier* board);
  private:
  const ::kiapi::common::types::DocumentSpecifier& _internal_board() const;
  ::kiapi::common::types::DocumentSpecifier* _internal_mutable_board();
  public:
  void unsafe_arena_set_allocated_board(
      ::kiapi::common::types::DocumentSpecifier* board);
  ::kiapi::common::types::DocumentSpecifier* unsafe_arena_release_board();

  // @@protoc_insertion_point(class_scope:kiapi.board.commands.InteractiveMoveItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID > items_;
  ::kiapi::common::types::DocumentSpecifier* board_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_board_2fboard_5fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetBoardStackup

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool GetBoardStackup::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool GetBoardStackup::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetBoardStackup::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetBoardStackup::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetBoardStackup.board)
  return _internal_board();
}
inline void GetBoardStackup::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetBoardStackup.board)
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardStackup::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardStackup::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetBoardStackup.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardStackup::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardStackup::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetBoardStackup.board)
  return _msg;
}
inline void GetBoardStackup::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetBoardStackup.board)
}

// -------------------------------------------------------------------

// BoardStackupResponse

// .kiapi.board.BoardStackup stackup = 1;
inline bool BoardStackupResponse::_internal_has_stackup() const {
  return this != internal_default_instance() && stackup_ != nullptr;
}
inline bool BoardStackupResponse::has_stackup() const {
  return _internal_has_stackup();
}
inline const ::kiapi::board::BoardStackup& BoardStackupResponse::_internal_stackup() const {
  const ::kiapi::board::BoardStackup* p = stackup_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::BoardStackup&>(
      ::kiapi::board::_BoardStackup_default_instance_);
}
inline const ::kiapi::board::BoardStackup& BoardStackupResponse::stackup() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.BoardStackupResponse.stackup)
  return _internal_stackup();
}
inline void BoardStackupResponse::unsafe_arena_set_allocated_stackup(
    ::kiapi::board::BoardStackup* stackup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stackup_);
  }
  stackup_ = stackup;
  if (stackup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.BoardStackupResponse.stackup)
}
inline ::kiapi::board::BoardStackup* BoardStackupResponse::release_stackup() {
  
  ::kiapi::board::BoardStackup* temp = stackup_;
  stackup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::BoardStackup* BoardStackupResponse::unsafe_arena_release_stackup() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.BoardStackupResponse.stackup)
  
  ::kiapi::board::BoardStackup* temp = stackup_;
  stackup_ = nullptr;
  return temp;
}
inline ::kiapi::board::BoardStackup* BoardStackupResponse::_internal_mutable_stackup() {
  
  if (stackup_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::BoardStackup>(GetArenaForAllocation());
    stackup_ = p;
  }
  return stackup_;
}
inline ::kiapi::board::BoardStackup* BoardStackupResponse::mutable_stackup() {
  ::kiapi::board::BoardStackup* _msg = _internal_mutable_stackup();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.BoardStackupResponse.stackup)
  return _msg;
}
inline void BoardStackupResponse::set_allocated_stackup(::kiapi::board::BoardStackup* stackup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stackup_);
  }
  if (stackup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stackup));
    if (message_arena != submessage_arena) {
      stackup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stackup, submessage_arena);
    }
    
  } else {
    
  }
  stackup_ = stackup;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.BoardStackupResponse.stackup)
}

// -------------------------------------------------------------------

// UpdateBoardStackup

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool UpdateBoardStackup::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool UpdateBoardStackup::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& UpdateBoardStackup::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& UpdateBoardStackup::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.UpdateBoardStackup.board)
  return _internal_board();
}
inline void UpdateBoardStackup::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.UpdateBoardStackup.board)
}
inline ::kiapi::common::types::DocumentSpecifier* UpdateBoardStackup::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* UpdateBoardStackup::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.UpdateBoardStackup.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* UpdateBoardStackup::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* UpdateBoardStackup::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.UpdateBoardStackup.board)
  return _msg;
}
inline void UpdateBoardStackup::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.UpdateBoardStackup.board)
}

// .kiapi.board.BoardStackup stackup = 2;
inline bool UpdateBoardStackup::_internal_has_stackup() const {
  return this != internal_default_instance() && stackup_ != nullptr;
}
inline bool UpdateBoardStackup::has_stackup() const {
  return _internal_has_stackup();
}
inline const ::kiapi::board::BoardStackup& UpdateBoardStackup::_internal_stackup() const {
  const ::kiapi::board::BoardStackup* p = stackup_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::BoardStackup&>(
      ::kiapi::board::_BoardStackup_default_instance_);
}
inline const ::kiapi::board::BoardStackup& UpdateBoardStackup::stackup() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.UpdateBoardStackup.stackup)
  return _internal_stackup();
}
inline void UpdateBoardStackup::unsafe_arena_set_allocated_stackup(
    ::kiapi::board::BoardStackup* stackup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stackup_);
  }
  stackup_ = stackup;
  if (stackup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.UpdateBoardStackup.stackup)
}
inline ::kiapi::board::BoardStackup* UpdateBoardStackup::release_stackup() {
  
  ::kiapi::board::BoardStackup* temp = stackup_;
  stackup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::BoardStackup* UpdateBoardStackup::unsafe_arena_release_stackup() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.UpdateBoardStackup.stackup)
  
  ::kiapi::board::BoardStackup* temp = stackup_;
  stackup_ = nullptr;
  return temp;
}
inline ::kiapi::board::BoardStackup* UpdateBoardStackup::_internal_mutable_stackup() {
  
  if (stackup_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::BoardStackup>(GetArenaForAllocation());
    stackup_ = p;
  }
  return stackup_;
}
inline ::kiapi::board::BoardStackup* UpdateBoardStackup::mutable_stackup() {
  ::kiapi::board::BoardStackup* _msg = _internal_mutable_stackup();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.UpdateBoardStackup.stackup)
  return _msg;
}
inline void UpdateBoardStackup::set_allocated_stackup(::kiapi::board::BoardStackup* stackup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stackup_);
  }
  if (stackup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stackup));
    if (message_arena != submessage_arena) {
      stackup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stackup, submessage_arena);
    }
    
  } else {
    
  }
  stackup_ = stackup;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.UpdateBoardStackup.stackup)
}

// -------------------------------------------------------------------

// GetGraphicsDefaults

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool GetGraphicsDefaults::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool GetGraphicsDefaults::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetGraphicsDefaults::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetGraphicsDefaults::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetGraphicsDefaults.board)
  return _internal_board();
}
inline void GetGraphicsDefaults::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetGraphicsDefaults.board)
}
inline ::kiapi::common::types::DocumentSpecifier* GetGraphicsDefaults::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetGraphicsDefaults::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetGraphicsDefaults.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetGraphicsDefaults::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetGraphicsDefaults::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetGraphicsDefaults.board)
  return _msg;
}
inline void GetGraphicsDefaults::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetGraphicsDefaults.board)
}

// -------------------------------------------------------------------

// GraphicsDefaultsResponse

// .kiapi.board.GraphicsDefaults defaults = 1;
inline bool GraphicsDefaultsResponse::_internal_has_defaults() const {
  return this != internal_default_instance() && defaults_ != nullptr;
}
inline bool GraphicsDefaultsResponse::has_defaults() const {
  return _internal_has_defaults();
}
inline const ::kiapi::board::GraphicsDefaults& GraphicsDefaultsResponse::_internal_defaults() const {
  const ::kiapi::board::GraphicsDefaults* p = defaults_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::GraphicsDefaults&>(
      ::kiapi::board::_GraphicsDefaults_default_instance_);
}
inline const ::kiapi::board::GraphicsDefaults& GraphicsDefaultsResponse::defaults() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GraphicsDefaultsResponse.defaults)
  return _internal_defaults();
}
inline void GraphicsDefaultsResponse::unsafe_arena_set_allocated_defaults(
    ::kiapi::board::GraphicsDefaults* defaults) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaults_);
  }
  defaults_ = defaults;
  if (defaults) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GraphicsDefaultsResponse.defaults)
}
inline ::kiapi::board::GraphicsDefaults* GraphicsDefaultsResponse::release_defaults() {
  
  ::kiapi::board::GraphicsDefaults* temp = defaults_;
  defaults_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::GraphicsDefaults* GraphicsDefaultsResponse::unsafe_arena_release_defaults() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GraphicsDefaultsResponse.defaults)
  
  ::kiapi::board::GraphicsDefaults* temp = defaults_;
  defaults_ = nullptr;
  return temp;
}
inline ::kiapi::board::GraphicsDefaults* GraphicsDefaultsResponse::_internal_mutable_defaults() {
  
  if (defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::GraphicsDefaults>(GetArenaForAllocation());
    defaults_ = p;
  }
  return defaults_;
}
inline ::kiapi::board::GraphicsDefaults* GraphicsDefaultsResponse::mutable_defaults() {
  ::kiapi::board::GraphicsDefaults* _msg = _internal_mutable_defaults();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GraphicsDefaultsResponse.defaults)
  return _msg;
}
inline void GraphicsDefaultsResponse::set_allocated_defaults(::kiapi::board::GraphicsDefaults* defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaults_);
  }
  if (defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaults));
    if (message_arena != submessage_arena) {
      defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaults, submessage_arena);
    }
    
  } else {
    
  }
  defaults_ = defaults;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GraphicsDefaultsResponse.defaults)
}

// -------------------------------------------------------------------

// GetBoardOrigin

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool GetBoardOrigin::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool GetBoardOrigin::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetBoardOrigin::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetBoardOrigin::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetBoardOrigin.board)
  return _internal_board();
}
inline void GetBoardOrigin::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetBoardOrigin.board)
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardOrigin::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardOrigin::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetBoardOrigin.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardOrigin::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetBoardOrigin::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetBoardOrigin.board)
  return _msg;
}
inline void GetBoardOrigin::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetBoardOrigin.board)
}

// .kiapi.board.commands.BoardOriginType type = 2;
inline void GetBoardOrigin::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::commands::BoardOriginType GetBoardOrigin::_internal_type() const {
  return static_cast< ::kiapi::board::commands::BoardOriginType >(type_);
}
inline ::kiapi::board::commands::BoardOriginType GetBoardOrigin::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetBoardOrigin.type)
  return _internal_type();
}
inline void GetBoardOrigin::_internal_set_type(::kiapi::board::commands::BoardOriginType value) {
  
  type_ = value;
}
inline void GetBoardOrigin::set_type(::kiapi::board::commands::BoardOriginType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetBoardOrigin.type)
}

// -------------------------------------------------------------------

// SetBoardOrigin

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool SetBoardOrigin::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool SetBoardOrigin::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& SetBoardOrigin::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& SetBoardOrigin::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetBoardOrigin.board)
  return _internal_board();
}
inline void SetBoardOrigin::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.SetBoardOrigin.board)
}
inline ::kiapi::common::types::DocumentSpecifier* SetBoardOrigin::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetBoardOrigin::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.SetBoardOrigin.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetBoardOrigin::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* SetBoardOrigin::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.SetBoardOrigin.board)
  return _msg;
}
inline void SetBoardOrigin::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.SetBoardOrigin.board)
}

// .kiapi.board.commands.BoardOriginType type = 2;
inline void SetBoardOrigin::clear_type() {
  type_ = 0;
}
inline ::kiapi::board::commands::BoardOriginType SetBoardOrigin::_internal_type() const {
  return static_cast< ::kiapi::board::commands::BoardOriginType >(type_);
}
inline ::kiapi::board::commands::BoardOriginType SetBoardOrigin::type() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetBoardOrigin.type)
  return _internal_type();
}
inline void SetBoardOrigin::_internal_set_type(::kiapi::board::commands::BoardOriginType value) {
  
  type_ = value;
}
inline void SetBoardOrigin::set_type(::kiapi::board::commands::BoardOriginType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.SetBoardOrigin.type)
}

// .kiapi.common.types.Vector2 origin = 3;
inline bool SetBoardOrigin::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool SetBoardOrigin::has_origin() const {
  return _internal_has_origin();
}
inline const ::kiapi::common::types::Vector2& SetBoardOrigin::_internal_origin() const {
  const ::kiapi::common::types::Vector2* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::Vector2&>(
      ::kiapi::common::types::_Vector2_default_instance_);
}
inline const ::kiapi::common::types::Vector2& SetBoardOrigin::origin() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetBoardOrigin.origin)
  return _internal_origin();
}
inline void SetBoardOrigin::unsafe_arena_set_allocated_origin(
    ::kiapi::common::types::Vector2* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.SetBoardOrigin.origin)
}
inline ::kiapi::common::types::Vector2* SetBoardOrigin::release_origin() {
  
  ::kiapi::common::types::Vector2* temp = origin_;
  origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::Vector2* SetBoardOrigin::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.SetBoardOrigin.origin)
  
  ::kiapi::common::types::Vector2* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::Vector2* SetBoardOrigin::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::Vector2>(GetArenaForAllocation());
    origin_ = p;
  }
  return origin_;
}
inline ::kiapi::common::types::Vector2* SetBoardOrigin::mutable_origin() {
  ::kiapi::common::types::Vector2* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.SetBoardOrigin.origin)
  return _msg;
}
inline void SetBoardOrigin::set_allocated_origin(::kiapi::common::types::Vector2* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin));
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.SetBoardOrigin.origin)
}

// -------------------------------------------------------------------

// GetNets

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool GetNets::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool GetNets::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetNets::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetNets::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetNets.board)
  return _internal_board();
}
inline void GetNets::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetNets.board)
}
inline ::kiapi::common::types::DocumentSpecifier* GetNets::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetNets::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetNets.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetNets::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetNets::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetNets.board)
  return _msg;
}
inline void GetNets::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetNets.board)
}

// repeated string netclass_filter = 2;
inline int GetNets::_internal_netclass_filter_size() const {
  return netclass_filter_.size();
}
inline int GetNets::netclass_filter_size() const {
  return _internal_netclass_filter_size();
}
inline void GetNets::clear_netclass_filter() {
  netclass_filter_.Clear();
}
inline std::string* GetNets::add_netclass_filter() {
  std::string* _s = _internal_add_netclass_filter();
  // @@protoc_insertion_point(field_add_mutable:kiapi.board.commands.GetNets.netclass_filter)
  return _s;
}
inline const std::string& GetNets::_internal_netclass_filter(int index) const {
  return netclass_filter_.Get(index);
}
inline const std::string& GetNets::netclass_filter(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetNets.netclass_filter)
  return _internal_netclass_filter(index);
}
inline std::string* GetNets::mutable_netclass_filter(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetNets.netclass_filter)
  return netclass_filter_.Mutable(index);
}
inline void GetNets::set_netclass_filter(int index, const std::string& value) {
  netclass_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetNets.netclass_filter)
}
inline void GetNets::set_netclass_filter(int index, std::string&& value) {
  netclass_filter_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetNets.netclass_filter)
}
inline void GetNets::set_netclass_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  netclass_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kiapi.board.commands.GetNets.netclass_filter)
}
inline void GetNets::set_netclass_filter(int index, const char* value, size_t size) {
  netclass_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kiapi.board.commands.GetNets.netclass_filter)
}
inline std::string* GetNets::_internal_add_netclass_filter() {
  return netclass_filter_.Add();
}
inline void GetNets::add_netclass_filter(const std::string& value) {
  netclass_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetNets.netclass_filter)
}
inline void GetNets::add_netclass_filter(std::string&& value) {
  netclass_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetNets.netclass_filter)
}
inline void GetNets::add_netclass_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  netclass_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kiapi.board.commands.GetNets.netclass_filter)
}
inline void GetNets::add_netclass_filter(const char* value, size_t size) {
  netclass_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kiapi.board.commands.GetNets.netclass_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetNets::netclass_filter() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.GetNets.netclass_filter)
  return netclass_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetNets::mutable_netclass_filter() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.GetNets.netclass_filter)
  return &netclass_filter_;
}

// -------------------------------------------------------------------

// NetsResponse

// repeated .kiapi.board.types.Net nets = 1;
inline int NetsResponse::_internal_nets_size() const {
  return nets_.size();
}
inline int NetsResponse::nets_size() const {
  return _internal_nets_size();
}
inline ::kiapi::board::types::Net* NetsResponse::mutable_nets(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.NetsResponse.nets)
  return nets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >*
NetsResponse::mutable_nets() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.NetsResponse.nets)
  return &nets_;
}
inline const ::kiapi::board::types::Net& NetsResponse::_internal_nets(int index) const {
  return nets_.Get(index);
}
inline const ::kiapi::board::types::Net& NetsResponse::nets(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.NetsResponse.nets)
  return _internal_nets(index);
}
inline ::kiapi::board::types::Net* NetsResponse::_internal_add_nets() {
  return nets_.Add();
}
inline ::kiapi::board::types::Net* NetsResponse::add_nets() {
  ::kiapi::board::types::Net* _add = _internal_add_nets();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.NetsResponse.nets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >&
NetsResponse::nets() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.NetsResponse.nets)
  return nets_;
}

// -------------------------------------------------------------------

// GetItemsByNet

// .kiapi.common.types.ItemHeader header = 1;
inline bool GetItemsByNet::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetItemsByNet::has_header() const {
  return _internal_has_header();
}
inline const ::kiapi::common::types::ItemHeader& GetItemsByNet::_internal_header() const {
  const ::kiapi::common::types::ItemHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::ItemHeader&>(
      ::kiapi::common::types::_ItemHeader_default_instance_);
}
inline const ::kiapi::common::types::ItemHeader& GetItemsByNet::header() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetItemsByNet.header)
  return _internal_header();
}
inline void GetItemsByNet::unsafe_arena_set_allocated_header(
    ::kiapi::common::types::ItemHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetItemsByNet.header)
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNet::release_header() {
  
  ::kiapi::common::types::ItemHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNet::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetItemsByNet.header)
  
  ::kiapi::common::types::ItemHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNet::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::ItemHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNet::mutable_header() {
  ::kiapi::common::types::ItemHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetItemsByNet.header)
  return _msg;
}
inline void GetItemsByNet::set_allocated_header(::kiapi::common::types::ItemHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetItemsByNet.header)
}

// repeated .kiapi.common.types.KiCadObjectType types = 2;
inline int GetItemsByNet::_internal_types_size() const {
  return types_.size();
}
inline int GetItemsByNet::types_size() const {
  return _internal_types_size();
}
inline void GetItemsByNet::clear_types() {
  types_.Clear();
}
inline ::kiapi::common::types::KiCadObjectType GetItemsByNet::_internal_types(int index) const {
  return static_cast< ::kiapi::common::types::KiCadObjectType >(types_.Get(index));
}
inline ::kiapi::common::types::KiCadObjectType GetItemsByNet::types(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetItemsByNet.types)
  return _internal_types(index);
}
inline void GetItemsByNet::set_types(int index, ::kiapi::common::types::KiCadObjectType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetItemsByNet.types)
}
inline void GetItemsByNet::_internal_add_types(::kiapi::common::types::KiCadObjectType value) {
  types_.Add(value);
}
inline void GetItemsByNet::add_types(::kiapi::common::types::KiCadObjectType value) {
  _internal_add_types(value);
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetItemsByNet.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetItemsByNet::types() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.GetItemsByNet.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetItemsByNet::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetItemsByNet::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.GetItemsByNet.types)
  return _internal_mutable_types();
}

// repeated .kiapi.board.types.NetCode net_codes = 3;
inline int GetItemsByNet::_internal_net_codes_size() const {
  return net_codes_.size();
}
inline int GetItemsByNet::net_codes_size() const {
  return _internal_net_codes_size();
}
inline ::kiapi::board::types::NetCode* GetItemsByNet::mutable_net_codes(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetItemsByNet.net_codes)
  return net_codes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetCode >*
GetItemsByNet::mutable_net_codes() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.GetItemsByNet.net_codes)
  return &net_codes_;
}
inline const ::kiapi::board::types::NetCode& GetItemsByNet::_internal_net_codes(int index) const {
  return net_codes_.Get(index);
}
inline const ::kiapi::board::types::NetCode& GetItemsByNet::net_codes(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetItemsByNet.net_codes)
  return _internal_net_codes(index);
}
inline ::kiapi::board::types::NetCode* GetItemsByNet::_internal_add_net_codes() {
  return net_codes_.Add();
}
inline ::kiapi::board::types::NetCode* GetItemsByNet::add_net_codes() {
  ::kiapi::board::types::NetCode* _add = _internal_add_net_codes();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetItemsByNet.net_codes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::NetCode >&
GetItemsByNet::net_codes() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.GetItemsByNet.net_codes)
  return net_codes_;
}

// -------------------------------------------------------------------

// GetItemsByNetClass

// .kiapi.common.types.ItemHeader header = 1;
inline bool GetItemsByNetClass::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetItemsByNetClass::has_header() const {
  return _internal_has_header();
}
inline const ::kiapi::common::types::ItemHeader& GetItemsByNetClass::_internal_header() const {
  const ::kiapi::common::types::ItemHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::ItemHeader&>(
      ::kiapi::common::types::_ItemHeader_default_instance_);
}
inline const ::kiapi::common::types::ItemHeader& GetItemsByNetClass::header() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetItemsByNetClass.header)
  return _internal_header();
}
inline void GetItemsByNetClass::unsafe_arena_set_allocated_header(
    ::kiapi::common::types::ItemHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetItemsByNetClass.header)
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNetClass::release_header() {
  
  ::kiapi::common::types::ItemHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNetClass::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetItemsByNetClass.header)
  
  ::kiapi::common::types::ItemHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNetClass::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::ItemHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::kiapi::common::types::ItemHeader* GetItemsByNetClass::mutable_header() {
  ::kiapi::common::types::ItemHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetItemsByNetClass.header)
  return _msg;
}
inline void GetItemsByNetClass::set_allocated_header(::kiapi::common::types::ItemHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetItemsByNetClass.header)
}

// repeated .kiapi.common.types.KiCadObjectType types = 2;
inline int GetItemsByNetClass::_internal_types_size() const {
  return types_.size();
}
inline int GetItemsByNetClass::types_size() const {
  return _internal_types_size();
}
inline void GetItemsByNetClass::clear_types() {
  types_.Clear();
}
inline ::kiapi::common::types::KiCadObjectType GetItemsByNetClass::_internal_types(int index) const {
  return static_cast< ::kiapi::common::types::KiCadObjectType >(types_.Get(index));
}
inline ::kiapi::common::types::KiCadObjectType GetItemsByNetClass::types(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetItemsByNetClass.types)
  return _internal_types(index);
}
inline void GetItemsByNetClass::set_types(int index, ::kiapi::common::types::KiCadObjectType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetItemsByNetClass.types)
}
inline void GetItemsByNetClass::_internal_add_types(::kiapi::common::types::KiCadObjectType value) {
  types_.Add(value);
}
inline void GetItemsByNetClass::add_types(::kiapi::common::types::KiCadObjectType value) {
  _internal_add_types(value);
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetItemsByNetClass.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetItemsByNetClass::types() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.GetItemsByNetClass.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetItemsByNetClass::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetItemsByNetClass::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.GetItemsByNetClass.types)
  return _internal_mutable_types();
}

// repeated string net_classes = 3;
inline int GetItemsByNetClass::_internal_net_classes_size() const {
  return net_classes_.size();
}
inline int GetItemsByNetClass::net_classes_size() const {
  return _internal_net_classes_size();
}
inline void GetItemsByNetClass::clear_net_classes() {
  net_classes_.Clear();
}
inline std::string* GetItemsByNetClass::add_net_classes() {
  std::string* _s = _internal_add_net_classes();
  // @@protoc_insertion_point(field_add_mutable:kiapi.board.commands.GetItemsByNetClass.net_classes)
  return _s;
}
inline const std::string& GetItemsByNetClass::_internal_net_classes(int index) const {
  return net_classes_.Get(index);
}
inline const std::string& GetItemsByNetClass::net_classes(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetItemsByNetClass.net_classes)
  return _internal_net_classes(index);
}
inline std::string* GetItemsByNetClass::mutable_net_classes(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetItemsByNetClass.net_classes)
  return net_classes_.Mutable(index);
}
inline void GetItemsByNetClass::set_net_classes(int index, const std::string& value) {
  net_classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline void GetItemsByNetClass::set_net_classes(int index, std::string&& value) {
  net_classes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline void GetItemsByNetClass::set_net_classes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  net_classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline void GetItemsByNetClass::set_net_classes(int index, const char* value, size_t size) {
  net_classes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline std::string* GetItemsByNetClass::_internal_add_net_classes() {
  return net_classes_.Add();
}
inline void GetItemsByNetClass::add_net_classes(const std::string& value) {
  net_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline void GetItemsByNetClass::add_net_classes(std::string&& value) {
  net_classes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline void GetItemsByNetClass::add_net_classes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  net_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline void GetItemsByNetClass::add_net_classes(const char* value, size_t size) {
  net_classes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kiapi.board.commands.GetItemsByNetClass.net_classes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetItemsByNetClass::net_classes() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.GetItemsByNetClass.net_classes)
  return net_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetItemsByNetClass::mutable_net_classes() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.GetItemsByNetClass.net_classes)
  return &net_classes_;
}

// -------------------------------------------------------------------

// GetNetClassForNets

// repeated .kiapi.board.types.Net net = 1;
inline int GetNetClassForNets::_internal_net_size() const {
  return net_.size();
}
inline int GetNetClassForNets::net_size() const {
  return _internal_net_size();
}
inline ::kiapi::board::types::Net* GetNetClassForNets::mutable_net(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetNetClassForNets.net)
  return net_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >*
GetNetClassForNets::mutable_net() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.GetNetClassForNets.net)
  return &net_;
}
inline const ::kiapi::board::types::Net& GetNetClassForNets::_internal_net(int index) const {
  return net_.Get(index);
}
inline const ::kiapi::board::types::Net& GetNetClassForNets::net(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetNetClassForNets.net)
  return _internal_net(index);
}
inline ::kiapi::board::types::Net* GetNetClassForNets::_internal_add_net() {
  return net_.Add();
}
inline ::kiapi::board::types::Net* GetNetClassForNets::add_net() {
  ::kiapi::board::types::Net* _add = _internal_add_net();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetNetClassForNets.net)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::board::types::Net >&
GetNetClassForNets::net() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.GetNetClassForNets.net)
  return net_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetClassForNetsResponse

// map<string, .kiapi.common.project.NetClass> classes = 1;
inline int NetClassForNetsResponse::_internal_classes_size() const {
  return classes_.size();
}
inline int NetClassForNetsResponse::classes_size() const {
  return _internal_classes_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >&
NetClassForNetsResponse::_internal_classes() const {
  return classes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >&
NetClassForNetsResponse::classes() const {
  // @@protoc_insertion_point(field_map:kiapi.board.commands.NetClassForNetsResponse.classes)
  return _internal_classes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >*
NetClassForNetsResponse::_internal_mutable_classes() {
  return classes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kiapi::common::project::NetClass >*
NetClassForNetsResponse::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_map:kiapi.board.commands.NetClassForNetsResponse.classes)
  return _internal_mutable_classes();
}

// -------------------------------------------------------------------

// RefillZones

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool RefillZones::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool RefillZones::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& RefillZones::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& RefillZones::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.RefillZones.board)
  return _internal_board();
}
inline void RefillZones::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.RefillZones.board)
}
inline ::kiapi::common::types::DocumentSpecifier* RefillZones::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* RefillZones::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.RefillZones.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* RefillZones::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* RefillZones::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.RefillZones.board)
  return _msg;
}
inline void RefillZones::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.RefillZones.board)
}

// repeated .kiapi.common.types.KIID zones = 2;
inline int RefillZones::_internal_zones_size() const {
  return zones_.size();
}
inline int RefillZones::zones_size() const {
  return _internal_zones_size();
}
inline ::kiapi::common::types::KIID* RefillZones::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.RefillZones.zones)
  return zones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
RefillZones::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.RefillZones.zones)
  return &zones_;
}
inline const ::kiapi::common::types::KIID& RefillZones::_internal_zones(int index) const {
  return zones_.Get(index);
}
inline const ::kiapi::common::types::KIID& RefillZones::zones(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.RefillZones.zones)
  return _internal_zones(index);
}
inline ::kiapi::common::types::KIID* RefillZones::_internal_add_zones() {
  return zones_.Add();
}
inline ::kiapi::common::types::KIID* RefillZones::add_zones() {
  ::kiapi::common::types::KIID* _add = _internal_add_zones();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.RefillZones.zones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
RefillZones::zones() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.RefillZones.zones)
  return zones_;
}

// -------------------------------------------------------------------

// GetPadShapeAsPolygon

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool GetPadShapeAsPolygon::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool GetPadShapeAsPolygon::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetPadShapeAsPolygon::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetPadShapeAsPolygon::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetPadShapeAsPolygon.board)
  return _internal_board();
}
inline void GetPadShapeAsPolygon::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetPadShapeAsPolygon.board)
}
inline ::kiapi::common::types::DocumentSpecifier* GetPadShapeAsPolygon::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetPadShapeAsPolygon::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetPadShapeAsPolygon.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetPadShapeAsPolygon::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetPadShapeAsPolygon::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetPadShapeAsPolygon.board)
  return _msg;
}
inline void GetPadShapeAsPolygon::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetPadShapeAsPolygon.board)
}

// repeated .kiapi.common.types.KIID pads = 2;
inline int GetPadShapeAsPolygon::_internal_pads_size() const {
  return pads_.size();
}
inline int GetPadShapeAsPolygon::pads_size() const {
  return _internal_pads_size();
}
inline ::kiapi::common::types::KIID* GetPadShapeAsPolygon::mutable_pads(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetPadShapeAsPolygon.pads)
  return pads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
GetPadShapeAsPolygon::mutable_pads() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.GetPadShapeAsPolygon.pads)
  return &pads_;
}
inline const ::kiapi::common::types::KIID& GetPadShapeAsPolygon::_internal_pads(int index) const {
  return pads_.Get(index);
}
inline const ::kiapi::common::types::KIID& GetPadShapeAsPolygon::pads(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetPadShapeAsPolygon.pads)
  return _internal_pads(index);
}
inline ::kiapi::common::types::KIID* GetPadShapeAsPolygon::_internal_add_pads() {
  return pads_.Add();
}
inline ::kiapi::common::types::KIID* GetPadShapeAsPolygon::add_pads() {
  ::kiapi::common::types::KIID* _add = _internal_add_pads();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.GetPadShapeAsPolygon.pads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
GetPadShapeAsPolygon::pads() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.GetPadShapeAsPolygon.pads)
  return pads_;
}

// .kiapi.board.types.BoardLayer layer = 3;
inline void GetPadShapeAsPolygon::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer GetPadShapeAsPolygon::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer GetPadShapeAsPolygon::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetPadShapeAsPolygon.layer)
  return _internal_layer();
}
inline void GetPadShapeAsPolygon::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void GetPadShapeAsPolygon::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.GetPadShapeAsPolygon.layer)
}

// -------------------------------------------------------------------

// PadShapeAsPolygonResponse

// repeated .kiapi.common.types.KIID pads = 1;
inline int PadShapeAsPolygonResponse::_internal_pads_size() const {
  return pads_.size();
}
inline int PadShapeAsPolygonResponse::pads_size() const {
  return _internal_pads_size();
}
inline ::kiapi::common::types::KIID* PadShapeAsPolygonResponse::mutable_pads(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.PadShapeAsPolygonResponse.pads)
  return pads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
PadShapeAsPolygonResponse::mutable_pads() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.PadShapeAsPolygonResponse.pads)
  return &pads_;
}
inline const ::kiapi::common::types::KIID& PadShapeAsPolygonResponse::_internal_pads(int index) const {
  return pads_.Get(index);
}
inline const ::kiapi::common::types::KIID& PadShapeAsPolygonResponse::pads(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.PadShapeAsPolygonResponse.pads)
  return _internal_pads(index);
}
inline ::kiapi::common::types::KIID* PadShapeAsPolygonResponse::_internal_add_pads() {
  return pads_.Add();
}
inline ::kiapi::common::types::KIID* PadShapeAsPolygonResponse::add_pads() {
  ::kiapi::common::types::KIID* _add = _internal_add_pads();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.PadShapeAsPolygonResponse.pads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
PadShapeAsPolygonResponse::pads() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.PadShapeAsPolygonResponse.pads)
  return pads_;
}

// repeated .kiapi.common.types.PolygonWithHoles polygons = 2;
inline int PadShapeAsPolygonResponse::_internal_polygons_size() const {
  return polygons_.size();
}
inline int PadShapeAsPolygonResponse::polygons_size() const {
  return _internal_polygons_size();
}
inline ::kiapi::common::types::PolygonWithHoles* PadShapeAsPolygonResponse::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.PadShapeAsPolygonResponse.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::PolygonWithHoles >*
PadShapeAsPolygonResponse::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.PadShapeAsPolygonResponse.polygons)
  return &polygons_;
}
inline const ::kiapi::common::types::PolygonWithHoles& PadShapeAsPolygonResponse::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::kiapi::common::types::PolygonWithHoles& PadShapeAsPolygonResponse::polygons(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.PadShapeAsPolygonResponse.polygons)
  return _internal_polygons(index);
}
inline ::kiapi::common::types::PolygonWithHoles* PadShapeAsPolygonResponse::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::kiapi::common::types::PolygonWithHoles* PadShapeAsPolygonResponse::add_polygons() {
  ::kiapi::common::types::PolygonWithHoles* _add = _internal_add_polygons();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.PadShapeAsPolygonResponse.polygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::PolygonWithHoles >&
PadShapeAsPolygonResponse::polygons() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.PadShapeAsPolygonResponse.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// GetVisibleLayers

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool GetVisibleLayers::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool GetVisibleLayers::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetVisibleLayers::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetVisibleLayers::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetVisibleLayers.board)
  return _internal_board();
}
inline void GetVisibleLayers::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetVisibleLayers.board)
}
inline ::kiapi::common::types::DocumentSpecifier* GetVisibleLayers::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetVisibleLayers::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetVisibleLayers.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetVisibleLayers::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetVisibleLayers::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetVisibleLayers.board)
  return _msg;
}
inline void GetVisibleLayers::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetVisibleLayers.board)
}

// -------------------------------------------------------------------

// BoardLayerResponse

// .kiapi.board.types.BoardLayer layer = 1;
inline void BoardLayerResponse::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer BoardLayerResponse::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer BoardLayerResponse::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.BoardLayerResponse.layer)
  return _internal_layer();
}
inline void BoardLayerResponse::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void BoardLayerResponse::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.BoardLayerResponse.layer)
}

// -------------------------------------------------------------------

// BoardLayers

// repeated .kiapi.board.types.BoardLayer layers = 1;
inline int BoardLayers::_internal_layers_size() const {
  return layers_.size();
}
inline int BoardLayers::layers_size() const {
  return _internal_layers_size();
}
inline void BoardLayers::clear_layers() {
  layers_.Clear();
}
inline ::kiapi::board::types::BoardLayer BoardLayers::_internal_layers(int index) const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layers_.Get(index));
}
inline ::kiapi::board::types::BoardLayer BoardLayers::layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.BoardLayers.layers)
  return _internal_layers(index);
}
inline void BoardLayers::set_layers(int index, ::kiapi::board::types::BoardLayer value) {
  layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.BoardLayers.layers)
}
inline void BoardLayers::_internal_add_layers(::kiapi::board::types::BoardLayer value) {
  layers_.Add(value);
}
inline void BoardLayers::add_layers(::kiapi::board::types::BoardLayer value) {
  _internal_add_layers(value);
  // @@protoc_insertion_point(field_add:kiapi.board.commands.BoardLayers.layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BoardLayers::layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.BoardLayers.layers)
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BoardLayers::_internal_mutable_layers() {
  return &layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BoardLayers::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.BoardLayers.layers)
  return _internal_mutable_layers();
}

// -------------------------------------------------------------------

// SetVisibleLayers

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool SetVisibleLayers::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool SetVisibleLayers::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& SetVisibleLayers::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& SetVisibleLayers::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetVisibleLayers.board)
  return _internal_board();
}
inline void SetVisibleLayers::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.SetVisibleLayers.board)
}
inline ::kiapi::common::types::DocumentSpecifier* SetVisibleLayers::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetVisibleLayers::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.SetVisibleLayers.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetVisibleLayers::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* SetVisibleLayers::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.SetVisibleLayers.board)
  return _msg;
}
inline void SetVisibleLayers::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.SetVisibleLayers.board)
}

// repeated .kiapi.board.types.BoardLayer layers = 2;
inline int SetVisibleLayers::_internal_layers_size() const {
  return layers_.size();
}
inline int SetVisibleLayers::layers_size() const {
  return _internal_layers_size();
}
inline void SetVisibleLayers::clear_layers() {
  layers_.Clear();
}
inline ::kiapi::board::types::BoardLayer SetVisibleLayers::_internal_layers(int index) const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layers_.Get(index));
}
inline ::kiapi::board::types::BoardLayer SetVisibleLayers::layers(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetVisibleLayers.layers)
  return _internal_layers(index);
}
inline void SetVisibleLayers::set_layers(int index, ::kiapi::board::types::BoardLayer value) {
  layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.SetVisibleLayers.layers)
}
inline void SetVisibleLayers::_internal_add_layers(::kiapi::board::types::BoardLayer value) {
  layers_.Add(value);
}
inline void SetVisibleLayers::add_layers(::kiapi::board::types::BoardLayer value) {
  _internal_add_layers(value);
  // @@protoc_insertion_point(field_add:kiapi.board.commands.SetVisibleLayers.layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SetVisibleLayers::layers() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.SetVisibleLayers.layers)
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SetVisibleLayers::_internal_mutable_layers() {
  return &layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SetVisibleLayers::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.SetVisibleLayers.layers)
  return _internal_mutable_layers();
}

// -------------------------------------------------------------------

// GetActiveLayer

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool GetActiveLayer::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool GetActiveLayer::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& GetActiveLayer::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& GetActiveLayer::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.GetActiveLayer.board)
  return _internal_board();
}
inline void GetActiveLayer::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.GetActiveLayer.board)
}
inline ::kiapi::common::types::DocumentSpecifier* GetActiveLayer::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetActiveLayer::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.GetActiveLayer.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* GetActiveLayer::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* GetActiveLayer::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.GetActiveLayer.board)
  return _msg;
}
inline void GetActiveLayer::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.GetActiveLayer.board)
}

// -------------------------------------------------------------------

// SetActiveLayer

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool SetActiveLayer::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool SetActiveLayer::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& SetActiveLayer::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& SetActiveLayer::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetActiveLayer.board)
  return _internal_board();
}
inline void SetActiveLayer::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.SetActiveLayer.board)
}
inline ::kiapi::common::types::DocumentSpecifier* SetActiveLayer::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetActiveLayer::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.SetActiveLayer.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* SetActiveLayer::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* SetActiveLayer::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.SetActiveLayer.board)
  return _msg;
}
inline void SetActiveLayer::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.SetActiveLayer.board)
}

// .kiapi.board.types.BoardLayer layer = 2;
inline void SetActiveLayer::clear_layer() {
  layer_ = 0;
}
inline ::kiapi::board::types::BoardLayer SetActiveLayer::_internal_layer() const {
  return static_cast< ::kiapi::board::types::BoardLayer >(layer_);
}
inline ::kiapi::board::types::BoardLayer SetActiveLayer::layer() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetActiveLayer.layer)
  return _internal_layer();
}
inline void SetActiveLayer::_internal_set_layer(::kiapi::board::types::BoardLayer value) {
  
  layer_ = value;
}
inline void SetActiveLayer::set_layer(::kiapi::board::types::BoardLayer value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.SetActiveLayer.layer)
}

// -------------------------------------------------------------------

// BoardEditorAppearanceSettings

// .kiapi.board.commands.InactiveLayerDisplayMode inactive_layer_display = 1;
inline void BoardEditorAppearanceSettings::clear_inactive_layer_display() {
  inactive_layer_display_ = 0;
}
inline ::kiapi::board::commands::InactiveLayerDisplayMode BoardEditorAppearanceSettings::_internal_inactive_layer_display() const {
  return static_cast< ::kiapi::board::commands::InactiveLayerDisplayMode >(inactive_layer_display_);
}
inline ::kiapi::board::commands::InactiveLayerDisplayMode BoardEditorAppearanceSettings::inactive_layer_display() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.BoardEditorAppearanceSettings.inactive_layer_display)
  return _internal_inactive_layer_display();
}
inline void BoardEditorAppearanceSettings::_internal_set_inactive_layer_display(::kiapi::board::commands::InactiveLayerDisplayMode value) {
  
  inactive_layer_display_ = value;
}
inline void BoardEditorAppearanceSettings::set_inactive_layer_display(::kiapi::board::commands::InactiveLayerDisplayMode value) {
  _internal_set_inactive_layer_display(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.BoardEditorAppearanceSettings.inactive_layer_display)
}

// .kiapi.board.commands.NetColorDisplayMode net_color_display = 2;
inline void BoardEditorAppearanceSettings::clear_net_color_display() {
  net_color_display_ = 0;
}
inline ::kiapi::board::commands::NetColorDisplayMode BoardEditorAppearanceSettings::_internal_net_color_display() const {
  return static_cast< ::kiapi::board::commands::NetColorDisplayMode >(net_color_display_);
}
inline ::kiapi::board::commands::NetColorDisplayMode BoardEditorAppearanceSettings::net_color_display() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.BoardEditorAppearanceSettings.net_color_display)
  return _internal_net_color_display();
}
inline void BoardEditorAppearanceSettings::_internal_set_net_color_display(::kiapi::board::commands::NetColorDisplayMode value) {
  
  net_color_display_ = value;
}
inline void BoardEditorAppearanceSettings::set_net_color_display(::kiapi::board::commands::NetColorDisplayMode value) {
  _internal_set_net_color_display(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.BoardEditorAppearanceSettings.net_color_display)
}

// .kiapi.board.commands.BoardFlipMode board_flip = 3;
inline void BoardEditorAppearanceSettings::clear_board_flip() {
  board_flip_ = 0;
}
inline ::kiapi::board::commands::BoardFlipMode BoardEditorAppearanceSettings::_internal_board_flip() const {
  return static_cast< ::kiapi::board::commands::BoardFlipMode >(board_flip_);
}
inline ::kiapi::board::commands::BoardFlipMode BoardEditorAppearanceSettings::board_flip() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.BoardEditorAppearanceSettings.board_flip)
  return _internal_board_flip();
}
inline void BoardEditorAppearanceSettings::_internal_set_board_flip(::kiapi::board::commands::BoardFlipMode value) {
  
  board_flip_ = value;
}
inline void BoardEditorAppearanceSettings::set_board_flip(::kiapi::board::commands::BoardFlipMode value) {
  _internal_set_board_flip(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.BoardEditorAppearanceSettings.board_flip)
}

// .kiapi.board.commands.RatsnestDisplayMode ratsnest_display = 4;
inline void BoardEditorAppearanceSettings::clear_ratsnest_display() {
  ratsnest_display_ = 0;
}
inline ::kiapi::board::commands::RatsnestDisplayMode BoardEditorAppearanceSettings::_internal_ratsnest_display() const {
  return static_cast< ::kiapi::board::commands::RatsnestDisplayMode >(ratsnest_display_);
}
inline ::kiapi::board::commands::RatsnestDisplayMode BoardEditorAppearanceSettings::ratsnest_display() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.BoardEditorAppearanceSettings.ratsnest_display)
  return _internal_ratsnest_display();
}
inline void BoardEditorAppearanceSettings::_internal_set_ratsnest_display(::kiapi::board::commands::RatsnestDisplayMode value) {
  
  ratsnest_display_ = value;
}
inline void BoardEditorAppearanceSettings::set_ratsnest_display(::kiapi::board::commands::RatsnestDisplayMode value) {
  _internal_set_ratsnest_display(value);
  // @@protoc_insertion_point(field_set:kiapi.board.commands.BoardEditorAppearanceSettings.ratsnest_display)
}

// -------------------------------------------------------------------

// GetBoardEditorAppearanceSettings

// -------------------------------------------------------------------

// SetBoardEditorAppearanceSettings

// .kiapi.board.commands.BoardEditorAppearanceSettings settings = 1;
inline bool SetBoardEditorAppearanceSettings::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool SetBoardEditorAppearanceSettings::has_settings() const {
  return _internal_has_settings();
}
inline void SetBoardEditorAppearanceSettings::clear_settings() {
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::kiapi::board::commands::BoardEditorAppearanceSettings& SetBoardEditorAppearanceSettings::_internal_settings() const {
  const ::kiapi::board::commands::BoardEditorAppearanceSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::board::commands::BoardEditorAppearanceSettings&>(
      ::kiapi::board::commands::_BoardEditorAppearanceSettings_default_instance_);
}
inline const ::kiapi::board::commands::BoardEditorAppearanceSettings& SetBoardEditorAppearanceSettings::settings() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.SetBoardEditorAppearanceSettings.settings)
  return _internal_settings();
}
inline void SetBoardEditorAppearanceSettings::unsafe_arena_set_allocated_settings(
    ::kiapi::board::commands::BoardEditorAppearanceSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.SetBoardEditorAppearanceSettings.settings)
}
inline ::kiapi::board::commands::BoardEditorAppearanceSettings* SetBoardEditorAppearanceSettings::release_settings() {
  
  ::kiapi::board::commands::BoardEditorAppearanceSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::board::commands::BoardEditorAppearanceSettings* SetBoardEditorAppearanceSettings::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.SetBoardEditorAppearanceSettings.settings)
  
  ::kiapi::board::commands::BoardEditorAppearanceSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::kiapi::board::commands::BoardEditorAppearanceSettings* SetBoardEditorAppearanceSettings::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::board::commands::BoardEditorAppearanceSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::kiapi::board::commands::BoardEditorAppearanceSettings* SetBoardEditorAppearanceSettings::mutable_settings() {
  ::kiapi::board::commands::BoardEditorAppearanceSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.SetBoardEditorAppearanceSettings.settings)
  return _msg;
}
inline void SetBoardEditorAppearanceSettings::set_allocated_settings(::kiapi::board::commands::BoardEditorAppearanceSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kiapi::board::commands::BoardEditorAppearanceSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.SetBoardEditorAppearanceSettings.settings)
}

// -------------------------------------------------------------------

// InteractiveMoveItems

// .kiapi.common.types.DocumentSpecifier board = 1;
inline bool InteractiveMoveItems::_internal_has_board() const {
  return this != internal_default_instance() && board_ != nullptr;
}
inline bool InteractiveMoveItems::has_board() const {
  return _internal_has_board();
}
inline const ::kiapi::common::types::DocumentSpecifier& InteractiveMoveItems::_internal_board() const {
  const ::kiapi::common::types::DocumentSpecifier* p = board_;
  return p != nullptr ? *p : reinterpret_cast<const ::kiapi::common::types::DocumentSpecifier&>(
      ::kiapi::common::types::_DocumentSpecifier_default_instance_);
}
inline const ::kiapi::common::types::DocumentSpecifier& InteractiveMoveItems::board() const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.InteractiveMoveItems.board)
  return _internal_board();
}
inline void InteractiveMoveItems::unsafe_arena_set_allocated_board(
    ::kiapi::common::types::DocumentSpecifier* board) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  board_ = board;
  if (board) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kiapi.board.commands.InteractiveMoveItems.board)
}
inline ::kiapi::common::types::DocumentSpecifier* InteractiveMoveItems::release_board() {
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* InteractiveMoveItems::unsafe_arena_release_board() {
  // @@protoc_insertion_point(field_release:kiapi.board.commands.InteractiveMoveItems.board)
  
  ::kiapi::common::types::DocumentSpecifier* temp = board_;
  board_ = nullptr;
  return temp;
}
inline ::kiapi::common::types::DocumentSpecifier* InteractiveMoveItems::_internal_mutable_board() {
  
  if (board_ == nullptr) {
    auto* p = CreateMaybeMessage<::kiapi::common::types::DocumentSpecifier>(GetArenaForAllocation());
    board_ = p;
  }
  return board_;
}
inline ::kiapi::common::types::DocumentSpecifier* InteractiveMoveItems::mutable_board() {
  ::kiapi::common::types::DocumentSpecifier* _msg = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.InteractiveMoveItems.board)
  return _msg;
}
inline void InteractiveMoveItems::set_allocated_board(::kiapi::common::types::DocumentSpecifier* board) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(board_);
  }
  if (board) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(board));
    if (message_arena != submessage_arena) {
      board = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, board, submessage_arena);
    }
    
  } else {
    
  }
  board_ = board;
  // @@protoc_insertion_point(field_set_allocated:kiapi.board.commands.InteractiveMoveItems.board)
}

// repeated .kiapi.common.types.KIID items = 2;
inline int InteractiveMoveItems::_internal_items_size() const {
  return items_.size();
}
inline int InteractiveMoveItems::items_size() const {
  return _internal_items_size();
}
inline ::kiapi::common::types::KIID* InteractiveMoveItems::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:kiapi.board.commands.InteractiveMoveItems.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >*
InteractiveMoveItems::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:kiapi.board.commands.InteractiveMoveItems.items)
  return &items_;
}
inline const ::kiapi::common::types::KIID& InteractiveMoveItems::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::kiapi::common::types::KIID& InteractiveMoveItems::items(int index) const {
  // @@protoc_insertion_point(field_get:kiapi.board.commands.InteractiveMoveItems.items)
  return _internal_items(index);
}
inline ::kiapi::common::types::KIID* InteractiveMoveItems::_internal_add_items() {
  return items_.Add();
}
inline ::kiapi::common::types::KIID* InteractiveMoveItems::add_items() {
  ::kiapi::common::types::KIID* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:kiapi.board.commands.InteractiveMoveItems.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kiapi::common::types::KIID >&
InteractiveMoveItems::items() const {
  // @@protoc_insertion_point(field_list:kiapi.board.commands.InteractiveMoveItems.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace board
}  // namespace kiapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kiapi::board::commands::BoardOriginType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::commands::BoardOriginType>() {
  return ::kiapi::board::commands::BoardOriginType_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::commands::InactiveLayerDisplayMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::commands::InactiveLayerDisplayMode>() {
  return ::kiapi::board::commands::InactiveLayerDisplayMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::commands::NetColorDisplayMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::commands::NetColorDisplayMode>() {
  return ::kiapi::board::commands::NetColorDisplayMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::commands::BoardFlipMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::commands::BoardFlipMode>() {
  return ::kiapi::board::commands::BoardFlipMode_descriptor();
}
template <> struct is_proto_enum< ::kiapi::board::commands::RatsnestDisplayMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kiapi::board::commands::RatsnestDisplayMode>() {
  return ::kiapi::board::commands::RatsnestDisplayMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_board_2fboard_5fcommands_2eproto
