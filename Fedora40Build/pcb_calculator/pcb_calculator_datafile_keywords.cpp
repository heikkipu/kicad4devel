
/* Do not modify this file it was automatically generated by the
 * TokenList2DsnLexer CMake script.
 *
 * Include this file in your lexer class to provide the keywords for
 * your DSN lexer.
 */

#include </opt/kicad/program/master/Tears_Master/build/pcb_calculator/pcb_calculator_datafile_lexer.h>

using namespace PCBCALC_DATA_T;

#define TOKDEF(x)    { #x, T_##x }

const KEYWORD PCB_CALCULATOR_DATAFILE_LEXER::keywords[] = {
    TOKDEF( reg_iadj ),
    TOKDEF( reg_iadj_max ),
    TOKDEF( reg_iadj_typ ),
    TOKDEF( reg_type ),
    TOKDEF( reg_vref ),
    TOKDEF( reg_vref_max ),
    TOKDEF( reg_vref_min ),
    TOKDEF( reg_vref_typ ),
    TOKDEF( regulator ),
    TOKDEF( regulators )
};

const unsigned PCB_CALCULATOR_DATAFILE_LEXER::keyword_count = unsigned( sizeof( PCB_CALCULATOR_DATAFILE_LEXER::keywords )/sizeof( PCB_CALCULATOR_DATAFILE_LEXER::keywords[0] ) );


const char* PCB_CALCULATOR_DATAFILE_LEXER::TokenName( T aTok )
{
    const char* ret;

    if( aTok < 0 )
        ret = DSNLEXER::Syntax( aTok );
    else if( (unsigned) aTok < keyword_count )
        ret = keywords[aTok].name;
    else
        ret = "token too big";

    return ret;
}


const KEYWORD_MAP PCB_CALCULATOR_DATAFILE_LEXER::keywords_hash({
    { "reg_iadj", 0 },
    { "reg_iadj_max", 1 },
    { "reg_iadj_typ", 2 },
    { "reg_type", 3 },
    { "reg_vref", 4 },
    { "reg_vref_max", 5 },
    { "reg_vref_min", 6 },
    { "reg_vref_typ", 7 },
    { "regulator", 8 },
    { "regulators", 9 }
});